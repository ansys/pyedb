
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\legacy_pyaedt_integration\15_ac_analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_legacy_pyaedt_integration_15_ac_analysis.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_legacy_pyaedt_integration_15_ac_analysis.py:


EDB: SYZ analysis
-------------------
This example shows how you can use PyAEDT to set up SYZ analysis on Serdes channel.
The input is the name of the differential nets. The positive net is PCIe_Gen4_TX3_CAP_P.
The negative net is PCIe_Gen4_TX3_CAP_N. The code will place ports on driver and
receiver components.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports, which includes importing a section.

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: Python


    import time

    from pyaedt import Hfss3dLayout

    import pyedb
    from pyedb.generic.general_methods import generate_unique_folder_name
    from pyedb.misc.downloads import download_file








.. GENERATED FROM PYTHON SOURCE LINES 46-49

Download file
~~~~~~~~~~~~~
Download the AEDB file and copy it in the temporary folder.

.. GENERATED FROM PYTHON SOURCE LINES 49-56

.. code-block:: Python


    temp_folder = generate_unique_folder_name()
    targetfile = download_file("edb/ANSYS-HSD_V1.aedb", destination=temp_folder)
    time.sleep(5)

    print(targetfile)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\ansys\AppData\Local\Temp\pyedb_prj_U46\edb/ANSYS-HSD_V1.aedb




.. GENERATED FROM PYTHON SOURCE LINES 57-60

Configure EDB
~~~~~~~~~~~~~
Launch the :class:`pyedb.Edb` class, using EDB 2023 R2.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python


    edbapp = pyedb.Edb(edbpath=targetfile, edbversion="2024.1")



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\actions-runner\_work\pyedb\pyedb\examples\legacy_pyaedt_integration\15_ac_analysis.py", line 61, in <module>
        edbapp = pyedb.Edb(edbpath=targetfile, edbversion="2024.1")
      File "C:\actions-runner\_work\pyedb\pyedb\.venv\lib\site-packages\pyedb\generic\design_types.py", line 108, in Edb
        from pyedb.dotnet.edb import Edb as app
      File "C:\actions-runner\_work\pyedb\pyedb\.venv\lib\site-packages\pyedb\dotnet\edb.py", line 115, in <module>
        from pyedb.workflow import Workflow
      File "C:\actions-runner\_work\pyedb\pyedb\.venv\lib\site-packages\pyedb\workflow.py", line 4, in <module>
        import pandas as pd
    ModuleNotFoundError: No module named 'pandas'




.. GENERATED FROM PYTHON SOURCE LINES 64-68

Generate extended nets
~~~~~~~~~~~~~~~~~~~~~~
An extended net is a connection between two nets that are usually connected
through a passive component like a resistor or capacitor.

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: Python


    edbapp.extended_nets.auto_identify_signal(resistor_below=10, inductor_below=1, capacitor_above=1e-9)


.. GENERATED FROM PYTHON SOURCE LINES 72-75

Review extended net properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Review extended net properties.

.. GENERATED FROM PYTHON SOURCE LINES 75-90

.. code-block:: Python


    diff_p = edbapp.nets["PCIe_Gen4_TX3_CAP_P"]
    diff_n = edbapp.nets["PCIe_Gen4_TX3_CAP_N"]

    nets_p = list(diff_p.extended_net.nets.keys())
    nets_n = list(diff_n.extended_net.nets.keys())

    comp_p = list(diff_p.extended_net.components.keys())
    comp_n = list(diff_n.extended_net.components.keys())

    rlc_p = list(diff_p.extended_net.rlc.keys())
    rlc_n = list(diff_n.extended_net.rlc.keys())

    print(comp_p, rlc_p, comp_n, rlc_n, sep="\n")


.. GENERATED FROM PYTHON SOURCE LINES 91-94

Prepare input data for port creation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Prepare input data for port creation.

.. GENERATED FROM PYTHON SOURCE LINES 94-112

.. code-block:: Python


    ports = []
    for net_name, net_obj in diff_p.extended_net.nets.items():
        for comp_name, comp_obj in net_obj.components.items():
            if comp_obj.type not in ["Resistor", "Capacitor", "Inductor"]:
                ports.append(
                    {"port_name": "{}_{}".format(comp_name, net_name), "comp_name": comp_name, "net_name": net_name}
                )

    for net_name, net_obj in diff_n.extended_net.nets.items():
        for comp_name, comp_obj in net_obj.components.items():
            if comp_obj.type not in ["Resistor", "Capacitor", "Inductor"]:
                ports.append(
                    {"port_name": "{}_{}".format(comp_name, net_name), "comp_name": comp_name, "net_name": net_name}
                )

    print(*ports, sep="\n")


.. GENERATED FROM PYTHON SOURCE LINES 113-116

Create ports
~~~~~~~~~~~~
Solder balls are generated automatically. The default port type is coax port.

.. GENERATED FROM PYTHON SOURCE LINES 116-123

.. code-block:: Python


    for d in ports:
        port_name = d["port_name"]
        comp_name = d["comp_name"]
        net_name = d["net_name"]
        edbapp.components.create_port_on_component(component=comp_name, net_list=net_name, port_name=port_name)


.. GENERATED FROM PYTHON SOURCE LINES 124-127

Cutout
~~~~~~
Delete all irrelevant nets.

.. GENERATED FROM PYTHON SOURCE LINES 127-135

.. code-block:: Python


    nets = []
    nets.extend(nets_p)
    nets.extend(nets_n)

    edbapp.cutout(signal_list=nets, reference_list=["GND"], extent_type="Bounding")



.. GENERATED FROM PYTHON SOURCE LINES 136-139

Create SYZ analysis setup
~~~~~~~~~~~~~~~~~~~~~~~~~
Create SIwave SYZ setup.

.. GENERATED FROM PYTHON SOURCE LINES 139-149

.. code-block:: Python


    setup = edbapp.create_siwave_syz_setup("setup1")
    setup.add_frequency_sweep(
        frequency_sweep=[
            ["linear count", "0", "1kHz", 1],
            ["log scale", "1kHz", "0.1GHz", 10],
            ["linear scale", "0.1GHz", "10GHz", "0.1GHz"],
        ]
    )


.. GENERATED FROM PYTHON SOURCE LINES 150-153

Save and close AEDT
~~~~~~~~~~~~~~~~~~~
Close AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 153-157

.. code-block:: Python


    edbapp.save()
    edbapp.close_edb()


.. GENERATED FROM PYTHON SOURCE LINES 158-161

Launch Hfss3dLayout
~~~~~~~~~~~~~~~~~~~
To do SYZ analysis, you must launch HFSS 3D Layout and import EDB into it.

.. GENERATED FROM PYTHON SOURCE LINES 161-164

.. code-block:: Python


    h3d = Hfss3dLayout(targetfile, specified_version="2024.1", new_desktop_session=True)


.. GENERATED FROM PYTHON SOURCE LINES 165-168

Set differential pair
~~~~~~~~~~~~~~~~~~~~~
Set differential pair.

.. GENERATED FROM PYTHON SOURCE LINES 168-176

.. code-block:: Python


    h3d.set_differential_pair(
        positive_terminal="U1_PCIe_Gen4_TX3_CAP_P", negative_terminal="U1_PCIe_Gen4_TX3_CAP_N", diff_name="PAIR_U1"
    )
    h3d.set_differential_pair(
        positive_terminal="X1_PCIe_Gen4_TX3_P", negative_terminal="X1_PCIe_Gen4_TX3_N", diff_name="PAIR_X1"
    )


.. GENERATED FROM PYTHON SOURCE LINES 177-180

Solve and plot results
~~~~~~~~~~~~~~~~~~~~~~
Solve and plot the results.

.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: Python


    h3d.analyze(num_cores=4)


.. GENERATED FROM PYTHON SOURCE LINES 184-187

Create report outside AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a report.

.. GENERATED FROM PYTHON SOURCE LINES 187-190

.. code-block:: Python


    h3d.post.create_report("dB(S(PAIR_U1,PAIR_U1))", context="Differential Pairs")


.. GENERATED FROM PYTHON SOURCE LINES 191-194

Close AEDT
~~~~~~~~~~
Close AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 194-198

.. code-block:: Python


    h3d.save_project()
    print("Project is saved to {}".format(h3d.project_path))
    h3d.release_desktop(True, True)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.438 seconds)


.. _sphx_glr_download_examples_legacy_pyaedt_integration_15_ac_analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 15_ac_analysis.ipynb <15_ac_analysis.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 15_ac_analysis.py <15_ac_analysis.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
