[
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.point_data",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.point_data.html#point_data",
        "title": "point_data",
        "section": "point_data",
        "text": "Compute the Edb Point Data.\nX value.\nY value.\npoint_data\npython:float\npython:int\npython:str\npython:float\npython:int\npython:str\noptional\nGeometry.PointData"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.point_data",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.point_data.html#pyedb.dotnet.edb.Edb.point_data",
        "title": "point_data > point_data > point_data",
        "section": "point_data > point_data",
        "text": "Edb.point_data(x, y=None)\n\nCompute the Edb Point Data.\n\nParameters\n\nx\n\npython:float, python:int or python:str\n\nX value.\n\ny\n\npython:float, python:int or python:str, optional\n\nY value.\n\nReturns\n\nGeometry.PointData.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_zones",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_zones.html#copy_zones",
        "title": "copy_zones",
        "section": "copy_zones",
        "text": "Copy multizone EDB project to one new edb per zone.\nDirectory path where all EDB project are copied, if empty will use the current EDB project.\ncopy_zones\npython:str\npython:dict\npython:str\npython:int\nEDB\nPolygonData\nReturn\na\ndictionary\nwith\nedb\npath\nas\nkey\nand\npython:tuple\nZone\nId\nas\nfirst\nitem\nand\nEDB\npolygon\nData\ndefining\nthe\nregion\nas\nsecond"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_zones",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_zones.html#pyedb.dotnet.edb.Edb.copy_zones",
        "title": "copy_zones > copy_zones > copy_zones",
        "section": "copy_zones > copy_zones",
        "text": "Edb.copy_zones(working_directory=None)\n\nCopy multizone EDB project to one new edb per zone.\n\nParameters\n\nworking_directory\n\npython:str\n\nDirectory path where all EDB project are copied, if empty will use the current EDB project.\n\nReturns\n\npython:dict[python:str](python:int, EDB PolygonData)\n\n\n\nReturn a dictionary with edb path as key and python:tuple Zone Id as first item and EDB polygon Data defining\n\n\n\nthe region as second item.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.project_path",
        "href": "api/_autosummary/pyedb.siwave.Siwave.project_path.html#project_path",
        "title": "project_path",
        "section": "project_path",
        "text": "Project path.\nFull absolute path for the project.\nproject_path\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.project_path",
        "href": "api/_autosummary/pyedb.siwave.Siwave.project_path.html#pyedb.siwave.Siwave.project_path",
        "title": "project_path > project_path > project_path",
        "section": "project_path > project_path",
        "text": "property Siwave.project_path\n\nProject path.\n\nReturns\n\npython:str\n\nFull absolute path for the project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.html#controlfilestackup",
        "title": "ControlFileStackup",
        "section": "ControlFileStackup",
        "text": "Class that manages the Stackup info.\nControlFileStackup.add_dielectric(layer_name)\nAdd a new dielectric.\nControlFileStackup.add_layer(layer_name[, ...])\nAdd a new layer.\nControlFileStackup.add_material(material_name)\nAdd a new material with specific properties.\nControlFileStackup.add_via(layer_name[, ...])\nAdd a new via layer.\nControlFileStackup.dielectrics\nDielectric layer list.\nControlFileStackup.layers\nLayer list.\nControlFileStackup.materials\nMaterial list.\nControlFileStackup.vias\nVia list.\nControlFileStackup\nControlFileStackup.add_dielectric\nControlFileStackup.add_layer\nControlFileStackup.add_material\nControlFileStackup.add_via\nControlFileStackup.dielectrics\nControlFileStackup.layers\nControlFileStackup.materials\nControlFileStackup.vias"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup",
        "title": "ControlFileStackup > ControlFileStackup > ControlFileStackup",
        "section": "ControlFileStackup > ControlFileStackup",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileStackup(units='mm')\n\nClass that manages the Stackup info.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nControlFileStackup.add_dielectric(layer_name)\n\nAdd a new dielectric.\n\nControlFileStackup.add_layer(layer_name[, ...])\n\nAdd a new layer.\n\nControlFileStackup.add_material(material_name)\n\nAdd a new material with specific properties.\n\nControlFileStackup.add_via(layer_name[, ...])\n\nAdd a new via layer.\n\n\n\nAttributes\n\n\n\n\n\n\n\nControlFileStackup.dielectrics\n\nDielectric layer list.\n\nControlFileStackup.layers\n\nLayer list.\n\nControlFileStackup.materials\n\nMaterial list.\n\nControlFileStackup.vias\n\nVia list.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.restore_default.html#restore_default",
        "title": "restore_default",
        "section": "restore_default",
        "text": "restore_default"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.restore_default.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.restore_default",
        "title": "restore_default > restore_default > restore_default",
        "section": "restore_default > restore_default",
        "text": "DCSettings.restore_default()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_arc_points",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_arc_points.html#max_arc_points",
        "title": "max_arc_points",
        "section": "max_arc_points",
        "text": "Retrieve the value of the maximum arc points number for the HFSS meshing.\nmax_arc_points\npython:int\nValue\nof\nthe\nmaximum\narc\npoint"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_arc_points",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_arc_points.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_arc_points",
        "title": "max_arc_points > max_arc_points > max_arc_points",
        "section": "max_arc_points > max_arc_points",
        "text": "property SimulationConfigurationAc.max_arc_points\n\nRetrieve the value of the maximum arc points number for the HFSS meshing.\n\nReturns\n\npython:int\n\n\n\nValue of the maximum arc point number.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.set_attributes.html#pyedb.configuration.cfg_operations.CfgCutout.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgCutout.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.get_attributes.html#pyedb.configuration.cfg_pin_groups.CfgPinGroup.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgPinGroup.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.apply.html#pyedb.configuration.cfg_ports_sources.CfgSources.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgSources.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.deactivate_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.deactivate_rlc_component.html#deactivate_rlc_component",
        "title": "deactivate_rlc_component",
        "section": "deactivate_rlc_component",
        "text": "Deactivate RLC component with a possibility to convert it to a circuit port.\nReference designator of the RLC component.\nWhether to replace the deactivated RLC component with a circuit port. The default\nis False.\nWhether to define the PEC boundary, The default is False. If set to True,\na perfect short is created between the pin and impedance is ignored. This\nparameter is only supported on a port created between two pins, such as\nwhen there is no pin group.\nTrue when successful, False when failed.\ndeactivate_rlc_component\npython:str\noptional\nFalse\noptional\nFalse\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.deactivate_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.deactivate_rlc_component.html#pyedb.dotnet.database.components.Components.deactivate_rlc_component",
        "title": "deactivate_rlc_component > deactivate_rlc_component > deactivate_rlc_component",
        "section": "deactivate_rlc_component > deactivate_rlc_component",
        "text": "Components.deactivate_rlc_component(component=None, create_circuit_port=False, pec_boundary=False)\n\nDeactivate RLC component with a possibility to convert it to a circuit port.\n\nParameters\n\ncomponent\n\npython:str\n\nReference designator of the RLC component.\n\ncreate_circuit_port\n\nbool, optional\n\nWhether to replace the deactivated RLC component with a circuit port. The default\nis False.\n\npec_boundary\n\nbool, optional\n\nWhether to define the PEC boundary, The default is False. If set to True,\na perfect short is created between the pin and impedance is ignored. This\nparameter is only supported on a port created between two pins, such as\nwhen there is no pin group.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb_file = r'C:\\my_edb_file.aedb'\n>>> edb = Edb(edb_file)\n>>> for cmp in list(edb.components.instances.keys()):\n>>>     edb.components.deactivate_rlc_component(component=cmp, create_circuit_port=False)\n>>> edb.save_edb()\n>>> edb.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.protected_attributes.html#pyedb.configuration.cfg_package_definition.CfgPackage.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgPackage.protected_attributes = ['apply_to_all', 'components', 'extent_bounding_box', 'component_definition']\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweep_data.html#sweep_data",
        "title": "sweep_data",
        "section": "sweep_data",
        "text": "Adding property for compatibility with grpc.\nsweep_data"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweep_data.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweep_data",
        "title": "sweep_data > sweep_data > sweep_data",
        "section": "sweep_data > sweep_data",
        "text": "property SiwaveSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.classify_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.classify_nets.html#classify_nets",
        "title": "classify_nets",
        "section": "classify_nets",
        "text": "Reassign power/ground or signal nets based on list of nets.\nList of power nets to assign. Default is None.\nList of signal nets to assign. Default is None.\nTrue when successful, False when failed.\nclassify_nets\npython:str\npython:list\noptional\npython:str\npython:list\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.classify_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.classify_nets.html#pyedb.dotnet.database.nets.EdbNets.classify_nets",
        "title": "classify_nets > classify_nets > classify_nets",
        "section": "classify_nets > classify_nets",
        "text": "EdbNets.classify_nets(power_nets=None, signal_nets=None)\n\nReassign power/ground or signal nets based on list of nets.\n\nParameters\n\npower_nets\n\npython:str, python:list, optional\n\nList of power nets to assign. Default is None.\n\nsignal_nets\n\npython:str, python:list, optional\n\nList of signal nets to assign. Default is None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.refine_inside",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.refine_inside.html#refine_inside",
        "title": "refine_inside",
        "section": "refine_inside",
        "text": "Whether to turn on refine inside objects.\nTrue if refine inside objects is used, False otherwise.\nrefine_inside\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.refine_inside",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.refine_inside.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.refine_inside",
        "title": "refine_inside > refine_inside > refine_inside",
        "section": "refine_inside > refine_inside",
        "text": "property MeshOperation.refine_inside\n\nWhether to turn on refine inside objects.\n\nReturns\n\nbool\n\nTrue if refine inside objects is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.perform_erc",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.perform_erc.html#perform_erc",
        "title": "perform_erc",
        "section": "perform_erc",
        "text": "Whether to perform an electrical rule check while generating the solver input.\nIn some designs, the same net may be divided into multiple nets with separate names.\nThese nets are connected at a “star” point. To simulate these nets, the error checking\nfor DC shorts must be turned off. All overlapping nets are then internally united\nduring simulation.\nTrue if perform erc is used, False otherwise.\nperform_erc\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.perform_erc",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.perform_erc.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.perform_erc",
        "title": "perform_erc > perform_erc > perform_erc",
        "section": "perform_erc > perform_erc",
        "text": "property AdvancedSettings.perform_erc\n\nWhether to perform an electrical rule check while generating the solver input.\nIn some designs, the same net may be divided into multiple nets with separate names.\nThese nets are connected at a “star” point. To simulate these nets, the error checking\nfor DC shorts must be turned off. All overlapping nets are then internally united\nduring simulation.\n\nReturns\n\nbool\n\nTrue if perform erc is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.restore_default.html#restore_default",
        "title": "restore_default",
        "section": "restore_default",
        "text": "restore_default"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.restore_default.html#pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.restore_default",
        "title": "restore_default > restore_default > restore_default",
        "section": "restore_default > restore_default",
        "text": "SettingsBase.restore_default()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kLNA",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kLNA.html#klna",
        "title": "kLNA",
        "section": "kLNA",
        "text": "kLNA"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kLNA",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kLNA.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kLNA",
        "title": "kLNA > kLNA > kLNA",
        "section": "kLNA > kLNA",
        "text": "SimulationSetupType.kLNA = 'lna'\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.add_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.add_void.html#add_void",
        "title": "add_void",
        "section": "add_void",
        "text": "Add a void to current primitive.\nTrue if successful, either  False.\nadd_void\npython:list\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\nEDB\nPrimitive\nPoint\npython:list\nin\nthe\nformat\nof\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.add_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.add_void.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.add_void",
        "title": "add_void > add_void > add_void",
        "section": "add_void > add_void",
        "text": "EDBPadstackInstance.add_void(point_list)\n\nAdd a void to current primitive.\n\nParameters\n\npoint_list\n\npython:list or pyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives             or EDB Primitive Object. Point python:list in the format of [[x1,y1], [x2,y2],..,[xn,yn]].\n\n\n\nReturns\n\nbool\n\nTrue if successful, either  False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_sim_setup_info",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_sim_setup_info.html#get_sim_setup_info",
        "title": "get_sim_setup_info",
        "section": "get_sim_setup_info",
        "text": "Get simulation setup information.\nget_sim_setup_info"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_sim_setup_info",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_sim_setup_info.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_sim_setup_info",
        "title": "get_sim_setup_info > get_sim_setup_info > get_sim_setup_info",
        "section": "get_sim_setup_info > get_sim_setup_info",
        "text": "property RaptorXSimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.net_layer_info",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.net_layer_info.html#net_layer_info",
        "title": "net_layer_info",
        "section": "net_layer_info",
        "text": "Adding property for grpc compatibility.\nnet_layer_info"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.net_layer_info",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.net_layer_info.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.net_layer_info",
        "title": "net_layer_info > net_layer_info > net_layer_info",
        "section": "net_layer_info > net_layer_info",
        "text": "property MeshOperation.net_layer_info\n\nAdding property for grpc compatibility.\n\nReturns\n\nThe tuple is in this form: (net_name, layer_name, is_sheet)``.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.radius",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.radius.html#radius",
        "title": "radius",
        "section": "radius",
        "text": "Arc radius.\nradius\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.radius",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.radius.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.radius",
        "title": "radius > radius > radius",
        "section": "radius > radius",
        "text": "property EDBArcs.radius\n\nArc radius.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.set_attributes.html#pyedb.configuration.cfg_pin_groups.CfgPinGroup.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgPinGroup.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/Variables",
        "href": "api/edb_data/Variables.html#variables",
        "title": "Variables",
        "section": "Variables",
        "text": "Class managing EDB Variables.\nVariable\nManages EDB methods for variable accessible from Edb.Utility.VariableServer property.\nVariables\nVariable"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_mesh_frequency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_mesh_frequency.html#use_mesh_frequency",
        "title": "use_mesh_frequency",
        "section": "use_mesh_frequency",
        "text": "User can override the default meshing applied by the mesh engine by checking this option and setting a\ncustom frequency for mesh generation.\nuse_mesh_frequency"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_mesh_frequency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_mesh_frequency.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_mesh_frequency",
        "title": "use_mesh_frequency > use_mesh_frequency > use_mesh_frequency",
        "section": "use_mesh_frequency > use_mesh_frequency",
        "text": "property RaptorXSimulationAdvancedSettings.use_mesh_frequency\n\nUser can override the default meshing applied by the mesh engine by checking this option and setting a\ncustom frequency for mesh generation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.do_renormalize",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.do_renormalize.html#do_renormalize",
        "title": "do_renormalize",
        "section": "do_renormalize",
        "text": "Determine whether port renormalization is enabled.\ndo_renormalize"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.do_renormalize",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.do_renormalize.html#pyedb.dotnet.database.edb_data.ports.GapPort.do_renormalize",
        "title": "do_renormalize > do_renormalize > do_renormalize",
        "section": "do_renormalize > do_renormalize",
        "text": "property GapPort.do_renormalize\n\nDetermine whether port renormalization is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.dcir_equipotential_region",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.dcir_equipotential_region.html#dcir_equipotential_region",
        "title": "dcir_equipotential_region",
        "section": "dcir_equipotential_region",
        "text": "Check whether dcir equipotential region is enabled.\ndcir_equipotential_region"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.dcir_equipotential_region",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.dcir_equipotential_region.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.dcir_equipotential_region",
        "title": "dcir_equipotential_region > dcir_equipotential_region > dcir_equipotential_region",
        "section": "dcir_equipotential_region > dcir_equipotential_region",
        "text": "property EdbPolygon.dcir_equipotential_region\n\nCheck whether dcir equipotential region is enabled.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersection_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersection_type.html#intersection_type",
        "title": "intersection_type",
        "section": "intersection_type",
        "text": "Get intersection type between actual primitive and another primitive or polygon data.\nIntersection type:\n0 - objects do not intersect,\n1 - this object fully inside other (no common contour points),\n2 - other object fully inside this,\n3 - common contour points,\n4 - undefined intersection.\nintersection_type\npyaeedt.database.edb_data.primitives_data.EDBPrimitives\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersection_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersection_type.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersection_type",
        "title": "intersection_type > intersection_type > intersection_type",
        "section": "intersection_type > intersection_type",
        "text": "EdbPolygon.intersection_type(primitive)\n\nGet intersection type between actual primitive and another primitive or polygon data.\n\nParameters\n\nprimitive\n\npyaeedt.database.edb_data.primitives_data.EDBPrimitives or PolygonData\n\n\n\nReturns\n\npython:int\n\nIntersection type:\n0 - objects do not intersect,\n1 - this object fully inside other (no common contour points),\n2 - other object fully inside this,\n3 - common contour points,\n4 - undefined intersection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_nets_from_pin_list",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_nets_from_pin_list.html#get_nets_from_pin_list",
        "title": "get_nets_from_pin_list",
        "section": "get_nets_from_pin_list",
        "text": "Retrieve nets with one or more pins.\nList of pins.\nList of nets with one or more pins.\nget_nets_from_pin_list\npython:list\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_nets_from_pin_list",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_nets_from_pin_list.html#pyedb.dotnet.database.components.Components.get_nets_from_pin_list",
        "title": "get_nets_from_pin_list > get_nets_from_pin_list > get_nets_from_pin_list",
        "section": "get_nets_from_pin_list > get_nets_from_pin_list",
        "text": "Components.get_nets_from_pin_list(PinList)\n\nRetrieve nets with one or more pins.\n\nParameters\n\nPinList\n\npython:list\n\nList of pins.\n\nReturns\n\npython:list\n\nList of nets with one or more pins.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_nets_from_pin_list(pinlist)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_sweep.html#add_sweep",
        "title": "add_sweep",
        "section": "add_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nAdded for grpc compatibility.\nAdded for rpc compatibility.\nAdded for grpc compatibility.\nAdded for grpc compatibility.\nList of frequency points. The default is None.\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\nadd_sweep\npython:str\noptional\nNone\npython:str\noptional\npython:str\noptional\npython:str\noptional\noptional\npython:list\noptional\nNone\npython:str\noptional\n\"interpolation\"\n\"discrete\""
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_sweep.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_sweep",
        "title": "add_sweep > add_sweep > add_sweep",
        "section": "add_sweep > add_sweep",
        "text": "SimulationSetup.add_sweep(name: str | None = None, distribution: str | None = None, start_freq: str | None = None, stop_freq: str | None = None, step=None, frequency_set: list | None = None, sweep_type: str = 'interpolation', **kwargs)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\ndistribution\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstart_freq\n\npython:str, optional\n\nAdded for rpc compatibility.\n\nstop_freq\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstep\n\noptional\n\nAdded for grpc compatibility.\n\nfrequency_set\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nsweep_type\n\npython:str, optional\n\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\n\nReturns\n\n\n\n——-\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_sweep(name=\"sw1\", frequency_set=[\"linear count\", \"1MHz\", \"100MHz\", 10])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlProperty",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlProperty.html#controlproperty",
        "title": "ControlProperty",
        "section": "ControlProperty",
        "text": "ControlProperty"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlProperty",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlProperty.html#pyedb.dotnet.database.edb_data.control_file.ControlProperty",
        "title": "ControlProperty > ControlProperty > ControlProperty",
        "section": "ControlProperty > ControlProperty",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlProperty(property_name, value)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout.html#place_in_layout",
        "title": "place_in_layout",
        "section": "place_in_layout",
        "text": "Place current Cell into another cell using layer placement method.\nFlip the current layer stackup of a layout if requested. Transform parameters currently not supported.\nCell on which to place the current layout. If None the Cell will be applied on an empty new Cell.\nThe rotation angle applied on the design.\nThe x offset value.\nThe y offset value.\nEither if the current layout is inverted.\nIf True and place_on_top is True the stackup will be flipped before the merge.\nEither if place the current layout on Top or Bottom of destination Layout.\nTrue when succeed False if not.\nplace_in_layout\nEdb\ndouble\noptional\ndouble\noptional\ndouble\noptional\noptional\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout.html#pyedb.dotnet.database.stackup.Stackup.place_in_layout",
        "title": "place_in_layout > place_in_layout > place_in_layout",
        "section": "place_in_layout > place_in_layout",
        "text": "Stackup.place_in_layout(edb, angle=0.0, offset_x=0.0, offset_y=0.0, flipped_stackup=True, place_on_top=True)\n\nPlace current Cell into another cell using layer placement method.\nFlip the current layer stackup of a layout if requested. Transform parameters currently not supported.\n\nParameters\n\nedb\n\nEdb\n\nCell on which to place the current layout. If None the Cell will be applied on an empty new Cell.\n\nangle\n\ndouble, optional\n\nThe rotation angle applied on the design.\n\noffset_x\n\ndouble, optional\n\nThe x offset value.\n\noffset_y\n\ndouble, optional\n\nThe y offset value.\n\nflipped_stackup\n\nbool, optional\n\nEither if the current layout is inverted.\nIf True and place_on_top is True the stackup will be flipped before the merge.\n\nplace_on_top\n\nbool, optional\n\nEither if place the current layout on Top or Bottom of destination Layout.\n\nReturns\n\nbool\n\nTrue when succeed False if not.\n\nExamples\n\n>>> edb1 = Edb(edbpath=targetfile1,  edbversion=\"2021.2\")\n>>> edb2 = Edb(edbpath=targetfile2, edbversion=\"2021.2\")\n\n>>> hosting_cmp = edb1.components.get_component_by_name(\"U100\")\n>>> mounted_cmp = edb2.components.get_component_by_name(\"BGA\")\n\n>>> vector, rotation, solder_ball_height = edb1.components.get_component_placement_vector(\n...                                                     mounted_component=mounted_cmp,\n...                                                     hosting_component=hosting_cmp,\n...                                                     mounted_component_pin1=\"A12\",\n...                                                     mounted_component_pin2=\"A14\",\n...                                                     hosting_component_pin1=\"A12\",\n...                                                     hosting_component_pin2=\"A14\")\n>>> edb2.stackup.place_in_layout(edb1.active_cell, angle=0.0, offset_x=vector[0],\n...                              offset_y=vector[1], flipped_stackup=False, place_on_top=True,\n...                              )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.html#edbnets",
        "title": "EdbNets",
        "section": "EdbNets",
        "text": "Manages EDB methods for nets management accessible from Edb.nets property.\nEdbNets.classify_nets([power_nets, signal_nets])\nReassign power/ground or signal nets based on list of nets.\nEdbNets.delete(netlist)\nDelete one or more nets from EDB.\nEdbNets.eligible_power_nets([threshold])\nReturn a list of nets calculated by area to be eligible for PWR/Ground net classification.\nEdbNets.find_or_create_net([net_name, ...])\nFind or create the net with the given name in the layout.\nEdbNets.generate_extended_nets([...])\nGet extended net and associated components.\nEdbNets.get_dcconnected_net_list([...])\nGet the nets connected to the direct current through inductors.\nEdbNets.get_net_by_name(net_name)\nFind a net by name.\nEdbNets.get_powertree(power_net_name, ...)\nRetrieve the power tree.\nEdbNets.is_net_in_component(component_name, ...)\nCheck if a net belongs to a component.\nEdbNets.is_power_gound_net(netname_list)\nDetermine if one of the  nets in a list is power or ground.\nEdbNets.merge_nets_polygons(net_names_list)\nConvert paths from net into polygons, evaluate all connected polygons and perform the merge.\nEdbNets.plot([nets, layers, color_by_net, ...])\nPlot a Net to Matplotlib 2D Chart.\nEdbNets.components_by_nets\nGet all component instances grouped by nets.\nEdbNets.db\nDb object.\nEdbNets.netlist\nReturn the cell netlist.\nEdbNets.nets\nNets.\nEdbNets.nets_by_components\nGet all nets for each component instance.\nEdbNets.power\nPower nets.\nEdbNets.signal\nSignal nets.\nEdbNets\nEdbNets.classify_nets\nEdbNets.delete\nEdbNets.eligible_power_nets\nEdbNets.find_or_create_net\nEdbNets.generate_extended_nets\nEdbNets.get_dcconnected_net_list\nEdbNets.get_net_by_name\nEdbNets.get_powertree\nEdbNets.is_net_in_component\nEdbNets.is_power_gound_net\nEdbNets.merge_nets_polygons\nEdbNets.plot\nEdbNets.components_by_nets\nEdbNets.db\nEdbNets.netlist\nEdbNets.nets\nEdbNets.nets_by_components\nEdbNets.power\nEdbNets.signal"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.html#pyedb.dotnet.database.nets.EdbNets",
        "title": "EdbNets > EdbNets > EdbNets",
        "section": "EdbNets > EdbNets",
        "text": "class pyedb.dotnet.database.nets.EdbNets(p_edb)\n\nManages EDB methods for nets management accessible from Edb.nets property.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", edbversion=\"2021.2\")\n>>> edb_nets = edbapp.nets\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEdbNets.classify_nets([power_nets, signal_nets])\n\nReassign power/ground or signal nets based on list of nets.\n\nEdbNets.delete(netlist)\n\nDelete one or more nets from EDB.\n\nEdbNets.eligible_power_nets([threshold])\n\nReturn a list of nets calculated by area to be eligible for PWR/Ground net classification.\n\nEdbNets.find_or_create_net([net_name, ...])\n\nFind or create the net with the given name in the layout.\n\nEdbNets.generate_extended_nets([...])\n\nGet extended net and associated components.\n\nEdbNets.get_dcconnected_net_list([...])\n\nGet the nets connected to the direct current through inductors.\n\nEdbNets.get_net_by_name(net_name)\n\nFind a net by name.\n\nEdbNets.get_powertree(power_net_name, ...)\n\nRetrieve the power tree.\n\nEdbNets.is_net_in_component(component_name, ...)\n\nCheck if a net belongs to a component.\n\nEdbNets.is_power_gound_net(netname_list)\n\nDetermine if one of the  nets in a list is power or ground.\n\nEdbNets.merge_nets_polygons(net_names_list)\n\nConvert paths from net into polygons, evaluate all connected polygons and perform the merge.\n\nEdbNets.plot([nets, layers, color_by_net, ...])\n\nPlot a Net to Matplotlib 2D Chart.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEdbNets.components_by_nets\n\nGet all component instances grouped by nets.\n\nEdbNets.db\n\nDb object.\n\nEdbNets.netlist\n\nReturn the cell netlist.\n\nEdbNets.nets\n\nNets.\n\nEdbNets.nets_by_components\n\nGet all nets for each component instance.\n\nEdbNets.power\n\nPower nets.\n\nEdbNets.signal\n\nSignal nets.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_pad_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_pad_area_to_mesh.html#min_pad_area_to_mesh",
        "title": "min_pad_area_to_mesh",
        "section": "min_pad_area_to_mesh",
        "text": "Minimum void pad area to mesh to include.\nmin_pad_area_to_mesh"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_pad_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_pad_area_to_mesh.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_pad_area_to_mesh",
        "title": "min_pad_area_to_mesh > min_pad_area_to_mesh > min_pad_area_to_mesh",
        "section": "min_pad_area_to_mesh > min_pad_area_to_mesh",
        "text": "property AdvancedSettings.min_pad_area_to_mesh\n\nMinimum void pad area to mesh to include.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params.html#hole_params",
        "title": "hole_params",
        "section": "hole_params",
        "text": "Via Hole parameters values.\nhole_params"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params",
        "title": "hole_params > hole_params > hole_params",
        "section": "hole_params > hole_params",
        "text": "property EDBPadstack.hole_params\n\nVia Hole parameters values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.thickness",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.thickness.html#thickness",
        "title": "thickness",
        "section": "thickness",
        "text": "Retrieve Stackup thickness.\nLayout stackup thickness.\nthickness\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.thickness",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.thickness.html#pyedb.dotnet.database.stackup.Stackup.thickness",
        "title": "thickness > thickness > thickness",
        "section": "thickness > thickness",
        "text": "property Stackup.thickness\n\nRetrieve Stackup thickness.\n\nReturns\n\npython:float\n\nLayout stackup thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_placement_vector",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_placement_vector.html#get_component_placement_vector",
        "title": "get_component_placement_vector",
        "section": "get_component_placement_vector",
        "text": "Get the placement vector between 2 components.\nMounted component name.\nHosting component name.\nMounted component Pin 1 name.\nMounted component Pin 2 name.\nHosted component Pin 1 name.\nHosted component Pin 2 name.\nEither if the mounted component will be flipped or not.\nTuple of Vector offset, rotation and solder height.\nget_component_placement_vector\npython:str\npython:str\npython:str\npython:str\noptional\npython:tuple"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_placement_vector",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_placement_vector.html#pyedb.dotnet.database.components.Components.get_component_placement_vector",
        "title": "get_component_placement_vector > get_component_placement_vector > get_component_placement_vector",
        "section": "get_component_placement_vector > get_component_placement_vector",
        "text": "Components.get_component_placement_vector(mounted_component, hosting_component, mounted_component_pin1, mounted_component_pin2, hosting_component_pin1, hosting_component_pin2, flipped=False)\n\nGet the placement vector between 2 components.\n\nParameters\n\nmounted_component\n\nedb.cell.hierarchy._hierarchy.Component\n\nMounted component name.\n\nhosting_component\n\nedb.cell.hierarchy._hierarchy.Component\n\nHosting component name.\n\nmounted_component_pin1\n\npython:str\n\nMounted component Pin 1 name.\n\nmounted_component_pin2\n\npython:str\n\nMounted component Pin 2 name.\n\nhosting_component_pin1\n\npython:str\n\nHosted component Pin 1 name.\n\nhosting_component_pin2\n\npython:str\n\nHosted component Pin 2 name.\n\nflipped\n\nbool, optional\n\nEither if the mounted component will be flipped or not.\n\nReturns\n\npython:tuple\n\nTuple of Vector offset, rotation and solder height.\n\nExamples\n\n>>> edb1 = Edb(edbpath=targetfile1,  edbversion=\"2021.2\")\n>>> hosting_cmp = edb1.components.get_component_by_name(\"U100\")\n>>> mounted_cmp = edb2.components.get_component_by_name(\"BGA\")\n>>> vector, rotation, solder_ball_height = edb1.components.get_component_placement_vector(\n...                                             mounted_component=mounted_cmp,\n...                                             hosting_component=hosting_cmp,\n...                                             mounted_component_pin1=\"A12\",\n...                                             mounted_component_pin2=\"A14\",\n...                                             hosting_component_pin1=\"A12\",\n...                                             hosting_component_pin2=\"A14\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_freq_s_mat_only_solve",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_freq_s_mat_only_solve.html#min_freq_s_mat_only_solve",
        "title": "min_freq_s_mat_only_solve",
        "section": "min_freq_s_mat_only_solve",
        "text": "Minimum frequency SMatrix only solve.\nFrequency with units.\nmin_freq_s_mat_only_solve\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_freq_s_mat_only_solve",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_freq_s_mat_only_solve.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_freq_s_mat_only_solve",
        "title": "min_freq_s_mat_only_solve > min_freq_s_mat_only_solve > min_freq_s_mat_only_solve",
        "section": "min_freq_s_mat_only_solve > min_freq_s_mat_only_solve",
        "text": "property SweepData.min_freq_s_mat_only_solve\n\nMinimum frequency SMatrix only solve.\n\nReturns\n\npython:str\n\nFrequency with units.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_bottom",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_bottom.html#backdrill_bottom",
        "title": "backdrill_bottom",
        "section": "backdrill_bottom",
        "text": "Backdrill layer from bottom.\nTuple of the layer name, drill diameter, and drill offset if it exists.\nbackdrill_bottom\npython:tuple"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_bottom",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_bottom.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_bottom",
        "title": "backdrill_bottom > backdrill_bottom > backdrill_bottom",
        "section": "backdrill_bottom > backdrill_bottom",
        "text": "property EDBPadstackInstance.backdrill_bottom\n\nBackdrill layer from bottom.\n\nReturns\n\npython:tuple\n\nTuple of the layer name, drill diameter, and drill offset if it exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range.html#hole_range",
        "title": "hole_range",
        "section": "hole_range",
        "text": "Get hole range value from padstack definition.\nPossible returned values are \"through\", \"begin_on_upper_pad\",\n\"end_on_lower_pad\", \"upper_pad_to_lower_pad\", and \"unknown_range\".\nhole_range\npython:str\n\"through\"\n\"begin_on_upper_pad\"\n\"end_on_lower_pad\"\n\"upper_pad_to_lower_pad\"\n\"unknown_range\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range",
        "title": "hole_range > hole_range > hole_range",
        "section": "hole_range > hole_range",
        "text": "property EDBPadstack.hole_range\n\nGet hole range value from padstack definition.\n\nReturns\n\npython:str\n\nPossible returned values are \"through\", \"begin_on_upper_pad\",\n\"end_on_lower_pad\", \"upper_pad_to_lower_pad\", and \"unknown_range\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_adaptive_frequency_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_adaptive_frequency_data.html#add_adaptive_frequency_data",
        "title": "add_adaptive_frequency_data",
        "section": "add_adaptive_frequency_data",
        "text": "Add a setup for frequency data.\nFrequency with units or float frequency (in Hz).\nMaximum number of passes. The default is 10.\nMaximum delta S. The default is 0.02.\nTrue if method is successful, False otherwise.\nadd_adaptive_frequency_data\npython:str\npython:float\npython:int\noptional\n10\npython:float\noptional\n0.02\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_adaptive_frequency_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_adaptive_frequency_data.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_adaptive_frequency_data",
        "title": "add_adaptive_frequency_data > add_adaptive_frequency_data > add_adaptive_frequency_data",
        "section": "add_adaptive_frequency_data > add_adaptive_frequency_data",
        "text": "AdaptiveSettings.add_adaptive_frequency_data(frequency=0, max_num_passes=10, max_delta_s=0.02)\n\nAdd a setup for frequency data.\n\nParameters\n\nfrequency\n\npython:str, python:float\n\nFrequency with units or float frequency (in Hz).\n\nmax_num_passes\n\npython:int, optional\n\nMaximum number of passes. The default is 10.\n\nmax_delta_s\n\npython:float, optional\n\nMaximum delta S. The default is 0.02.\n\nReturns\n\nbool\n\nTrue if method is successful, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Create a component from pins.\nList of EDB core pins.\nName of the reference designator for the component.\nName of the layer used for placing the component.\nPart name of the component.\nWhether if the new component will be an RLC or not.\nResistor value.\nCapacitance value.\nInductor value.\nUsing parallel model when True, series when False.\nTrue when successful, False when failed.\ncreate\npython:list\npython:str\npython:str\noptional\npython:str\noptional\noptional\npython:float\npython:float\npython:float\nTrue\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create.html#pyedb.dotnet.database.components.Components.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "Components.create(pins, component_name=None, placement_layer=None, component_part_name=None, is_rlc=False, r_value=None, c_value=None, l_value=None, is_parallel=False)\n\nCreate a component from pins.\n\nParameters\n\npins\n\npython:list\n\nList of EDB core pins.\n\ncomponent_name\n\npython:str\n\nName of the reference designator for the component.\n\nplacement_layer\n\npython:str, optional\n\nName of the layer used for placing the component.\n\ncomponent_part_name\n\npython:str, optional\n\nPart name of the component.\n\nis_rlc\n\nbool, optional\n\nWhether if the new component will be an RLC or not.\n\nr_value\n\npython:float\n\nResistor value.\n\nc_value\n\npython:float\n\nCapacitance value.\n\nl_value\n\npython:float\n\nInductor value.\n\nis_parallel\n\nbool\n\nUsing parallel model when True, series when False.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> pins = edbapp.components.get_pin_from_component(\"A1\")\n>>> edbapp.components.create(pins, \"A1New\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.definition",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.definition.html#definition",
        "title": "definition",
        "section": "definition",
        "text": "Padstack definition.\nName of the padstack definition.\ndefinition\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.definition",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.definition.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.definition",
        "title": "definition > definition > definition",
        "section": "definition > definition",
        "text": "property EDBPadstackInstance.definition\n\nPadstack definition.\n\nReturns\n\npython:str\n\nName of the padstack definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes_min_diameter",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes_min_diameter.html#ignore_small_holes_min_diameter",
        "title": "ignore_small_holes_min_diameter",
        "section": "ignore_small_holes_min_diameter",
        "text": "Min diameter to ignore small holes.\nignore_small_holes_min_diameter\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes_min_diameter",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes_min_diameter.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes_min_diameter",
        "title": "ignore_small_holes_min_diameter > ignore_small_holes_min_diameter > ignore_small_holes_min_diameter",
        "section": "ignore_small_holes_min_diameter > ignore_small_holes_min_diameter",
        "text": "property HFSSPISimulationSettings.ignore_small_holes_min_diameter\n\nMin diameter to ignore small holes.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range.html#hole_range",
        "title": "hole_range",
        "section": "hole_range",
        "text": "Get hole range value from padstack definition.\nPossible returned values are \"through\", \"begin_on_upper_pad\",\n\"end_on_lower_pad\", \"upper_pad_to_lower_pad\", and \"unknown_range\".\nhole_range\npython:str\n\"through\"\n\"begin_on_upper_pad\"\n\"end_on_lower_pad\"\n\"upper_pad_to_lower_pad\"\n\"unknown_range\""
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_range",
        "title": "hole_range > hole_range > hole_range",
        "section": "hole_range > hole_range",
        "text": "property EDBPadstack.hole_range\n\nGet hole range value from padstack definition.\n\nReturns\n\npython:str\n\nPossible returned values are \"through\", \"begin_on_upper_pad\",\n\"end_on_lower_pad\", \"upper_pad_to_lower_pad\", and \"unknown_range\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_amplitude",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_amplitude.html#source_amplitude",
        "title": "source_amplitude",
        "section": "source_amplitude",
        "text": "Property added for grpc compatibility\nsource_amplitude"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_amplitude",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_amplitude.html#pyedb.dotnet.database.edb_data.ports.GapPort.source_amplitude",
        "title": "source_amplitude > source_amplitude > source_amplitude",
        "section": "source_amplitude > source_amplitude",
        "text": "property GapPort.source_amplitude\n\nProperty added for grpc compatibility\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_angle",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_angle.html#arc_angle",
        "title": "arc_angle",
        "section": "arc_angle",
        "text": "Step-size to be used for arc faceting.\narc_angle\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_angle",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_angle.html#pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_angle",
        "title": "arc_angle > arc_angle > arc_angle",
        "section": "arc_angle > arc_angle",
        "text": "property CurveApproxSettings.arc_angle\n\nStep-size to be used for arc faceting.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/about",
        "href": "getting_started/about.html#about-pyedb",
        "title": "About PyEDB",
        "section": "About PyEDB",
        "text": "PyEDB is part of the larger PyAnsys effort to facilitate the use\nof Ansys technologies directly from Python. It is intended to consolidate and extend all existing\nfunctionalities around scripting for the Ansys Electronics Database (EDB) to allow reuse\nof existing code, sharing of best practices, and increased collaboration.\nPyEDB includes functionality for interacting with these\nAnsys Electronics Desktop (AEDT) products:\nEDB\nHFSS 3D Layout\nIcepak\nAbout PyEDB"
    },
    {
        "objectID": "getting_started/about",
        "href": "getting_started/about.html#what-is-edb",
        "title": "About PyEDB > What is EDB?",
        "section": "What is EDB?",
        "text": "EDB provides a proprietary database file format (AEDB) for efficient and fast layout design\nhandling and processing for building ready-to-solve projects. EDB addresses signal integrity\n(SI), power integrity (PI-DC), and electro-thermal workflows. You can import an AEDB file\ninto AEDT to modify the layout, assign materials, and define ports, simulations, and constraints.\nYou can then launch any of the Ansys electromagnetic simulators: HFSS, HFSS 3D Layout, Icepak,\nMaxwell, Q3D, and SIwave.\nEDB runs as a standalone API, which means that you don’t need to open a user interface (UI).\nBecause EDB opens the aedb folder for directly querying and manipulating layout design in\nmemory, it provides the fastest and most efficient way to handle a large and complex layout.\nYou can also parse an AEDB file from a command line in batch in an Ansys electromagnetic simulator\nlike HFSS or SIwave. Thus, you can deploy completely non-graphical flows, from layout\ntranslation through simulation results.\nAdditionally, you can use PyAEDT to import an AEDB file into AEDT to view a project,\ncombine 3D designs, or perform simulation postprocessing. EDB also supports 3D component models.\nWhat is EDB?\naedb"
    },
    {
        "objectID": "getting_started/about",
        "href": "getting_started/about.html#why-use-pyedb",
        "title": "About PyEDB > Why use PyEDB?",
        "section": "Why use PyEDB?",
        "text": "PyEDB interacts with the PyEDB-Core API to make scripting simpler.\nIt provides application-oriented, high-level methods and properties. The PyEDB API’s Edb class and methods\nsimplify operations while reusing information as much as possible across the API.\nBecause PyEDB runs in memory, it does not require a user interface. Its API is extremely efficient at\nhandling and editing large and complex layout designs. PyEDB is the best choice for addressing layout\ndesign automation. Its headless architecture also makes it well suited on both Windows and Linux.\nPyEDB loads and saves AEDB files, which can natively be read by AEDT and Ansys SIwave to visualize\nand edit projects, run simulations, or perform postprocessing. AEDB files are project self-contained,\nmeaning that ready-to-solve projects can be written with PyEDB. Therefore Ansys solvers can directly\nload AEDB files graphically or in batch non-graphically to support submission for job scheduling on a cluster.\nFor more information, see Ansys Electronics\non the Ansys website.\nWhy use PyEDB?\nEdb"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_via",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_via.html#add_via",
        "title": "add_via",
        "section": "add_via",
        "text": "Add a new via layer.\nLayer name.\nDefine the material for this layer.\nDefine the gds type.\nTarget layer used after layout import in EDB and HFSS 3D layout.\nDefine the start layer for the via\nDefine the stop layer for the via.\nWhen True solve inside this layer is anbled. Default value is True.\nDefine the via group method, default value is \"proximity\"\nDefine the via group tolerance.\nWhen True activated otherwise when False``is deactivated. Default value is ``True.\nDefine the via group method, default value is \"distance\"\nDefine the via group tolerance, default value is 10e-9.\nDictionary with key and  property value.\nadd_via\npython:str\npython:str\npython:int\npython:str\npython:str\npython:str\nTrue\nTrue\npython:str\n\"proximity\"\npython:float\nTrue\nFalse``is deactivated. Default value is ``True\npython:str\n\"distance\"\npython:float\npython:dict\npyedb.dotnet.database.edb_data.control_file.ControlFileVia"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_via",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_via.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_via",
        "title": "add_via > add_via > add_via",
        "section": "add_via > add_via",
        "text": "ControlFileStackup.add_via(layer_name, material='', gds_type=0, target_layer='', start_layer='', stop_layer='', solve_inside=True, via_group_method='proximity', via_group_tol=1e-06, via_group_persistent=True, snap_via_group_method='distance', snap_via_group_tol=1e-08, properties=None)\n\nAdd a new via layer.\n\nParameters\n\nlayer_name\n\npython:str\n\nLayer name.\n\nmaterial\n\npython:str\n\nDefine the material for this layer.\n\ngds_type\n\npython:int\n\nDefine the gds type.\n\ntarget_layer\n\npython:str\n\nTarget layer used after layout import in EDB and HFSS 3D layout.\n\nstart_layer\n\npython:str\n\nDefine the start layer for the via\n\nstop_layer\n\npython:str\n\nDefine the stop layer for the via.\n\nsolve_inside\n\nbool\n\nWhen True solve inside this layer is anbled. Default value is True.\n\nvia_group_method\n\npython:str\n\nDefine the via group method, default value is \"proximity\"\n\nvia_group_tol\n\npython:float\n\nDefine the via group tolerance.\n\nvia_group_persistent\n\nbool\n\nWhen True activated otherwise when False``is deactivated. Default value is ``True.\n\nsnap_via_group_method\n\npython:str\n\nDefine the via group method, default value is \"distance\"\n\nsnap_via_group_tol\n\npython:float\n\nDefine the via group tolerance, default value is 10e-9.\n\nproperties\n\npython:dict\n\nDictionary with key and  property value.\n\nReturns\n\npyedb.dotnet.database.edb_data.control_file.ControlFileVia\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "Apply padstack definition and instances on layout.\napply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.apply.html#pyedb.configuration.cfg_padstacks.CfgPadstacks.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgPadstacks.apply()\n\nApply padstack definition and instances on layout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_raptorx_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_raptorx_setup.html#create_raptorx_setup",
        "title": "create_raptorx_setup",
        "section": "create_raptorx_setup",
        "text": "Create an RaptorX simulation setup from a template.\nSetup name.\ncreate_raptorx_setup\npython:str\noptional\nlegacy.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_raptorx_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_raptorx_setup.html#pyedb.dotnet.edb.Edb.create_raptorx_setup",
        "title": "create_raptorx_setup > create_raptorx_setup > create_raptorx_setup",
        "section": "create_raptorx_setup > create_raptorx_setup",
        "text": "Edb.create_raptorx_setup(name=None)\n\nCreate an RaptorX simulation setup from a template.\n\nParameters\n\nname\n\npython:str, optional\n\nSetup name.\n\nReturns\n\nlegacy.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.open_region_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.open_region_type.html#open_region_type",
        "title": "open_region_type",
        "section": "open_region_type",
        "text": "Open region type.\nopen_region_type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.open_region_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.open_region_type.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.open_region_type",
        "title": "open_region_type > open_region_type > open_region_type",
        "section": "open_region_type > open_region_type",
        "text": "property HfssExtentInfo.open_region_type\n\nOpen region type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_lumped_port_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_lumped_port_on_net.html#create_lumped_port_on_net",
        "title": "create_lumped_port_on_net",
        "section": "create_lumped_port_on_net",
        "text": "Create an edge port on nets. This command looks for traces and polygons on the\nnets and tries to assign vertical lumped port.\nList of nets, str or Edb net.\nName or Edb layer object.\nUse this boolean when you want to return only the points from the edges and not creating ports. Default\nvalue is False.\nThe number of digits carried for the edge location accuracy. The default value is 6.\na cutout has been performed before and lumped ports have to be created on ending traces. Default value is\nTrue.\nTrue when successful, False when failed.\ncreate_lumped_port_on_net\npython:list\noptional\npython:str\nEdb\noptional\nFalse\npython:int\noptional\n6\nTrue\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_lumped_port_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_lumped_port_on_net.html#pyedb.dotnet.database.hfss.EdbHfss.create_lumped_port_on_net",
        "title": "create_lumped_port_on_net > create_lumped_port_on_net > create_lumped_port_on_net",
        "section": "create_lumped_port_on_net > create_lumped_port_on_net",
        "text": "EdbHfss.create_lumped_port_on_net(nets=None, reference_layer=None, return_points_only=False, digit_resolution=6, at_bounding_box=True)\n\nCreate an edge port on nets. This command looks for traces and polygons on the\nnets and tries to assign vertical lumped port.\n\nParameters\n\nnets\n\npython:list, optional\n\nList of nets, str or Edb net.\n\nreference_layer\n\npython:str, Edb layer.\n\nName or Edb layer object.\n\nreturn_points_only\n\nbool, optional\n\nUse this boolean when you want to return only the points from the edges and not creating ports. Default\nvalue is False.\n\ndigit_resolution\n\npython:int, optional\n\nThe number of digits carried for the edge location accuracy. The default value is 6.\n\nat_bounding_box\n\nbool\n\nWhen True will keep the edges from traces at the layout bounding box location. This is recommended when\n\na cutout has been performed before and lumped ports have to be created on ending traces. Default value is\nTrue.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.percentage_error_z0",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.percentage_error_z0.html#percentage_error_z0",
        "title": "percentage_error_z0",
        "section": "percentage_error_z0",
        "text": "Retrieve boolean to perform the cutout during the project build.\npercentage_error_z0\nTrue\nwhen\nclipping\nthe\ndesign\nis\napplied\nFalse\nif"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.percentage_error_z0",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.percentage_error_z0.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.percentage_error_z0",
        "title": "percentage_error_z0 > percentage_error_z0 > percentage_error_z0",
        "section": "percentage_error_z0 > percentage_error_z0",
        "text": "property SimulationConfigurationAc.percentage_error_z0\n\nRetrieve boolean to perform the cutout during the project build.\n\nReturns\n\nbool\n\n\n\nTrue when clipping the design is applied False if not.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/hfss_simulation_setup",
        "href": "api/utilities/hfss_simulation_setup.html#hfss-simulation-setup",
        "title": "HFSS simulation setup",
        "section": "HFSS simulation setup",
        "text": "These classes are the containers of HFSS simulation setup.\nHfssSimulationSetup\nManages EDB methods for HFSS simulation setup.\nHFSSPISimulationSetup\nManages EDB methods for HFSSPI simulation setup.\nHFSS simulation setup\nHfssSimulationSetup\nHFSSPISimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.html#layoutvalidation",
        "title": "LayoutValidation",
        "section": "LayoutValidation",
        "text": "Manages all layout validation capabilities\nLayoutValidation.dc_shorts([net_list, fix])\nFind DC shorts on layout.\nLayoutValidation.disjoint_nets([net_list, ...])\nFind and fix disjoint nets from a given netlist.\nLayoutValidation.fix_self_intersections([...])\nFind and fix self intersections from a given netlist.\nLayoutValidation.illegal_net_names([fix])\nFind and fix illegal net names.\nLayoutValidation.illegal_rlc_values([fix])\nFind and fix RLC illegal values.\nLayoutValidation.padstacks_no_name([fix])\n\nLayoutValidation\nLayoutValidation.dc_shorts\nLayoutValidation.disjoint_nets\nLayoutValidation.fix_self_intersections\nLayoutValidation.illegal_net_names\nLayoutValidation.illegal_rlc_values\nLayoutValidation.padstacks_no_name"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.html#pyedb.dotnet.database.layout_validation.LayoutValidation",
        "title": "LayoutValidation > LayoutValidation > LayoutValidation",
        "section": "LayoutValidation > LayoutValidation",
        "text": "class pyedb.dotnet.database.layout_validation.LayoutValidation(pedb)\n\nManages all layout validation capabilities\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nLayoutValidation.dc_shorts([net_list, fix])\n\nFind DC shorts on layout.\n\nLayoutValidation.disjoint_nets([net_list, ...])\n\nFind and fix disjoint nets from a given netlist.\n\nLayoutValidation.fix_self_intersections([...])\n\nFind and fix self intersections from a given netlist.\n\nLayoutValidation.illegal_net_names([fix])\n\nFind and fix illegal net names.\n\nLayoutValidation.illegal_rlc_values([fix])\n\nFind and fix RLC illegal values.\n\nLayoutValidation.padstacks_no_name([fix])\n\n\n\n"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_bondwire_sides",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_bondwire_sides.html#num_bondwire_sides",
        "title": "num_bondwire_sides",
        "section": "num_bondwire_sides",
        "text": "Number of bondwire sides.\nnum_bondwire_sides\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_bondwire_sides",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_bondwire_sides.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_bondwire_sides",
        "title": "num_bondwire_sides > num_bondwire_sides > num_bondwire_sides",
        "section": "num_bondwire_sides > num_bondwire_sides",
        "text": "property DCAdvancedSettings.num_bondwire_sides\n\nNumber of bondwire sides.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.protected_attributes.html#pyedb.configuration.cfg_operations.CfgOperations.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgOperations.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_create.html#api_create",
        "title": "api_create",
        "section": "api_create",
        "text": "Edb Dotnet Api Database Edb.ExtendedNet.Create.\napi_create"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_create.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_create",
        "title": "api_create > api_create > api_create",
        "section": "api_create > api_create",
        "text": "EDBExtendedNetData.api_create(name)\n\nEdb Dotnet Api Database Edb.ExtendedNet.Create.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.global_temperature",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.global_temperature.html#global_temperature",
        "title": "global_temperature",
        "section": "global_temperature",
        "text": "The simulation temperature. Units: C\nglobal_temperature"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.global_temperature",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.global_temperature.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.global_temperature",
        "title": "global_temperature > global_temperature > global_temperature",
        "section": "global_temperature > global_temperature",
        "text": "property RaptorXGeneralSettings.global_temperature\n\nThe simulation temperature. Units: C\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.nets.html#nets",
        "title": "nets",
        "section": "nets",
        "text": "Get nets belong to this net class.\nnets"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.nets.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.nets",
        "title": "nets > nets > nets",
        "section": "nets > nets",
        "text": "property EDBNetClassData.nets\n\nGet nets belong to this net class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net_name.html#net_name",
        "title": "net_name",
        "section": "net_name",
        "text": "Get the primitive layer name.\nnet_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net_name.html#pyedb.dotnet.database.edb_data.ports.WavePort.net_name",
        "title": "net_name > net_name > net_name",
        "section": "net_name > net_name",
        "text": "property WavePort.net_name\n\nGet the primitive layer name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_sweep.html#add_sweep",
        "title": "add_sweep",
        "section": "add_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nList of frequency points. The default is None.\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\nadd_sweep\npython:str\noptional\nNone\npython:list\noptional\nNone\npython:str\noptional\n\"interpolation\"\n\"discrete\""
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_sweep.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_sweep",
        "title": "add_sweep > add_sweep > add_sweep",
        "section": "add_sweep > add_sweep",
        "text": "SiwaveSimulationSetup.add_sweep(name: str | None = None, frequency_set: list | None = None, sweep_type: str = 'interpolation', **kwargs)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\nfrequency_set\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nsweep_type\n\npython:str, optional\n\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\n\nReturns\n\n\n\n——-\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_sweep(name=\"sw1\", frequency_set=[\"linear count\", \"1MHz\", \"100MHz\", 10])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.add_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.add_net.html#add_net",
        "title": "add_net",
        "section": "add_net",
        "text": "Add a new net.\nThe name of the net to be added.\nadd_net\npython:str\nobject"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.add_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.add_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.add_net",
        "title": "add_net > add_net > add_net",
        "section": "add_net > add_net",
        "text": "EDBDifferentialPairData.add_net(name)\n\nAdd a new net.\n\nParameters\n\nname\n\npython:str\n\nThe name of the net to be added.\n\nReturns\n\nobject\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin.html#create_voltage_source_on_pin",
        "title": "create_voltage_source_on_pin",
        "section": "create_voltage_source_on_pin",
        "text": "Create a voltage source.\nPositive Pin.\nNegative Pin.\nValue for the voltage. The default is 3.3.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nSource Name.\ncreate_voltage_source_on_pin\nObject\nObject\npython:float\noptional\n3.3\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin.html#pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin",
        "title": "create_voltage_source_on_pin > create_voltage_source_on_pin > create_voltage_source_on_pin",
        "section": "create_voltage_source_on_pin > create_voltage_source_on_pin",
        "text": "EdbSiwave.create_voltage_source_on_pin(pos_pin, neg_pin, voltage_value=3.3, phase_value=0, source_name='')\n\nCreate a voltage source.\n\nParameters\n\npos_pin\n\nObject\n\nPositive Pin.\n\nneg_pin\n\nObject\n\nNegative Pin.\n\nvoltage_value\n\npython:float, optional\n\nValue for the voltage. The default is 3.3.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nSource Name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> pins = edbapp.components.get_pin_from_component(\"U2A5\")\n>>> edbapp.siwave.create_voltage_source_on_pin(pins[0], pins[1], 50, \"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.html#meshoperation",
        "title": "MeshOperation",
        "section": "MeshOperation",
        "text": "Mesh Operation Class.\nMeshOperation.enabled\nWhether if mesh operation is enabled.\nMeshOperation.max_elements\nMaximum number of elements.\nMeshOperation.mesh_operation_type\nMesh operation type.\nMeshOperation.mesh_region\nMesh region name.\nMeshOperation.name\nMesh operation name.\nMeshOperation.net_layer_info\nAdding property for grpc compatibility.\nMeshOperation.nets_layers_list\nList of nets and layers.\nMeshOperation.refine_inside\nWhether to turn on refine inside objects.\nMeshOperation.restrict_max_elements\nWhether to restrict maximum number  of elements.\nMeshOperation.type\n\nMeshOperation\nMeshOperation.enabled\nMeshOperation.max_elements\nMeshOperation.mesh_operation_type\nMeshOperation.mesh_region\nMeshOperation.name\nMeshOperation.net_layer_info\nMeshOperation.nets_layers_list\nMeshOperation.refine_inside\nMeshOperation.restrict_max_elements\nMeshOperation.type"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation",
        "title": "MeshOperation > MeshOperation > MeshOperation",
        "section": "MeshOperation > MeshOperation",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation(parent, edb_object)\n\nMesh Operation Class.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nMeshOperation.enabled\n\nWhether if mesh operation is enabled.\n\nMeshOperation.max_elements\n\nMaximum number of elements.\n\nMeshOperation.mesh_operation_type\n\nMesh operation type.\n\nMeshOperation.mesh_region\n\nMesh region name.\n\nMeshOperation.name\n\nMesh operation name.\n\nMeshOperation.net_layer_info\n\nAdding property for grpc compatibility.\n\nMeshOperation.nets_layers_list\n\nList of nets and layers.\n\nMeshOperation.refine_inside\n\nWhether to turn on refine inside objects.\n\nMeshOperation.restrict_max_elements\n\nWhether to restrict maximum number  of elements.\n\nMeshOperation.type\n\n\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSSPI",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSSPI.html#khfsspi",
        "title": "kHFSSPI",
        "section": "kHFSSPI",
        "text": "kHFSSPI"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSSPI",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSSPI.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSSPI",
        "title": "kHFSSPI > kHFSSPI > kHFSSPI",
        "section": "kHFSSPI > kHFSSPI",
        "text": "SimulationSetupType.kHFSSPI = 'hfss_pi'\n\n"
    },
    {
        "objectID": "user_guide/use_design_variables",
        "href": "user_guide/use_design_variables.html#define-design-variables",
        "title": "Define design variables",
        "section": "Define design variables",
        "text": "This page shows how to define design variables for use by EDB.\nDefine design variables"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.protected_attributes.html#pyedb.configuration.cfg_components.CfgComponent.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgComponent.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete_frequency_sweep.html#delete_frequency_sweep",
        "title": "delete_frequency_sweep",
        "section": "delete_frequency_sweep",
        "text": "Delete a frequency sweep.\ndelete_frequency_sweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete_frequency_sweep.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete_frequency_sweep",
        "title": "delete_frequency_sweep > delete_frequency_sweep > delete_frequency_sweep",
        "section": "delete_frequency_sweep > delete_frequency_sweep",
        "text": "HfssSimulationSetup.delete_frequency_sweep(sweep_data)\n\nDelete a frequency sweep.\n\nParameters\n\nsweep_data\n\nEdbFrequencySweep.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_geometry_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_geometry_type.html#int_to_geometry_type",
        "title": "int_to_geometry_type",
        "section": "int_to_geometry_type",
        "text": "Convert an integer to an EDB.PadGeometryType.\nEDB.PadGeometryType enumerator value.\nint_to_geometry_type\npython:int\nobject"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_geometry_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_geometry_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_geometry_type",
        "title": "int_to_geometry_type > int_to_geometry_type > int_to_geometry_type",
        "section": "int_to_geometry_type > int_to_geometry_type",
        "text": "EDBPadProperties.int_to_geometry_type(val=0)\n\nConvert an integer to an EDB.PadGeometryType.\n\nParameters\n\nval\n\npython:int\n\n\n\nReturns\n\nobject\n\nEDB.PadGeometryType enumerator value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_parameterized",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_parameterized.html#is_parameterized",
        "title": "is_parameterized",
        "section": "is_parameterized",
        "text": "bool: Primitive’s parametrization.\nRead-Only.\nis_parameterized\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_parameterized",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_parameterized.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_parameterized",
        "title": "is_parameterized > is_parameterized > is_parameterized",
        "section": "is_parameterized > is_parameterized",
        "text": "property EdbPolygon.is_parameterized\n\nbool: Primitive’s parametrization.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer_name.html#layer_name",
        "title": "layer_name",
        "section": "layer_name",
        "text": "Get the primitive layer name.\nlayer_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer_name.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer_name",
        "title": "layer_name > layer_name > layer_name",
        "section": "layer_name > layer_name",
        "text": "property EdbPolygon.layer_name\n\nGet the primitive layer name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.get_attributes.html#pyedb.configuration.cfg_ports_sources.CfgSource.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgSource.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_top",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_top.html#add_layer_top",
        "title": "add_layer_top",
        "section": "add_layer_top",
        "text": "Add a layer on top of the stackup.\nName of the layer.\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\nadd_layer_top\npython:str\n\"signal\"\n\"signal\"\n\"dielectric\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_top",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_top.html#pyedb.dotnet.database.stackup.Stackup.add_layer_top",
        "title": "add_layer_top > add_layer_top > add_layer_top",
        "section": "add_layer_top > add_layer_top",
        "text": "Stackup.add_layer_top(name, layer_type='signal', **kwargs)\n\nAdd a layer on top of the stackup.\n\nParameters\n\nname\n\npython:str\n\nName of the layer.\n\nlayer_type: str, optional\n\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\n\nkwargs\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.html#simulationconfigurationdc",
        "title": "SimulationConfigurationDc",
        "section": "SimulationConfigurationDc",
        "text": "Contains all DC analysis settings.\nThe class is part of SimulationConfiguration class as a property.\nSimulationConfigurationDc.dc_compute_inductance\nReturn the boolean for computing the inductance with SIwave DC solver.\nSimulationConfigurationDc.dc_contact_radius\nRetrieve the value for SIwave DC contact radius.\nSimulationConfigurationDc.dc_error_energy\nRetrieve the value for the DC error energy.\nSimulationConfigurationDc.dc_export_thermal_data\nRetrieve the value for using external data.\nSimulationConfigurationDc.dc_full_report_path\nRetrieve the path for the report.\nSimulationConfigurationDc.dc_icepak_temp_file\nRetrieve the icepak temp file path.\nSimulationConfigurationDc.dc_import_thermal_data\nRetrieve the value for importing thermal data.\nSimulationConfigurationDc.dc_max_init_mesh_edge_length\nRetrieve the maximum initial mesh edge value.\nSimulationConfigurationDc.dc_max_num_pass\nRetrieve the maximum number of adaptive passes.\nSimulationConfigurationDc.dc_mesh_bondwires\nRetrieve the value for meshing bondwires.\nSimulationConfigurationDc.dc_mesh_vias\nRetrieve the value for meshing vias.\nSimulationConfigurationDc.dc_min_num_pass\nRetrieve the minimum number of adaptive passes.\nSimulationConfigurationDc.dc_min_plane_area_to_mesh\nRetrieve the value of the minimum plane area to be meshed by Siwave for DC solution.\nSimulationConfigurationDc.dc_min_void_area_to_mesh\nRetrieve the value for the minimum void surface to mesh.\nSimulationConfigurationDc.dc_num_bondwire_sides\nRetrieve the number of sides used for cylinder discretization.\nSimulationConfigurationDc.dc_num_via_sides\nRetrieve the number of sides used for cylinder discretization.\nSimulationConfigurationDc.dc_per_pin_res_path\nRetrieve the file path.\nSimulationConfigurationDc.dc_per_pin_use_pin_format\nRetrieve the value for using pin format.\nSimulationConfigurationDc.dc_percent_local_refinement\nRetrieve the value for local mesh refinement.\nSimulationConfigurationDc.dc_perform_adaptive_refinement\nRetrieve the value for performing adaptive meshing.\nSimulationConfigurationDc.dc_plot_jv\nRetrieve the value for computing current density and voltage distribution.\nSimulationConfigurationDc.dc_refine_bondwires\nRetrieve the value for performing bond wire refinement.\nSimulationConfigurationDc.dc_refine_vias\nRetrieve the value for performing vias refinement.\nSimulationConfigurationDc.dc_report_config_file\nRetrieve the report configuration file path.\nSimulationConfigurationDc.dc_report_show_Active_devices\nRetrieve the value for showing active devices.\nSimulationConfigurationDc.dc_slide_position\nRetrieve the SIwave DC slide position value.\nSimulationConfigurationDc.dc_source_terms_to_ground\nRetrieve the dictionary of grounded terminals.\nSimulationConfigurationDc.dc_use_dc_custom_settings\nRetrieve the value for using DC custom settings.\nSimulationConfigurationDc.dc_use_loop_res_for_per_pin\nRetrieve the value for using the loop resistor per pin.\nSimulationConfigurationDc.dc_via_report_path\nRetrieve the via report file path.\nSimulationConfigurationDc\nSimulationConfigurationDc.dc_compute_inductance\nSimulationConfigurationDc.dc_contact_radius\nSimulationConfigurationDc.dc_error_energy\nSimulationConfigurationDc.dc_export_thermal_data\nSimulationConfigurationDc.dc_full_report_path\nSimulationConfigurationDc.dc_icepak_temp_file\nSimulationConfigurationDc.dc_import_thermal_data\nSimulationConfigurationDc.dc_max_init_mesh_edge_length\nSimulationConfigurationDc.dc_max_num_pass\nSimulationConfigurationDc.dc_mesh_bondwires\nSimulationConfigurationDc.dc_mesh_vias\nSimulationConfigurationDc.dc_min_num_pass\nSimulationConfigurationDc.dc_min_plane_area_to_mesh\nSimulationConfigurationDc.dc_min_void_area_to_mesh\nSimulationConfigurationDc.dc_num_bondwire_sides\nSimulationConfigurationDc.dc_num_via_sides\nSimulationConfigurationDc.dc_per_pin_res_path\nSimulationConfigurationDc.dc_per_pin_use_pin_format\nSimulationConfigurationDc.dc_percent_local_refinement\nSimulationConfigurationDc.dc_perform_adaptive_refinement\nSimulationConfigurationDc.dc_plot_jv\nSimulationConfigurationDc.dc_refine_bondwires\nSimulationConfigurationDc.dc_refine_vias\nSimulationConfigurationDc.dc_report_config_file\nSimulationConfigurationDc.dc_report_show_Active_devices\nSimulationConfigurationDc.dc_slide_position\nSimulationConfigurationDc.dc_source_terms_to_ground\nSimulationConfigurationDc.dc_use_dc_custom_settings\nSimulationConfigurationDc.dc_use_loop_res_for_per_pin\nSimulationConfigurationDc.dc_via_report_path"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc",
        "title": "SimulationConfigurationDc > SimulationConfigurationDc > SimulationConfigurationDc",
        "section": "SimulationConfigurationDc > SimulationConfigurationDc",
        "text": "class pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc\n\nContains all DC analysis settings.\nThe class is part of SimulationConfiguration class as a property.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nSimulationConfigurationDc.dc_compute_inductance\n\nReturn the boolean for computing the inductance with SIwave DC solver.\n\nSimulationConfigurationDc.dc_contact_radius\n\nRetrieve the value for SIwave DC contact radius.\n\nSimulationConfigurationDc.dc_error_energy\n\nRetrieve the value for the DC error energy.\n\nSimulationConfigurationDc.dc_export_thermal_data\n\nRetrieve the value for using external data.\n\nSimulationConfigurationDc.dc_full_report_path\n\nRetrieve the path for the report.\n\nSimulationConfigurationDc.dc_icepak_temp_file\n\nRetrieve the icepak temp file path.\n\nSimulationConfigurationDc.dc_import_thermal_data\n\nRetrieve the value for importing thermal data.\n\nSimulationConfigurationDc.dc_max_init_mesh_edge_length\n\nRetrieve the maximum initial mesh edge value.\n\nSimulationConfigurationDc.dc_max_num_pass\n\nRetrieve the maximum number of adaptive passes.\n\nSimulationConfigurationDc.dc_mesh_bondwires\n\nRetrieve the value for meshing bondwires.\n\nSimulationConfigurationDc.dc_mesh_vias\n\nRetrieve the value for meshing vias.\n\nSimulationConfigurationDc.dc_min_num_pass\n\nRetrieve the minimum number of adaptive passes.\n\nSimulationConfigurationDc.dc_min_plane_area_to_mesh\n\nRetrieve the value of the minimum plane area to be meshed by Siwave for DC solution.\n\nSimulationConfigurationDc.dc_min_void_area_to_mesh\n\nRetrieve the value for the minimum void surface to mesh.\n\nSimulationConfigurationDc.dc_num_bondwire_sides\n\nRetrieve the number of sides used for cylinder discretization.\n\nSimulationConfigurationDc.dc_num_via_sides\n\nRetrieve the number of sides used for cylinder discretization.\n\nSimulationConfigurationDc.dc_per_pin_res_path\n\nRetrieve the file path.\n\nSimulationConfigurationDc.dc_per_pin_use_pin_format\n\nRetrieve the value for using pin format.\n\nSimulationConfigurationDc.dc_percent_local_refinement\n\nRetrieve the value for local mesh refinement.\n\nSimulationConfigurationDc.dc_perform_adaptive_refinement\n\nRetrieve the value for performing adaptive meshing.\n\nSimulationConfigurationDc.dc_plot_jv\n\nRetrieve the value for computing current density and voltage distribution.\n\nSimulationConfigurationDc.dc_refine_bondwires\n\nRetrieve the value for performing bond wire refinement.\n\nSimulationConfigurationDc.dc_refine_vias\n\nRetrieve the value for performing vias refinement.\n\nSimulationConfigurationDc.dc_report_config_file\n\nRetrieve the report configuration file path.\n\nSimulationConfigurationDc.dc_report_show_Active_devices\n\nRetrieve the value for showing active devices.\n\nSimulationConfigurationDc.dc_slide_position\n\nRetrieve the SIwave DC slide position value.\n\nSimulationConfigurationDc.dc_source_terms_to_ground\n\nRetrieve the dictionary of grounded terminals.\n\nSimulationConfigurationDc.dc_use_dc_custom_settings\n\nRetrieve the value for using DC custom settings.\n\nSimulationConfigurationDc.dc_use_loop_res_for_per_pin\n\nRetrieve the value for using the loop resistor per pin.\n\nSimulationConfigurationDc.dc_via_report_path\n\nRetrieve the via report file path.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweeps.html#sweeps",
        "title": "sweeps",
        "section": "sweeps",
        "text": "List of frequency sweeps.\nsweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweeps.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sweeps",
        "title": "sweeps > sweeps > sweeps",
        "section": "sweeps > sweeps",
        "text": "property SiwaveSimulationSetup.sweeps\n\nList of frequency sweeps.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.name.html#name",
        "title": "name",
        "section": "name",
        "text": "name"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.name.html#pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property SimSetupInfo.name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.run",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.run.html#run",
        "title": "run",
        "section": "run",
        "text": "Apply configuration settings to the current design\nrun"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.run",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.run.html#pyedb.configuration.configuration.Configuration.run",
        "title": "run > run > run",
        "section": "run > run",
        "text": "Configuration.run(**kwargs)\n\nApply configuration settings to the current design\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.couple_ports",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.couple_ports.html#couple_ports",
        "title": "couple_ports",
        "section": "couple_ports",
        "text": "Create a bundle wave port.\nPorts to be added.\ncouple_ports\ndotnet.database.ports.WavePort\ndotnet.database.ports.GapPort\npython:list\noptional\ndotnet.database.ports.BundleWavePort"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.couple_ports",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.couple_ports.html#pyedb.dotnet.database.edb_data.ports.GapPort.couple_ports",
        "title": "couple_ports > couple_ports > couple_ports",
        "section": "couple_ports > couple_ports",
        "text": "GapPort.couple_ports(port)\n\nCreate a bundle wave port.\n\nParameters\n\nport\n\ndotnet.database.ports.WavePort, dotnet.database.ports.GapPort, python:list, optional\n\nPorts to be added.\n\nReturns\n\ndotnet.database.ports.BundleWavePort\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_elements.html#max_elements",
        "title": "max_elements",
        "section": "max_elements",
        "text": "Maximum number of elements.\nmax_elements\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_elements.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_elements",
        "title": "max_elements > max_elements > max_elements",
        "section": "max_elements > max_elements",
        "text": "property LengthMeshOperation.max_elements\n\nMaximum number of elements.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_dielectric_property_values",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_dielectric_property_values.html#default_dielectric_property_values",
        "title": "default_dielectric_property_values",
        "section": "default_dielectric_property_values",
        "text": "default_dielectric_property_values"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_dielectric_property_values",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_dielectric_property_values.html#pyedb.dotnet.database.materials.Materials.default_dielectric_property_values",
        "title": "default_dielectric_property_values > default_dielectric_property_values > default_dielectric_property_values",
        "section": "default_dielectric_property_values > default_dielectric_property_values",
        "text": "Materials.default_dielectric_property_values = {'conductivity': 0, 'dielectric_loss_tangent': 0.02, 'magnetic_loss_tangent': 0, 'mass_density': 1900, 'permeability': 1, 'permittivity': 4.4, 'poisson_ratio': 0.28, 'specific_heat': 1150, 'thermal_conductivity': 0.294, 'thermal_expansion_coefficient': 1.5e-05, 'youngs_modulus': 11000000000}\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_bounding_box",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_bounding_box.html#get_bounding_box",
        "title": "get_bounding_box",
        "section": "get_bounding_box",
        "text": "Get the layout bounding box.\nBounding box as a [lower-left X, lower-left Y], [upper-right X, upper-right Y]) pair in meters.\nget_bounding_box\npython:list\nof\npython:list\nof\ndouble"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_bounding_box",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_bounding_box.html#pyedb.dotnet.edb.Edb.get_bounding_box",
        "title": "get_bounding_box > get_bounding_box > get_bounding_box",
        "section": "get_bounding_box > get_bounding_box",
        "text": "Edb.get_bounding_box()\n\nGet the layout bounding box.\n\nReturns\n\npython:list of python:list of double\n\nBounding box as a [lower-left X, lower-left Y], [upper-right X, upper-right Y]) pair in meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.export_definition",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.export_definition.html#export_definition",
        "title": "export_definition",
        "section": "export_definition",
        "text": "Export component definitions to json file.\nFile path of json file.\nexport_definition\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.export_definition",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.export_definition.html#pyedb.dotnet.database.components.Components.export_definition",
        "title": "export_definition > export_definition > export_definition",
        "section": "export_definition > export_definition",
        "text": "Components.export_definition(file_path)\n\nExport component definitions to json file.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path of json file.\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_conductor_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_conductor_material.html#add_conductor_material",
        "title": "add_conductor_material",
        "section": "add_conductor_material",
        "text": "Add a new conductor material.\nName of the new material.\nConductivity of the new material.\nadd_conductor_material\npython:str\npython:str\npython:float\npython:int\noptional\npyedb.dotnet.database.materials.Material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_conductor_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_conductor_material.html#pyedb.dotnet.database.materials.Materials.add_conductor_material",
        "title": "add_conductor_material > add_conductor_material > add_conductor_material",
        "section": "add_conductor_material > add_conductor_material",
        "text": "Materials.add_conductor_material(name, conductivity=58000000, **kwargs)\n\nAdd a new conductor material.\n\nParameters\n\nname\n\npython:str\n\nName of the new material.\n\nconductivity\n\npython:str, python:float, python:int, optional\n\nConductivity of the new material.\n\nReturns\n\npyedb.dotnet.database.materials.Material\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.snap_length_threshold",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.snap_length_threshold.html#snap_length_threshold",
        "title": "snap_length_threshold",
        "section": "snap_length_threshold",
        "text": "Snapping length threshold.\nsnap_length_threshold\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.snap_length_threshold",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.snap_length_threshold.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.snap_length_threshold",
        "title": "snap_length_threshold > snap_length_threshold > snap_length_threshold",
        "section": "snap_length_threshold > snap_length_threshold",
        "text": "property AdvancedSettings.snap_length_threshold\n\nSnapping length threshold.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.limits",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.limits.html#limits",
        "title": "limits",
        "section": "limits",
        "text": "Retrieve stackup limits.\nWhether to retrieve only metals. The default is False.\nTrue when successful, False when failed.\nlimits\noptional\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.limits",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.limits.html#pyedb.dotnet.database.stackup.Stackup.limits",
        "title": "limits > limits > limits",
        "section": "limits > limits",
        "text": "Stackup.limits(only_metals=False)\n\nRetrieve stackup limits.\n\nParameters\n\nonly_metals\n\nbool, optional\n\nWhether to retrieve only metals. The default is False.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kNumMeshOpTypes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kNumMeshOpTypes.html#knummeshoptypes",
        "title": "kNumMeshOpTypes",
        "section": "kNumMeshOpTypes",
        "text": "kNumMeshOpTypes"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kNumMeshOpTypes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kNumMeshOpTypes.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kNumMeshOpTypes",
        "title": "kNumMeshOpTypes > kNumMeshOpTypes > kNumMeshOpTypes",
        "section": "kNumMeshOpTypes > kNumMeshOpTypes",
        "text": "MeshOpType.kNumMeshOpTypes = 'num_mesh_op_types'\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.html#sweepdata",
        "title": "SweepData",
        "section": "SweepData",
        "text": "Manages EDB methods for a frequency sweep.\nName of the frequency sweep.\nEDB object. The default is None.\nSweepData.add(sweep_type, start, stop, increment)\n\nSweepData.add_frequencies(frequencies)\n\nSweepData.clear()\n\nSweepData.set_frequencies([frequency_list, ...])\nSet frequency list to the sweep frequencies.\nSweepData.set_frequencies_linear_count([...])\nSet a linear count frequency sweep.\nSweepData.set_frequencies_linear_scale([...])\nSet a linear scale frequency sweep.\nSweepData.set_frequencies_log_scale([start, ...])\nSet a log-count frequency sweep.\nSweepData.adaptive_sampling\nFlag indicating if adaptive sampling is turned on.\nSweepData.adv_dc_extrapolation\nFlag indicating if advanced DC extrapolation is turned on.\nSweepData.auto_s_mat_only_solve\nFlag indicating if Auto SMatrix only solve is turned on.\nSweepData.compute_dc_point\nFlag indicating if computing the exact DC point is turned on.\nSweepData.enforce_causality\nFlag indicating if causality is enforced.\nSweepData.enforce_dc_and_causality\nFlag indicating if DC point and causality are enforced.\nSweepData.enforce_passivity\nFlag indicating if passivity is enforced.\nSweepData.freq_sweep_type\nSweep type.\nSweepData.frequencies\nList of frequency points.\nSweepData.frequency_string\nA string describing the frequency sweep.\nSweepData.interpolation_use_full_basis\nFlag indicating if full-basis elements is used.\nSweepData.interpolation_use_port_impedance\nFlag indicating if port impedance interpolation is turned on.\nSweepData.interpolation_use_prop_const\nFlag indicating if propagation constants are used.\nSweepData.interpolation_use_s_matrix\nFlag indicating if the S matrix is used.\nSweepData.max_solutions\nNumber of maximum solutions.\nSweepData.min_freq_s_mat_only_solve\nMinimum frequency SMatrix only solve.\nSweepData.min_solved_freq\nMinimum solved frequency with units.\nSweepData.name\nName of the sweep.\nSweepData.passivity_tolerance\nTolerance for passivity enforcement.\nSweepData.relative_s_error\nS-parameter error tolerance.\nSweepData.save_fields\nFlag indicating if the extraction of surface current data is turned on.\nSweepData.save_rad_fields_only\nFlag indicating if the saving of only radiated fields is turned on.\nSweepData.type\nSweep type.\nSweepData.use_q3d_for_dc\nFlag indicating if the Q3D solver is used for DC point extraction.\nSweepData\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup\npython:str\noptional\nAnsys.Ansoft.Edb.Utility.SIWDCIRSimulationSettings\noptional\nNone\nSweepData.add\nSweepData.add_frequencies\nSweepData.clear\nSweepData.set_frequencies\nSweepData.set_frequencies_linear_count\nSweepData.set_frequencies_linear_scale\nSweepData.set_frequencies_log_scale\nSweepData.adaptive_sampling\nSweepData.adv_dc_extrapolation\nSweepData.auto_s_mat_only_solve\nSweepData.compute_dc_point\nSweepData.enforce_causality\nSweepData.enforce_dc_and_causality\nSweepData.enforce_passivity\nSweepData.freq_sweep_type\nSweepData.frequencies\nSweepData.frequency_string\nSweepData.interpolation_use_full_basis\nSweepData.interpolation_use_port_impedance\nSweepData.interpolation_use_prop_const\nSweepData.interpolation_use_s_matrix\nSweepData.max_solutions\nSweepData.min_freq_s_mat_only_solve\nSweepData.min_solved_freq\nSweepData.name\nSweepData.passivity_tolerance\nSweepData.relative_s_error\nSweepData.save_fields\nSweepData.save_rad_fields_only\nSweepData.type\nSweepData.use_q3d_for_dc"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData",
        "title": "SweepData > SweepData > SweepData",
        "section": "SweepData > SweepData",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData(pedb, edb_object=None, name: str | None = None, sim_setup=None)\n\nManages EDB methods for a frequency sweep.\n\nParameters\n\nsim_setup\n\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup\n\n\n\nname\n\npython:str, optional\n\nName of the frequency sweep.\n\nedb_object\n\nAnsys.Ansoft.Edb.Utility.SIWDCIRSimulationSettings, optional\n\nEDB object. The default is None.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSweepData.add(sweep_type, start, stop, increment)\n\n\n\nSweepData.add_frequencies(frequencies)\n\n\n\nSweepData.clear()\n\n\n\nSweepData.set_frequencies([frequency_list, ...])\n\nSet frequency list to the sweep frequencies.\n\nSweepData.set_frequencies_linear_count([...])\n\nSet a linear count frequency sweep.\n\nSweepData.set_frequencies_linear_scale([...])\n\nSet a linear scale frequency sweep.\n\nSweepData.set_frequencies_log_scale([start, ...])\n\nSet a log-count frequency sweep.\n\n\n\nAttributes\n\n\n\n\n\n\n\nSweepData.adaptive_sampling\n\nFlag indicating if adaptive sampling is turned on.\n\nSweepData.adv_dc_extrapolation\n\nFlag indicating if advanced DC extrapolation is turned on.\n\nSweepData.auto_s_mat_only_solve\n\nFlag indicating if Auto SMatrix only solve is turned on.\n\nSweepData.compute_dc_point\n\nFlag indicating if computing the exact DC point is turned on.\n\nSweepData.enforce_causality\n\nFlag indicating if causality is enforced.\n\nSweepData.enforce_dc_and_causality\n\nFlag indicating if DC point and causality are enforced.\n\nSweepData.enforce_passivity\n\nFlag indicating if passivity is enforced.\n\nSweepData.freq_sweep_type\n\nSweep type.\n\nSweepData.frequencies\n\nList of frequency points.\n\nSweepData.frequency_string\n\nA string describing the frequency sweep.\n\nSweepData.interpolation_use_full_basis\n\nFlag indicating if full-basis elements is used.\n\nSweepData.interpolation_use_port_impedance\n\nFlag indicating if port impedance interpolation is turned on.\n\nSweepData.interpolation_use_prop_const\n\nFlag indicating if propagation constants are used.\n\nSweepData.interpolation_use_s_matrix\n\nFlag indicating if the S matrix is used.\n\nSweepData.max_solutions\n\nNumber of maximum solutions.\n\nSweepData.min_freq_s_mat_only_solve\n\nMinimum frequency SMatrix only solve.\n\nSweepData.min_solved_freq\n\nMinimum solved frequency with units.\n\nSweepData.name\n\nName of the sweep.\n\nSweepData.passivity_tolerance\n\nTolerance for passivity enforcement.\n\nSweepData.relative_s_error\n\nS-parameter error tolerance.\n\nSweepData.save_fields\n\nFlag indicating if the extraction of surface current data is turned on.\n\nSweepData.save_rad_fields_only\n\nFlag indicating if the saving of only radiated fields is turned on.\n\nSweepData.type\n\nSweep type.\n\nSweepData.use_q3d_for_dc\n\nFlag indicating if the Q3D solver is used for DC point extraction.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.are_port_reference_terminals_connected",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.are_port_reference_terminals_connected.html#are_port_reference_terminals_connected",
        "title": "are_port_reference_terminals_connected",
        "section": "are_port_reference_terminals_connected",
        "text": "Check if all terminal references in design are connected.\nIf the reference nets are different, there is no hope for the terminal references to be connected.\nAfter we have identified a common reference net we need to loop the terminals again to get\nthe correct reference terminals that uses that net.\nCommon Reference name. If None it will be searched in ports terminal.\nIf a string is passed then all excitations must have such reference assigned.\nEither if the ports are connected to reference_name or not.\nare_port_reference_terminals_connected\npython:str\noptional\nNone"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.are_port_reference_terminals_connected",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.are_port_reference_terminals_connected.html#pyedb.dotnet.edb.Edb.are_port_reference_terminals_connected",
        "title": "are_port_reference_terminals_connected > are_port_reference_terminals_connected > are_port_reference_terminals_connected",
        "section": "are_port_reference_terminals_connected > are_port_reference_terminals_connected",
        "text": "Edb.are_port_reference_terminals_connected(common_reference=None)\n\nCheck if all terminal references in design are connected.\nIf the reference nets are different, there is no hope for the terminal references to be connected.\nAfter we have identified a common reference net we need to loop the terminals again to get\nthe correct reference terminals that uses that net.\n\nParameters\n\ncommon_reference\n\npython:str, optional\n\nCommon Reference name. If None it will be searched in ports terminal.\nIf a string is passed then all excitations must have such reference assigned.\n\nReturns\n\nbool\n\nEither if the ports are connected to reference_name or not.\n\nExamples\n\n>>> from pyedb import Edb\n>>>edb = Edb()\n>>> edb.hfss.create_edge_port_vertical(prim_1_id, [\"-66mm\", \"-4mm\"], \"port_ver\")\n>>> edb.hfss.create_edge_port_horizontal(\n>>> ... prim_1_id, [\"-60mm\", \"-4mm\"], prim_2_id, [\"-59mm\", \"-4mm\"], \"port_hori\", 30, \"Lower\"\n>>> ... )\n>>> edb.hfss.create_wave_port(traces[0].id, trace_paths[0][0], \"wave_port\")\n>>> edb.cutout([\"Net1\"])\n>>> assert edb.are_port_reference_terminals_connected()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_max_refinement",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_max_refinement.html#use_max_refinement",
        "title": "use_max_refinement",
        "section": "use_max_refinement",
        "text": "Whether to turn on maximum refinement.\nTrue if maximum refinement is used, False otherwise.\nuse_max_refinement\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_max_refinement",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_max_refinement.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_max_refinement",
        "title": "use_max_refinement > use_max_refinement > use_max_refinement",
        "section": "use_max_refinement > use_max_refinement",
        "text": "property AdaptiveSettings.use_max_refinement\n\nWhether to turn on maximum refinement.\n\nReturns\n\nbool\n\nTrue if maximum refinement is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_region",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_region.html#mesh_region",
        "title": "mesh_region",
        "section": "mesh_region",
        "text": "Mesh region name.\nName of the mesh region.\nmesh_region\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_region",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_region.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_region",
        "title": "mesh_region > mesh_region > mesh_region",
        "section": "mesh_region > mesh_region",
        "text": "property LengthMeshOperation.mesh_region\n\nMesh region name.\n\nReturns\n\npython:str\n\nName of the mesh region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.mesh_operations.html#mesh_operations",
        "title": "mesh_operations",
        "section": "mesh_operations",
        "text": "mesh_operations"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.mesh_operations.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.mesh_operations",
        "title": "mesh_operations > mesh_operations > mesh_operations",
        "section": "mesh_operations > mesh_operations",
        "text": "property SiwaveDCSimulationSetup.mesh_operations\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent_enabled.html#air_box_negative_vertical_extent_enabled",
        "title": "air_box_negative_vertical_extent_enabled",
        "section": "air_box_negative_vertical_extent_enabled",
        "text": "Whether negative vertical extent is enabled for the air box.\nair_box_negative_vertical_extent_enabled"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent_enabled.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent_enabled",
        "title": "air_box_negative_vertical_extent_enabled > air_box_negative_vertical_extent_enabled > air_box_negative_vertical_extent_enabled",
        "section": "air_box_negative_vertical_extent_enabled > air_box_negative_vertical_extent_enabled",
        "text": "property HfssExtentInfo.air_box_negative_vertical_extent_enabled\n\nWhether negative vertical extent is enabled for the air box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.min_triangles_wave_port",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.min_triangles_wave_port.html#min_triangles_wave_port",
        "title": "min_triangles_wave_port",
        "section": "min_triangles_wave_port",
        "text": "Minimum number of triangles allowed for wave ports.\nmin_triangles_wave_port\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.min_triangles_wave_port",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.min_triangles_wave_port.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.min_triangles_wave_port",
        "title": "min_triangles_wave_port > min_triangles_wave_port > min_triangles_wave_port",
        "section": "min_triangles_wave_port > min_triangles_wave_port",
        "text": "property HfssPortSettings.min_triangles_wave_port\n\nMinimum number of triangles allowed for wave ports.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_pin_group.html#create_pin_group",
        "title": "create_pin_group",
        "section": "create_pin_group",
        "text": "Create a PinGroup.\nParameters\nname : str,\nName of the PinGroup.\nList of pins by ID.\nList of pins by AEDT name.\nList of pins by name.\ncreate_pin_group"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_pin_group.html#pyedb.dotnet.database.modeler.Modeler.create_pin_group",
        "title": "create_pin_group > create_pin_group > create_pin_group",
        "section": "create_pin_group > create_pin_group",
        "text": "Modeler.create_pin_group(name: str, pins_by_id=None, pins_by_aedt_name=None, pins_by_name=None)\n\nCreate a PinGroup.\n\nParameters\nname : str,\n\nName of the PinGroup.\n\npins_by_id\n\nlist[int] or None\n\nList of pins by ID.\n\npins_by_aedt_name\n\nlist[str] or None\n\nList of pins by AEDT name.\n\npins_by_name\n\nlist[str] or None\n\nList of pins by name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Edb Dotnet Api Database Edb.Net.Create.\ncreate"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.create.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "EDBNetsData.create(layout, name)\n\nEdb Dotnet Api Database Edb.Net.Create.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.get_configurations.html#get_configurations",
        "title": "get_configurations",
        "section": "get_configurations",
        "text": "Get all attributes.\nget_configurations\npython:dict"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.get_configurations.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.get_configurations",
        "title": "get_configurations > get_configurations > get_configurations",
        "section": "get_configurations > get_configurations",
        "text": "AdvancedSettings.get_configurations()\n\nGet all attributes.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.find_by_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.find_by_name.html#find_by_name",
        "title": "find_by_name",
        "section": "find_by_name",
        "text": "Edb Dotnet Api Database Edb.DifferentialPair.FindByName.\nfind_by_name"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.find_by_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.find_by_name.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.find_by_name",
        "title": "find_by_name > find_by_name > find_by_name",
        "section": "find_by_name > find_by_name",
        "text": "EDBDifferentialPairData.find_by_name(layout, net)\n\nEdb Dotnet Api Database Edb.DifferentialPair.FindByName.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_pin.html#create_voltage_source_on_pin",
        "title": "create_voltage_source_on_pin",
        "section": "create_voltage_source_on_pin",
        "text": "Create a voltage source.\nPositive Pin.\nNegative Pin.\nValue for the voltage. The default is 3.3.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nSource Name.\ncreate_voltage_source_on_pin\nObject\nObject\npython:float\noptional\n3.3\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_pin.html#pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_pin",
        "title": "create_voltage_source_on_pin > create_voltage_source_on_pin > create_voltage_source_on_pin",
        "section": "create_voltage_source_on_pin > create_voltage_source_on_pin",
        "text": "EdbHfss.create_voltage_source_on_pin(pos_pin, neg_pin, voltage_value=3.3, phase_value=0, source_name='')\n\nCreate a voltage source.\n\nParameters\n\npos_pin\n\nObject\n\nPositive Pin.\n\nneg_pin\n\nObject\n\nNegative Pin.\n\nvoltage_value\n\npython:float, optional\n\nValue for the voltage. The default is 3.3.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nSource Name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> pins =edbapp.components.get_pin_from_component(\"U2A5\")\n>>> edbapp.hfss.create_voltage_source_on_pin(pins[0], pins[1],50,\"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.can_be_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.can_be_zone_primitive.html#can_be_zone_primitive",
        "title": "can_be_zone_primitive",
        "section": "can_be_zone_primitive",
        "text": "bool: If a primitive can be a zone.\nRead-Only.\ncan_be_zone_primitive\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.can_be_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.can_be_zone_primitive.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.can_be_zone_primitive",
        "title": "can_be_zone_primitive > can_be_zone_primitive > can_be_zone_primitive",
        "section": "can_be_zone_primitive > can_be_zone_primitive",
        "text": "property EdbPolygon.can_be_zone_primitive\n\nbool: If a primitive can be a zone.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_api",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_api.html#edb_api",
        "title": "edb_api",
        "section": "edb_api",
        "text": "Edb Dotnet Api class.\nedb_api\npyedb.dotnet.database.dotnet.database.CellDotNet"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_api",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_api.html#pyedb.dotnet.edb.Edb.edb_api",
        "title": "edb_api > edb_api > edb_api",
        "section": "edb_api > edb_api",
        "text": "property Edb.edb_api\n\nEdb Dotnet Api class.\n\nReturns\n\npyedb.dotnet.database.dotnet.database.CellDotNet\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_zone_primitive.html#is_zone_primitive",
        "title": "is_zone_primitive",
        "section": "is_zone_primitive",
        "text": "bool: If primitive object is a zone.\nRead-Only.\nis_zone_primitive\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_zone_primitive.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_zone_primitive",
        "title": "is_zone_primitive > is_zone_primitive > is_zone_primitive",
        "section": "is_zone_primitive > is_zone_primitive",
        "text": "property EdbPolygon.is_zone_primitive\n\nbool: If primitive object is a zone.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_simulation_settings.html#set_simulation_settings",
        "title": "set_simulation_settings",
        "section": "set_simulation_settings",
        "text": "set_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_simulation_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_simulation_settings",
        "title": "set_simulation_settings > set_simulation_settings > set_simulation_settings",
        "section": "set_simulation_settings > set_simulation_settings",
        "text": "HFSSPISimulationSetup.set_simulation_settings(sim_settings: dict)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_radiation_boundary",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_radiation_boundary.html#use_radiation_boundary",
        "title": "use_radiation_boundary",
        "section": "use_radiation_boundary",
        "text": "Retrieve the boolean to use radiation boundary with HFSS.\nTrue activated, False deactivated.\nuse_radiation_boundary\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_radiation_boundary",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_radiation_boundary.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_radiation_boundary",
        "title": "use_radiation_boundary > use_radiation_boundary > use_radiation_boundary",
        "section": "use_radiation_boundary > use_radiation_boundary",
        "text": "property SimulationConfigurationBatch.use_radiation_boundary\n\nRetrieve the boolean to use radiation boundary with HFSS.\n\nReturns\n\nbool\n\nTrue activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_edge_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_edge_terminal_reference_primitive.html#get_edge_terminal_reference_primitive",
        "title": "get_edge_terminal_reference_primitive",
        "section": "get_edge_terminal_reference_primitive",
        "text": "Check and  return a primitive instance that serves Edge ports,\nwave ports and coupled edge ports that are directly connedted to primitives.\nget_edge_terminal_reference_primitive\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_edge_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_edge_terminal_reference_primitive.html#pyedb.dotnet.database.edb_data.ports.GapPort.get_edge_terminal_reference_primitive",
        "title": "get_edge_terminal_reference_primitive > get_edge_terminal_reference_primitive > get_edge_terminal_reference_primitive",
        "section": "get_edge_terminal_reference_primitive > get_edge_terminal_reference_primitive",
        "text": "GapPort.get_edge_terminal_reference_primitive()\n\nCheck and  return a primitive instance that serves Edge ports,\nwave ports and coupled edge ports that are directly connedted to primitives.\n\nReturns\n\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_self_intersections",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_self_intersections.html#has_self_intersections",
        "title": "has_self_intersections",
        "section": "has_self_intersections",
        "text": "Check if Polygon has self intersections.\nhas_self_intersections"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_self_intersections",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_self_intersections.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_self_intersections",
        "title": "has_self_intersections > has_self_intersections > has_self_intersections",
        "section": "has_self_intersections > has_self_intersections",
        "text": "property EdbPolygon.has_self_intersections\n\nCheck if Polygon has self intersections.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "Apply net on layout.\napply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.apply.html#pyedb.configuration.cfg_nets.CfgNets.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgNets.apply()\n\nApply net on layout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.components",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.components.html#components",
        "title": "components",
        "section": "components",
        "text": "Dictionary of components.\ncomponents"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.components",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.components.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.components",
        "title": "components > components > components",
        "section": "components > components",
        "text": "property EDBExtendedNetData.components\n\nDictionary of components.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_pin.html#is_pin",
        "title": "is_pin",
        "section": "is_pin",
        "text": "Determines whether this padstack instance is a layout pin.\nTrue if this padstack type is a layout pin, False otherwise.\nis_pin"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_pin.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_pin",
        "title": "is_pin > is_pin > is_pin",
        "section": "is_pin > is_pin",
        "text": "property EDBPadstackInstance.is_pin\n\nDetermines whether this padstack instance is a layout pin.\n\nReturns\n\nbool\n\nTrue if this padstack type is a layout pin, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_top",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_top.html#backdrill_top",
        "title": "backdrill_top",
        "section": "backdrill_top",
        "text": "Backdrill layer from top.\nTuple of the layer name, drill diameter, and offset if it exists.\nbackdrill_top\npython:tuple"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_top",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_top.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_top",
        "title": "backdrill_top > backdrill_top > backdrill_top",
        "section": "backdrill_top > backdrill_top",
        "text": "property EDBPadstackInstance.backdrill_top\n\nBackdrill layer from top.\n\nReturns\n\npython:tuple\n\nTuple of the layer name, drill diameter, and offset if it exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.curve_approx_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.curve_approx_settings.html#curve_approx_settings",
        "title": "curve_approx_settings",
        "section": "curve_approx_settings",
        "text": "Curve approximation settings Class.\ncurve_approx_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.CurveApproxSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.curve_approx_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.curve_approx_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.curve_approx_settings",
        "title": "curve_approx_settings > curve_approx_settings > curve_approx_settings",
        "section": "curve_approx_settings > curve_approx_settings",
        "text": "property HfssSimulationSetup.curve_approx_settings\n\nCurve approximation settings Class.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.CurveApproxSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.short_component_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.short_component_pins.html#short_component_pins",
        "title": "short_component_pins",
        "section": "short_component_pins",
        "text": "Short pins of component with a trace.\nName of the component.\nList of pins to short. If None, all pins will be shorted.\nShort Trace width. It will be used in trace computation algorithm\nTrue when successful, False when failed.\nshort_component_pins\npython:str\npython:list\noptional\npython:float\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.short_component_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.short_component_pins.html#pyedb.dotnet.database.components.Components.short_component_pins",
        "title": "short_component_pins > short_component_pins > short_component_pins",
        "section": "short_component_pins > short_component_pins",
        "text": "Components.short_component_pins(component_name, pins_to_short=None, width=0.001)\n\nShort pins of component with a trace.\n\nParameters\n\ncomponent_name\n\npython:str\n\nName of the component.\n\npins_to_short\n\npython:list, optional\n\nList of pins to short. If None, all pins will be shorted.\n\nwidth\n\npython:float, optional\n\nShort Trace width. It will be used in trace computation algorithm\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.short_component_pins(\"J4A2\", [\"G4\", \"9\", \"3\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/PortsData",
        "href": "api/edb_data/PortsData.html#ports",
        "title": "Ports",
        "section": "Ports",
        "text": "These classes are the containers of ports methods of the EDB for both HFSS and SIwave.\nGapPort\nManages gap port properties.\nWavePort\nManages wave port properties.\nPorts\nGapPort\nWavePort"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_name",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_name.html#sweep_name",
        "title": "sweep_name",
        "section": "sweep_name",
        "text": "Retrieve frequency sweep name.\nsweep_name\npython:str\nThe\nname\nof\nthe\nfrequency\nsweep\ndefined\nin\nthe"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_name",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_name.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_name",
        "title": "sweep_name > sweep_name > sweep_name",
        "section": "sweep_name > sweep_name",
        "text": "property SimulationConfigurationAc.sweep_name\n\nRetrieve frequency sweep name.\n\nReturns\n\npython:str\n\n\n\nThe name of the frequency sweep defined in the project.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/padstacks/index",
        "href": "user_guide/padstacks/index.html#work-with-a-padstack",
        "title": "Work with a padstack",
        "section": "Work with a padstack",
        "text": "Learn how to edit a padstack definition, setting all anti-pad values to a fixed value.\nLearn how to create a padstack instance.\nWork with a padstack"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_component_file",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_component_file.html#icepak_component_file",
        "title": "icepak_component_file",
        "section": "icepak_component_file",
        "text": "Icepak component file path.\nicepak_component_file"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_component_file",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_component_file.html#pyedb.dotnet.database.siwave.EdbSiwave.icepak_component_file",
        "title": "icepak_component_file > icepak_component_file > icepak_component_file",
        "section": "icepak_component_file > icepak_component_file",
        "text": "property EdbSiwave.icepak_component_file\n\nIcepak component file path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_layout_bounding_box",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_layout_bounding_box.html#get_layout_bounding_box",
        "title": "get_layout_bounding_box",
        "section": "get_layout_bounding_box",
        "text": "Evaluate the layout bounding box.\nEdb layout.\nDigit Resolution. The default value is 6.\n[lower left corner X, lower left corner, upper right corner X, upper right corner Y].\nget_layout_bounding_box\npython:int\noptional\n6\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_layout_bounding_box",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_layout_bounding_box.html#pyedb.dotnet.database.hfss.EdbHfss.get_layout_bounding_box",
        "title": "get_layout_bounding_box > get_layout_bounding_box > get_layout_bounding_box",
        "section": "get_layout_bounding_box > get_layout_bounding_box",
        "text": "EdbHfss.get_layout_bounding_box(layout=None, digit_resolution=6)\n\nEvaluate the layout bounding box.\n\nParameters\n\nlayout\n\nEdb layout.\n\ndigit_resolution\n\npython:int, optional\n\nDigit Resolution. The default value is 6.\n\nReturns\n\npython:list\n\n[lower left corner X, lower left corner, upper right corner X, upper right corner Y].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_voltage_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_voltage_source.html#is_voltage_source",
        "title": "is_voltage_source",
        "section": "is_voltage_source",
        "text": "Whether it is a voltage source.\nis_voltage_source"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_voltage_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_voltage_source.html#pyedb.dotnet.database.edb_data.ports.GapPort.is_voltage_source",
        "title": "is_voltage_source > is_voltage_source > is_voltage_source",
        "section": "is_voltage_source > is_voltage_source",
        "text": "property GapPort.is_voltage_source\n\nWhether it is a voltage source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.solver_slider_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.solver_slider_type.html#solver_slider_type",
        "title": "solver_slider_type",
        "section": "solver_slider_type",
        "text": "Solver slider type.\nOptions are:\n1 - Fast.\n2 - Medium.\n3 - Accurate.\nsolver_slider_type\nFast\nMedium\nAccurate\npython:int"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.solver_slider_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.solver_slider_type.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.solver_slider_type",
        "title": "solver_slider_type > solver_slider_type > solver_slider_type",
        "section": "solver_slider_type > solver_slider_type",
        "text": "property HfssSimulationSetup.solver_slider_type\n\nSolver slider type.\nOptions are:\n1 - Fast.\n2 - Medium.\n3 - Accurate.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.generate_extended_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.generate_extended_nets.html#generate_extended_nets",
        "title": "generate_extended_nets",
        "section": "generate_extended_nets",
        "text": "Get extended net and associated components.\nThreshold of resistor value. Search extended net across resistors which has value lower than the threshold.\nThreshold of inductor value. Search extended net across inductances which has value lower than the\nthreshold.\nThreshold of capacitor value. Search extended net across capacitors which has value higher than the\nthreshold.\nList of components to bypass when performing threshold checks. Components\nin the list are considered as serial components. The default is None.\nWhether to generate extended signal nets. The default is True.\nWhether to generate extended power nets. The default is True.\nList of all extended nets.\ngenerate_extended_nets\npython:int\npython:float\noptional\npython:int\npython:float\noptional\npython:int\npython:float\noptional\npython:list\noptional\nNone\npython:str\noptional\nTrue\npython:str\noptional\nTrue\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.generate_extended_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.generate_extended_nets.html#pyedb.dotnet.database.nets.EdbNets.generate_extended_nets",
        "title": "generate_extended_nets > generate_extended_nets > generate_extended_nets",
        "section": "generate_extended_nets > generate_extended_nets",
        "text": "EdbNets.generate_extended_nets(resistor_below: int | float = 10, inductor_below: int | float = 1, capacitor_above: int | float = 1, exception_list: list | None = None, include_signal: bool = True, include_power: bool = True) -> list\n\nGet extended net and associated components.\n\nParameters\n\nresistor_below\n\npython:int, python:float, optional\n\nThreshold of resistor value. Search extended net across resistors which has value lower than the threshold.\n\ninductor_below\n\npython:int, python:float, optional\n\nThreshold of inductor value. Search extended net across inductances which has value lower than the\nthreshold.\n\ncapacitor_above\n\npython:int, python:float, optional\n\nThreshold of capacitor value. Search extended net across capacitors which has value higher than the\nthreshold.\n\nexception_list\n\npython:list, optional\n\nList of components to bypass when performing threshold checks. Components\nin the list are considered as serial components. The default is None.\n\ninclude_signal\n\npython:str, optional\n\nWhether to generate extended signal nets. The default is True.\n\ninclude_power\n\npython:str, optional\n\nWhether to generate extended power nets. The default is True.\n\nReturns\n\npython:list\n\nList of all extended nets.\n\nExamples\n\n>>> from pyedb import Edb\n>>> app = Edb()\n>>> app.nets.get_extended_nets()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.icepak",
        "href": "api/_autosummary/pyedb.siwave.Siwave.icepak.html#icepak",
        "title": "icepak",
        "section": "icepak",
        "text": "icepak"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.icepak",
        "href": "api/_autosummary/pyedb.siwave.Siwave.icepak.html#pyedb.siwave.Siwave.icepak",
        "title": "icepak > icepak > icepak",
        "section": "icepak > icepak",
        "text": "property Siwave.icepak\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.type.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property SimulationSetup.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_delta",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_delta.html#max_delta",
        "title": "max_delta",
        "section": "max_delta",
        "text": "Maximum change of S-parameters between two consecutive passes, which serves as\na stopping criterion.\nmax_delta\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_delta",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_delta.html#pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_delta",
        "title": "max_delta > max_delta > max_delta",
        "section": "max_delta > max_delta",
        "text": "property AdaptiveFrequencyData.max_delta\n\nMaximum change of S-parameters between two consecutive passes, which serves as\na stopping criterion.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_surface",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_surface.html#occupying_surface",
        "title": "occupying_surface",
        "section": "occupying_surface",
        "text": "occupying_surface"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_surface",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_surface.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_surface",
        "title": "occupying_surface > occupying_surface > occupying_surface",
        "section": "occupying_surface > occupying_surface",
        "text": "property EDBStatistics.occupying_surface\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_range_names",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_range_names.html#layer_range_names",
        "title": "layer_range_names",
        "section": "layer_range_names",
        "text": "List of all layers to which the padstack instance belongs.\nlayer_range_names"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_range_names",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_range_names.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_range_names",
        "title": "layer_range_names > layer_range_names > layer_range_names",
        "section": "layer_range_names > layer_range_names",
        "text": "property EDBPadstackInstance.layer_range_names\n\nList of all layers to which the padstack instance belongs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_discrete_components",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_discrete_components.html#num_discrete_components",
        "title": "num_discrete_components",
        "section": "num_discrete_components",
        "text": "num_discrete_components"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_discrete_components",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_discrete_components.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_discrete_components",
        "title": "num_discrete_components > num_discrete_components > num_discrete_components",
        "section": "num_discrete_components > num_discrete_components",
        "text": "property EDBStatistics.num_discrete_components\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.full_dc_report_path",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.full_dc_report_path.html#full_dc_report_path",
        "title": "full_dc_report_path",
        "section": "full_dc_report_path",
        "text": "Full DC Report Path.\nfull_dc_report_path\npython:str\nfull\npath\nto\nthe\nDC\nreport"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.full_dc_report_path",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.full_dc_report_path.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.full_dc_report_path",
        "title": "full_dc_report_path > full_dc_report_path > full_dc_report_path",
        "section": "full_dc_report_path > full_dc_report_path",
        "text": "property SiwaveDCIRSettings.full_dc_report_path\n\nFull DC Report Path.\n\nReturns\n\npython:str\n\n\n\nfull path to the DC report file.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed_length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed_length.html#deembed_length",
        "title": "deembed_length",
        "section": "deembed_length",
        "text": "Deembed Length.\ndeembed_length"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed_length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed_length.html#pyedb.dotnet.database.edb_data.ports.GapPort.deembed_length",
        "title": "deembed_length > deembed_length > deembed_length",
        "section": "deembed_length > deembed_length",
        "text": "property GapPort.deembed_length\n\nDeembed Length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.html#cfgpingroups",
        "title": "CfgPinGroups",
        "section": "CfgPinGroups",
        "text": "Manage configuration pin group class.\nCfgPinGroups.apply()\n\nCfgPinGroups.export_properties()\n\nCfgPinGroups.get_data_from_db()\n\nCfgPinGroups\nCfgPinGroups.apply\nCfgPinGroups.export_properties\nCfgPinGroups.get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.html#pyedb.configuration.cfg_pin_groups.CfgPinGroups",
        "title": "CfgPinGroups > CfgPinGroups > CfgPinGroups",
        "section": "CfgPinGroups > CfgPinGroups",
        "text": "class pyedb.configuration.cfg_pin_groups.CfgPinGroups(pedb, pingroup_data)\n\nManage configuration pin group class.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgPinGroups.apply()\n\n\n\nCfgPinGroups.export_properties()\n\n\n\nCfgPinGroups.get_data_from_db()\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.clone",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.clone.html#clone",
        "title": "clone",
        "section": "clone",
        "text": "Clone a primitive object with keeping same definition and location.\nTrue when successful, False when failed.\nclone\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.clone",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.clone.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.clone",
        "title": "clone > clone > clone",
        "section": "clone > clone",
        "text": "EdbPolygon.clone()\n\nClone a primitive object with keeping same definition and location.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.setup_type.html#setup_type",
        "title": "setup_type",
        "section": "setup_type",
        "text": "Type of the setup.\nsetup_type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.setup_type.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.setup_type",
        "title": "setup_type > setup_type > setup_type",
        "section": "setup_type > setup_type",
        "text": "property HFSSPISimulationSetup.setup_type\n\nType of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.import_json",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.import_json.html#import_json",
        "title": "import_json",
        "section": "import_json",
        "text": "Import Json file into SimulationConfiguration object instance.\nJson file name.\nTrue when succeeded False when file name not provided.\nimport_json\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.import_json",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.import_json.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.import_json",
        "title": "import_json > import_json > import_json",
        "section": "import_json > import_json",
        "text": "SimulationConfiguration.import_json(input_file)\n\nImport Json file into SimulationConfiguration object instance.\n\nParameters\n\ninput_file\n\npython:str\n\nJson file name.\n\nReturns\n\nbool\n\nTrue when succeeded False when file name not provided.\n\nExamples\n\n>>> from dotnet.database.edb_data.simulation_configuration import SimulationConfiguration\n>>> test = SimulationConfiguration()\n>>> test.import_json(r\"C:\\Temp  est_json        est.json\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.trim_reference_size",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.trim_reference_size.html#trim_reference_size",
        "title": "trim_reference_size",
        "section": "trim_reference_size",
        "text": "Retrieve the trim reference size when used.\nThe size value.\ntrim_reference_size\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.trim_reference_size",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.trim_reference_size.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.trim_reference_size",
        "title": "trim_reference_size > trim_reference_size > trim_reference_size",
        "section": "trim_reference_size > trim_reference_size",
        "text": "property SimulationConfigurationBatch.trim_reference_size\n\nRetrieve the trim reference size when used.\n\nReturns\n\npython:float\n\nThe size value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_dc_custom_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_dc_custom_settings.html#dc_use_dc_custom_settings",
        "title": "dc_use_dc_custom_settings",
        "section": "dc_use_dc_custom_settings",
        "text": "Retrieve the value for using DC custom settings.\nTrue when activated, False deactivated.\ndc_use_dc_custom_settings\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_dc_custom_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_dc_custom_settings.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_dc_custom_settings",
        "title": "dc_use_dc_custom_settings > dc_use_dc_custom_settings > dc_use_dc_custom_settings",
        "section": "dc_use_dc_custom_settings > dc_use_dc_custom_settings",
        "text": "property SimulationConfigurationDc.dc_use_dc_custom_settings\n\nRetrieve the value for using DC custom settings.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_full_basis",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_full_basis.html#interpolation_use_full_basis",
        "title": "interpolation_use_full_basis",
        "section": "interpolation_use_full_basis",
        "text": "Flag indicating if full-basis elements is used.\nTrue if full basis interpolation is used, False otherwise.\ninterpolation_use_full_basis\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_full_basis",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_full_basis.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_full_basis",
        "title": "interpolation_use_full_basis > interpolation_use_full_basis > interpolation_use_full_basis",
        "section": "interpolation_use_full_basis > interpolation_use_full_basis",
        "text": "property SweepData.interpolation_use_full_basis\n\nFlag indicating if full-basis elements is used.\n\nReturns\n\nbool\n\nTrue if full basis interpolation is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/layer_stackup/layer_stackup",
        "href": "user_guide/layer_stackup/layer_stackup.html#edit-a-layer-stackup-in-a-layout-stackup",
        "title": "Edit a layer stackup in a layout stackup",
        "section": "Edit a layer stackup in a layout stackup",
        "text": "This page shows how edit a layer in the current layer stackup.\nEdit a layer stackup in a layout stackup"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.html#cfgcomponent",
        "title": "CfgComponent",
        "section": "CfgComponent",
        "text": "CfgComponent.get_attributes([exclude])\n\nCfgComponent.set_attributes(pedb_object)\n\nCfgComponent.protected_attributes\n\nCfgComponent\nCfgComponent.get_attributes\nCfgComponent.set_attributes\nCfgComponent.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.html#pyedb.configuration.cfg_components.CfgComponent",
        "title": "CfgComponent > CfgComponent > CfgComponent",
        "section": "CfgComponent > CfgComponent",
        "text": "class pyedb.configuration.cfg_components.CfgComponent(pedb, pedb_object, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgComponent.get_attributes([exclude])\n\n\n\nCfgComponent.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgComponent.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.model_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.model_type.html#model_type",
        "title": "model_type",
        "section": "model_type",
        "text": "Model Type setting.\n0: RDL,\n1: Package\n2: PCB\nmodel_type\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.model_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.model_type.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.model_type",
        "title": "model_type > model_type > model_type",
        "section": "model_type > model_type",
        "text": "property HFSSPISimulationSettings.model_type\n\nModel Type setting.\n\n0: RDL,\n1: Package\n2: PCB\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.src_dir",
        "href": "api/_autosummary/pyedb.siwave.Siwave.src_dir.html#src_dir",
        "title": "src_dir",
        "section": "src_dir",
        "text": "Source directory.\nFull absolute path to the python directory.\nsrc_dir\npython:str\npython"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.src_dir",
        "href": "api/_autosummary/pyedb.siwave.Siwave.src_dir.html#pyedb.siwave.Siwave.src_dir",
        "title": "src_dir > src_dir > src_dir",
        "section": "src_dir > src_dir",
        "text": "property Siwave.src_dir\n\nSource directory.\n\nReturns\n\npython:str\n\nFull absolute path to the python directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.positive_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.positive_net.html#positive_net",
        "title": "positive_net",
        "section": "positive_net",
        "text": "Positive Net.\npositive_net"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.positive_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.positive_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.positive_net",
        "title": "positive_net > positive_net > positive_net",
        "section": "positive_net > positive_net",
        "text": "property EDBDifferentialPairData.positive_net: EDBNetsData\n\nPositive Net.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin_number",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin_number.html#pin_number",
        "title": "pin_number",
        "section": "pin_number",
        "text": "Get pin number.\npin_number"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin_number",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin_number.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin_number",
        "title": "pin_number > pin_number > pin_number",
        "section": "pin_number > pin_number",
        "text": "property EDBPadstackInstance.pin_number\n\nGet pin number.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.order_basis",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.order_basis.html#order_basis",
        "title": "order_basis",
        "section": "order_basis",
        "text": "Order of the basic functions for HFSS.\n- 0=Zero.\n- 1=1st order.\n- 2=2nd order.\n- 3=Mixed.\nInteger value according to the description.\norder_basis\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.order_basis",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.order_basis.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.order_basis",
        "title": "order_basis > order_basis > order_basis",
        "section": "order_basis > order_basis",
        "text": "property HfssSolverSettings.order_basis\n\nOrder of the basic functions for HFSS.\n- 0=Zero.\n- 1=1st order.\n- 2=2nd order.\n- 3=Mixed.\n\nReturns\n\npython:int\n\nInteger value according to the description.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.solver_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.solver_type.html#solver_type",
        "title": "solver_type",
        "section": "solver_type",
        "text": "Get solver type to use (Direct/Iterative/Auto) for HFSS.\nOptions:\n1- kAutoSolver.\n2- kDirectSolver.\n3- kIterativeSolver.\n4- kNumSolverTypes.\nsolver_type\nkAutoSolver\nkDirectSolver\nkIterativeSolver\nkNumSolverTypes\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.solver_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.solver_type.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.solver_type",
        "title": "solver_type > solver_type > solver_type",
        "section": "solver_type > solver_type",
        "text": "property HfssSolverSettings.solver_type\n\nGet solver type to use (Direct/Iterative/Auto) for HFSS.\nOptions:\n1- kAutoSolver.\n2- kDirectSolver.\n3- kIterativeSolver.\n4- kNumSolverTypes.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.start",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.start.html#start",
        "title": "start",
        "section": "start",
        "text": "Get the coordinates of the starting point.\nList containing the X and Y coordinates of the starting point.\nstart\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.start",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.start.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.start",
        "title": "start > start > start",
        "section": "start > start",
        "text": "property EDBArcs.start\n\nGet the coordinates of the starting point.\n\nReturns\n\npython:list\n\nList containing the X and Y coordinates of the starting point.\n\nExamples\n\n>>> appedb = Edb(fpath, edbversion=\"2024.2\")\n>>> start_coordinate = appedb.nets[\"V1P0_S0\"].primitives[0].arcs[0].start\n>>> print(start_coordinate)\n[x_value, y_value]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.get_data_from_db.html#pyedb.configuration.cfg_ports_sources.CfgSources.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgSources.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Create an HFSS setup.\ncreate"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.create.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "RaptorXSimulationSetup.create(name=None)\n\nCreate an HFSS setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.plane_projection_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.plane_projection_factor.html#plane_projection_factor",
        "title": "plane_projection_factor",
        "section": "plane_projection_factor",
        "text": "To eliminate unnecessary mesh complexity of “large” metal planes and improve overall extraction time,\nuser can define the mesh of certain planes using a combination of the Plane Projection Factor and\nsettings of the Nets Advanced Options.\nUnits: unitless.\nplane_projection_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.plane_projection_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.plane_projection_factor.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.plane_projection_factor",
        "title": "plane_projection_factor > plane_projection_factor > plane_projection_factor",
        "section": "plane_projection_factor > plane_projection_factor",
        "text": "property RaptorXSimulationAdvancedSettings.plane_projection_factor\n\nTo eliminate unnecessary mesh complexity of “large” metal planes and improve overall extraction time,\nuser can define the mesh of certain planes using a combination of the Plane Projection Factor and\nsettings of the Nets Advanced Options.\nUnits: unitless.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pin_group_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pin_group_terminal_reference_pin.html#get_pin_group_terminal_reference_pin",
        "title": "get_pin_group_terminal_reference_pin",
        "section": "get_pin_group_terminal_reference_pin",
        "text": "Return a list of pins and serves terminals connected to pingroups.\nPreferred reference net name.\nget_pin_group_terminal_reference_pin\npython:str\noptional\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pin_group_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pin_group_terminal_reference_pin.html#pyedb.dotnet.database.edb_data.ports.WavePort.get_pin_group_terminal_reference_pin",
        "title": "get_pin_group_terminal_reference_pin > get_pin_group_terminal_reference_pin > get_pin_group_terminal_reference_pin",
        "section": "get_pin_group_terminal_reference_pin > get_pin_group_terminal_reference_pin",
        "text": "WavePort.get_pin_group_terminal_reference_pin(gnd_net_name_preference=None)\n\nReturn a list of pins and serves terminals connected to pingroups.\n\nParameters\n\ngnd_net_name_preference\n\npython:str, optional\n\nPreferred reference net name.\n\nReturns\n\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.export_bom",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.export_bom.html#export_bom",
        "title": "export_bom",
        "section": "export_bom",
        "text": "Export Bom file from layout.\nFull path to the BOM file, which is a delimited text file.\nValue to use for the delimiter. The default is \",\".\nexport_bom\npython:str\npython:str\noptional\n\",\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.export_bom",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.export_bom.html#pyedb.dotnet.database.components.Components.export_bom",
        "title": "export_bom > export_bom > export_bom",
        "section": "export_bom > export_bom",
        "text": "Components.export_bom(bom_file, delimiter=',')\n\nExport Bom file from layout.\n\nParameters\n\nbom_file\n\npython:str\n\nFull path to the BOM file, which is a delimited text file.\n\ndelimiter\n\npython:str, optional\n\nValue to use for the delimiter. The default is \",\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.boundary_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.boundary_type.html#boundary_type",
        "title": "boundary_type",
        "section": "boundary_type",
        "text": "Boundary type.\nInvalidBoundary, PortBoundary, PecBoundary, RlcBoundary, kCurrentSource, kVoltageSource, kNexximGround,\nkNexximPort, kDcTerminal, kVoltageProbe\nboundary_type\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.boundary_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.boundary_type.html#pyedb.dotnet.database.edb_data.ports.WavePort.boundary_type",
        "title": "boundary_type > boundary_type > boundary_type",
        "section": "boundary_type > boundary_type",
        "text": "property WavePort.boundary_type\n\nBoundary type.\n\nReturns\n\npython:str\n\nInvalidBoundary, PortBoundary, PecBoundary, RlcBoundary, kCurrentSource, kVoltageSource, kNexximGround,\nkNexximPort, kDcTerminal, kVoltageProbe\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.html#adaptivetype",
        "title": "AdaptiveType",
        "section": "AdaptiveType",
        "text": "AdaptiveType.BroadBand\n\nAdaptiveType.MultiFrequency\n\nAdaptiveType.SingleFrequency\n\nAdaptiveType\nAdaptiveType.BroadBand\nAdaptiveType.MultiFrequency\nAdaptiveType.SingleFrequency"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.html#pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType",
        "title": "AdaptiveType > AdaptiveType > AdaptiveType",
        "section": "AdaptiveType > AdaptiveType",
        "text": "class pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nAdaptiveType.BroadBand\n\n\n\nAdaptiveType.MultiFrequency\n\n\n\nAdaptiveType.SingleFrequency\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "enabled"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.enabled.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property RaptorXSimulationSettings.enabled\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.infinite_ground_location",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.infinite_ground_location.html#infinite_ground_location",
        "title": "infinite_ground_location",
        "section": "infinite_ground_location",
        "text": "Elevation of the infinite unconnected ground plane placed under the design.\ninfinite_ground_location\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.infinite_ground_location",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.infinite_ground_location.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.infinite_ground_location",
        "title": "infinite_ground_location > infinite_ground_location > infinite_ground_location",
        "section": "infinite_ground_location > infinite_ground_location",
        "text": "property AdvancedSettings.infinite_ground_location\n\nElevation of the infinite unconnected ground plane placed under the design.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec4_bondwire_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec4_bondwire_defs.html#jedec4_bondwire_defs",
        "title": "jedec4_bondwire_defs",
        "section": "jedec4_bondwire_defs",
        "text": "Get all JEDEC4 bondwire definitions in this Database.\njedec4_bondwire_defs\npython:list\nJedec4BondwireDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec4_bondwire_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec4_bondwire_defs.html#pyedb.dotnet.edb.Edb.jedec4_bondwire_defs",
        "title": "jedec4_bondwire_defs > jedec4_bondwire_defs > jedec4_bondwire_defs",
        "section": "jedec4_bondwire_defs > jedec4_bondwire_defs",
        "text": "property Edb.jedec4_bondwire_defs\n\nGet all JEDEC4 bondwire definitions in this Database.\n\nReturns\n\npython:list[Jedec4BondwireDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_settings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_settings.html#adaptive_settings",
        "title": "adaptive_settings",
        "section": "adaptive_settings",
        "text": "Adaptive EDB settings.\nadaptive_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdaptiveSettings"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_settings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_settings.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_settings",
        "title": "adaptive_settings > adaptive_settings > adaptive_settings",
        "section": "adaptive_settings > adaptive_settings",
        "text": "property AdaptiveSettings.adaptive_settings\n\nAdaptive EDB settings.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdaptiveSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_broadband_adaptive_frequency_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_broadband_adaptive_frequency_data.html#add_broadband_adaptive_frequency_data",
        "title": "add_broadband_adaptive_frequency_data",
        "section": "add_broadband_adaptive_frequency_data",
        "text": "Add a setup for frequency data.\nFrequency with units or float frequency (in Hz).\nFrequency with units or float frequency (in Hz).\nMaximum number of passes. The default is 10.\nMaximum delta S. The default is 0.02.\nTrue if method is successful, False otherwise.\nadd_broadband_adaptive_frequency_data\npython:str\npython:float\npython:str\npython:float\npython:int\noptional\n10\npython:float\noptional\n0.02\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_broadband_adaptive_frequency_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_broadband_adaptive_frequency_data.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.add_broadband_adaptive_frequency_data",
        "title": "add_broadband_adaptive_frequency_data > add_broadband_adaptive_frequency_data > add_broadband_adaptive_frequency_data",
        "section": "add_broadband_adaptive_frequency_data > add_broadband_adaptive_frequency_data",
        "text": "AdaptiveSettings.add_broadband_adaptive_frequency_data(low_frequency=0, high_frequency=10000000000.0, max_num_passes=10, max_delta_s=0.02)\n\nAdd a setup for frequency data.\n\nParameters\n\nlow_frequency\n\npython:str, python:float\n\nFrequency with units or float frequency (in Hz).\n\nhigh_frequency\n\npython:str, python:float\n\nFrequency with units or float frequency (in Hz).\n\nmax_num_passes\n\npython:int, optional\n\nMaximum number of passes. The default is 10.\n\nmax_delta_s\n\npython:float, optional\n\nMaximum delta S. The default is 0.02.\n\nReturns\n\nbool\n\nTrue if method is successful, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.position.html#position",
        "title": "position",
        "section": "position",
        "text": "Position in the setup list.\nposition"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.position.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property HfssSimulationSetup.position\n\nPosition in the setup list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.inductors",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.inductors.html#inductors",
        "title": "inductors",
        "section": "inductors",
        "text": "Inductors.\nDictionary of inductors.\ninductors\npython:dict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.inductors",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.inductors.html#pyedb.dotnet.database.components.Components.inductors",
        "title": "inductors > inductors > inductors",
        "section": "inductors > inductors",
        "text": "property Components.inductors\n\nInductors.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\nDictionary of inductors.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.inductors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_single_frequency",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_single_frequency.html#set_solution_single_frequency",
        "title": "set_solution_single_frequency",
        "section": "set_solution_single_frequency",
        "text": "Set single-frequency solution.\nAdaptive frequency. The default is 5GHz.\nMaximum number of passes. The default is 10.\nMaximum delta S. The default is 0.02.\nset_solution_single_frequency\npython:str\npython:float\noptional\n5GHz\npython:int\noptional\n10\npython:float\noptional\n0.02"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_single_frequency",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_single_frequency.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_single_frequency",
        "title": "set_solution_single_frequency > set_solution_single_frequency > set_solution_single_frequency",
        "section": "set_solution_single_frequency > set_solution_single_frequency",
        "text": "HfssSimulationSetup.set_solution_single_frequency(frequency='5GHz', max_num_passes=10, max_delta_s=0.02)\n\nSet single-frequency solution.\n\nParameters\n\nfrequency\n\npython:str, python:float, optional\n\nAdaptive frequency. The default is 5GHz.\n\nmax_num_passes\n\npython:int, optional\n\nMaximum number of passes. The default is 10.\n\nmax_delta_s\n\npython:float, optional\n\nMaximum delta S. The default is 0.02.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.number_with_units",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.number_with_units.html#number_with_units",
        "title": "number_with_units",
        "section": "number_with_units",
        "text": "Convert a number to a string with units. If value is a string, it’s returned as is.\nInput number or string.\nUnits for formatting. The default is None, which uses \"meter\".\nString concatenating the value and unit.\nnumber_with_units\npython:float\npython:int\npython:str\noptional\nNone\n\"meter\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.number_with_units",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.number_with_units.html#pyedb.dotnet.edb.Edb.number_with_units",
        "title": "number_with_units > number_with_units > number_with_units",
        "section": "number_with_units > number_with_units",
        "text": "Edb.number_with_units(value, units=None)\n\nConvert a number to a string with units. If value is a string, it’s returned as is.\n\nParameters\n\nvalue\n\npython:float, python:int, python:str\n\nInput number or string.\n\nunits\n\noptional\n\nUnits for formatting. The default is None, which uses \"meter\".\n\nReturns\n\npython:str\n\nString concatenating the value and unit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.vertical_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.vertical_extent_factor.html#vertical_extent_factor",
        "title": "vertical_extent_factor",
        "section": "vertical_extent_factor",
        "text": "Vertical extent factor.\nvertical_extent_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.vertical_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.vertical_extent_factor.html#pyedb.dotnet.database.edb_data.ports.GapPort.vertical_extent_factor",
        "title": "vertical_extent_factor > vertical_extent_factor > vertical_extent_factor",
        "section": "vertical_extent_factor > vertical_extent_factor",
        "text": "property GapPort.vertical_extent_factor\n\nVertical extent factor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/excitations/create_coax_port_on_component",
        "href": "user_guide/excitations/create_coax_port_on_component.html#create-a-coaxial-port",
        "title": "Create a coaxial port",
        "section": "Create a coaxial port",
        "text": "This page shows how to create an HFSS coaxial port on a component.\nThe preceding code creates a coaxial port on nets DDR4_DSQ0_P and DDR4_DSQ0_N from component U1:\nCreate a coaxial port\nDDR4_DSQ0_P\nDDR4_DSQ0_N\nU1"
    },
    {
        "objectID": "api/edb_data/EdbValue",
        "href": "api/edb_data/EdbValue.html#edb-value",
        "title": "EDB value",
        "section": "EDB value",
        "text": "Class managing EDB Value.\nEdbValue\nClass defining Edb Value properties.\nEDB value\nEdbValue"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.polygon_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.polygon_data.html#polygon_data",
        "title": "polygon_data",
        "section": "polygon_data",
        "text": "Parameters.\nList of parameters.\npolygon_data\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.polygon_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.polygon_data.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.polygon_data",
        "title": "polygon_data > polygon_data > polygon_data",
        "section": "polygon_data > polygon_data",
        "text": "property EDBPadProperties.polygon_data\n\nParameters.\n\nReturns\n\npython:list\n\nList of parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_terminal.html#reference_terminal",
        "title": "reference_terminal",
        "section": "reference_terminal",
        "text": "Adding grpc compatibility.\nreference_terminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_terminal.html#pyedb.dotnet.database.edb_data.ports.GapPort.reference_terminal",
        "title": "reference_terminal > reference_terminal > reference_terminal",
        "section": "reference_terminal > reference_terminal",
        "text": "property GapPort.reference_terminal\n\nAdding grpc compatibility.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.html#stackup",
        "title": "Stackup",
        "section": "Stackup",
        "text": "Manages EDB methods for stackup accessible from Edb.stackup property.\nStackup.add_document_layer(name[, layer_type])\nAdd a document layer.\nStackup.add_layer(layer_name[, base_layer, ...])\nInsert a layer into stackup.\nStackup.add_layer_above(name, base_layer_name)\nAdd a layer above a layer.\nStackup.add_layer_below(name, base_layer_name)\nAdd a layer below a layer.\nStackup.add_layer_bottom(name[, layer_type])\nAdd a layer on bottom of the stackup.\nStackup.add_layer_top(name[, layer_type])\nAdd a layer on top of the stackup.\nStackup.add_outline_layer([outline_name])\nAdd an outline layer named \"Outline\" if it is not present.\nStackup.adjust_solder_dielectrics()\nAdjust the stack-up by adding or modifying dielectric layers that contains Solder Balls.\nStackup.create_symmetric_stackup(layer_count)\nCreate a symmetric stackup.\nStackup.export(fpath[, file_format, ...])\nExport stackup definition to a CSV or JSON file.\nStackup.find_layer_by_name(name)\nFinds a layer with the given name.\nStackup.flip_design()\nFlip the current design of a layout.\nStackup.get_layout_thickness()\nReturn the layout thickness.\nStackup.limits([only_metals])\nRetrieve stackup limits.\nStackup.load(file_path[, rename])\nImport stackup from a file.\nStackup.place_a3dcomp_3d_placement(a3dcomp_path)\nPlace a 3D Component into current layout.\nStackup.place_in_layout(edb[, angle, ...])\nPlace current Cell into another cell using layer placement method.\nStackup.place_in_layout_3d_placement(edb[, ...])\nPlace current Cell into another cell using 3d placement method.\nStackup.place_instance(component_edb[, ...])\nPlace current Cell into another cell using 3d placement method.\nStackup.plot([save_plot, size, ...])\nPlot current stackup and, optionally, overlap padstack definitions.\nStackup.refresh_layer_collection()\nRefresh layer collection from Edb.\nStackup.remove_layer(name)\nRemove a layer from stackup.\nStackup.residual_copper_area_per_layer()\nReport residual copper area per layer in percentage.\nStackup.set_layer_clone(layer_clone)\n\nStackup.update_layout()\nSet layer collection into edb.\nStackup.all_layers\n\nStackup.dielectric_layers\nDielectric layers.\nStackup.layer_types\nLayer types.\nStackup.layers\nRetrieve the dictionary of layers.\nStackup.layers_by_id\nRetrieve the list of layers with their ids.\nStackup.mode\nStackup mode.\nStackup.non_stackup_layers\nRetrieve the dictionary of signal layers.\nStackup.num_layers\nRetrieve the stackup layer number.\nStackup.signal_layers\nRetrieve the dictionary of signal layers.\nStackup.stackup_layers\nRetrieve the dictionary of signal and dielectric layers.\nStackup.thickness\nRetrieve Stackup thickness.\nStackup\nStackup.add_document_layer\nStackup.add_layer\nStackup.add_layer_above\nStackup.add_layer_below\nStackup.add_layer_bottom\nStackup.add_layer_top\nStackup.add_outline_layer\n\"Outline\"\nStackup.adjust_solder_dielectrics\nStackup.create_symmetric_stackup\nStackup.export\nStackup.find_layer_by_name\nStackup.flip_design\nStackup.get_layout_thickness\nStackup.limits\nStackup.load\nStackup.place_a3dcomp_3d_placement\nStackup.place_in_layout\nStackup.place_in_layout_3d_placement\nStackup.place_instance\nStackup.plot\nStackup.refresh_layer_collection\nStackup.remove_layer\nStackup.residual_copper_area_per_layer\nStackup.set_layer_clone\nStackup.update_layout\nStackup.all_layers\nStackup.dielectric_layers\nStackup.layer_types\nStackup.layers\nStackup.layers_by_id\nStackup.mode\nStackup.non_stackup_layers\nStackup.num_layers\nStackup.signal_layers\nStackup.stackup_layers\nStackup.thickness"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.html#pyedb.dotnet.database.stackup.Stackup",
        "title": "Stackup > Stackup > Stackup",
        "section": "Stackup > Stackup",
        "text": "class pyedb.dotnet.database.stackup.Stackup(pedb, edb_object=None)\n\nManages EDB methods for stackup accessible from Edb.stackup property.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nStackup.add_document_layer(name[, layer_type])\n\nAdd a document layer.\n\nStackup.add_layer(layer_name[, base_layer, ...])\n\nInsert a layer into stackup.\n\nStackup.add_layer_above(name, base_layer_name)\n\nAdd a layer above a layer.\n\nStackup.add_layer_below(name, base_layer_name)\n\nAdd a layer below a layer.\n\nStackup.add_layer_bottom(name[, layer_type])\n\nAdd a layer on bottom of the stackup.\n\nStackup.add_layer_top(name[, layer_type])\n\nAdd a layer on top of the stackup.\n\nStackup.add_outline_layer([outline_name])\n\nAdd an outline layer named \"Outline\" if it is not present.\n\nStackup.adjust_solder_dielectrics()\n\nAdjust the stack-up by adding or modifying dielectric layers that contains Solder Balls.\n\nStackup.create_symmetric_stackup(layer_count)\n\nCreate a symmetric stackup.\n\nStackup.export(fpath[, file_format, ...])\n\nExport stackup definition to a CSV or JSON file.\n\nStackup.find_layer_by_name(name)\n\nFinds a layer with the given name.\n\nStackup.flip_design()\n\nFlip the current design of a layout.\n\nStackup.get_layout_thickness()\n\nReturn the layout thickness.\n\nStackup.limits([only_metals])\n\nRetrieve stackup limits.\n\nStackup.load(file_path[, rename])\n\nImport stackup from a file.\n\nStackup.place_a3dcomp_3d_placement(a3dcomp_path)\n\nPlace a 3D Component into current layout.\n\nStackup.place_in_layout(edb[, angle, ...])\n\nPlace current Cell into another cell using layer placement method.\n\nStackup.place_in_layout_3d_placement(edb[, ...])\n\nPlace current Cell into another cell using 3d placement method.\n\nStackup.place_instance(component_edb[, ...])\n\nPlace current Cell into another cell using 3d placement method.\n\nStackup.plot([save_plot, size, ...])\n\nPlot current stackup and, optionally, overlap padstack definitions.\n\nStackup.refresh_layer_collection()\n\nRefresh layer collection from Edb.\n\nStackup.remove_layer(name)\n\nRemove a layer from stackup.\n\nStackup.residual_copper_area_per_layer()\n\nReport residual copper area per layer in percentage.\n\nStackup.set_layer_clone(layer_clone)\n\n\n\nStackup.update_layout()\n\nSet layer collection into edb.\n\n\n\nAttributes\n\n\n\n\n\n\n\nStackup.all_layers\n\n\n\nStackup.dielectric_layers\n\nDielectric layers.\n\nStackup.layer_types\n\nLayer types.\n\nStackup.layers\n\nRetrieve the dictionary of layers.\n\nStackup.layers_by_id\n\nRetrieve the list of layers with their ids.\n\nStackup.mode\n\nStackup mode.\n\nStackup.non_stackup_layers\n\nRetrieve the dictionary of signal layers.\n\nStackup.num_layers\n\nRetrieve the stackup layer number.\n\nStackup.signal_layers\n\nRetrieve the dictionary of signal layers.\n\nStackup.stackup_layers\n\nRetrieve the dictionary of signal and dielectric layers.\n\nStackup.thickness\n\nRetrieve Stackup thickness.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.footprint_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.footprint_cells.html#footprint_cells",
        "title": "footprint_cells",
        "section": "footprint_cells",
        "text": "Get all footprint cells in the Database.\nfootprint_cells\npython:list\nCell"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.footprint_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.footprint_cells.html#pyedb.dotnet.edb.Edb.footprint_cells",
        "title": "footprint_cells > footprint_cells > footprint_cells",
        "section": "footprint_cells > footprint_cells",
        "text": "property Edb.footprint_cells\n\nGet all footprint cells in the Database.\n\nReturns\n\npython:list[Cell]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.height",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.height.html#height",
        "title": "height",
        "section": "height",
        "text": "Get the height of the arc.\nHeight of the arc.\nheight\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.height",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.height.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.height",
        "title": "height > height > height",
        "section": "height > height",
        "text": "property EDBArcs.height\n\nGet the height of the arc.\n\nReturns\n\npython:float\n\nHeight of the arc.\n\nExamples\n\n>>> appedb = Edb(fpath, edbversion=\"2024.2\")\n>>> arc_height = appedb.nets[\"V1P0_S0\"].primitives[0].arcs[0].height\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygons_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygons_by_layer.html#get_polygons_by_layer",
        "title": "get_polygons_by_layer",
        "section": "get_polygons_by_layer",
        "text": "Retrieve polygons by a layer.\nName of the layer.\nList of net names.\nList of primitive objects.\nget_polygons_by_layer\npython:str\npython:list\noptional\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygons_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygons_by_layer.html#pyedb.dotnet.database.modeler.Modeler.get_polygons_by_layer",
        "title": "get_polygons_by_layer > get_polygons_by_layer > get_polygons_by_layer",
        "section": "get_polygons_by_layer > get_polygons_by_layer",
        "text": "Modeler.get_polygons_by_layer(layer_name, net_list=None)\n\nRetrieve polygons by a layer.\n\nParameters\n\nlayer_name\n\npython:str\n\nName of the layer.\n\nnet_list\n\npython:list, optional\n\nList of net names.\n\nReturns\n\npython:list\n\nList of primitive objects.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.CFG_PORT_TYPE",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.CFG_PORT_TYPE.html#cfg_port_type",
        "title": "CFG_PORT_TYPE",
        "section": "CFG_PORT_TYPE",
        "text": "CFG_PORT_TYPE"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.CFG_PORT_TYPE",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.CFG_PORT_TYPE.html#pyedb.configuration.cfg_ports_sources.CfgPort.CFG_PORT_TYPE",
        "title": "CFG_PORT_TYPE > CFG_PORT_TYPE > CFG_PORT_TYPE",
        "section": "CFG_PORT_TYPE > CFG_PORT_TYPE",
        "text": "CfgPort.CFG_PORT_TYPE = {'circuit': [<class 'str'>], 'coax': [<class 'str'>]}\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.get_layout_thickness",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.get_layout_thickness.html#get_layout_thickness",
        "title": "get_layout_thickness",
        "section": "get_layout_thickness",
        "text": "Return the layout thickness.\nThe thickness value.\nget_layout_thickness\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.get_layout_thickness",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.get_layout_thickness.html#pyedb.dotnet.database.stackup.Stackup.get_layout_thickness",
        "title": "get_layout_thickness > get_layout_thickness > get_layout_thickness",
        "section": "get_layout_thickness > get_layout_thickness",
        "text": "Stackup.get_layout_thickness()\n\nReturn the layout thickness.\n\nReturns\n\npython:float\n\nThe thickness value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_use_pin_format",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_use_pin_format.html#per_pin_use_pin_format",
        "title": "per_pin_use_pin_format",
        "section": "per_pin_use_pin_format",
        "text": "Per Pin Use Pin Format.\nper_pin_use_pin_format\nTrue\nwhen\nactivated\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_use_pin_format",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_use_pin_format.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_use_pin_format",
        "title": "per_pin_use_pin_format > per_pin_use_pin_format > per_pin_use_pin_format",
        "section": "per_pin_use_pin_format > per_pin_use_pin_format",
        "text": "property SiwaveDCIRSettings.per_pin_use_pin_format\n\nPer Pin Use Pin Format.\n\nReturns\n\nbool\n\n\n\nTrue when activated, False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_differential_wave_port",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_differential_wave_port.html#create_differential_wave_port",
        "title": "create_differential_wave_port",
        "section": "create_differential_wave_port",
        "text": "Create a differential wave port.\nPrimitive ID of the positive terminal.\nCoordinate of the point to define the edge terminal.\nThe point must be close to the target edge but not on the two\nends of the edge.\nPrimitive ID of the negative terminal.\nCoordinate of the point to define the edge terminal.\nThe point must be close to the target edge but not on the two\nends of the edge.\nName of the port. The default is None.\nHorizontal extent factor. The default value is 5.\nVertical extent factor. The default value is 3.\nLaunch Width of PEC. The default value is \"0.01mm\".\nThe tuple contains: (port_name, pyedb.dotnet.database.edb_data.sources.ExcitationDifferential).\ncreate_differential_wave_port\npython:int\nEDBPrimitives\npython:list\npython:int\nEDBPrimitives\npython:list\npython:str\noptional\nNone\npython:int\npython:float\noptional\n5\npython:int\npython:float\noptional\n3\npython:str\noptional\n\"0.01mm\"\npython:tuple"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_differential_wave_port",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_differential_wave_port.html#pyedb.dotnet.database.hfss.EdbHfss.create_differential_wave_port",
        "title": "create_differential_wave_port > create_differential_wave_port > create_differential_wave_port",
        "section": "create_differential_wave_port > create_differential_wave_port",
        "text": "EdbHfss.create_differential_wave_port(positive_primitive_id, positive_points_on_edge, negative_primitive_id, negative_points_on_edge, port_name=None, horizontal_extent_factor=5, vertical_extent_factor=3, pec_launch_width='0.01mm')\n\nCreate a differential wave port.\n\nParameters\n\npositive_primitive_id\n\npython:int, EDBPrimitives\n\nPrimitive ID of the positive terminal.\n\npositive_points_on_edge\n\npython:list\n\nCoordinate of the point to define the edge terminal.\nThe point must be close to the target edge but not on the two\nends of the edge.\n\nnegative_primitive_id\n\npython:int, EDBPrimitives\n\nPrimitive ID of the negative terminal.\n\nnegative_points_on_edge\n\npython:list\n\nCoordinate of the point to define the edge terminal.\nThe point must be close to the target edge but not on the two\nends of the edge.\n\nport_name\n\npython:str, optional\n\nName of the port. The default is None.\n\nhorizontal_extent_factor\n\npython:int, python:float, optional\n\nHorizontal extent factor. The default value is 5.\n\nvertical_extent_factor\n\npython:int, python:float, optional\n\nVertical extent factor. The default value is 3.\n\npec_launch_width\n\npython:str, optional\n\nLaunch Width of PEC. The default value is \"0.01mm\".\n\nReturns\n\npython:tuple\n\nThe tuple contains: (port_name, pyedb.dotnet.database.edb_data.sources.ExcitationDifferential).\n\nExamples\n\n>>> edb.hfss.create_differential_wave_port(0, [\"-50mm\", \"-0mm\"], 1, [\"-50mm\", \"-0.2mm\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.step_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.step_freq.html#step_freq",
        "title": "step_freq",
        "section": "step_freq",
        "text": "Retrieve step frequency for the frequency sweep.\nstep_freq\npython:float\nThe\nvalue\nof\nthe\nfrequency"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.step_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.step_freq.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.step_freq",
        "title": "step_freq > step_freq > step_freq",
        "section": "step_freq > step_freq",
        "text": "property SimulationConfigurationAc.step_freq\n\nRetrieve step frequency for the frequency sweep.\n\nReturns\n\npython:float\n\n\n\nThe value of the frequency point.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the definition.\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.name.html#pyedb.dotnet.database.edb_data.ports.GapPort.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property GapPort.name\n\nName of the definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.terminal_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.terminal_type.html#terminal_type",
        "title": "terminal_type",
        "section": "terminal_type",
        "text": "Terminal Type.\nterminal_type\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.terminal_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.terminal_type.html#pyedb.dotnet.database.edb_data.ports.WavePort.terminal_type",
        "title": "terminal_type > terminal_type > terminal_type",
        "section": "terminal_type > terminal_type",
        "text": "property WavePort.terminal_type\n\nTerminal Type.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.nport_comp_definition",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.nport_comp_definition.html#nport_comp_definition",
        "title": "nport_comp_definition",
        "section": "nport_comp_definition",
        "text": "Retrieve Nport component definition list.\nnport_comp_definition"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.nport_comp_definition",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.nport_comp_definition.html#pyedb.dotnet.database.components.Components.nport_comp_definition",
        "title": "nport_comp_definition > nport_comp_definition > nport_comp_definition",
        "section": "nport_comp_definition > nport_comp_definition",
        "text": "property Components.nport_comp_definition\n\nRetrieve Nport component definition list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.html#edbpadstackinstance",
        "title": "EDBPadstackInstance",
        "section": "EDBPadstackInstance",
        "text": "Manages EDB functionalities for a padstack.\nInherited AEDT object.\nEDBPadstackInstance.add_void(point_list)\nAdd a void to current primitive.\nEDBPadstackInstance.area([include_voids])\nReturn the total area.\nEDBPadstackInstance.convert_hole_to_conical_shape([angle])\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\nEDBPadstackInstance.convert_to_polygon()\nConvert path to polygon.\nEDBPadstackInstance.create_coax_port([name, ...])\nCreate a coax port.\nEDBPadstackInstance.create_port([name, ...])\nCreate a port on the padstack.\nEDBPadstackInstance.create_rectangle_in_pad(...)\nCreate a rectangle inscribed inside a padstack instance pad.\nEDBPadstackInstance.create_terminal([name])\nCreate a padstack instance terminal\nEDBPadstackInstance.delete()\nDelete this primitive.\nEDBPadstackInstance.get_back_drill_by_layer()\n\nEDBPadstackInstance.get_closest_arc_midpoint(point)\nGet the closest arc midpoint of the primitive to the input data.\nEDBPadstackInstance.get_closest_point(point)\nGet the closest point of the primitive to the input data.\nEDBPadstackInstance.get_connected_object_id_set()\nProduce a list of all geometries physically connected to a given layout object.\nEDBPadstackInstance.get_connected_objects()\nGet connected objects.\nEDBPadstackInstance.get_hfss_prop()\nGet HFSS properties.\nEDBPadstackInstance.get_reference_pins([...])\nSearch for reference pins using given criteria.\nEDBPadstackInstance.get_terminal([name, ...])\nGet PadstackInstanceTerminal object.\nEDBPadstackInstance.in_polygon(polygon_data)\nCheck if padstack Instance is in given polygon data.\nEDBPadstackInstance.in_voids([net_name, ...])\nCheck if this padstack instance is in any void.\nEDBPadstackInstance.intersect(primitives)\nIntersect active primitive with one or more primitives.\nEDBPadstackInstance.intersection_type(primitive)\nGet intersection type between actual primitive and another primitive or polygon data.\nEDBPadstackInstance.is_arc(point)\nEither if a point is an arc or not.\nEDBPadstackInstance.is_intersecting(primitive)\nCheck if actual primitive and another primitive or polygon data intesects.\nEDBPadstackInstance.make_zone_primitive(zone_id)\nMake primitive a zone primitive with a zone specified by the provided id.\nEDBPadstackInstance.parametrize_position([...])\nParametrize the instance position.\nEDBPadstackInstance.points([arc_segments])\nReturn the list of points with arcs converted to segments.\nEDBPadstackInstance.points_raw()\nReturn a list of Edb points.\nEDBPadstackInstance.remove_hfss_prop()\nRemove HFSS properties.\nEDBPadstackInstance.scale(factor[, center])\nScales the polygon relative to a center point by a factor.\nEDBPadstackInstance.set_back_drill_by_layer(...)\nMethod added to bring compatibility with grpc.\nEDBPadstackInstance.set_backdrill_bottom(...)\nSet backdrill from bottom.\nEDBPadstackInstance.set_backdrill_top(...[, ...])\nSet backdrill from top.\nEDBPadstackInstance.set_hfss_prop(material, ...)\nSet HFSS properties.\nEDBPadstackInstance.split()\nSplit padstack instance into multiple instances.\nEDBPadstackInstance.subtract(primitives)\nSubtract active primitive with one or more primitives.\nEDBPadstackInstance.unite(primitives)\nUnite active primitive with one or more primitives.\nEDBPadstackInstance.aedt_name\nRetrieve the pin name that is shown in AEDT.\nEDBPadstackInstance.api_class\n\nEDBPadstackInstance.arcs\nGet the Primitive Arc Data.\nEDBPadstackInstance.backdrill_bottom\nBackdrill layer from bottom.\nEDBPadstackInstance.backdrill_parameters\n\nEDBPadstackInstance.backdrill_top\nBackdrill layer from top.\nEDBPadstackInstance.backdrill_type\nAdding grpc compatibility.\nEDBPadstackInstance.bbox\nReturn the primitive bounding box points.\nEDBPadstackInstance.bounding_box\nGet bounding box of the padstack instance.\nEDBPadstackInstance.can_be_zone_primitive\nbool: If a primitive can be a zone.\nEDBPadstackInstance.center\nReturn the primitive bounding box center coordinate.\nEDBPadstackInstance.component\nComponent.\nEDBPadstackInstance.component_pin\nGet component pin.\nEDBPadstackInstance.dcir_equipotential_region\nCheck whether dcir equipotential region is enabled.\nEDBPadstackInstance.definition\nPadstack definition.\nEDBPadstackInstance.has_voids\nbool: If a primitive has voids inside.\nEDBPadstackInstance.id\nPrimitive ID.\nEDBPadstackInstance.is_negative\nDetermine whether this primitive is negative.\nEDBPadstackInstance.is_null\nFlag indicating if this object is null.\nEDBPadstackInstance.is_parameterized\nbool: Primitive's parametrization.\nEDBPadstackInstance.is_pin\nDetermines whether this padstack instance is a layout pin.\nEDBPadstackInstance.is_void\nEither if the primitive is a void or not.\nEDBPadstackInstance.is_zone_primitive\nbool: If primitive object is a zone.\nEDBPadstackInstance.layer\nGet the primitive edb layer object.\nEDBPadstackInstance.layer_name\nGet the primitive layer name.\nEDBPadstackInstance.layer_range_names\nList of all layers to which the padstack instance belongs.\nEDBPadstackInstance.longest_arc\nGet the longest arc.\nEDBPadstackInstance.lower_elevation\nLower elevation of the placement layer.\nEDBPadstackInstance.metal_volume\nMetal volume of the via hole instance in cubic units (m3).\nEDBPadstackInstance.name\nPadstack Instance Name.\nEDBPadstackInstance.net\nNet Object.\nEDBPadstackInstance.net_name\nGet the primitive layer name.\nEDBPadstackInstance.object_instance\nReturn Ansys.Ansoft.Edb.LayoutInstance.LayoutObjInstance object.\nEDBPadstackInstance.owner\nPrimitive: Owner of the primitive object.\nEDBPadstackInstance.padstack_definition\nPadstack definition Name.\nEDBPadstackInstance.pin\nEDB padstack object.\nEDBPadstackInstance.pin_number\nGet pin number.\nEDBPadstackInstance.pingroups\nPin groups that the pin belongs to.\nEDBPadstackInstance.placement_layer\nPlacement layer.\nEDBPadstackInstance.polygon_data\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\nEDBPadstackInstance.position\nPadstack instance position.\nEDBPadstackInstance.primitive_type\nReturn the type of the primitive.\nEDBPadstackInstance.rotation\nPadstack instance rotation.\nEDBPadstackInstance.shortest_arc\nGet the longest arc.\nEDBPadstackInstance.start_layer\nStarting layer.\nEDBPadstackInstance.stop_layer\nStopping layer.\nEDBPadstackInstance.terminal\nTerminal.\nEDBPadstackInstance.top_bottom_association\nTop/bottom association of the placement layer.\nEDBPadstackInstance.type\nReturn the type of the primitive.\nEDBPadstackInstance.upper_elevation\nUpper elevation of the placement layer.\nEDBPadstackInstance.voids\nlist of Primitive: List of void        primitive objects inside the primitive.\nEDBPadstackInstance\nEDBPadstackInstance.add_void\nEDBPadstackInstance.area\nEDBPadstackInstance.convert_hole_to_conical_shape\nEDBPadstackInstance.convert_to_polygon\nEDBPadstackInstance.create_coax_port\nEDBPadstackInstance.create_port\nEDBPadstackInstance.create_rectangle_in_pad\nEDBPadstackInstance.create_terminal\nEDBPadstackInstance.delete\nEDBPadstackInstance.get_back_drill_by_layer\nEDBPadstackInstance.get_closest_arc_midpoint\nEDBPadstackInstance.get_closest_point\nEDBPadstackInstance.get_connected_object_id_set\nEDBPadstackInstance.get_connected_objects\nEDBPadstackInstance.get_hfss_prop\nEDBPadstackInstance.get_reference_pins\nEDBPadstackInstance.get_terminal\nEDBPadstackInstance.in_polygon\nEDBPadstackInstance.in_voids\nEDBPadstackInstance.intersect\nEDBPadstackInstance.intersection_type\nEDBPadstackInstance.is_arc\nEDBPadstackInstance.is_intersecting\nEDBPadstackInstance.make_zone_primitive\nEDBPadstackInstance.parametrize_position\nEDBPadstackInstance.points\nEDBPadstackInstance.points_raw\nEDBPadstackInstance.remove_hfss_prop\nEDBPadstackInstance.scale\nEDBPadstackInstance.set_back_drill_by_layer\nEDBPadstackInstance.set_backdrill_bottom\nEDBPadstackInstance.set_backdrill_top\nEDBPadstackInstance.set_hfss_prop\nEDBPadstackInstance.split\nEDBPadstackInstance.subtract\nEDBPadstackInstance.unite\nEDBPadstackInstance.aedt_name\nEDBPadstackInstance.api_class\nEDBPadstackInstance.arcs\nEDBPadstackInstance.backdrill_bottom\nEDBPadstackInstance.backdrill_parameters\nEDBPadstackInstance.backdrill_top\nEDBPadstackInstance.backdrill_type\nEDBPadstackInstance.bbox\nEDBPadstackInstance.bounding_box\nEDBPadstackInstance.can_be_zone_primitive\nbool\nEDBPadstackInstance.center\nEDBPadstackInstance.component\nEDBPadstackInstance.component_pin\nEDBPadstackInstance.dcir_equipotential_region\nEDBPadstackInstance.definition\nEDBPadstackInstance.has_voids\nbool\nEDBPadstackInstance.id\nEDBPadstackInstance.is_negative\nEDBPadstackInstance.is_null\nEDBPadstackInstance.is_parameterized\nbool\nEDBPadstackInstance.is_pin\nEDBPadstackInstance.is_void\nEDBPadstackInstance.is_zone_primitive\nbool\nEDBPadstackInstance.layer\nEDBPadstackInstance.layer_name\nEDBPadstackInstance.layer_range_names\nEDBPadstackInstance.longest_arc\nEDBPadstackInstance.lower_elevation\nEDBPadstackInstance.metal_volume\nEDBPadstackInstance.name\nEDBPadstackInstance.net\nEDBPadstackInstance.net_name\nEDBPadstackInstance.object_instance\nEDBPadstackInstance.owner\nPrimitive\nEDBPadstackInstance.padstack_definition\nEDBPadstackInstance.pin\nEDBPadstackInstance.pin_number\nEDBPadstackInstance.pingroups\nEDBPadstackInstance.placement_layer\nEDBPadstackInstance.polygon_data\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet\nEDBPadstackInstance.position\nEDBPadstackInstance.primitive_type\nEDBPadstackInstance.rotation\nEDBPadstackInstance.shortest_arc\nEDBPadstackInstance.start_layer\nEDBPadstackInstance.stop_layer\nEDBPadstackInstance.terminal\nEDBPadstackInstance.top_bottom_association\nEDBPadstackInstance.type\nEDBPadstackInstance.upper_elevation\nEDBPadstackInstance.voids\nlist\nPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance",
        "title": "EDBPadstackInstance > EDBPadstackInstance > EDBPadstackInstance",
        "section": "EDBPadstackInstance > EDBPadstackInstance",
        "text": "class pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance(edb_padstackinstance, _pedb)\n\nManages EDB functionalities for a padstack.\n\nParameters\n\nedb_padstackinstance\n\n\n\n_pedb\n\nInherited AEDT object.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> edb_padstack_instance = edb.padstacks.instances[0]\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBPadstackInstance.add_void(point_list)\n\nAdd a void to current primitive.\n\nEDBPadstackInstance.area([include_voids])\n\nReturn the total area.\n\nEDBPadstackInstance.convert_hole_to_conical_shape([angle])\n\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\n\nEDBPadstackInstance.convert_to_polygon()\n\nConvert path to polygon.\n\nEDBPadstackInstance.create_coax_port([name, ...])\n\nCreate a coax port.\n\nEDBPadstackInstance.create_port([name, ...])\n\nCreate a port on the padstack.\n\nEDBPadstackInstance.create_rectangle_in_pad(...)\n\nCreate a rectangle inscribed inside a padstack instance pad.\n\nEDBPadstackInstance.create_terminal([name])\n\nCreate a padstack instance terminal\n\nEDBPadstackInstance.delete()\n\nDelete this primitive.\n\nEDBPadstackInstance.get_back_drill_by_layer()\n\n\n\nEDBPadstackInstance.get_closest_arc_midpoint(point)\n\nGet the closest arc midpoint of the primitive to the input data.\n\nEDBPadstackInstance.get_closest_point(point)\n\nGet the closest point of the primitive to the input data.\n\nEDBPadstackInstance.get_connected_object_id_set()\n\nProduce a list of all geometries physically connected to a given layout object.\n\nEDBPadstackInstance.get_connected_objects()\n\nGet connected objects.\n\nEDBPadstackInstance.get_hfss_prop()\n\nGet HFSS properties.\n\nEDBPadstackInstance.get_reference_pins([...])\n\nSearch for reference pins using given criteria.\n\nEDBPadstackInstance.get_terminal([name, ...])\n\nGet PadstackInstanceTerminal object.\n\nEDBPadstackInstance.in_polygon(polygon_data)\n\nCheck if padstack Instance is in given polygon data.\n\nEDBPadstackInstance.in_voids([net_name, ...])\n\nCheck if this padstack instance is in any void.\n\nEDBPadstackInstance.intersect(primitives)\n\nIntersect active primitive with one or more primitives.\n\nEDBPadstackInstance.intersection_type(primitive)\n\nGet intersection type between actual primitive and another primitive or polygon data.\n\nEDBPadstackInstance.is_arc(point)\n\nEither if a point is an arc or not.\n\nEDBPadstackInstance.is_intersecting(primitive)\n\nCheck if actual primitive and another primitive or polygon data intesects.\n\nEDBPadstackInstance.make_zone_primitive(zone_id)\n\nMake primitive a zone primitive with a zone specified by the provided id.\n\nEDBPadstackInstance.parametrize_position([...])\n\nParametrize the instance position.\n\nEDBPadstackInstance.points([arc_segments])\n\nReturn the list of points with arcs converted to segments.\n\nEDBPadstackInstance.points_raw()\n\nReturn a list of Edb points.\n\nEDBPadstackInstance.remove_hfss_prop()\n\nRemove HFSS properties.\n\nEDBPadstackInstance.scale(factor[, center])\n\nScales the polygon relative to a center point by a factor.\n\nEDBPadstackInstance.set_back_drill_by_layer(...)\n\nMethod added to bring compatibility with grpc.\n\nEDBPadstackInstance.set_backdrill_bottom(...)\n\nSet backdrill from bottom.\n\nEDBPadstackInstance.set_backdrill_top(...[, ...])\n\nSet backdrill from top.\n\nEDBPadstackInstance.set_hfss_prop(material, ...)\n\nSet HFSS properties.\n\nEDBPadstackInstance.split()\n\nSplit padstack instance into multiple instances.\n\nEDBPadstackInstance.subtract(primitives)\n\nSubtract active primitive with one or more primitives.\n\nEDBPadstackInstance.unite(primitives)\n\nUnite active primitive with one or more primitives.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBPadstackInstance.aedt_name\n\nRetrieve the pin name that is shown in AEDT.\n\nEDBPadstackInstance.api_class\n\n\n\nEDBPadstackInstance.arcs\n\nGet the Primitive Arc Data.\n\nEDBPadstackInstance.backdrill_bottom\n\nBackdrill layer from bottom.\n\nEDBPadstackInstance.backdrill_parameters\n\n\n\nEDBPadstackInstance.backdrill_top\n\nBackdrill layer from top.\n\nEDBPadstackInstance.backdrill_type\n\nAdding grpc compatibility.\n\nEDBPadstackInstance.bbox\n\nReturn the primitive bounding box points.\n\nEDBPadstackInstance.bounding_box\n\nGet bounding box of the padstack instance.\n\nEDBPadstackInstance.can_be_zone_primitive\n\nbool: If a primitive can be a zone.\n\nEDBPadstackInstance.center\n\nReturn the primitive bounding box center coordinate.\n\nEDBPadstackInstance.component\n\nComponent.\n\nEDBPadstackInstance.component_pin\n\nGet component pin.\n\nEDBPadstackInstance.dcir_equipotential_region\n\nCheck whether dcir equipotential region is enabled.\n\nEDBPadstackInstance.definition\n\nPadstack definition.\n\nEDBPadstackInstance.has_voids\n\nbool: If a primitive has voids inside.\n\nEDBPadstackInstance.id\n\nPrimitive ID.\n\nEDBPadstackInstance.is_negative\n\nDetermine whether this primitive is negative.\n\nEDBPadstackInstance.is_null\n\nFlag indicating if this object is null.\n\nEDBPadstackInstance.is_parameterized\n\nbool: Primitive's parametrization.\n\nEDBPadstackInstance.is_pin\n\nDetermines whether this padstack instance is a layout pin.\n\nEDBPadstackInstance.is_void\n\nEither if the primitive is a void or not.\n\nEDBPadstackInstance.is_zone_primitive\n\nbool: If primitive object is a zone.\n\nEDBPadstackInstance.layer\n\nGet the primitive edb layer object.\n\nEDBPadstackInstance.layer_name\n\nGet the primitive layer name.\n\nEDBPadstackInstance.layer_range_names\n\nList of all layers to which the padstack instance belongs.\n\nEDBPadstackInstance.longest_arc\n\nGet the longest arc.\n\nEDBPadstackInstance.lower_elevation\n\nLower elevation of the placement layer.\n\nEDBPadstackInstance.metal_volume\n\nMetal volume of the via hole instance in cubic units (m3).\n\nEDBPadstackInstance.name\n\nPadstack Instance Name.\n\nEDBPadstackInstance.net\n\nNet Object.\n\nEDBPadstackInstance.net_name\n\nGet the primitive layer name.\n\nEDBPadstackInstance.object_instance\n\nReturn Ansys.Ansoft.Edb.LayoutInstance.LayoutObjInstance object.\n\nEDBPadstackInstance.owner\n\nPrimitive: Owner of the primitive object.\n\nEDBPadstackInstance.padstack_definition\n\nPadstack definition Name.\n\nEDBPadstackInstance.pin\n\nEDB padstack object.\n\nEDBPadstackInstance.pin_number\n\nGet pin number.\n\nEDBPadstackInstance.pingroups\n\nPin groups that the pin belongs to.\n\nEDBPadstackInstance.placement_layer\n\nPlacement layer.\n\nEDBPadstackInstance.polygon_data\n\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\n\nEDBPadstackInstance.position\n\nPadstack instance position.\n\nEDBPadstackInstance.primitive_type\n\nReturn the type of the primitive.\n\nEDBPadstackInstance.rotation\n\nPadstack instance rotation.\n\nEDBPadstackInstance.shortest_arc\n\nGet the longest arc.\n\nEDBPadstackInstance.start_layer\n\nStarting layer.\n\nEDBPadstackInstance.stop_layer\n\nStopping layer.\n\nEDBPadstackInstance.terminal\n\nTerminal.\n\nEDBPadstackInstance.top_bottom_association\n\nTop/bottom association of the placement layer.\n\nEDBPadstackInstance.type\n\nReturn the type of the primitive.\n\nEDBPadstackInstance.upper_elevation\n\nUpper elevation of the placement layer.\n\nEDBPadstackInstance.voids\n\nlist of Primitive: List of void        primitive objects inside the primitive.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_parameterized",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_parameterized.html#is_parameterized",
        "title": "is_parameterized",
        "section": "is_parameterized",
        "text": "bool: Primitive’s parametrization.\nRead-Only.\nis_parameterized\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_parameterized",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_parameterized.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_parameterized",
        "title": "is_parameterized > is_parameterized > is_parameterized",
        "section": "is_parameterized > is_parameterized",
        "text": "property EDBPadstackInstance.is_parameterized\n\nbool: Primitive’s parametrization.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.setup_type.html#setup_type",
        "title": "setup_type",
        "section": "setup_type",
        "text": "Type of the setup.\nsetup_type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.setup_type.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.setup_type",
        "title": "setup_type > setup_type > setup_type",
        "section": "setup_type > setup_type",
        "text": "property SiwaveDCSimulationSetup.setup_type\n\nType of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_validation",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_validation.html#layout_validation",
        "title": "layout_validation",
        "section": "layout_validation",
        "text": "pyedb.dotnet.database.edb_data.layout_validation.LayoutValidation.\nlayout_validation\npyedb.dotnet.database.edb_data.layout_validation.LayoutValidation"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_validation",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_validation.html#pyedb.dotnet.edb.Edb.layout_validation",
        "title": "layout_validation > layout_validation > layout_validation",
        "section": "layout_validation > layout_validation",
        "text": "property Edb.layout_validation\n\npyedb.dotnet.database.edb_data.layout_validation.LayoutValidation.\n\nReturns\n\nlayout validation object\n\n:class: ‘pyedb.dotnet.database.layout_validation.LayoutValidation’\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.get_attributes.html#pyedb.configuration.cfg_components.CfgComponent.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgComponent.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_bondwire_sides",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_bondwire_sides.html#dc_num_bondwire_sides",
        "title": "dc_num_bondwire_sides",
        "section": "dc_num_bondwire_sides",
        "text": "Retrieve the number of sides used for cylinder discretization.\nNumber of sides.\ndc_num_bondwire_sides\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_bondwire_sides",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_bondwire_sides.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_bondwire_sides",
        "title": "dc_num_bondwire_sides > dc_num_bondwire_sides > dc_num_bondwire_sides",
        "section": "dc_num_bondwire_sides > dc_num_bondwire_sides",
        "text": "property SimulationConfigurationDc.dc_num_bondwire_sides\n\nRetrieve the number of sides used for cylinder discretization.\n\nReturns\n\npython:int\n\nNumber of sides.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_below",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_below.html#add_layer_below",
        "title": "add_layer_below",
        "section": "add_layer_below",
        "text": "Add a layer below a layer.\nName of the layer.\nName of the base layer.\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\nadd_layer_below\npython:str\n\"signal\"\n\"signal\"\n\"dielectric\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_below",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_below.html#pyedb.dotnet.database.stackup.Stackup.add_layer_below",
        "title": "add_layer_below > add_layer_below > add_layer_below",
        "section": "add_layer_below > add_layer_below",
        "text": "Stackup.add_layer_below(name, base_layer_name, layer_type='signal', **kwargs)\n\nAdd a layer below a layer.\n\nParameters\n\nname\n\npython:str\n\nName of the layer.\n\nbase_layer_name: str\n\nName of the base layer.\n\nlayer_type: str, optional\n\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\n\nkwargs\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_bondwire",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_bondwire.html#create_bondwire",
        "title": "create_bondwire",
        "section": "create_bondwire",
        "text": "Create a bondwire object.\nType of bondwire: kAPDBondWire or kJDECBondWire types.\nBondwire definition name.\nLayer name this bondwire will be on.\nBondwire width.\nBondwire material name.\nName of start layer.\nX value of start point.\nY value of start point.\nName of end layer.\nX value of end point.\nY value of end point.\nNet of the Bondwire.\nAdded for grpc compatibility.\nBondwire object created.\ncreate_bondwire\nBondwireType\npython:str\npython:str\nValue\npython:str\npython:str\nValue\nValue\npython:str\nValue\nValue\npython:str\nNet\npython:None\npython:None\npyedb.dotnet.database.dotnet.primitive.BondwireDotNet"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_bondwire",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_bondwire.html#pyedb.dotnet.database.modeler.Modeler.create_bondwire",
        "title": "create_bondwire > create_bondwire > create_bondwire",
        "section": "create_bondwire > create_bondwire",
        "text": "Modeler.create_bondwire(definition_name, placement_layer, width, material, start_layer_name, start_x, start_y, end_layer_name, end_x, end_y, net, bondwire_type='jedec4', start_cell_instance_name=None)\n\nCreate a bondwire object.\n\nParameters\n\nbondwire_type\n\nBondwireType\n\nType of bondwire: kAPDBondWire or kJDECBondWire types.\n\ndefinition_name\n\npython:str\n\nBondwire definition name.\n\nplacement_layer\n\npython:str\n\nLayer name this bondwire will be on.\n\nwidth\n\nValue\n\nBondwire width.\n\nmaterial\n\npython:str\n\nBondwire material name.\n\nstart_layer_name\n\npython:str\n\nName of start layer.\n\nstart_x\n\nValue\n\nX value of start point.\n\nstart_y\n\nValue\n\nY value of start point.\n\nend_layer_name\n\npython:str\n\nName of end layer.\n\nend_x\n\nValue\n\nX value of end point.\n\nend_y\n\nValue\n\nY value of end point.\n\nnet\n\npython:str or Net or python:None\n\nNet of the Bondwire.\n\nstart_cell_instance_name\n\npython:None\n\nAdded for grpc compatibility.\n\nReturns\n\npyedb.dotnet.database.dotnet.primitive.BondwireDotNet\n\nBondwire object created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.type.html#type",
        "title": "type",
        "section": "type",
        "text": "Sweep type.\ntype"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.type.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property SweepData.type\n\nSweep type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "EDB internal simulation setup object.\nsim_setup_info"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.sim_setup_info.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property DCSettings.sim_setup_info\n\nEDB internal simulation setup object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.xtalk_threshold",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.xtalk_threshold.html#xtalk_threshold",
        "title": "xtalk_threshold",
        "section": "xtalk_threshold",
        "text": "Return the value for Siwave cross talk threshold. THis value specifies the distance for the solver to\nconsider lines coupled during the cross-section computation. Decreasing the value below -60dB can\npotentially cause solver failure.\nxtalk_threshold\nflot\nValue\nof"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.xtalk_threshold",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.xtalk_threshold.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.xtalk_threshold",
        "title": "xtalk_threshold > xtalk_threshold > xtalk_threshold",
        "section": "xtalk_threshold > xtalk_threshold",
        "text": "property SimulationConfigurationAc.xtalk_threshold\n\nReturn the value for Siwave cross talk threshold. THis value specifies the distance for the solver to\nconsider lines coupled during the cross-section computation. Decreasing the value below -60dB can\npotentially cause solver failure.\n\nReturns\n\nflot\n\n\n\nValue of cross-talk threshold.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.clean",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.clean.html#clean",
        "title": "clean",
        "section": "clean",
        "text": "clean"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.clean",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.clean.html#pyedb.configuration.cfg_components.CfgComponents.clean",
        "title": "clean > clean > clean",
        "section": "clean > clean",
        "text": "CfgComponents.clean()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.html#simulationconfiguration",
        "title": "SimulationConfiguration",
        "section": "SimulationConfiguration",
        "text": "Provides an ASCII simulation configuration file parser.\nThis parser supports all types of inputs for setting up and automating any kind\nof SI or PI simulation with HFSS 3D Layout or Siwave. If fields are omitted, default\nvalues are applied. This class can be instantiated directly from\nConfiguration file.\nThis class is very convenient to build HFSS and SIwave simulation projects from layout.\nIt is leveraging EDB commands from Pyaedt but with keeping high level parameters making more easy PCB automation\nflow. SYZ and DC simulation can be addressed with this class.\nThe class is instantiated from an open edb:\nThe returned object sim_setup is a SimulationConfiguration object.\nFrom this class you can assign a lot of parameters related the project configuration but also solver options.\nHere is the list of parameters available:\nSolver type can be selected, HFSS 3D Layout and Siwave are supported.\nSet the list of net names you want to include for the simulation. These nets will\nhave excitations ports created if corresponding pins are found on selected component. We usually refer to signal\nnets but power / reference nets can also be passed into this list if user wants to have ports created on these ones.\nSet the list on power and reference nets. These nets won’t have excitation ports created\non them and will be clipped during the project build if the cutout option is enabled.\nSet the list of components which will be included in the simulation. These components will have ports created on\npins belonging to the net list.\nWhen true activates the layout cutout based on net signal net selection and cutout expansion.\nDefine the type of cutout used for computing the clippingextent polygon. CutoutSubdesignType.Conformal\nCutoutSubdesignType.BBox are surpported.\nDefine the distance used for computing the extent polygon. Integer or string can be passed.\nFor example 0.001 is in meter so here 1mm. You can also pass the string “1mm” for the same result.\nBoolean to allow using rounded corner for the cutout extent or not.\nWhen True use the native edb API command to process the cutout. Using False uses\nthe Pyaedt one which improves the cutout speed.\nBoolean to activate the solder ball generation on components. When HFSS solver is selected in combination with this\nparameter, coaxial ports will be created on solder balls for pins belonging to selected signal nets. If Siwave\nsolver is selected this parameter will be ignored.\nWhen True the default coaxial extent is used for the ports (only for HFSS).\nWhen the design is having dense solder balls close to each other (like typically package design), the default value\nmight be too large and cause port overlapping, then solver failure. To prevent this issue set this parameter to\nFalse will use a smaller value.\nSpecify the output edb file after building the project. The parameter must be the complete file path.\nleaving this parameter blank will oervwritte the current open edb.\nGives the dielectric extent after cutout, keeping default value is advised unless for\nvery specific application.\nProvide the air box horizonzal extent values. Unitless float value will be\ntreated as ratio but string value like “5mm” is also supported.\nProvide the air box negative vertical extent values. Unitless float value will be\ntreated as ratio but string value like “5mm” is also supported.\nProvide the air box positive vertical extent values. Unitless float value will be\ntreated as ratio but string value like “5mm” is also supported.\nWhen True use radiation airbox boundary condition and perfect metal box when\nset to False. Default value is True, using enclosed metal box will greatly change simulation results.\nSetting this parameter as False must be used cautiously.\nTrue activates the cutout with associated parameters. Setting False will\nkeep the entire layout.\nSetting to False can impact the simulation run time or even memory failure if HFSS solver is used.\nWhen circuit ports are used, setting to True will force to create pin groups on\ncomponents having pins belonging to same net. Setting to False will generate port on each signal pin with\ntaking the closest reference pin. The last configuration is more often used when users are creating ports on PDN\n(Power delivery Network) and want to connect all pins individually.\nSpecify the frequency sweep type, Linear or Log sweep can be defined.\nSimulationCOnfiguration also inherit from SimulationConfigurationAc class for High frequency settings.\nDefine the start frequency from the sweep.\nDefine the stop frequency from the sweep.\nDefine the step frequency from the sweep.\nUsed when log sweep is defined and specify the number of points per decade.\nActivate the option Enforce Causality for the solver, recommended for signal integrity application\nActivate the option Enforce Passivity for the solver, recommended for signal integrity application\nActivate the lambda refinement for the initial mesh (only for HFSS), default value is True. Keeping this\nactivated is highly recommended.\nEnable when True the Q3D DC point computation. Only needed when very high accuracy is required for DC point.\nCan eventually cause extra computation time.\nDefine the frequency sweep name.\nDefine the frequency used for adaptive meshing (available for both HFSS and SIwave).\nDefined the radiation box type, Conformal, Bounding box and ConvexHull are supported (HFSS only).\nDefault value is 30, specify the maximum number of adaptive passes (only HFSS). Reasonable high value is recommended\nto force the solver reaching the convergence criteria.\nDefine the convergence criteria\nspecify the minimum number of consecutive coberged passes. Setting to 2 is a good practice to avoid converging on\nlocal minima.\nSelect the order basis (HFSS only), Zero, Single, Double and Mixed are supported. For Signal integrity Single or\nMixed should be used.\nOnly for Siwave, specify the minimum void surface to be meshed. Void with lower surface value will be ignored by\nmeshing.\nSimulationConfiguration also inherits from SimulationDc class to handle DC simulation projects.\nTrue activate the DC loop inductance computation (Siwave only), False is deactivated.\nThe provided value must be between 0 and 2 and correspond ti the SIwave DC slide position in GUI.\n0 : coarse\n1 : medium accuracy\n2 : high accuracy\nTrue activate the current / voltage plot with Siwave DC solver, False deactivate.\nFix the DC error convergence criteria. In this example 2% is defined.\nProvide the maximum number of passes during Siwave DC adaptive meshing.\nProvide the minimum number of passes during Siwave DC adaptive meshing.\nTrue bondwires are meshed, False bond wires are ignored during meshing.\nGives the number of facets wirebonds are discretized.\nTrue meshing refinement on nondwires activated during meshing process. Deactivated when set to False.\nActivate when True the components showing in the DC report.\nTrue thermal data are exported for Icepak simulation.\nProvides the file path for the DC report.\nProvides icepak temporary files location.\nImport DC thermal data when True`\nWhen True activate the pin format.\nActivate the loop resistance usage per pin when True\nDefine the via report path file.\nDefine a current source.\nDefine the pin from a source which has to be set to reference for DC simulation.\nDefine a voltage source.\nDefine the pin from a source which has to be set to reference for DC simulation.\nWill build and save your project.\nSimulationConfiguration.add_current_source([...])\nAdd a current source for the current SimulationConfiguration instance.\nSimulationConfiguration.add_dc_ground_source_term([...])\nAdd a dc ground source terminal for Siwave.\nSimulationConfiguration.add_rlc([name, ...])\nAdd a voltage source for the current SimulationConfiguration instance.\nSimulationConfiguration.add_voltage_source([...])\nAdd a voltage source for the current SimulationConfiguration instance.\nSimulationConfiguration.build_simulation_project()\nBuild active simulation project.\nSimulationConfiguration.export_json(output_file)\nExport Json file from SimulationConfiguration object.\nSimulationConfiguration.import_json(input_file)\nImport Json file into SimulationConfiguration object instance.\nSimulationConfiguration.ac_settings\nAC Settings class.\nSimulationConfiguration.batch_solve_settings\nCutout and Batch Settings class.\nSimulationConfiguration.dc_settings\nDC Settings class.\nSimulationConfiguration.filename\nRetrieve the file name loaded for mapping properties value.\nSimulationConfiguration.open_edb_after_build\nEither if open the Edb after the build or not.\nSimulationConfiguration.setup_name\nRetrieve setup name for the simulation.\nSimulationConfiguration.solver_type\nRetrieve the SolverType class to select the solver to be called during the project build.\nSimulationConfiguration\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nFalse\nTrue\nFalse\nEnforce Causality\nEnforce Passivity\nTrue\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nSimulationConfiguration.add_current_source\nSimulationConfiguration.add_dc_ground_source_term\nSimulationConfiguration.add_rlc\nSimulationConfiguration.add_voltage_source\nSimulationConfiguration.build_simulation_project\nSimulationConfiguration.export_json\nSimulationConfiguration.import_json\nSimulationConfiguration.ac_settings\nSimulationConfiguration.batch_solve_settings\nSimulationConfiguration.dc_settings\nSimulationConfiguration.filename\nSimulationConfiguration.open_edb_after_build\nSimulationConfiguration.setup_name\nSimulationConfiguration.solver_type"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration",
        "title": "SimulationConfiguration > SimulationConfiguration > SimulationConfiguration",
        "section": "SimulationConfiguration > SimulationConfiguration",
        "text": "class pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration(filename=None, edb=None)\n\nProvides an ASCII simulation configuration file parser.\n\nThis parser supports all types of inputs for setting up and automating any kind\nof SI or PI simulation with HFSS 3D Layout or Siwave. If fields are omitted, default\nvalues are applied. This class can be instantiated directly from\nConfiguration file.\n\nExamples\n\nThis class is very convenient to build HFSS and SIwave simulation projects from layout.\nIt is leveraging EDB commands from Pyaedt but with keeping high level parameters making more easy PCB automation\nflow. SYZ and DC simulation can be addressed with this class.\n\nThe class is instantiated from an open edb:\n\n>>> from pyedb import Edb\n>>> edb = Edb()\n>>> sim_setup = edb.new_simulation_configuration()\n\nThe returned object sim_setup is a SimulationConfiguration object.\nFrom this class you can assign a lot of parameters related the project configuration but also solver options.\nHere is the list of parameters available:\n\n>>> from dotnet.generic.constants import SolverType\n>>> sim_setup.solver_type = SolverType.Hfss3dLayout\n\nSolver type can be selected, HFSS 3D Layout and Siwave are supported.\n\n>>> sim_setup.signal_nets = [\"net1\", \"net2\"]\n\nSet the list of net names you want to include for the simulation. These nets will\nhave excitations ports created if corresponding pins are found on selected component. We usually refer to signal\nnets but power / reference nets can also be passed into this list if user wants to have ports created on these ones.\n\n>>> sim_setup.power_nets = [\"gnd\", \"vcc\"]\n\nSet the list on power and reference nets. These nets won’t have excitation ports created\non them and will be clipped during the project build if the cutout option is enabled.\n\n>>> sim_setup.components = [\"comp1\", \"comp2\"]\n\nSet the list of components which will be included in the simulation. These components will have ports created on\npins belonging to the net list.\n\n>>> sim_setup.do_cutout_subdesign = True\n\nWhen true activates the layout cutout based on net signal net selection and cutout expansion.\n\n>>> from dotnet.generic.constants import CutoutSubdesignType\n>>> sim_setup.cutout_subdesign_type = CutoutSubdesignType.Conformal\n\nDefine the type of cutout used for computing the clippingextent polygon. CutoutSubdesignType.Conformal\nCutoutSubdesignType.BBox are surpported.\n\n>>> sim_setup.cutout_subdesign_expansion = \"4mm\"\n\nDefine the distance used for computing the extent polygon. Integer or string can be passed.\nFor example 0.001 is in meter so here 1mm. You can also pass the string “1mm” for the same result.\n\n>>> sim_setup.cutout_subdesign_round_corner = True\n\nBoolean to allow using rounded corner for the cutout extent or not.\n\n>>> sim_setup.use_default_cutout = False\n\nWhen True use the native edb API command to process the cutout. Using False uses\nthe Pyaedt one which improves the cutout speed.\n\n>>> sim_setup.generate_solder_balls = True\n\nBoolean to activate the solder ball generation on components. When HFSS solver is selected in combination with this\nparameter, coaxial ports will be created on solder balls for pins belonging to selected signal nets. If Siwave\nsolver is selected this parameter will be ignored.\n\n>>> sim_setup.use_default_coax_port_radial_extension = True\n\nWhen True the default coaxial extent is used for the ports (only for HFSS).\nWhen the design is having dense solder balls close to each other (like typically package design), the default value\nmight be too large and cause port overlapping, then solver failure. To prevent this issue set this parameter to\nFalse will use a smaller value.\n\n>>> sim_setup.output_aedb = r\"C:    emp\\my_edb.aedb\"\n\nSpecify the output edb file after building the project. The parameter must be the complete file path.\nleaving this parameter blank will oervwritte the current open edb.\n\n>>>  sim_setup.dielectric_extent = 0.01\n\nGives the dielectric extent after cutout, keeping default value is advised unless for\nvery specific application.\n\n>>> sim_setup.airbox_horizontal_extent = \"5mm\"\n\nProvide the air box horizonzal extent values. Unitless float value will be\ntreated as ratio but string value like “5mm” is also supported.\n\n>>> sim_setup.airbox_negative_vertical_extent = \"5mm\"\n\nProvide the air box negative vertical extent values. Unitless float value will be\ntreated as ratio but string value like “5mm” is also supported.\n\n>>> sim_setup.airbox_positive_vertical_extent = \"5mm\"\n\nProvide the air box positive vertical extent values. Unitless float value will be\ntreated as ratio but string value like “5mm” is also supported.\n\n>>> sim_setup.use_radiation_boundary = True\n\nWhen True use radiation airbox boundary condition and perfect metal box when\nset to False. Default value is True, using enclosed metal box will greatly change simulation results.\nSetting this parameter as False must be used cautiously.\n\n>>> sim_setup.do_cutout_subdesign = True\n\nTrue activates the cutout with associated parameters. Setting False will\nkeep the entire layout.\nSetting to False can impact the simulation run time or even memory failure if HFSS solver is used.\n\n>>> sim_setup.do_pin_group = False\n\nWhen circuit ports are used, setting to True will force to create pin groups on\ncomponents having pins belonging to same net. Setting to False will generate port on each signal pin with\ntaking the closest reference pin. The last configuration is more often used when users are creating ports on PDN\n(Power delivery Network) and want to connect all pins individually.\n\n>>> from dotnet.generic.constants import SweepType\n>>> sim_setup.sweep_type = SweepType.Linear\n\nSpecify the frequency sweep type, Linear or Log sweep can be defined.\n\nSimulationCOnfiguration also inherit from SimulationConfigurationAc class for High frequency settings.\n\n>>> sim_setup.start_freq = \"OHz\"\n\nDefine the start frequency from the sweep.\n\n>>> sim_setup.stop_freq = \"40GHz\"\n\nDefine the stop frequency from the sweep.\n\n>>> sim_setup.step_freq = \"10MHz\"\n\nDefine the step frequency from the sweep.\n\n>>> sim_setup.decade_count = 100\n\nUsed when log sweep is defined and specify the number of points per decade.\n\n>>> sim_setup.enforce_causality = True\n\nActivate the option Enforce Causality for the solver, recommended for signal integrity application\n\n>>> sim_setup.enforce_passivity = True\n\nActivate the option Enforce Passivity for the solver, recommended for signal integrity application\n\n>>> sim_setup.do_lambda_refinement = True\n\nActivate the lambda refinement for the initial mesh (only for HFSS), default value is True. Keeping this\nactivated is highly recommended.\n\n>>> sim_setup.use_q3d_for_dc = False\n\nEnable when True the Q3D DC point computation. Only needed when very high accuracy is required for DC point.\nCan eventually cause extra computation time.\n\n>>> sim_setup.sweep_name = \"Test_sweep\"\n\nDefine the frequency sweep name.\n\n>>> sim_setup.mesh_freq = \"10GHz\"\n\nDefine the frequency used for adaptive meshing (available for both HFSS and SIwave).\n\n>>> from dotnet.generic.constants import RadiationBoxType\n>>> sim_setup.radiation_box = RadiationBoxType.ConvexHull\n\nDefined the radiation box type, Conformal, Bounding box and ConvexHull are supported (HFSS only).\n\n>>> sim_setup.max_num_passes= 30\n\nDefault value is 30, specify the maximum number of adaptive passes (only HFSS). Reasonable high value is recommended\nto force the solver reaching the convergence criteria.\n\n>>> sim_setup.max_mag_delta_s = 0.02\n\nDefine the convergence criteria\n\n>>> sim_setup.min_num_passes = 2\n\nspecify the minimum number of consecutive coberged passes. Setting to 2 is a good practice to avoid converging on\nlocal minima.\n\n>>> from dotnet.generic.constants import BasisOrder\n>>> sim_setup.basis_order =  BasisOrder.Single\n\nSelect the order basis (HFSS only), Zero, Single, Double and Mixed are supported. For Signal integrity Single or\nMixed should be used.\n\n>>> sim_setup.minimum_void_surface = 0\n\nOnly for Siwave, specify the minimum void surface to be meshed. Void with lower surface value will be ignored by\nmeshing.\n\nSimulationConfiguration also inherits from SimulationDc class to handle DC simulation projects.\n\n>>> sim_setup.dc_compute_inductance = True\n\nTrue activate the DC loop inductance computation (Siwave only), False is deactivated.\n\n>>> sim_setup.dc_slide_position = 1\n\nThe provided value must be between 0 and 2 and correspond ti the SIwave DC slide position in GUI.\n0 : coarse\n1 : medium accuracy\n2 : high accuracy\n\n>>> sim_setup.dc_plot_jv = True\n\nTrue activate the current / voltage plot with Siwave DC solver, False deactivate.\n\n>>> sim_setup.dc_error_energy = 0.02\n\nFix the DC error convergence criteria. In this example 2% is defined.\n\n>>> sim_setup.dc_max_num_pass = 6\n\nProvide the maximum number of passes during Siwave DC adaptive meshing.\n\n>>> sim_setup.dc_min_num_pass = 1\n\nProvide the minimum number of passes during Siwave DC adaptive meshing.\n\n>>> sim_setup.dc_mesh_bondwires = True\n\nTrue bondwires are meshed, False bond wires are ignored during meshing.\n\n>>> sim_setup.dc_num_bondwire_sides = 8\n\nGives the number of facets wirebonds are discretized.\n\n>>> sim_setup.dc_refine_vias = True\n\nTrue meshing refinement on nondwires activated during meshing process. Deactivated when set to False.\n\n>>> sim_setup.dc_report_show_Active_devices = True\n\nActivate when True the components showing in the DC report.\n\n>>> sim_setup.dc_export_thermal_data = True\n\nTrue thermal data are exported for Icepak simulation.\n\n>>> sim_setup.dc_full_report_path = r\"C:    emp\\my_report.html\"\n\nProvides the file path for the DC report.\n\n>>> sim_setup.dc_icepak_temp_file = r\"C:    emp\\my_file\"\n\nProvides icepak temporary files location.\n\n>>> sim_setup.dc_import_thermal_data = False\n\nImport DC thermal data when True`\n\n>>> sim_setup.dc_per_pin_res_path = r\"C:    emp\\dc_pin_res_file\"\nProvides the resistance per pin file path.\n\n>>> sim_setup.dc_per_pin_use_pin_format = True\n\nWhen True activate the pin format.\n\n>>> sim_setup.dc_use_loop_res_for_per_pin = True\n\nActivate the loop resistance usage per pin when True\n\n>>> sim_setup.dc_via_report_path = 'C:\\temp\\via_report_file'\n\nDefine the via report path file.\n\n>>> sim_setup.add_current_source(name=\"test_isrc\",\n>>>                                 current_value=1.2,\n>>>                                 phase_value=0.0,\n>>>                                 impedance=5e7,\n>>>                                 positive_node_component=\"comp1\",\n>>>                                 positive_node_net=\"net1\",\n>>>                                 negative_node_component=\"comp2\",\n>>>                                 negative_node_net=\"net2\"\n>>>                             )\n\nDefine a current source.\n\n>>> sim_setup.add_dc_ground_source_term(source_name=\"test_isrc\", node_to_ground=1)\n\nDefine the pin from a source which has to be set to reference for DC simulation.\n\n>>> sim_setup.add_voltage_source(name=\"test_vsrc\",\n>>>                                 current_value=1.33,\n>>>                                 phase_value=0.0,\n>>>                                 impedance=1e-6,\n>>>                                 positive_node_component=\"comp1\",\n>>>                                 positive_node_net=\"net1\",\n>>>                                 negative_node_component=\"comp2\",\n>>>                                 negative_node_net=\"net2\"\n>>>                             )\n\nDefine a voltage source.\n\n>>> sim_setup.add_dc_ground_source_term(source_name=\"test_vsrc\", node_to_ground=1)\n\nDefine the pin from a source which has to be set to reference for DC simulation.\n\n>>> edb.build_simulation_project(sim_setup)\n\nWill build and save your project.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSimulationConfiguration.add_current_source([...])\n\nAdd a current source for the current SimulationConfiguration instance.\n\nSimulationConfiguration.add_dc_ground_source_term([...])\n\nAdd a dc ground source terminal for Siwave.\n\nSimulationConfiguration.add_rlc([name, ...])\n\nAdd a voltage source for the current SimulationConfiguration instance.\n\nSimulationConfiguration.add_voltage_source([...])\n\nAdd a voltage source for the current SimulationConfiguration instance.\n\nSimulationConfiguration.build_simulation_project()\n\nBuild active simulation project.\n\nSimulationConfiguration.export_json(output_file)\n\nExport Json file from SimulationConfiguration object.\n\nSimulationConfiguration.import_json(input_file)\n\nImport Json file into SimulationConfiguration object instance.\n\n\n\nAttributes\n\n\n\n\n\n\n\nSimulationConfiguration.ac_settings\n\nAC Settings class.\n\nSimulationConfiguration.batch_solve_settings\n\nCutout and Batch Settings class.\n\nSimulationConfiguration.dc_settings\n\nDC Settings class.\n\nSimulationConfiguration.filename\n\nRetrieve the file name loaded for mapping properties value.\n\nSimulationConfiguration.open_edb_after_build\n\nEither if open the Edb after the build or not.\n\nSimulationConfiguration.setup_name\n\nRetrieve setup name for the simulation.\n\nSimulationConfiguration.solver_type\n\nRetrieve the SolverType class to select the solver to be called during the project build.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.export_dc_thermal_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.export_dc_thermal_data.html#export_dc_thermal_data",
        "title": "export_dc_thermal_data",
        "section": "export_dc_thermal_data",
        "text": "Export DC Thermal Data.\nexport_dc_thermal_data\nTrue\nwhen\nactivated\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.export_dc_thermal_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.export_dc_thermal_data.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.export_dc_thermal_data",
        "title": "export_dc_thermal_data > export_dc_thermal_data > export_dc_thermal_data",
        "section": "export_dc_thermal_data > export_dc_thermal_data",
        "text": "property SiwaveDCIRSettings.export_dc_thermal_data\n\nExport DC Thermal Data.\n\nReturns\n\nbool\n\n\n\nTrue when activated, False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.html#cfgsetups",
        "title": "CfgSetups",
        "section": "CfgSetups",
        "text": "CfgSetups.apply()\n\nCfgSetups.retrieve_parameters_from_edb()\n\nCfgSetups.to_dict()\n\nCfgSetups\nCfgSetups.apply\nCfgSetups.retrieve_parameters_from_edb\nCfgSetups.to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.html#pyedb.configuration.cfg_setup.CfgSetups",
        "title": "CfgSetups > CfgSetups > CfgSetups",
        "section": "CfgSetups > CfgSetups",
        "text": "class pyedb.configuration.cfg_setup.CfgSetups(pedb, setups_data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgSetups.apply()\n\n\n\nCfgSetups.retrieve_parameters_from_edb()\n\n\n\nCfgSetups.to_dict()\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.parametrize_position",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.parametrize_position.html#parametrize_position",
        "title": "parametrize_position",
        "section": "parametrize_position",
        "text": "Parametrize the instance position.\nPrefix for the variable name. Default is None.\nExample “MyVariableName” will create 2 Project variables $MyVariableNamesX and $MyVariableNamesY.\nList of variables created.\nparametrize_position\npython:str\noptional\nNone\nList"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.parametrize_position",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.parametrize_position.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.parametrize_position",
        "title": "parametrize_position > parametrize_position > parametrize_position",
        "section": "parametrize_position > parametrize_position",
        "text": "EDBPadstackInstance.parametrize_position(prefix=None)\n\nParametrize the instance position.\n\nParameters\n\nprefix\n\npython:str, optional\n\nPrefix for the variable name. Default is None.\nExample “MyVariableName” will create 2 Project variables $MyVariableNamesX and $MyVariableNamesY.\n\nReturns\n\nList\n\nList of variables created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed_length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed_length.html#deembed_length",
        "title": "deembed_length",
        "section": "deembed_length",
        "text": "Deembed Length.\ndeembed_length"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed_length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed_length.html#pyedb.dotnet.database.edb_data.ports.WavePort.deembed_length",
        "title": "deembed_length > deembed_length > deembed_length",
        "section": "deembed_length > deembed_length",
        "text": "property WavePort.deembed_length\n\nDeembed Length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.point_3d",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.point_3d.html#point_3d",
        "title": "point_3d",
        "section": "point_3d",
        "text": "Compute the Edb 3d Point Data.\nX value.\nY value.\nZ value.\npoint_3d\npython:float\npython:int\npython:str\npython:float\npython:int\npython:str\npython:float\npython:int\npython:str\noptional\nGeometry.Point3DData"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.point_3d",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.point_3d.html#pyedb.dotnet.edb.Edb.point_3d",
        "title": "point_3d > point_3d > point_3d",
        "section": "point_3d > point_3d",
        "text": "Edb.point_3d(x, y, z=0.0)\n\nCompute the Edb 3d Point Data.\n\nParameters\n\nx\n\npython:float, python:int or python:str\n\nX value.\n\ny\n\npython:float, python:int or python:str\n\nY value.\n\nz\n\npython:float, python:int or python:str, optional\n\nZ value.\n\nReturns\n\nGeometry.Point3DData.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points_raw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points_raw.html#points_raw",
        "title": "points_raw",
        "section": "points_raw",
        "text": "Return a list of Edb points.\nEdb Points.\npoints_raw\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points_raw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points_raw.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points_raw",
        "title": "points_raw > points_raw > points_raw",
        "section": "points_raw > points_raw",
        "text": "EdbPolygon.points_raw()\n\nReturn a list of Edb points.\n\nReturns\n\npython:list\n\nEdb Points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.save",
        "href": "api/_autosummary/pyedb.siwave.Siwave.save.html#save",
        "title": "save",
        "section": "save",
        "text": "Save the project.\nFull path to the project. The default is None.\nsave\npython:str\noptional\nNone"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.save",
        "href": "api/_autosummary/pyedb.siwave.Siwave.save.html#pyedb.siwave.Siwave.save",
        "title": "save > save > save",
        "section": "save > save",
        "text": "Siwave.save(file_path: str | Path | None)\n\nSave the project.\n\nParameters\n\nfile_path\n\npython:str, optional\n\nFull path to the project. The default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_padstack_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_padstack_terminal_reference_pin.html#get_padstack_terminal_reference_pin",
        "title": "get_padstack_terminal_reference_pin",
        "section": "get_padstack_terminal_reference_pin",
        "text": "Get a list of pad stacks instances and serves Coax wave ports,\npingroup terminals, PadEdge terminals.\nPreferred reference net name.\nget_padstack_terminal_reference_pin\npython:str\noptional\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_padstack_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_padstack_terminal_reference_pin.html#pyedb.dotnet.database.edb_data.ports.GapPort.get_padstack_terminal_reference_pin",
        "title": "get_padstack_terminal_reference_pin > get_padstack_terminal_reference_pin > get_padstack_terminal_reference_pin",
        "section": "get_padstack_terminal_reference_pin > get_padstack_terminal_reference_pin",
        "text": "GapPort.get_padstack_terminal_reference_pin(gnd_net_name_preference=None)\n\nGet a list of pad stacks instances and serves Coax wave ports,\npingroup terminals, PadEdge terminals.\n\nParameters\n\ngnd_net_name_preference\n\npython:str, optional\n\nPreferred reference net name.\n\nReturns\n\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.vias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.vias.html#vias",
        "title": "vias",
        "section": "vias",
        "text": "Via list.\nvias\npython:list\nof\npyedb.dotnet.database.edb_data.control_file.ControlFileVia"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.vias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.vias.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.vias",
        "title": "vias > vias > vias",
        "section": "vias > vias",
        "text": "property ControlFileStackup.vias\n\nVia list.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.control_file.ControlFileVia\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_polygon.html#in_polygon",
        "title": "in_polygon",
        "section": "in_polygon",
        "text": "Check if padstack Instance is in given polygon data.\nWhether to include partial intersecting instances. The default is True.\nWhether to perform a single check based on the padstack center or check the padstack bounding box.\nTrue when successful, False when failed.\nin_polygon\nPolygonData\nObject\noptional\nTrue\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_polygon.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_polygon",
        "title": "in_polygon > in_polygon > in_polygon",
        "section": "in_polygon > in_polygon",
        "text": "EDBPadstackInstance.in_polygon(polygon_data, include_partial=True, simple_check=False)\n\nCheck if padstack Instance is in given polygon data.\n\nParameters\n\npolygon_data\n\nPolygonData Object\n\n\n\ninclude_partial\n\nbool, optional\n\nWhether to include partial intersecting instances. The default is True.\n\nsimple_check\n\nbool, optional\n\nWhether to perform a single check based on the padstack center or check the padstack bounding box.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_create.html#api_create",
        "title": "api_create",
        "section": "api_create",
        "text": "Edb Dotnet Api Database Edb.NetClass.Create.\napi_create"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_create.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_create",
        "title": "api_create > api_create > api_create",
        "section": "api_create > api_create",
        "text": "EDBNetClassData.api_create(name)\n\nEdb Dotnet Api Database Edb.NetClass.Create.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_intersecting",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_intersecting.html#is_intersecting",
        "title": "is_intersecting",
        "section": "is_intersecting",
        "text": "Check if actual primitive and another primitive or polygon data intesects.\nis_intersecting\npyaeedt.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_intersecting",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_intersecting.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_intersecting",
        "title": "is_intersecting > is_intersecting > is_intersecting",
        "section": "is_intersecting > is_intersecting",
        "text": "EdbPolygon.is_intersecting(primitive)\n\nCheck if actual primitive and another primitive or polygon data intesects.\n\nParameters\n\nprimitive\n\npyaeedt.database.edb_data.primitives_data.EDBPrimitives or PolygonData\n\n\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties.html#hole_properties",
        "title": "hole_properties",
        "section": "hole_properties",
        "text": "Hole properties.\nList of float values for hole properties.\nhole_properties\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties",
        "title": "hole_properties > hole_properties > hole_properties",
        "section": "hole_properties > hole_properties",
        "text": "property EDBPadstack.hole_properties\n\nHole properties.\n\nReturns\n\npython:list\n\nList of float values for hole properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.html#skindepthmeshoperation",
        "title": "SkinDepthMeshOperation",
        "section": "SkinDepthMeshOperation",
        "text": "Mesh operation Skin Depth class.\nThis class is accessible from Hfss Setup in EDB and assign_skin_depth_mesh_operation method.\nSkinDepthMeshOperation.enabled\nWhether if mesh operation is enabled.\nSkinDepthMeshOperation.max_elements\nMaximum number of elements.\nSkinDepthMeshOperation.mesh_operation_type\nMesh operation type.\nSkinDepthMeshOperation.mesh_region\nMesh region name.\nSkinDepthMeshOperation.name\nMesh operation name.\nSkinDepthMeshOperation.net_layer_info\nAdding property for grpc compatibility.\nSkinDepthMeshOperation.nets_layers_list\nList of nets and layers.\nSkinDepthMeshOperation.number_of_layer_elements\nNumber of layer elements.\nSkinDepthMeshOperation.number_of_layers\nAdding property for grpc compatibility.\nSkinDepthMeshOperation.refine_inside\nWhether to turn on refine inside objects.\nSkinDepthMeshOperation.restrict_max_elements\nWhether to restrict maximum number  of elements.\nSkinDepthMeshOperation.skin_depth\nSkin depth value.\nSkinDepthMeshOperation.surface_triangle_length\nSurface triangle length value.\nSkinDepthMeshOperation.type\n\nSkinDepthMeshOperation\nSkinDepthMeshOperation.enabled\nSkinDepthMeshOperation.max_elements\nSkinDepthMeshOperation.mesh_operation_type\nSkinDepthMeshOperation.mesh_region\nSkinDepthMeshOperation.name\nSkinDepthMeshOperation.net_layer_info\nSkinDepthMeshOperation.nets_layers_list\nSkinDepthMeshOperation.number_of_layer_elements\nSkinDepthMeshOperation.number_of_layers\nSkinDepthMeshOperation.refine_inside\nSkinDepthMeshOperation.restrict_max_elements\nSkinDepthMeshOperation.skin_depth\nSkinDepthMeshOperation.surface_triangle_length\nSkinDepthMeshOperation.type"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation",
        "title": "SkinDepthMeshOperation > SkinDepthMeshOperation > SkinDepthMeshOperation",
        "section": "SkinDepthMeshOperation > SkinDepthMeshOperation",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation(parent, edb_object)\n\nMesh operation Skin Depth class.\nThis class is accessible from Hfss Setup in EDB and assign_skin_depth_mesh_operation method.\n\nExamples\n\n>>> mop = edbapp.setups[\"setup1a\"].add_skin_depth_mesh_operation({\"GND\": [\"TOP\", \"BOTTOM\"]})\n>>> mop.max_elements = 3000\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nSkinDepthMeshOperation.enabled\n\nWhether if mesh operation is enabled.\n\nSkinDepthMeshOperation.max_elements\n\nMaximum number of elements.\n\nSkinDepthMeshOperation.mesh_operation_type\n\nMesh operation type.\n\nSkinDepthMeshOperation.mesh_region\n\nMesh region name.\n\nSkinDepthMeshOperation.name\n\nMesh operation name.\n\nSkinDepthMeshOperation.net_layer_info\n\nAdding property for grpc compatibility.\n\nSkinDepthMeshOperation.nets_layers_list\n\nList of nets and layers.\n\nSkinDepthMeshOperation.number_of_layer_elements\n\nNumber of layer elements.\n\nSkinDepthMeshOperation.number_of_layers\n\nAdding property for grpc compatibility.\n\nSkinDepthMeshOperation.refine_inside\n\nWhether to turn on refine inside objects.\n\nSkinDepthMeshOperation.restrict_max_elements\n\nWhether to restrict maximum number  of elements.\n\nSkinDepthMeshOperation.skin_depth\n\nSkin depth value.\n\nSkinDepthMeshOperation.surface_triangle_length\n\nSurface triangle length value.\n\nSkinDepthMeshOperation.type\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons_by_layer.html#polygons_by_layer",
        "title": "polygons_by_layer",
        "section": "polygons_by_layer",
        "text": "Primitives with layer names as keys.\nDictionary of primitives with layer names as keys.\npolygons_by_layer\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons_by_layer.html#pyedb.dotnet.database.modeler.Modeler.polygons_by_layer",
        "title": "polygons_by_layer > polygons_by_layer > polygons_by_layer",
        "section": "polygons_by_layer > polygons_by_layer",
        "text": "property Modeler.polygons_by_layer\n\nPrimitives with layer names as keys.\n\nReturns\n\npython:dict\n\nDictionary of primitives with layer names as keys.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.database",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.database.html#database",
        "title": "database",
        "section": "database",
        "text": "Edb Dotnet Api Database.\ndatabase"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.database",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.database.html#pyedb.dotnet.edb.Edb.database",
        "title": "database > database > database",
        "section": "database > database",
        "text": "property Edb.database\n\nEdb Dotnet Api Database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.ref_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.ref_terminal.html#ref_terminal",
        "title": "ref_terminal",
        "section": "ref_terminal",
        "text": "Get reference terminal.\n.deprecated:: pyedb 0.47.0\nUse: attribute:reference_terminal instead.\nref_terminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.ref_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.ref_terminal.html#pyedb.dotnet.database.edb_data.ports.WavePort.ref_terminal",
        "title": "ref_terminal > ref_terminal > ref_terminal",
        "section": "ref_terminal > ref_terminal",
        "text": "property WavePort.ref_terminal\n\nGet reference terminal.\n\n.deprecated:: pyedb 0.47.0\nUse: attribute:reference_terminal instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.SingleFrequency",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.SingleFrequency.html#singlefrequency",
        "title": "SingleFrequency",
        "section": "SingleFrequency",
        "text": "SingleFrequency"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.SingleFrequency",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.SingleFrequency.html#pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.SingleFrequency",
        "title": "SingleFrequency > SingleFrequency > SingleFrequency",
        "section": "SingleFrequency > SingleFrequency",
        "text": "AdaptiveType.SingleFrequency = 0\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_plane_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_plane_area_to_mesh.html#dc_min_plane_area_to_mesh",
        "title": "dc_min_plane_area_to_mesh",
        "section": "dc_min_plane_area_to_mesh",
        "text": "Retrieve the value of the minimum plane area to be meshed by Siwave for DC solution.\nThe value of the minimum plane area.\ndc_min_plane_area_to_mesh\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_plane_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_plane_area_to_mesh.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_plane_area_to_mesh",
        "title": "dc_min_plane_area_to_mesh > dc_min_plane_area_to_mesh > dc_min_plane_area_to_mesh",
        "section": "dc_min_plane_area_to_mesh > dc_min_plane_area_to_mesh",
        "text": "property SimulationConfigurationDc.dc_min_plane_area_to_mesh\n\nRetrieve the value of the minimum plane area to be meshed by Siwave for DC solution.\n\nReturns\n\npython:float\n\nThe value of the minimum plane area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.build_simulation_project",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.build_simulation_project.html#build_simulation_project",
        "title": "build_simulation_project",
        "section": "build_simulation_project",
        "text": "Build active simulation project. This method requires to be run inside Edb Class.\nbuild_simulation_project"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.build_simulation_project",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.build_simulation_project.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.build_simulation_project",
        "title": "build_simulation_project > build_simulation_project > build_simulation_project",
        "section": "build_simulation_project > build_simulation_project",
        "text": "SimulationConfiguration.build_simulation_project()\n\nBuild active simulation project. This method requires to be run inside Edb Class.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.update_layout",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.update_layout.html#update_layout",
        "title": "update_layout",
        "section": "update_layout",
        "text": "Set layer collection into edb.\nupdate_layout"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.update_layout",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.update_layout.html#pyedb.dotnet.database.stackup.Stackup.update_layout",
        "title": "update_layout > update_layout > update_layout",
        "section": "update_layout > update_layout",
        "text": "Stackup.update_layout()\n\nSet layer collection into edb.\n\nParameters\n\nstackup\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.rotate",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Rotate polygon around a center point by an angle.\nValue of the rotation angle in degree.\nIf None rotation is done from polygon center.\nTrue when successful, False when failed.\nrotate\npython:float\nList\nof\npython:float\npython:str\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.rotate",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.rotate.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.rotate",
        "title": "rotate > rotate > rotate",
        "section": "rotate > rotate",
        "text": "EdbPolygon.rotate(angle, center=None)\n\nRotate polygon around a center point by an angle.\n\nParameters\n\nangle\n\npython:float\n\nValue of the rotation angle in degree.\n\ncenter\n\nList of python:float or python:str [x,y], optional\n\nIf None rotation is done from polygon center.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> edbapp = ansys.aedt.core.Edb(\"myproject.aedb\")\n>>> top_layer_polygon = [poly for poly in edbapp.modeler.polygons if poly.layer_name == \"Top Layer\"]\n>>> for polygon in top_layer_polygon:\n>>>     polygon.rotate(angle=45)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_source_on_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_source_on_component.html#create_source_on_component",
        "title": "create_source_on_component",
        "section": "create_source_on_component",
        "text": "Create voltage, current source, or resistor on component.\nList of edb_data.sources.Source objects.\nTrue when successful, False when failed.\ncreate_source_on_component\npython:list\nSource\nedb_data.sources.Source\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_source_on_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_source_on_component.html#pyedb.dotnet.database.components.Components.create_source_on_component",
        "title": "create_source_on_component > create_source_on_component > create_source_on_component",
        "section": "create_source_on_component > create_source_on_component",
        "text": "Components.create_source_on_component(sources=None)\n\nCreate voltage, current source, or resistor on component.\n\nParameters\n\nsources\n\npython:list[Source]\n\nList of edb_data.sources.Source objects.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/index",
        "href": "api/edb_data/index.html#edb-data-classes",
        "title": "EDB data classes",
        "section": "EDB data classes",
        "text": "This section describes EDB data classes.\nEDB data classes"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.shunt_rlc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.shunt_rlc.html#shunt_rlc",
        "title": "shunt_rlc",
        "section": "shunt_rlc",
        "text": "Dictionary of shunt RLC components.\nshunt_rlc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.shunt_rlc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.shunt_rlc.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.shunt_rlc",
        "title": "shunt_rlc > shunt_rlc > shunt_rlc",
        "section": "shunt_rlc > shunt_rlc",
        "text": "property EDBExtendedNetData.shunt_rlc\n\nDictionary of shunt RLC components.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.mesh_operations.html#mesh_operations",
        "title": "mesh_operations",
        "section": "mesh_operations",
        "text": "mesh_operations"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.mesh_operations.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.mesh_operations",
        "title": "mesh_operations > mesh_operations > mesh_operations",
        "section": "mesh_operations > mesh_operations",
        "text": "property SiwaveSimulationSetup.mesh_operations\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.set_attributes.html#pyedb.configuration.cfg_common.CfgBase.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgBase.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.return_current_distribution",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.return_current_distribution.html#return_current_distribution",
        "title": "return_current_distribution",
        "section": "return_current_distribution",
        "text": "Whether to enable the return current distribution.\nThis option is used to accurately model the change of the characteristic impedance\nof transmission lines caused by a discontinuous ground plane. Instead of injecting\nthe return current of a trace into a single point on the ground plane,\nthe return current for a high impedance trace is spread out.\nThe trace return current is not distributed when all traces attached to a node\nhave a characteristic impedance less than 75 ohms or if the difference between\ntwo connected traces is less than 25 ohms.\nTrue if return current distribution is used, False otherwise.\nreturn_current_distribution\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.return_current_distribution",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.return_current_distribution.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.return_current_distribution",
        "title": "return_current_distribution > return_current_distribution > return_current_distribution",
        "section": "return_current_distribution > return_current_distribution",
        "text": "property AdvancedSettings.return_current_distribution\n\nWhether to enable the return current distribution.\nThis option is used to accurately model the change of the characteristic impedance\nof transmission lines caused by a discontinuous ground plane. Instead of injecting\nthe return current of a trace into a single point on the ground plane,\nthe return current for a high impedance trace is spread out.\nThe trace return current is not distributed when all traces attached to a node\nhave a characteristic impedance less than 75 ohms or if the difference between\ntwo connected traces is less than 25 ohms.\n\nReturns\n\nbool\n\nTrue if return current distribution is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects.html#use_enable_advanced_cap_effects",
        "title": "use_enable_advanced_cap_effects",
        "section": "use_enable_advanced_cap_effects",
        "text": "Applies all the capacitance related effects such as Conformal Dielectrics, Loading Effect,\nDielectric Damage.\nuse_enable_advanced_cap_effects"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects",
        "title": "use_enable_advanced_cap_effects > use_enable_advanced_cap_effects > use_enable_advanced_cap_effects",
        "section": "use_enable_advanced_cap_effects > use_enable_advanced_cap_effects",
        "text": "property RaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects\n\nApplies all the capacitance related effects such as Conformal Dielectrics, Loading Effect,\nDielectric Damage.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/LayerData",
        "href": "api/edb_data/LayerData.html#stackup--layers",
        "title": "Stackup & layers",
        "section": "Stackup & layers",
        "text": "These classes are the containers of the layer and stackup manager of the EDB API.\nLayerEdbClass\nManages Edb Layers.\nStackup & layers\nLayerEdbClass"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Flag indicating if the setup is enabled.\nenabled"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.enabled.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property HfssSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweeps.html#sweeps",
        "title": "sweeps",
        "section": "sweeps",
        "text": "List of frequency sweeps.\nsweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweeps.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweeps",
        "title": "sweeps > sweeps > sweeps",
        "section": "sweeps > sweeps",
        "text": "property SiwaveDCSimulationSetup.sweeps\n\nList of frequency sweeps.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.import_thermal_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.import_thermal_data.html#import_thermal_data",
        "title": "import_thermal_data",
        "section": "import_thermal_data",
        "text": "Import Thermal Data.\nimport_thermal_data\nTrue\nwhen\nactivated\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.import_thermal_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.import_thermal_data.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.import_thermal_data",
        "title": "import_thermal_data > import_thermal_data > import_thermal_data",
        "section": "import_thermal_data > import_thermal_data",
        "text": "property SiwaveDCIRSettings.import_thermal_data\n\nImport Thermal Data.\n\nReturns\n\nbool\n\n\n\nTrue when activated, False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coplanar_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coplanar_instances.html#coplanar_instances",
        "title": "coplanar_instances",
        "section": "coplanar_instances",
        "text": "Retrieve the list of component to be replaced by circuit ports (obsolete).\ncoplanar_instances\npython:list\npython:str\nList\nof\ncomponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coplanar_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coplanar_instances.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coplanar_instances",
        "title": "coplanar_instances > coplanar_instances > coplanar_instances",
        "section": "coplanar_instances > coplanar_instances",
        "text": "property SimulationConfigurationBatch.coplanar_instances\n\nRetrieve the list of component to be replaced by circuit ports (obsolete).\n\nReturns\n\npython:list[python:str]\n\n\n\nList of component name.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.surface_roughness_model",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.surface_roughness_model.html#surface_roughness_model",
        "title": "surface_roughness_model",
        "section": "surface_roughness_model",
        "text": "Chosen Model setting\nModel allowed, \"None\", \"Exponential\" or \"Hammerstad\".\nsurface_roughness_model\n\"None\"\n\"Exponential\"\n\"Hammerstad\"\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.surface_roughness_model",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.surface_roughness_model.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.surface_roughness_model",
        "title": "surface_roughness_model > surface_roughness_model > surface_roughness_model",
        "section": "surface_roughness_model > surface_roughness_model",
        "text": "property HFSSPISimulationSettings.surface_roughness_model\n\nChosen Model setting\nModel allowed, \"None\", \"Exponential\" or \"Hammerstad\".\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.geometry_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.geometry_type.html#geometry_type",
        "title": "geometry_type",
        "section": "geometry_type",
        "text": "Geometry type.\nType of the geometry.\ngeometry_type\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.geometry_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.geometry_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.geometry_type",
        "title": "geometry_type > geometry_type > geometry_type",
        "section": "geometry_type > geometry_type",
        "text": "property EDBPadProperties.geometry_type\n\nGeometry type.\n\nReturns\n\npython:int\n\nType of the geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_rats",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_rats.html#get_rats",
        "title": "get_rats",
        "section": "get_rats",
        "text": "Retrieve a list of dictionaries of the reference designator, pin names, and net names.\nList of dictionaries of the reference designator, pin names,\nand net names.\nget_rats\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_rats",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_rats.html#pyedb.dotnet.database.components.Components.get_rats",
        "title": "get_rats > get_rats > get_rats",
        "section": "get_rats > get_rats",
        "text": "Components.get_rats()\n\nRetrieve a list of dictionaries of the reference designator, pin names, and net names.\n\nReturns\n\npython:list\n\nList of dictionaries of the reference designator, pin names,\nand net names.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_rats()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_simulation_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_simulation_settings.html#get_simulation_settings",
        "title": "get_simulation_settings",
        "section": "get_simulation_settings",
        "text": "get_simulation_settings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_simulation_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_simulation_settings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.get_simulation_settings",
        "title": "get_simulation_settings > get_simulation_settings > get_simulation_settings",
        "section": "get_simulation_settings > get_simulation_settings",
        "text": "RaptorXSimulationSetup.get_simulation_settings()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_ccw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_ccw.html#is_ccw",
        "title": "is_ccw",
        "section": "is_ccw",
        "text": "Test whether arc is counter clockwise.\nis_ccw"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_ccw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_ccw.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_ccw",
        "title": "is_ccw > is_ccw > is_ccw",
        "section": "is_ccw > is_ccw",
        "text": "property EDBArcs.is_ccw\n\nTest whether arc is counter clockwise.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_sweep.html#add_sweep",
        "title": "add_sweep",
        "section": "add_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nAdded for grpc compatibility.\nAdded for rpc compatibility.\nAdded for grpc compatibility.\nAdded for grpc compatibility.\nList of frequency points. The default is None.\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\nadd_sweep\npython:str\noptional\nNone\npython:str\noptional\npython:str\noptional\npython:str\noptional\noptional\npython:list\noptional\nNone\npython:str\noptional\n\"interpolation\"\n\"discrete\""
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_sweep.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_sweep",
        "title": "add_sweep > add_sweep > add_sweep",
        "section": "add_sweep > add_sweep",
        "text": "HFSSPISimulationSetup.add_sweep(name: str | None = None, distribution: str | None = None, start_freq: str | None = None, stop_freq: str | None = None, step=None, frequency_set: list | None = None, sweep_type: str = 'interpolation', **kwargs)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\ndistribution\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstart_freq\n\npython:str, optional\n\nAdded for rpc compatibility.\n\nstop_freq\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstep\n\noptional\n\nAdded for grpc compatibility.\n\nfrequency_set\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nsweep_type\n\npython:str, optional\n\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\n\nReturns\n\n\n\n——-\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_sweep(name=\"sw1\", frequency_set=[\"linear count\", \"1MHz\", \"100MHz\", 10])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.open",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.open.html#open",
        "title": "open",
        "section": "open",
        "text": "Open an existing Database at the specified file location.\nPath to top-level Database folder.\nObtain read-only access.\nThe opened Database object, or None if not found.\nopen\npython:str\nDatabase\npython:None"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.open",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.open.html#pyedb.dotnet.edb.Edb.open",
        "title": "open > open > open",
        "section": "open > open",
        "text": "Edb.open(db_path, read_only)\n\nOpen an existing Database at the specified file location.\n\nParameters\n\ndb_path\n\npython:str\n\nPath to top-level Database folder.\n\nread_only\n\nbool\n\nObtain read-only access.\n\nReturns\n\nDatabase or python:None\n\nThe opened Database object, or None if not found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/simulation_setup/define_hfss_extent",
        "href": "user_guide/simulation_setup/define_hfss_extent.html#define-an-hfss-extent",
        "title": "Define an HFSS extent",
        "section": "Define an HFSS extent",
        "text": "This page shows how to define an HFSS extent using the SimulationConfiguration class.\nDefine an HFSS extent\nSimulationConfiguration"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Flag indicating if the setup is enabled.\nenabled"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.enabled.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property SiwaveDCSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_data_from_db.html#pyedb.configuration.cfg_boundaries.CfgBoundaries.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgBoundaries.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.html#curveapproxsettings",
        "title": "CurveApproxSettings",
        "section": "CurveApproxSettings",
        "text": "Manages EDB methods for curve approximate settings.\nCurveApproxSettings.arc_angle\nStep-size to be used for arc faceting.\nCurveApproxSettings.arc_to_chord_error\nMaximum tolerated error between straight edge (chord) and faceted arc.\nCurveApproxSettings.max_arc_points\nMaximum number of mesh points for arc segments.\nCurveApproxSettings.start_azimuth\nAzimuth angle for first mesh point of the arc.\nCurveApproxSettings.use_arc_to_chord_error\nWhether to turn on the arc-to-chord error setting for arc faceting.\nCurveApproxSettings\nCurveApproxSettings.arc_angle\nCurveApproxSettings.arc_to_chord_error\nCurveApproxSettings.max_arc_points\nCurveApproxSettings.start_azimuth\nCurveApproxSettings.use_arc_to_chord_error"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings",
        "title": "CurveApproxSettings > CurveApproxSettings > CurveApproxSettings",
        "section": "CurveApproxSettings > CurveApproxSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings(parent)\n\nManages EDB methods for curve approximate settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nCurveApproxSettings.arc_angle\n\nStep-size to be used for arc faceting.\n\nCurveApproxSettings.arc_to_chord_error\n\nMaximum tolerated error between straight edge (chord) and faceted arc.\n\nCurveApproxSettings.max_arc_points\n\nMaximum number of mesh points for arc segments.\n\nCurveApproxSettings.start_azimuth\n\nAzimuth angle for first mesh point of the arc.\n\nCurveApproxSettings.use_arc_to_chord_error\n\nWhether to turn on the arc-to-chord error setting for arc faceting.\n\n"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes EDB functions, classes, and methods\nfor EDB apps and modules. Use the search feature or click links\nto view API documentation.\nThe PyEDB API includes classes for apps and modules. You must initialize the\nEdb class to get access to all modules and methods. All other classes and\nmethods are inherited into the Edb class.\nIf EDB is launched within the HfssdLayout class, EDB is accessible in read-only mode.\nExample\nAPI reference\nEdb\nEdb\nHfssdLayout"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.apply.html#pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgPackageDefinitions.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_siwave_dc_results",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_siwave_dc_results.html#export_siwave_dc_results",
        "title": "export_siwave_dc_results",
        "section": "export_siwave_dc_results",
        "text": "Close EDB and solve it with Siwave.\nSiwave full project name.\nSiwave DC Analysis name.\nOuptu folder where files will be downloaded.\nEither if generate or not html report. Default is True.\nEither if generate or not vias report. Default is True.\nEither if generate or not voltage probe report. Default is True.\nEither if generate or not current source report. Default is True.\nEither if generate or not voltage source report. Default is True.\nEither if generate or not power tree image. Default is True.\nEither if generate or not loop resistance report. Default is True.\nList of files generated.\nexport_siwave_dc_results\npython:str\npython:str\npython:str\noptional\noptional\noptional\noptional\noptional\noptional\noptional\noptional\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_siwave_dc_results",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_siwave_dc_results.html#pyedb.dotnet.edb.Edb.export_siwave_dc_results",
        "title": "export_siwave_dc_results > export_siwave_dc_results > export_siwave_dc_results",
        "section": "export_siwave_dc_results > export_siwave_dc_results",
        "text": "Edb.export_siwave_dc_results(siwave_project, solution_name, output_folder=None, html_report=True, vias=True, voltage_probes=True, current_sources=True, voltage_sources=True, power_tree=True, loop_res=True)\n\nClose EDB and solve it with Siwave.\n\nParameters\n\nsiwave_project\n\npython:str\n\nSiwave full project name.\n\nsolution_name\n\npython:str\n\nSiwave DC Analysis name.\n\noutput_folder\n\npython:str, optional\n\nOuptu folder where files will be downloaded.\n\nhtml_report\n\nbool, optional\n\nEither if generate or not html report. Default is True.\n\nvias\n\nbool, optional\n\nEither if generate or not vias report. Default is True.\n\nvoltage_probes\n\nbool, optional\n\nEither if generate or not voltage probe report. Default is True.\n\ncurrent_sources\n\nbool, optional\n\nEither if generate or not current source report. Default is True.\n\nvoltage_sources\n\nbool, optional\n\nEither if generate or not voltage source report. Default is True.\n\npower_tree\n\nbool, optional\n\nEither if generate or not power tree image. Default is True.\n\nloop_res\n\nbool, optional\n\nEither if generate or not loop resistance report. Default is True.\n\nReturns\n\npython:list\n\nList of files generated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete this primitive.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.delete.html#pyedb.dotnet.database.edb_data.ports.GapPort.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "GapPort.delete()\n\nDelete this primitive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_si_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_si_settings.html#use_si_settings",
        "title": "use_si_settings",
        "section": "use_si_settings",
        "text": "Whether to use SI Settings.\nuse_si_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_si_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_si_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_si_settings",
        "title": "use_si_settings > use_si_settings > use_si_settings",
        "section": "use_si_settings > use_si_settings",
        "text": "property SiwaveSimulationSetup.use_si_settings\n\nWhether to use SI Settings.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.materials",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.materials.html#materials",
        "title": "materials",
        "section": "materials",
        "text": "Get materials.\nmaterials"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.materials",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.materials.html#pyedb.dotnet.database.materials.Materials.materials",
        "title": "materials > materials > materials",
        "section": "materials > materials",
        "text": "property Materials.materials\n\nGet materials.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.healing_option",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.healing_option.html#healing_option",
        "title": "healing_option",
        "section": "healing_option",
        "text": "Whether to turn on healing of mis-aligned points and edges.\nOptions are:\n0- Turn off.\n1- Turn on.\nhealing_option\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.healing_option",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.healing_option.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.healing_option",
        "title": "healing_option > healing_option > healing_option",
        "section": "healing_option > healing_option",
        "text": "property DefeatureSettings.healing_option\n\nWhether to turn on healing of mis-aligned points and edges.\nOptions are:\n0- Turn off.\n1- Turn on.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.retrieve_parameters_from_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.retrieve_parameters_from_edb.html#retrieve_parameters_from_edb",
        "title": "retrieve_parameters_from_edb",
        "section": "retrieve_parameters_from_edb",
        "text": "retrieve_parameters_from_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.retrieve_parameters_from_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.retrieve_parameters_from_edb.html#pyedb.configuration.cfg_padstacks.CfgPadstacks.retrieve_parameters_from_edb",
        "title": "retrieve_parameters_from_edb > retrieve_parameters_from_edb > retrieve_parameters_from_edb",
        "section": "retrieve_parameters_from_edb > retrieve_parameters_from_edb",
        "text": "CfgPadstacks.retrieve_parameters_from_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.do_renormalize",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.do_renormalize.html#do_renormalize",
        "title": "do_renormalize",
        "section": "do_renormalize",
        "text": "Determine whether port renormalization is enabled.\ndo_renormalize"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.do_renormalize",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.do_renormalize.html#pyedb.dotnet.database.edb_data.ports.WavePort.do_renormalize",
        "title": "do_renormalize > do_renormalize > do_renormalize",
        "section": "do_renormalize > do_renormalize",
        "text": "property WavePort.do_renormalize\n\nDetermine whether port renormalization is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.html#advancedsettings",
        "title": "AdvancedSettings",
        "section": "AdvancedSettings",
        "text": "AdvancedSettings.get_configurations()\nGet all attributes.\nAdvancedSettings.restore_default()\n\nAdvancedSettings.set_pi_slider(value)\n\nAdvancedSettings.set_si_slider(value)\n\nAdvancedSettings.automatic_mesh\nWhether to automatically pick a suitable mesh refinement frequency, depending on drawing size, number of modes, and/or maximum sweep frequency.\nAdvancedSettings.ignore_non_functional_pads\nExclude non-functional pads.\nAdvancedSettings.include_coplane_coupling\nWhether to enable coupling between traces and adjacent plane edges.\nAdvancedSettings.include_fringe_coupling\nWhether to include the effect of fringe field coupling between stacked cavities.\nAdvancedSettings.include_infinite_ground\nWhether to Include a ground plane to serve as a voltage reference for traces and planes if they are not defined in the layout.\nAdvancedSettings.include_inter_plane_coupling\nWhether to turn on InterPlane Coupling.\nAdvancedSettings.include_split_plane_coupling\nWhether to account for coupling between adjacent parallel plane edges.\nAdvancedSettings.include_trace_coupling\nWhether to model coupling between adjacent traces.\nAdvancedSettings.include_vi_sources\nWhether to include the effect of parasitic elements from voltage and current sources.\nAdvancedSettings.infinite_ground_location\nElevation of the infinite unconnected ground plane placed under the design.\nAdvancedSettings.max_coupled_lines\nMaximum number of coupled lines to build the new coupled transmission line model.\nAdvancedSettings.mesh_frequency\nMesh size based on the effective wavelength at the specified frequency.\nAdvancedSettings.min_pad_area_to_mesh\nMinimum void pad area to mesh to include.\nAdvancedSettings.min_plane_area_to_mesh\nMinimum plane area to mesh to include.\nAdvancedSettings.min_void_area\nMinimum void area to include.\nAdvancedSettings.perform_erc\nWhether to perform an electrical rule check while generating the solver input.\nAdvancedSettings.return_current_distribution\nWhether to enable the return current distribution.\nAdvancedSettings.sim_setup_info\nEDB internal simulation setup object.\nAdvancedSettings.snap_length_threshold\nSnapping length threshold.\nAdvancedSettings.xtalk_threshold\nXTalk threshold.\nAdvancedSettings\nAdvancedSettings.get_configurations\nAdvancedSettings.restore_default\nAdvancedSettings.set_pi_slider\nAdvancedSettings.set_si_slider\nAdvancedSettings.automatic_mesh\nAdvancedSettings.ignore_non_functional_pads\nAdvancedSettings.include_coplane_coupling\nAdvancedSettings.include_fringe_coupling\nAdvancedSettings.include_infinite_ground\nAdvancedSettings.include_inter_plane_coupling\nAdvancedSettings.include_split_plane_coupling\nAdvancedSettings.include_trace_coupling\nAdvancedSettings.include_vi_sources\nAdvancedSettings.infinite_ground_location\nAdvancedSettings.max_coupled_lines\nAdvancedSettings.mesh_frequency\nAdvancedSettings.min_pad_area_to_mesh\nAdvancedSettings.min_plane_area_to_mesh\nAdvancedSettings.min_void_area\nAdvancedSettings.perform_erc\nAdvancedSettings.return_current_distribution\nAdvancedSettings.sim_setup_info\nAdvancedSettings.snap_length_threshold\nAdvancedSettings.xtalk_threshold"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings",
        "title": "AdvancedSettings > AdvancedSettings > AdvancedSettings",
        "section": "AdvancedSettings > AdvancedSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings(parent)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nAdvancedSettings.get_configurations()\n\nGet all attributes.\n\nAdvancedSettings.restore_default()\n\n\n\nAdvancedSettings.set_pi_slider(value)\n\n\n\nAdvancedSettings.set_si_slider(value)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nAdvancedSettings.automatic_mesh\n\nWhether to automatically pick a suitable mesh refinement frequency, depending on drawing size, number of modes, and/or maximum sweep frequency.\n\nAdvancedSettings.ignore_non_functional_pads\n\nExclude non-functional pads.\n\nAdvancedSettings.include_coplane_coupling\n\nWhether to enable coupling between traces and adjacent plane edges.\n\nAdvancedSettings.include_fringe_coupling\n\nWhether to include the effect of fringe field coupling between stacked cavities.\n\nAdvancedSettings.include_infinite_ground\n\nWhether to Include a ground plane to serve as a voltage reference for traces and planes if they are not defined in the layout.\n\nAdvancedSettings.include_inter_plane_coupling\n\nWhether to turn on InterPlane Coupling.\n\nAdvancedSettings.include_split_plane_coupling\n\nWhether to account for coupling between adjacent parallel plane edges.\n\nAdvancedSettings.include_trace_coupling\n\nWhether to model coupling between adjacent traces.\n\nAdvancedSettings.include_vi_sources\n\nWhether to include the effect of parasitic elements from voltage and current sources.\n\nAdvancedSettings.infinite_ground_location\n\nElevation of the infinite unconnected ground plane placed under the design.\n\nAdvancedSettings.max_coupled_lines\n\nMaximum number of coupled lines to build the new coupled transmission line model.\n\nAdvancedSettings.mesh_frequency\n\nMesh size based on the effective wavelength at the specified frequency.\n\nAdvancedSettings.min_pad_area_to_mesh\n\nMinimum void pad area to mesh to include.\n\nAdvancedSettings.min_plane_area_to_mesh\n\nMinimum plane area to mesh to include.\n\nAdvancedSettings.min_void_area\n\nMinimum void area to include.\n\nAdvancedSettings.perform_erc\n\nWhether to perform an electrical rule check while generating the solver input.\n\nAdvancedSettings.return_current_distribution\n\nWhether to enable the return current distribution.\n\nAdvancedSettings.sim_setup_info\n\nEDB internal simulation setup object.\n\nAdvancedSettings.snap_length_threshold\n\nSnapping length threshold.\n\nAdvancedSettings.xtalk_threshold\n\nXTalk threshold.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete current simulation setup.\ndelete"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "SimulationSetup.delete()\n\nDelete current simulation setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_negative",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_negative.html#is_negative",
        "title": "is_negative",
        "section": "is_negative",
        "text": "Determine whether this primitive is negative.\nTrue if it is negative, False otherwise.\nis_negative"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_negative",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_negative.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_negative",
        "title": "is_negative > is_negative > is_negative",
        "section": "is_negative > is_negative",
        "text": "property EdbPolygon.is_negative\n\nDetermine whether this primitive is negative.\n\nReturns\n\nbool\n\nTrue if it is negative, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin_group.html#create_current_source_on_pin_group",
        "title": "create_current_source_on_pin_group",
        "section": "create_current_source_on_pin_group",
        "text": "Create current source between two pin groups.\nName of the positive pin group.\nName of the negative pin group.\nMagnitude of the source.\nPhase of the source\ncreate_current_source_on_pin_group\npython:str\npython:str\npython:int\npython:float\noptional\npython:int\npython:float\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin_group.html#pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin_group",
        "title": "create_current_source_on_pin_group > create_current_source_on_pin_group > create_current_source_on_pin_group",
        "section": "create_current_source_on_pin_group > create_current_source_on_pin_group",
        "text": "EdbSiwave.create_current_source_on_pin_group(pos_pin_group_name, neg_pin_group_name, magnitude=1, phase=0, name=None)\n\nCreate current source between two pin groups.\n\nParameters\n\npos_pin_group_name\n\npython:str\n\nName of the positive pin group.\n\nneg_pin_group_name\n\npython:str\n\nName of the negative pin group.\n\nmagnitude\n\npython:int, python:float, optional\n\nMagnitude of the source.\n\nphase\n\npython:int, python:float, optional\n\nPhase of the source\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_operation_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_operation_type.html#mesh_operation_type",
        "title": "mesh_operation_type",
        "section": "mesh_operation_type",
        "text": "Mesh operation type.\nOptions:\n0- kMeshSetupBase\n1- kMeshSetupLength\n2- kMeshSetupSkinDepth\n3- kNumMeshOpTypes.\nmesh_operation_type\nkMeshSetupBase\nkMeshSetupLength\nkMeshSetupSkinDepth\nkNumMeshOpTypes\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_operation_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_operation_type.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_operation_type",
        "title": "mesh_operation_type > mesh_operation_type > mesh_operation_type",
        "section": "mesh_operation_type > mesh_operation_type",
        "text": "property MeshOperation.mesh_operation_type\n\nMesh operation type.\nOptions:\n0- kMeshSetupBase\n1- kMeshSetupLength\n2- kMeshSetupSkinDepth\n3- kNumMeshOpTypes.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_element_data",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_element_data.html#export_element_data",
        "title": "export_element_data",
        "section": "export_element_data",
        "text": "Export element data.\nName of the setup.\nPath to the exported report.\nType of the data. The default is \"Vias\".\nTrue when successful, False when failed.\nexport_element_data\npython:str\npython:str\npython:str\noptional\n\"Vias\"\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_element_data",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_element_data.html#pyedb.siwave.Siwave.export_element_data",
        "title": "export_element_data > export_element_data > export_element_data",
        "section": "export_element_data > export_element_data",
        "text": "Siwave.export_element_data(simulation_name, file_path, data_type='Vias')\n\nExport element data.\n\nParameters\n\nsimulation_name\n\npython:str\n\nName of the setup.\n\nfile_path\n\npython:str\n\nPath to the exported report.\n\ndata_type\n\npython:str, optional\n\nType of the data. The default is \"Vias\".\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "enabled"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.enabled.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property HFSSSimulationSettings.enabled\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_rectangle_in_pad",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_rectangle_in_pad.html#create_rectangle_in_pad",
        "title": "create_rectangle_in_pad",
        "section": "create_rectangle_in_pad",
        "text": "Create a rectangle inscribed inside a padstack instance pad.\nThe rectangle is fully inscribed in the pad and has the maximum area.\nIt is necessary to specify the layer on which the rectangle will be created.\nName of the layer on which to create the polygon.\nIf True does not create the rectangle and just returns a list containing the rectangle vertices.\nDefault is False.\nOrder of the lattice partition used to find the quasi-lattice polygon that approximates polygon.\nDefault is 16.\nPolygon when successful, False when failed, list of list if return_points=True.\ncreate_rectangle_in_pad\npython:str\noptional\npython:float\noptional\npolygon\n16\nList\npyedb.dotnet.database.edb_data.primitives.EDBPrimitives\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_rectangle_in_pad",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_rectangle_in_pad.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_rectangle_in_pad",
        "title": "create_rectangle_in_pad > create_rectangle_in_pad > create_rectangle_in_pad",
        "section": "create_rectangle_in_pad > create_rectangle_in_pad",
        "text": "EDBPadstackInstance.create_rectangle_in_pad(layer_name, return_points=False, partition_max_order=16)\n\nCreate a rectangle inscribed inside a padstack instance pad.\n\nThe rectangle is fully inscribed in the pad and has the maximum area.\nIt is necessary to specify the layer on which the rectangle will be created.\n\nParameters\n\nlayer_name\n\npython:str\n\nName of the layer on which to create the polygon.\n\nreturn_points\n\nbool, optional\n\nIf True does not create the rectangle and just returns a list containing the rectangle vertices.\nDefault is False.\n\npartition_max_order\n\npython:float, optional\n\nOrder of the lattice partition used to find the quasi-lattice polygon that approximates polygon.\nDefault is 16.\n\nReturns\n\nbool, List,  pyedb.dotnet.database.edb_data.primitives.EDBPrimitives\n\nPolygon when successful, False when failed, list of list if return_points=True.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", edbversion=\"2021.2\")\n>>> edb_layout = edbapp.modeler\n>>> list_of_padstack_instances = list(edbapp.padstacks.instances.values())\n>>> padstack_inst = list_of_padstack_instances[0]\n>>> padstack_inst.create_rectangle_in_pad(\"TOP\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio.html#hole_plating_ratio",
        "title": "hole_plating_ratio",
        "section": "hole_plating_ratio",
        "text": "Hole plating ratio.\nPercentage for the hole plating.\nhole_plating_ratio\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio",
        "title": "hole_plating_ratio > hole_plating_ratio > hole_plating_ratio",
        "section": "hole_plating_ratio > hole_plating_ratio",
        "text": "property EDBPadstack.hole_plating_ratio\n\nHole plating ratio.\n\nReturns\n\npython:float\n\nPercentage for the hole plating.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_bondwires",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_bondwires.html#dc_refine_bondwires",
        "title": "dc_refine_bondwires",
        "section": "dc_refine_bondwires",
        "text": "Retrieve the value for performing bond wire refinement.\nTrue when activated, False deactivated.\ndc_refine_bondwires\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_bondwires",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_bondwires.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_bondwires",
        "title": "dc_refine_bondwires > dc_refine_bondwires > dc_refine_bondwires",
        "section": "dc_refine_bondwires > dc_refine_bondwires",
        "text": "property SimulationConfigurationDc.dc_refine_bondwires\n\nRetrieve the value for performing bond wire refinement.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.delete",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete a database at the specified file location.\nPath to top-level database folder.\ndelete\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.delete",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.delete.html#pyedb.dotnet.edb.Edb.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "Edb.delete(db_path)\n\nDelete a database at the specified file location.\n\nParameters\n\ndb_path\n\npython:str\n\nPath to top-level database folder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_dc_slider",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_dc_slider.html#set_dc_slider",
        "title": "set_dc_slider",
        "section": "set_dc_slider",
        "text": "Set DC simulation accuracy level.\nOptions are:\n0: Optimal speed\n1: Balanced\n2: Optimal accuracy\nset_dc_slider\n0\n1\n2"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_dc_slider",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_dc_slider.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_dc_slider",
        "title": "set_dc_slider > set_dc_slider > set_dc_slider",
        "section": "set_dc_slider > set_dc_slider",
        "text": "SiwaveDCSimulationSetup.set_dc_slider(value)\n\nSet DC simulation accuracy level.\n\nOptions are:\n\n0: Optimal speed\n\n1: Balanced\n\n2: Optimal accuracy\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.protected_attributes.html#pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgNearestPinTerminalInfo.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.padstacks_no_name",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.padstacks_no_name.html#padstacks_no_name",
        "title": "padstacks_no_name",
        "section": "padstacks_no_name",
        "text": "padstacks_no_name"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.padstacks_no_name",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.padstacks_no_name.html#pyedb.dotnet.database.layout_validation.LayoutValidation.padstacks_no_name",
        "title": "padstacks_no_name > padstacks_no_name > padstacks_no_name",
        "section": "padstacks_no_name > padstacks_no_name",
        "text": "LayoutValidation.padstacks_no_name(fix=False)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_document_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_document_layer.html#add_document_layer",
        "title": "add_document_layer",
        "section": "add_document_layer",
        "text": "Add a document layer.\nName of the layer.\nType of the layer. The default is \"user\". Options are \"user\", \"outline\"\nadd_document_layer\npython:str\n\"user\"\n\"user\"\n\"outline\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_document_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_document_layer.html#pyedb.dotnet.database.stackup.Stackup.add_document_layer",
        "title": "add_document_layer > add_document_layer > add_document_layer",
        "section": "add_document_layer > add_document_layer",
        "text": "Stackup.add_document_layer(name, layer_type='user', **kwargs)\n\nAdd a document layer.\n\nParameters\n\nname\n\npython:str\n\nName of the layer.\n\nlayer_type: str, optional\n\nType of the layer. The default is \"user\". Options are \"user\", \"outline\"\n\nkwargs\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_bounding_box",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_bounding_box.html#get_polygon_bounding_box",
        "title": "get_polygon_bounding_box",
        "section": "get_polygon_bounding_box",
        "text": "Retrieve a polygon bounding box.\nName of the polygon.\nList of bounding box coordinates in the format [-x, -y, +x, +y].\nget_polygon_bounding_box\npython:list\n[-x, -y, +x, +y]"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_bounding_box",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_bounding_box.html#pyedb.dotnet.database.modeler.Modeler.get_polygon_bounding_box",
        "title": "get_polygon_bounding_box > get_polygon_bounding_box > get_polygon_bounding_box",
        "section": "get_polygon_bounding_box > get_polygon_bounding_box",
        "text": "Modeler.get_polygon_bounding_box(polygon)\n\nRetrieve a polygon bounding box.\n\nParameters\n\npolygon\n\nName of the polygon.\n\nReturns\n\npython:list\n\nList of bounding box coordinates in the format [-x, -y, +x, +y].\n\nExamples\n\n>>> poly = database.modeler.get_polygons_by_layer(\"GND\")\n>>> bounding = database.modeler.get_polygon_bounding_box(poly[0])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.apd_bondwire_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.apd_bondwire_defs.html#apd_bondwire_defs",
        "title": "apd_bondwire_defs",
        "section": "apd_bondwire_defs",
        "text": "Get all APD bondwire definitions in this Database.\napd_bondwire_defs\npython:list\nApdBondwireDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.apd_bondwire_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.apd_bondwire_defs.html#pyedb.dotnet.edb.Edb.apd_bondwire_defs",
        "title": "apd_bondwire_defs > apd_bondwire_defs > apd_bondwire_defs",
        "section": "apd_bondwire_defs > apd_bondwire_defs",
        "text": "property Edb.apd_bondwire_defs\n\nGet all APD bondwire definitions in this Database.\n\nReturns\n\npython:list[ApdBondwireDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.html#raptorxsimulationadvancedsettings",
        "title": "RaptorXSimulationAdvancedSettings",
        "section": "RaptorXSimulationAdvancedSettings",
        "text": "RaptorXSimulationAdvancedSettings.auto_removal_sliver_poly\n\nRaptorXSimulationAdvancedSettings.cell_per_wave_length\nThis setting describes the number of cells that fit under each wavelength.\nRaptorXSimulationAdvancedSettings.edge_mesh\nThis option controls both, the thickness and the width of the exterior conductor filament.\nRaptorXSimulationAdvancedSettings.eliminate_slit_per_hole\nThis is a setting that internally simplifies layouts with strain relief or thermal relief slits and holes.\nRaptorXSimulationAdvancedSettings.mesh_frequency\nUser can override the default meshing applied by setting a custom frequency for mesh generation.\nRaptorXSimulationAdvancedSettings.net_settings_options\nA list of Name, Value pairs that stores advanced option.\nRaptorXSimulationAdvancedSettings.override_shrink_fac\nSet the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node technologies.\nRaptorXSimulationAdvancedSettings.plane_projection_factor\nTo eliminate unnecessary mesh complexity of \"large\" metal planes and improve overall extraction time, user can define the mesh of certain planes using a combination of the Plane Projection Factor and settings of the Nets Advanced Options.\nRaptorXSimulationAdvancedSettings.use_accelerate_via_extraction\nSetting this option will simplify/merge neighboring vias before sending the layout for processing to the mesh engine and to the EM engine.\nRaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly\nSetting this option simplifies layouts by aligning slightly misaligned overlapping polygons.\nRaptorXSimulationAdvancedSettings.use_cells_per_wavelength\nThis setting describes the number of cells that fit under each wavelength.\nRaptorXSimulationAdvancedSettings.use_edge_mesh\nThis option controls both, the thickness and the width of the exterior conductor filament.\nRaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes\nThis is a setting that internally simplifies layouts with strain relief or thermal relief slits and holes.\nRaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects\nApplies all the capacitance related effects such as Conformal Dielectrics, Loading Effect, Dielectric Damage.\nRaptorXSimulationAdvancedSettings.use_enable_etch_transform\nPre-distorts the layout based on the foundry rules, applying the conductor's bias (positive/negative – deflation/inflation) at the conductor edges due to unavoidable optical effects in the manufacturing process.\nRaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction\nThis setting allows the modelling engine to separate the layout into two parts in an attempt to decrease the complexity of EM modelling.\nRaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction\nThis setting models substrate coupling effects using an equivalent distributed RC network.\nRaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy\nEnables modeling of floating metals as dummy fills.\nRaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating\nEnables modeling of floating metals as floating nets.\nRaptorXSimulationAdvancedSettings.use_lde\nTakes into account the variation of resistivity as a function of a conductor’s drawn width and spacing to its neighbors or as a function of its local density, due to dishing, slotting, cladding thickness, and so on.\nRaptorXSimulationAdvancedSettings.use_mesh_frequency\nUser can override the default meshing applied by the mesh engine by checking this option and setting a custom frequency for mesh generation.\nRaptorXSimulationAdvancedSettings.use_override_shrink_fac\nSet the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node technologies.\nRaptorXSimulationAdvancedSettings.use_plane_projection_factor\nTo eliminate unnecessary mesh complexity of \"large\" metal planes and improve overall extraction time, user can define the mesh of certain planes using a combination of the Plane Projection Factor and settings of the Nets Advanced Options.\nRaptorXSimulationAdvancedSettings.use_relaxed_z_axis\nEnabling this option provides a simplified mesh along the z-axis.\nRaptorXSimulationAdvancedSettings\nRaptorXSimulationAdvancedSettings.auto_removal_sliver_poly\nRaptorXSimulationAdvancedSettings.cell_per_wave_length\nRaptorXSimulationAdvancedSettings.edge_mesh\nRaptorXSimulationAdvancedSettings.eliminate_slit_per_hole\nRaptorXSimulationAdvancedSettings.mesh_frequency\nRaptorXSimulationAdvancedSettings.net_settings_options\nRaptorXSimulationAdvancedSettings.override_shrink_fac\nRaptorXSimulationAdvancedSettings.plane_projection_factor\nRaptorXSimulationAdvancedSettings.use_accelerate_via_extraction\nRaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly\nRaptorXSimulationAdvancedSettings.use_cells_per_wavelength\nRaptorXSimulationAdvancedSettings.use_edge_mesh\nRaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes\nRaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects\nRaptorXSimulationAdvancedSettings.use_enable_etch_transform\nRaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction\nRaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction\nRaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy\nRaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating\nRaptorXSimulationAdvancedSettings.use_lde\nRaptorXSimulationAdvancedSettings.use_mesh_frequency\nRaptorXSimulationAdvancedSettings.use_override_shrink_fac\nRaptorXSimulationAdvancedSettings.use_plane_projection_factor\nRaptorXSimulationAdvancedSettings.use_relaxed_z_axis"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings",
        "title": "RaptorXSimulationAdvancedSettings > RaptorXSimulationAdvancedSettings > RaptorXSimulationAdvancedSettings",
        "section": "RaptorXSimulationAdvancedSettings > RaptorXSimulationAdvancedSettings",
        "text": "class pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings(edb_setup_info, pedb)\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nRaptorXSimulationAdvancedSettings.auto_removal_sliver_poly\n\n\n\nRaptorXSimulationAdvancedSettings.cell_per_wave_length\n\nThis setting describes the number of cells that fit under each wavelength.\n\nRaptorXSimulationAdvancedSettings.edge_mesh\n\nThis option controls both, the thickness and the width of the exterior conductor filament.\n\nRaptorXSimulationAdvancedSettings.eliminate_slit_per_hole\n\nThis is a setting that internally simplifies layouts with strain relief or thermal relief slits and holes.\n\nRaptorXSimulationAdvancedSettings.mesh_frequency\n\nUser can override the default meshing applied by setting a custom frequency for mesh generation.\n\nRaptorXSimulationAdvancedSettings.net_settings_options\n\nA list of Name, Value pairs that stores advanced option.\n\nRaptorXSimulationAdvancedSettings.override_shrink_fac\n\nSet the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node technologies.\n\nRaptorXSimulationAdvancedSettings.plane_projection_factor\n\nTo eliminate unnecessary mesh complexity of \"large\" metal planes and improve overall extraction time, user can define the mesh of certain planes using a combination of the Plane Projection Factor and settings of the Nets Advanced Options.\n\nRaptorXSimulationAdvancedSettings.use_accelerate_via_extraction\n\nSetting this option will simplify/merge neighboring vias before sending the layout for processing to the mesh engine and to the EM engine.\n\nRaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly\n\nSetting this option simplifies layouts by aligning slightly misaligned overlapping polygons.\n\nRaptorXSimulationAdvancedSettings.use_cells_per_wavelength\n\nThis setting describes the number of cells that fit under each wavelength.\n\nRaptorXSimulationAdvancedSettings.use_edge_mesh\n\nThis option controls both, the thickness and the width of the exterior conductor filament.\n\nRaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes\n\nThis is a setting that internally simplifies layouts with strain relief or thermal relief slits and holes.\n\nRaptorXSimulationAdvancedSettings.use_enable_advanced_cap_effects\n\nApplies all the capacitance related effects such as Conformal Dielectrics, Loading Effect, Dielectric Damage.\n\nRaptorXSimulationAdvancedSettings.use_enable_etch_transform\n\nPre-distorts the layout based on the foundry rules, applying the conductor's bias (positive/negative – deflation/inflation) at the conductor edges due to unavoidable optical effects in the manufacturing process.\n\nRaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction\n\nThis setting allows the modelling engine to separate the layout into two parts in an attempt to decrease the complexity of EM modelling.\n\nRaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction\n\nThis setting models substrate coupling effects using an equivalent distributed RC network.\n\nRaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy\n\nEnables modeling of floating metals as dummy fills.\n\nRaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating\n\nEnables modeling of floating metals as floating nets.\n\nRaptorXSimulationAdvancedSettings.use_lde\n\nTakes into account the variation of resistivity as a function of a conductor’s drawn width and spacing to its neighbors or as a function of its local density, due to dishing, slotting, cladding thickness, and so on.\n\nRaptorXSimulationAdvancedSettings.use_mesh_frequency\n\nUser can override the default meshing applied by the mesh engine by checking this option and setting a custom frequency for mesh generation.\n\nRaptorXSimulationAdvancedSettings.use_override_shrink_fac\n\nSet the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node technologies.\n\nRaptorXSimulationAdvancedSettings.use_plane_projection_factor\n\nTo eliminate unnecessary mesh complexity of \"large\" metal planes and improve overall extraction time, user can define the mesh of certain planes using a combination of the Plane Projection Factor and settings of the Nets Advanced Options.\n\nRaptorXSimulationAdvancedSettings.use_relaxed_z_axis\n\nEnabling this option provides a simplified mesh along the z-axis.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_pingroup_from_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_pingroup_from_pins.html#create_pingroup_from_pins",
        "title": "create_pingroup_from_pins",
        "section": "create_pingroup_from_pins",
        "text": "Create a pin group on a component.\nList of EDB pins.\nName for the group. The default is None, in which case\na default name is assigned as follows: [component Name] [NetName].\nThe tuple is structured as: (bool, pingroup).\ncreate_pingroup_from_pins\npython:list\npython:str\noptional\nNone\n[component Name] [NetName]\npython:tuple"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_pingroup_from_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_pingroup_from_pins.html#pyedb.dotnet.database.components.Components.create_pingroup_from_pins",
        "title": "create_pingroup_from_pins > create_pingroup_from_pins > create_pingroup_from_pins",
        "section": "create_pingroup_from_pins > create_pingroup_from_pins",
        "text": "Components.create_pingroup_from_pins(pins, group_name=None)\n\nCreate a pin group on a component.\n\nParameters\n\npins\n\npython:list\n\nList of EDB pins.\n\ngroup_name\n\npython:str, optional\n\nName for the group. The default is None, in which case\na default name is assigned as follows: [component Name] [NetName].\n\nReturns\n\npython:tuple\n\nThe tuple is structured as: (bool, pingroup).\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.create_pingroup_from_pins(gndpinlist, \"MyGNDPingroup\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_negative_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_negative_net.html#api_negative_net",
        "title": "api_negative_net",
        "section": "api_negative_net",
        "text": "Edb Api Negative net object.\napi_negative_net"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_negative_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_negative_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_negative_net",
        "title": "api_negative_net > api_negative_net > api_negative_net",
        "section": "api_negative_net > api_negative_net",
        "text": "property EDBDifferentialPairData.api_negative_net\n\nEdb Api Negative net object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_dielectric_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_dielectric_extent_multiple.html#use_dielectric_extent_multiple",
        "title": "use_dielectric_extent_multiple",
        "section": "use_dielectric_extent_multiple",
        "text": "Whether the multiple value of the dielectric extent is used.\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\nuse_dielectric_extent_multiple\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_dielectric_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_dielectric_extent_multiple.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_dielectric_extent_multiple",
        "title": "use_dielectric_extent_multiple > use_dielectric_extent_multiple > use_dielectric_extent_multiple",
        "section": "use_dielectric_extent_multiple > use_dielectric_extent_multiple",
        "text": "property SimulationConfigurationBatch.use_dielectric_extent_multiple\n\nWhether the multiple value of the dielectric extent is used.\n\nReturns\n\nbool\n\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the setup.\nname"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.name.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property HFSSPISimulationSetup.name\n\nName of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.html#simulationconfigurationbatch",
        "title": "SimulationConfigurationBatch",
        "section": "SimulationConfigurationBatch",
        "text": "Contains all Cutout and Batch analysis settings.\nThe class is part of SimulationConfiguration class as a property.\nSimulationConfigurationBatch.add_source([source])\nAdd a new source to configuration.\nSimulationConfigurationBatch.add_frequency_sweep\nActivate the frequency sweep creation when build project with the class.\nSimulationConfigurationBatch.airbox_horizontal_extent\nHorizontal extent of the airbox for HFSS.\nSimulationConfigurationBatch.airbox_negative_vertical_extent\nNegative vertical extent of the airbox for HFSS.\nSimulationConfigurationBatch.airbox_positive_vertical_extent\nPositive vertical extent of the airbox for HFSS.\nSimulationConfigurationBatch.coax_solder_ball_diameter\nRetrieve the list of solder balls diameter values when the auto evaluated one is overwritten.\nSimulationConfigurationBatch.components\nRetrieve the list component name to be included in the simulation.\nSimulationConfigurationBatch.coplanar_instances\nRetrieve the list of component to be replaced by circuit ports (obsolete).\nSimulationConfigurationBatch.cutout_subdesign_expansion\nRetrieve expansion factor used for clipping the design.\nSimulationConfigurationBatch.cutout_subdesign_round_corner\nRetrieve boolean to perform the design clipping using round corner for the extent generation.\nSimulationConfigurationBatch.cutout_subdesign_type\nRetrieve the CutoutSubdesignType selection for clipping the design.\nSimulationConfigurationBatch.dielectric_extent\nRetrieve the value of dielectric extent.\nSimulationConfigurationBatch.do_cutout_subdesign\nRetrieve boolean to perform the cutout during the project build.\nSimulationConfigurationBatch.do_pingroup\nDo pingroup on multi-pin component.\nSimulationConfigurationBatch.etching_factor_instances\nRetrieve the list of etching factor with associated layers.\nSimulationConfigurationBatch.generate_excitations\nActivate ports and sources for DC generation when build project with the class.\nSimulationConfigurationBatch.generate_solder_balls\nRetrieve the boolean for applying solder balls.\nSimulationConfigurationBatch.honor_user_dielectric\nRetrieve the boolean to activate the feature \"'Honor user dielectric'\".\nSimulationConfigurationBatch.include_only_selected_nets\nInclude only net selection in the project.\nSimulationConfigurationBatch.output_aedb\nRetrieve the path for the output aedb folder.\nSimulationConfigurationBatch.power_nets\nRetrieve the list of power and reference net names.\nSimulationConfigurationBatch.signal_layer_etching_instances\nRetrieve the list of layers which has layer etching activated.\nSimulationConfigurationBatch.signal_layers_properties\nRetrieve the list of layers to have properties changes.\nSimulationConfigurationBatch.signal_nets\nRetrieve the list of signal net names.\nSimulationConfigurationBatch.sources\nRetrieve the source list.\nSimulationConfigurationBatch.trim_reference_size\nRetrieve the trim reference size when used.\nSimulationConfigurationBatch.truncate_airbox_at_ground\nRetrieve the boolean to truncate hfss air box at ground.\nSimulationConfigurationBatch.use_airbox_horizontal_extent_multiple\nWhether the multiple value is used for the horizontal extent of the air box.\nSimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple\nMultiple value for the negative extent of the airbox.\nSimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple\nWhether the multiple value for the positive extent of the airbox is used.\nSimulationConfigurationBatch.use_default_coax_port_radial_extension\nRetrieve the boolean for using the default coaxial port extension value.\nSimulationConfigurationBatch.use_default_cutout\nWhether to use the default EDB cutout.\nSimulationConfigurationBatch.use_dielectric_extent_multiple\nWhether the multiple value of the dielectric extent is used.\nSimulationConfigurationBatch.use_pyaedt_cutout\nWhether the default EDB cutout or a new PyAEDT cutout is used.\nSimulationConfigurationBatch.use_radiation_boundary\nRetrieve the boolean to use radiation boundary with HFSS.\nSimulationConfigurationBatch\nSimulationConfigurationBatch.add_source\nSimulationConfigurationBatch.add_frequency_sweep\nSimulationConfigurationBatch.airbox_horizontal_extent\nSimulationConfigurationBatch.airbox_negative_vertical_extent\nSimulationConfigurationBatch.airbox_positive_vertical_extent\nSimulationConfigurationBatch.coax_solder_ball_diameter\nSimulationConfigurationBatch.components\nSimulationConfigurationBatch.coplanar_instances\nSimulationConfigurationBatch.cutout_subdesign_expansion\nSimulationConfigurationBatch.cutout_subdesign_round_corner\nSimulationConfigurationBatch.cutout_subdesign_type\nSimulationConfigurationBatch.dielectric_extent\nSimulationConfigurationBatch.do_cutout_subdesign\nSimulationConfigurationBatch.do_pingroup\nSimulationConfigurationBatch.etching_factor_instances\nSimulationConfigurationBatch.generate_excitations\nSimulationConfigurationBatch.generate_solder_balls\nSimulationConfigurationBatch.honor_user_dielectric\nSimulationConfigurationBatch.include_only_selected_nets\nSimulationConfigurationBatch.output_aedb\nSimulationConfigurationBatch.power_nets\nSimulationConfigurationBatch.signal_layer_etching_instances\nSimulationConfigurationBatch.signal_layers_properties\nSimulationConfigurationBatch.signal_nets\nSimulationConfigurationBatch.sources\nSimulationConfigurationBatch.trim_reference_size\nSimulationConfigurationBatch.truncate_airbox_at_ground\nSimulationConfigurationBatch.use_airbox_horizontal_extent_multiple\nSimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple\nSimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple\nSimulationConfigurationBatch.use_default_coax_port_radial_extension\nSimulationConfigurationBatch.use_default_cutout\nSimulationConfigurationBatch.use_dielectric_extent_multiple\nSimulationConfigurationBatch.use_pyaedt_cutout\nSimulationConfigurationBatch.use_radiation_boundary"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch",
        "title": "SimulationConfigurationBatch > SimulationConfigurationBatch > SimulationConfigurationBatch",
        "section": "SimulationConfigurationBatch > SimulationConfigurationBatch",
        "text": "class pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch\n\nContains all Cutout and Batch analysis settings.\nThe class is part of SimulationConfiguration class as a property.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSimulationConfigurationBatch.add_source([source])\n\nAdd a new source to configuration.\n\n\n\nAttributes\n\n\n\n\n\n\n\nSimulationConfigurationBatch.add_frequency_sweep\n\nActivate the frequency sweep creation when build project with the class.\n\nSimulationConfigurationBatch.airbox_horizontal_extent\n\nHorizontal extent of the airbox for HFSS.\n\nSimulationConfigurationBatch.airbox_negative_vertical_extent\n\nNegative vertical extent of the airbox for HFSS.\n\nSimulationConfigurationBatch.airbox_positive_vertical_extent\n\nPositive vertical extent of the airbox for HFSS.\n\nSimulationConfigurationBatch.coax_solder_ball_diameter\n\nRetrieve the list of solder balls diameter values when the auto evaluated one is overwritten.\n\nSimulationConfigurationBatch.components\n\nRetrieve the list component name to be included in the simulation.\n\nSimulationConfigurationBatch.coplanar_instances\n\nRetrieve the list of component to be replaced by circuit ports (obsolete).\n\nSimulationConfigurationBatch.cutout_subdesign_expansion\n\nRetrieve expansion factor used for clipping the design.\n\nSimulationConfigurationBatch.cutout_subdesign_round_corner\n\nRetrieve boolean to perform the design clipping using round corner for the extent generation.\n\nSimulationConfigurationBatch.cutout_subdesign_type\n\nRetrieve the CutoutSubdesignType selection for clipping the design.\n\nSimulationConfigurationBatch.dielectric_extent\n\nRetrieve the value of dielectric extent.\n\nSimulationConfigurationBatch.do_cutout_subdesign\n\nRetrieve boolean to perform the cutout during the project build.\n\nSimulationConfigurationBatch.do_pingroup\n\nDo pingroup on multi-pin component.\n\nSimulationConfigurationBatch.etching_factor_instances\n\nRetrieve the list of etching factor with associated layers.\n\nSimulationConfigurationBatch.generate_excitations\n\nActivate ports and sources for DC generation when build project with the class.\n\nSimulationConfigurationBatch.generate_solder_balls\n\nRetrieve the boolean for applying solder balls.\n\nSimulationConfigurationBatch.honor_user_dielectric\n\nRetrieve the boolean to activate the feature \"'Honor user dielectric'\".\n\nSimulationConfigurationBatch.include_only_selected_nets\n\nInclude only net selection in the project.\n\nSimulationConfigurationBatch.output_aedb\n\nRetrieve the path for the output aedb folder.\n\nSimulationConfigurationBatch.power_nets\n\nRetrieve the list of power and reference net names.\n\nSimulationConfigurationBatch.signal_layer_etching_instances\n\nRetrieve the list of layers which has layer etching activated.\n\nSimulationConfigurationBatch.signal_layers_properties\n\nRetrieve the list of layers to have properties changes.\n\nSimulationConfigurationBatch.signal_nets\n\nRetrieve the list of signal net names.\n\nSimulationConfigurationBatch.sources\n\nRetrieve the source list.\n\nSimulationConfigurationBatch.trim_reference_size\n\nRetrieve the trim reference size when used.\n\nSimulationConfigurationBatch.truncate_airbox_at_ground\n\nRetrieve the boolean to truncate hfss air box at ground.\n\nSimulationConfigurationBatch.use_airbox_horizontal_extent_multiple\n\nWhether the multiple value is used for the horizontal extent of the air box.\n\nSimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple\n\nMultiple value for the negative extent of the airbox.\n\nSimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple\n\nWhether the multiple value for the positive extent of the airbox is used.\n\nSimulationConfigurationBatch.use_default_coax_port_radial_extension\n\nRetrieve the boolean for using the default coaxial port extension value.\n\nSimulationConfigurationBatch.use_default_cutout\n\nWhether to use the default EDB cutout.\n\nSimulationConfigurationBatch.use_dielectric_extent_multiple\n\nWhether the multiple value of the dielectric extent is used.\n\nSimulationConfigurationBatch.use_pyaedt_cutout\n\nWhether the default EDB cutout or a new PyAEDT cutout is used.\n\nSimulationConfigurationBatch.use_radiation_boundary\n\nRetrieve the boolean to use radiation boundary with HFSS.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave.html#siwave",
        "title": "siwave",
        "section": "siwave",
        "text": "Core SIWave methods and properties.\nsiwave\nInstance\nof"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave.html#pyedb.dotnet.edb.Edb.siwave",
        "title": "siwave > siwave > siwave",
        "section": "siwave > siwave",
        "text": "property Edb.siwave\n\nCore SIWave methods and properties.\n\nReturns\n\nInstance of :class: pyedb.dotnet.database.siwave.EdbSiwave\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> p2 = edbapp.siwave.create_circuit_port_on_net(\"U2A5\", \"V3P3_S0\", \"U2A5\", \"GND\", 50, \"test\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.icepak_temp_file",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.icepak_temp_file.html#icepak_temp_file",
        "title": "icepak_temp_file",
        "section": "icepak_temp_file",
        "text": "Icepack Temp File.\nicepak_temp_file\npython:str\npath\nto\nthe\ntemp\nIcepak"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.icepak_temp_file",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.icepak_temp_file.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.icepak_temp_file",
        "title": "icepak_temp_file > icepak_temp_file > icepak_temp_file",
        "section": "icepak_temp_file > icepak_temp_file",
        "text": "property SiwaveDCIRSettings.icepak_temp_file\n\nIcepack Temp File.\n\nReturns\n\npython:str\n\n\n\npath to the temp Icepak file.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.contact_radius",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.contact_radius.html#contact_radius",
        "title": "contact_radius",
        "section": "contact_radius",
        "text": "Circuit element contact radius.\ncontact_radius\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.contact_radius",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.contact_radius.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.contact_radius",
        "title": "contact_radius > contact_radius > contact_radius",
        "section": "contact_radius > contact_radius",
        "text": "property DCSettings.contact_radius\n\nCircuit element contact radius.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.html#hfsspisimulationsetup",
        "title": "HFSSPISimulationSetup",
        "section": "HFSSPISimulationSetup",
        "text": "Manages EDB methods for HFSSPI simulation setup.\nHFSSPISimulationSetup.add_frequency_sweep([...])\nAdd frequency sweep.\nHFSSPISimulationSetup.add_sweep([name, ...])\nAdd frequency sweep.\nHFSSPISimulationSetup.delete()\nDelete current simulation setup.\nHFSSPISimulationSetup.delete_frequency_sweep(...)\nDelete a frequency sweep.\nHFSSPISimulationSetup.get_simulation_settings()\n\nHFSSPISimulationSetup.set_sim_setup_info(...)\n\nHFSSPISimulationSetup.set_simulation_settings(...)\n\nHFSSPISimulationSetup.enabled\nFlag indicating if the setup is enabled.\nHFSSPISimulationSetup.frequency_sweeps\n\nHFSSPISimulationSetup.get_sim_setup_info\nGet simulation setup information.\nHFSSPISimulationSetup.is_null\nAdding this property for compatibility with grpc.\nHFSSPISimulationSetup.mesh_operations\n\nHFSSPISimulationSetup.name\nName of the setup.\nHFSSPISimulationSetup.position\nPosition in the setup list.\nHFSSPISimulationSetup.setup_type\nType of the setup.\nHFSSPISimulationSetup.sim_setup_info\n\nHFSSPISimulationSetup.sweep_data\nAdding property for compatibility with grpc.\nHFSSPISimulationSetup.sweeps\nList of frequency sweeps.\nHFSSPISimulationSetup.type\n\nHFSSPISimulationSetup\nHFSSPISimulationSetup.add_frequency_sweep\nHFSSPISimulationSetup.add_sweep\nHFSSPISimulationSetup.delete\nHFSSPISimulationSetup.delete_frequency_sweep\nHFSSPISimulationSetup.get_simulation_settings\nHFSSPISimulationSetup.set_sim_setup_info\nHFSSPISimulationSetup.set_simulation_settings\nHFSSPISimulationSetup.enabled\nHFSSPISimulationSetup.frequency_sweeps\nHFSSPISimulationSetup.get_sim_setup_info\nHFSSPISimulationSetup.is_null\nHFSSPISimulationSetup.mesh_operations\nHFSSPISimulationSetup.name\nHFSSPISimulationSetup.position\nHFSSPISimulationSetup.setup_type\nHFSSPISimulationSetup.sim_setup_info\nHFSSPISimulationSetup.sweep_data\nHFSSPISimulationSetup.sweeps\nHFSSPISimulationSetup.type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup",
        "title": "HFSSPISimulationSetup > HFSSPISimulationSetup > HFSSPISimulationSetup",
        "section": "HFSSPISimulationSetup > HFSSPISimulationSetup",
        "text": "class pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup(pedb, edb_object=None, name: str | None = None)\n\nManages EDB methods for HFSSPI simulation setup.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nHFSSPISimulationSetup.add_frequency_sweep([...])\n\nAdd frequency sweep.\n\nHFSSPISimulationSetup.add_sweep([name, ...])\n\nAdd frequency sweep.\n\nHFSSPISimulationSetup.delete()\n\nDelete current simulation setup.\n\nHFSSPISimulationSetup.delete_frequency_sweep(...)\n\nDelete a frequency sweep.\n\nHFSSPISimulationSetup.get_simulation_settings()\n\n\n\nHFSSPISimulationSetup.set_sim_setup_info(...)\n\n\n\nHFSSPISimulationSetup.set_simulation_settings(...)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nHFSSPISimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\nHFSSPISimulationSetup.frequency_sweeps\n\n\n\nHFSSPISimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\nHFSSPISimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\nHFSSPISimulationSetup.mesh_operations\n\n\n\nHFSSPISimulationSetup.name\n\nName of the setup.\n\nHFSSPISimulationSetup.position\n\nPosition in the setup list.\n\nHFSSPISimulationSetup.setup_type\n\nType of the setup.\n\nHFSSPISimulationSetup.sim_setup_info\n\n\n\nHFSSPISimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\nHFSSPISimulationSetup.sweeps\n\nList of frequency sweeps.\n\nHFSSPISimulationSetup.type\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_top",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_top.html#set_backdrill_top",
        "title": "set_backdrill_top",
        "section": "set_backdrill_top",
        "text": "Set backdrill from top.\nName of the drill to layer.\nDiameter of backdrill size.\nOffset for the backdrill. The default is 0.0. If the value is other than the\ndefault, the stub does not stop at the layer. In AEDT, this parameter is called\n“Mfg stub length”.\nTrue if success, False otherwise.\nset_backdrill_top\npython:str\npython:float\npython:str\npython:float\npython:str\n0.0"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_top",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_top.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_top",
        "title": "set_backdrill_top > set_backdrill_top > set_backdrill_top",
        "section": "set_backdrill_top > set_backdrill_top",
        "text": "EDBPadstackInstance.set_backdrill_top(drill_depth, drill_diameter, offset=0.0)\n\nSet backdrill from top.\n\nParameters\n\ndrill_depth\n\npython:str\n\nName of the drill to layer.\n\ndrill_diameter\n\npython:float, python:str\n\nDiameter of backdrill size.\n\noffset\n\npython:float, python:str\n\nOffset for the backdrill. The default is 0.0. If the value is other than the\ndefault, the stub does not stop at the layer. In AEDT, this parameter is called\n“Mfg stub length”.\n\nReturns\n\nbool\n\nTrue if success, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_y",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_y.html#offset_y",
        "title": "offset_y",
        "section": "offset_y",
        "text": "Offset for the Y axis.\nOffset for the Y axis.\noffset_y\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_y",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_y.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_y",
        "title": "offset_y > offset_y > offset_y",
        "section": "offset_y > offset_y",
        "text": "property EDBPadProperties.offset_y\n\nOffset for the Y axis.\n\nReturns\n\npython:str\n\nOffset for the Y axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.save_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.save_project.html#save_project",
        "title": "save_project",
        "section": "save_project",
        "text": "Save the project.\nFull path to the project. The default is None.\nName of the project. The default is None.\nTrue when successful, False when failed.\nsave_project\npython:str\noptional\nNone\npython:str\noptional\nNone\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.save_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.save_project.html#pyedb.siwave.Siwave.save_project",
        "title": "save_project > save_project > save_project",
        "section": "save_project > save_project",
        "text": "Siwave.save_project(projectpath=None, projectName=None)\n\nSave the project.\n\nParameters\n\nproj_path\n\npython:str, optional\n\nFull path to the project. The default is None.\n\nprojectName\n\npython:str, optional\n\nName of the project. The default is None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.net_settings_options",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.net_settings_options.html#net_settings_options",
        "title": "net_settings_options",
        "section": "net_settings_options",
        "text": "A list of Name, Value pairs that stores advanced option.\nnet_settings_options"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.net_settings_options",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.net_settings_options.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.net_settings_options",
        "title": "net_settings_options > net_settings_options > net_settings_options",
        "section": "net_settings_options > net_settings_options",
        "text": "property RaptorXSimulationAdvancedSettings.net_settings_options\n\nA list of Name, Value pairs that stores advanced option.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.area",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.area.html#area",
        "title": "area",
        "section": "area",
        "text": "Return the total area.\nEither if the voids have to be included in computation.\nThe default value is True.\narea\noptional\nTrue\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.area",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.area.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.area",
        "title": "area > area > area",
        "section": "area > area",
        "text": "EdbPolygon.area(include_voids=True)\n\nReturn the total area.\n\nParameters\n\ninclude_voids\n\nbool, optional\n\nEither if the voids have to be included in computation.\nThe default value is True.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move_layer.html#move_layer",
        "title": "move_layer",
        "section": "move_layer",
        "text": "Move polygon to given layer.\nlayer name.\nTrue when successful, False when failed.\nmove_layer\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move_layer.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move_layer",
        "title": "move_layer > move_layer > move_layer",
        "section": "move_layer > move_layer",
        "text": "EdbPolygon.move_layer(layer)\n\nMove polygon to given layer.\n\nParameters\n\nlayer\n\npython:str\n\nlayer name.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.get_configurations.html#get_configurations",
        "title": "get_configurations",
        "section": "get_configurations",
        "text": "Get all attributes.\nget_configurations\npython:dict"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.get_configurations.html#pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.get_configurations",
        "title": "get_configurations > get_configurations > get_configurations",
        "section": "get_configurations > get_configurations",
        "text": "SettingsBase.get_configurations()\n\nGet all attributes.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_sim_setup_info.html#get_sim_setup_info",
        "title": "get_sim_setup_info",
        "section": "get_sim_setup_info",
        "text": "Get simulation setup information.\nget_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_sim_setup_info.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_sim_setup_info",
        "title": "get_sim_setup_info > get_sim_setup_info > get_sim_setup_info",
        "section": "get_sim_setup_info > get_sim_setup_info",
        "text": "property SimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_res_path",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_res_path.html#per_pin_res_path",
        "title": "per_pin_res_path",
        "section": "per_pin_res_path",
        "text": "Per Pin Res Path.\nper_pin_res_path\npython:str\npath\nfor\nper\npin"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_res_path",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_res_path.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.per_pin_res_path",
        "title": "per_pin_res_path > per_pin_res_path > per_pin_res_path",
        "section": "per_pin_res_path > per_pin_res_path",
        "text": "property SiwaveDCIRSettings.per_pin_res_path\n\nPer Pin Res Path.\n\nReturns\n\npython:str\n\n\n\npath for per pin res.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.via_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.via_settings.html#via_settings",
        "title": "via_settings",
        "section": "via_settings",
        "text": "Via settings Class.\nvia_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.ViaSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.via_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.via_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.via_settings",
        "title": "via_settings > via_settings > via_settings",
        "section": "via_settings > via_settings",
        "text": "property HfssSimulationSetup.via_settings\n\nVia settings Class.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.ViaSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.html#raptorxsimulationsetup",
        "title": "RaptorXSimulationSetup",
        "section": "RaptorXSimulationSetup",
        "text": "Manages EDB methods for RaptorX simulation setup.\nRaptorXSimulationSetup.add_frequency_sweep([...])\nAdd frequency sweep.\nRaptorXSimulationSetup.add_sweep([name, ...])\nAdd frequency sweep.\nRaptorXSimulationSetup.create([name])\nCreate an HFSS setup.\nRaptorXSimulationSetup.delete()\nDelete current simulation setup.\nRaptorXSimulationSetup.delete_frequency_sweep(...)\nDelete a frequency sweep.\nRaptorXSimulationSetup.get_simulation_settings()\n\nRaptorXSimulationSetup.set_sim_setup_info(...)\n\nRaptorXSimulationSetup.set_simulation_settings(...)\n\nRaptorXSimulationSetup.enabled\nFlag indicating if the setup is enabled.\nRaptorXSimulationSetup.frequency_sweeps\n\nRaptorXSimulationSetup.get_sim_setup_info\nGet simulation setup information.\nRaptorXSimulationSetup.is_null\nAdding this property for compatibility with grpc.\nRaptorXSimulationSetup.mesh_operations\n\nRaptorXSimulationSetup.name\nName of the setup.\nRaptorXSimulationSetup.position\nPosition in the setup list.\nRaptorXSimulationSetup.settings\n\nRaptorXSimulationSetup.setup_type\nType of the setup.\nRaptorXSimulationSetup.sim_setup_info\n\nRaptorXSimulationSetup.sweep_data\nAdding property for compatibility with grpc.\nRaptorXSimulationSetup.sweeps\nList of frequency sweeps.\nRaptorXSimulationSetup.type\n\nRaptorXSimulationSetup\nRaptorXSimulationSetup.add_frequency_sweep\nRaptorXSimulationSetup.add_sweep\nRaptorXSimulationSetup.create\nRaptorXSimulationSetup.delete\nRaptorXSimulationSetup.delete_frequency_sweep\nRaptorXSimulationSetup.get_simulation_settings\nRaptorXSimulationSetup.set_sim_setup_info\nRaptorXSimulationSetup.set_simulation_settings\nRaptorXSimulationSetup.enabled\nRaptorXSimulationSetup.frequency_sweeps\nRaptorXSimulationSetup.get_sim_setup_info\nRaptorXSimulationSetup.is_null\nRaptorXSimulationSetup.mesh_operations\nRaptorXSimulationSetup.name\nRaptorXSimulationSetup.position\nRaptorXSimulationSetup.settings\nRaptorXSimulationSetup.setup_type\nRaptorXSimulationSetup.sim_setup_info\nRaptorXSimulationSetup.sweep_data\nRaptorXSimulationSetup.sweeps\nRaptorXSimulationSetup.type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup",
        "title": "RaptorXSimulationSetup > RaptorXSimulationSetup > RaptorXSimulationSetup",
        "section": "RaptorXSimulationSetup > RaptorXSimulationSetup",
        "text": "class pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup(pedb, edb_object=None)\n\nManages EDB methods for RaptorX simulation setup.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nRaptorXSimulationSetup.add_frequency_sweep([...])\n\nAdd frequency sweep.\n\nRaptorXSimulationSetup.add_sweep([name, ...])\n\nAdd frequency sweep.\n\nRaptorXSimulationSetup.create([name])\n\nCreate an HFSS setup.\n\nRaptorXSimulationSetup.delete()\n\nDelete current simulation setup.\n\nRaptorXSimulationSetup.delete_frequency_sweep(...)\n\nDelete a frequency sweep.\n\nRaptorXSimulationSetup.get_simulation_settings()\n\n\n\nRaptorXSimulationSetup.set_sim_setup_info(...)\n\n\n\nRaptorXSimulationSetup.set_simulation_settings(...)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nRaptorXSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\nRaptorXSimulationSetup.frequency_sweeps\n\n\n\nRaptorXSimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\nRaptorXSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\nRaptorXSimulationSetup.mesh_operations\n\n\n\nRaptorXSimulationSetup.name\n\nName of the setup.\n\nRaptorXSimulationSetup.position\n\nPosition in the setup list.\n\nRaptorXSimulationSetup.settings\n\n\n\nRaptorXSimulationSetup.setup_type\n\nType of the setup.\n\nRaptorXSimulationSetup.sim_setup_info\n\n\n\nRaptorXSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\nRaptorXSimulationSetup.sweeps\n\nList of frequency sweeps.\n\nRaptorXSimulationSetup.type\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.terminal_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.terminal_type.html#terminal_type",
        "title": "terminal_type",
        "section": "terminal_type",
        "text": "Terminal Type.\nterminal_type\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.terminal_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.terminal_type.html#pyedb.dotnet.database.edb_data.ports.GapPort.terminal_type",
        "title": "terminal_type > terminal_type > terminal_type",
        "section": "terminal_type > terminal_type",
        "text": "property GapPort.terminal_type\n\nTerminal Type.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "enabled"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings.enabled.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property BaseSimulationSettings.enabled\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_passes.html#conduction_min_passes",
        "title": "conduction_min_passes",
        "section": "conduction_min_passes",
        "text": "Conduction minimum number of passes.\nconduction_min_passes\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_passes.html#pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_passes",
        "title": "conduction_min_passes > conduction_min_passes > conduction_min_passes",
        "section": "conduction_min_passes > conduction_min_passes",
        "text": "property DcrSettings.conduction_min_passes\n\nConduction minimum number of passes.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_passes.html#max_passes",
        "title": "max_passes",
        "section": "max_passes",
        "text": "Maximum allowed number of mesh refinement cycles.\nmax_passes\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_passes.html#pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.max_passes",
        "title": "max_passes > max_passes > max_passes",
        "section": "max_passes > max_passes",
        "text": "property AdaptiveFrequencyData.max_passes\n\nMaximum allowed number of mesh refinement cycles.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.mesh_operations.html#mesh_operations",
        "title": "mesh_operations",
        "section": "mesh_operations",
        "text": "Mesh operations settings Class.\nmesh_operations\nList\nof\ndotnet.database.edb_data.hfss_simulation_setup_data.MeshOperation"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.mesh_operations.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.mesh_operations",
        "title": "mesh_operations > mesh_operations > mesh_operations",
        "section": "mesh_operations > mesh_operations",
        "text": "property HfssSimulationSetup.mesh_operations\n\nMesh operations settings Class.\n\nReturns\n\nList of dotnet.database.edb_data.hfss_simulation_setup_data.MeshOperation\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.create",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Create a SIwave SYZ setup.\ncreate\nSiwaveDCSimulationSetup"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.create",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.create.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "SiwaveSimulationSetup.create(name=None)\n\nCreate a SIwave SYZ setup.\n\nReturns\n\nSiwaveDCSimulationSetup\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.frequency_sweeps.html#frequency_sweeps",
        "title": "frequency_sweeps",
        "section": "frequency_sweeps",
        "text": "frequency_sweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.frequency_sweeps.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.frequency_sweeps",
        "title": "frequency_sweeps > frequency_sweeps > frequency_sweeps",
        "section": "frequency_sweeps > frequency_sweeps",
        "text": "property SimulationSetup.frequency_sweeps\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_sim_setup_info",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_sim_setup_info.html#set_sim_setup_info",
        "title": "set_sim_setup_info",
        "section": "set_sim_setup_info",
        "text": "set_sim_setup_info"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_sim_setup_info",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_sim_setup_info.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_sim_setup_info",
        "title": "set_sim_setup_info > set_sim_setup_info > set_sim_setup_info",
        "section": "set_sim_setup_info > set_sim_setup_info",
        "text": "RaptorXSimulationSetup.set_sim_setup_info(sim_setup_info)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net.html#net",
        "title": "net",
        "section": "net",
        "text": "Net Object.\nnet\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net.html#pyedb.dotnet.database.edb_data.ports.GapPort.net",
        "title": "net > net > net",
        "section": "net > net",
        "text": "property GapPort.net\n\nNet Object.\n\nReturns\n\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_density",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_density.html#via_density",
        "title": "via_density",
        "section": "via_density",
        "text": "Via density.\nvia_density\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_density",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_density.html#pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_density",
        "title": "via_density > via_density > via_density",
        "section": "via_density > via_density",
        "text": "property ViaSettings.via_density\n\nVia density.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.html#cfgcircuitelement",
        "title": "CfgCircuitElement",
        "section": "CfgCircuitElement",
        "text": "CfgCircuitElement.create_terminals()\nCreate step 1.\nCfgCircuitElement.get_attributes([exclude])\n\nCfgCircuitElement.set_attributes(pedb_object)\n\nCfgCircuitElement.protected_attributes\n\nCfgCircuitElement\nCfgCircuitElement.create_terminals\nCfgCircuitElement.get_attributes\nCfgCircuitElement.set_attributes\nCfgCircuitElement.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.html#pyedb.configuration.cfg_ports_sources.CfgCircuitElement",
        "title": "CfgCircuitElement > CfgCircuitElement > CfgCircuitElement",
        "section": "CfgCircuitElement > CfgCircuitElement",
        "text": "class pyedb.configuration.cfg_ports_sources.CfgCircuitElement(pedb, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgCircuitElement.create_terminals()\n\nCreate step 1.\n\nCfgCircuitElement.get_attributes([exclude])\n\n\n\nCfgCircuitElement.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgCircuitElement.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_bottom",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_bottom.html#set_backdrill_bottom",
        "title": "set_backdrill_bottom",
        "section": "set_backdrill_bottom",
        "text": "Set backdrill from bottom.\nName of the drill to layer.\nDiameter of the backdrill size.\nOffset for the backdrill. The default is 0.0. If the value is other than the\ndefault, the stub does not stop at the layer. In AEDT, this parameter is called\n“Mfg stub length”.\nTrue if success, False otherwise.\nset_backdrill_bottom\npython:str\npython:float\npython:str\npython:float\npython:str\noptional\n0.0"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_bottom",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_bottom.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_backdrill_bottom",
        "title": "set_backdrill_bottom > set_backdrill_bottom > set_backdrill_bottom",
        "section": "set_backdrill_bottom > set_backdrill_bottom",
        "text": "EDBPadstackInstance.set_backdrill_bottom(drill_depth, drill_diameter, offset=0.0)\n\nSet backdrill from bottom.\n\nParameters\n\ndrill_depth\n\npython:str\n\nName of the drill to layer.\n\ndrill_diameter\n\npython:float, python:str\n\nDiameter of the backdrill size.\n\noffset\n\npython:float, python:str, optional\n\nOffset for the backdrill. The default is 0.0. If the value is other than the\ndefault, the stub does not stop at the layer. In AEDT, this parameter is called\n“Mfg stub length”.\n\nReturns\n\nbool\n\nTrue if success, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.source_version",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.source_version.html#source_version",
        "title": "source_version",
        "section": "source_version",
        "text": "Get the source version for this Database.\nThis attribute is also used to set the version.\nversion string\nsource_version\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.source_version",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.source_version.html#pyedb.dotnet.edb.Edb.source_version",
        "title": "source_version > source_version > source_version",
        "section": "source_version > source_version",
        "text": "property Edb.source_version\n\nGet the source version for this Database.\n\nThis attribute is also used to set the version.\n\nReturns\n\npython:str\n\nversion string\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_phase",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_phase.html#source_phase",
        "title": "source_phase",
        "section": "source_phase",
        "text": "Property added for grpc compatibility\nsource_phase"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_phase",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.source_phase.html#pyedb.dotnet.database.edb_data.ports.GapPort.source_phase",
        "title": "source_phase > source_phase > source_phase",
        "section": "source_phase > source_phase",
        "text": "property GapPort.source_phase\n\nProperty added for grpc compatibility\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes.html#ignore_small_holes",
        "title": "ignore_small_holes",
        "section": "ignore_small_holes",
        "text": "Ignore small holes choice.\nignore_small_holes"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_small_holes",
        "title": "ignore_small_holes > ignore_small_holes > ignore_small_holes",
        "section": "ignore_small_holes > ignore_small_holes",
        "text": "property HFSSPISimulationSettings.ignore_small_holes\n\nIgnore small holes choice.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "enabled"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings.enabled.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property SimulationSettings.enabled\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_edb.html#create_edb",
        "title": "create_edb",
        "section": "create_edb",
        "text": "Create EDB.\ncreate_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_edb.html#pyedb.dotnet.edb.Edb.create_edb",
        "title": "create_edb > create_edb > create_edb",
        "section": "create_edb > create_edb",
        "text": "Edb.create_edb()\n\nCreate EDB.\n\nReturns\n\n``True`` when succeed ``False`` if failed\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.setup_type.html#setup_type",
        "title": "setup_type",
        "section": "setup_type",
        "text": "Type of the setup.\nsetup_type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.setup_type.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.setup_type",
        "title": "setup_type > setup_type > setup_type",
        "section": "setup_type > setup_type",
        "text": "property SimulationSetup.setup_type\n\nType of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.design_variables",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.design_variables.html#design_variables",
        "title": "design_variables",
        "section": "design_variables",
        "text": "Get all edb design variables.\ndesign_variables\nDict\npython:str\npyedb.dotnet.database.edb_data.variables.Variable"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.design_variables",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.design_variables.html#pyedb.dotnet.edb.Edb.design_variables",
        "title": "design_variables > design_variables > design_variables",
        "section": "design_variables > design_variables",
        "text": "property Edb.design_variables\n\nGet all edb design variables.\n\nReturns\n\nvariable dictionary\n\nDict[python:str, pyedb.dotnet.database.edb_data.variables.Variable]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/excitations/create_current_source",
        "href": "user_guide/excitations/create_current_source.html#create-current-and-voltage-sources",
        "title": "Create current and voltage sources",
        "section": "Create current and voltage sources",
        "text": "This page shows how to create current and voltage sources on a component.\nCreate current and voltage sources"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.html#hfssextentinfo",
        "title": "HfssExtentInfo",
        "section": "HfssExtentInfo",
        "text": "Manages EDB functionalities for HFSS extent information.\nInherited EDB object.\nHfssExtentInfo.export_config()\nExport HFSS extent information.\nHfssExtentInfo.load_config(config)\nLoad HFSS extent configuration.\nHfssExtentInfo.air_box_horizontal_extent\nSize of horizontal extent for the air box.\nHfssExtentInfo.air_box_horizontal_extent_enabled\nWhether horizontal extent is enabled for the airbox.\nHfssExtentInfo.air_box_negative_vertical_extent\nNegative vertical extent for the airbox.\nHfssExtentInfo.air_box_negative_vertical_extent_enabled\nWhether negative vertical extent is enabled for the air box.\nHfssExtentInfo.air_box_positive_vertical_extent\nNegative vertical extent for the air box.\nHfssExtentInfo.air_box_positive_vertical_extent_enabled\nWhether positive vertical extent is enabled for the air box.\nHfssExtentInfo.base_polygon\nBase polygon.\nHfssExtentInfo.dielectric_base_polygon\nDielectric base polygon.\nHfssExtentInfo.dielectric_extent_size\nDielectric extent size.\nHfssExtentInfo.dielectric_extent_size_enabled\nWhether dielectric extent size is enabled.\nHfssExtentInfo.dielectric_extent_type\nDielectric extent type.\nHfssExtentInfo.extent_type\nExtent type.\nHfssExtentInfo.honor_user_dielectric\nHonor user dielectric.\nHfssExtentInfo.is_pml_visible\nWhether visibility of the PML is enabled.\nHfssExtentInfo.open_region_type\nOpen region type.\nHfssExtentInfo.operating_freq\nPML Operating frequency.\nHfssExtentInfo.radiation_level\nPML Radiation level to calculate the thickness of boundary.\nHfssExtentInfo.sync_air_box_vertical_extent\nVertical extent of the sync air box.\nHfssExtentInfo.truncate_air_box_at_ground\nTruncate air box at ground.\nHfssExtentInfo.use_open_region\nWhether using an open region is enabled.\nHfssExtentInfo.use_xy_data_extent_for_vertical_expansion\nWhether using the xy data extent for vertical expansion is enabled.\nHfssExtentInfo\npyedb.edb.Edb\nHfssExtentInfo.export_config\nHfssExtentInfo.load_config\nHfssExtentInfo.air_box_horizontal_extent\nHfssExtentInfo.air_box_horizontal_extent_enabled\nHfssExtentInfo.air_box_negative_vertical_extent\nHfssExtentInfo.air_box_negative_vertical_extent_enabled\nHfssExtentInfo.air_box_positive_vertical_extent\nHfssExtentInfo.air_box_positive_vertical_extent_enabled\nHfssExtentInfo.base_polygon\nHfssExtentInfo.dielectric_base_polygon\nHfssExtentInfo.dielectric_extent_size\nHfssExtentInfo.dielectric_extent_size_enabled\nHfssExtentInfo.dielectric_extent_type\nHfssExtentInfo.extent_type\nHfssExtentInfo.honor_user_dielectric\nHfssExtentInfo.is_pml_visible\nHfssExtentInfo.open_region_type\nHfssExtentInfo.operating_freq\nHfssExtentInfo.radiation_level\nHfssExtentInfo.sync_air_box_vertical_extent\nHfssExtentInfo.truncate_air_box_at_ground\nHfssExtentInfo.use_open_region\nHfssExtentInfo.use_xy_data_extent_for_vertical_expansion"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo",
        "title": "HfssExtentInfo > HfssExtentInfo > HfssExtentInfo",
        "section": "HfssExtentInfo > HfssExtentInfo",
        "text": "class pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo(pedb)\n\nManages EDB functionalities for HFSS extent information.\n\nParameters\n\npedb\n\npyedb.edb.Edb\n\nInherited EDB object.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nHfssExtentInfo.export_config()\n\nExport HFSS extent information.\n\nHfssExtentInfo.load_config(config)\n\nLoad HFSS extent configuration.\n\n\n\nAttributes\n\n\n\n\n\n\n\nHfssExtentInfo.air_box_horizontal_extent\n\nSize of horizontal extent for the air box.\n\nHfssExtentInfo.air_box_horizontal_extent_enabled\n\nWhether horizontal extent is enabled for the airbox.\n\nHfssExtentInfo.air_box_negative_vertical_extent\n\nNegative vertical extent for the airbox.\n\nHfssExtentInfo.air_box_negative_vertical_extent_enabled\n\nWhether negative vertical extent is enabled for the air box.\n\nHfssExtentInfo.air_box_positive_vertical_extent\n\nNegative vertical extent for the air box.\n\nHfssExtentInfo.air_box_positive_vertical_extent_enabled\n\nWhether positive vertical extent is enabled for the air box.\n\nHfssExtentInfo.base_polygon\n\nBase polygon.\n\nHfssExtentInfo.dielectric_base_polygon\n\nDielectric base polygon.\n\nHfssExtentInfo.dielectric_extent_size\n\nDielectric extent size.\n\nHfssExtentInfo.dielectric_extent_size_enabled\n\nWhether dielectric extent size is enabled.\n\nHfssExtentInfo.dielectric_extent_type\n\nDielectric extent type.\n\nHfssExtentInfo.extent_type\n\nExtent type.\n\nHfssExtentInfo.honor_user_dielectric\n\nHonor user dielectric.\n\nHfssExtentInfo.is_pml_visible\n\nWhether visibility of the PML is enabled.\n\nHfssExtentInfo.open_region_type\n\nOpen region type.\n\nHfssExtentInfo.operating_freq\n\nPML Operating frequency.\n\nHfssExtentInfo.radiation_level\n\nPML Radiation level to calculate the thickness of boundary.\n\nHfssExtentInfo.sync_air_box_vertical_extent\n\nVertical extent of the sync air box.\n\nHfssExtentInfo.truncate_air_box_at_ground\n\nTruncate air box at ground.\n\nHfssExtentInfo.use_open_region\n\nWhether using an open region is enabled.\n\nHfssExtentInfo.use_xy_data_extent_for_vertical_expansion\n\nWhether using the xy data extent for vertical expansion is enabled.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.html#adaptivefrequencydata",
        "title": "AdaptiveFrequencyData",
        "section": "AdaptiveFrequencyData",
        "text": "Manages EDB methods for adaptive frequency data.\nAdaptiveFrequencyData.adaptive_frequency\nAdaptive frequency for the setup.\nAdaptiveFrequencyData.max_delta\nMaximum change of S-parameters between two consecutive passes, which serves as a stopping criterion.\nAdaptiveFrequencyData.max_passes\nMaximum allowed number of mesh refinement cycles.\nAdaptiveFrequencyData\nAdaptiveFrequencyData.adaptive_frequency\nAdaptiveFrequencyData.max_delta\nAdaptiveFrequencyData.max_passes"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.html#pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData",
        "title": "AdaptiveFrequencyData > AdaptiveFrequencyData > AdaptiveFrequencyData",
        "section": "AdaptiveFrequencyData > AdaptiveFrequencyData",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData(adaptive_frequency_data)\n\nManages EDB methods for adaptive frequency data.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nAdaptiveFrequencyData.adaptive_frequency\n\nAdaptive frequency for the setup.\n\nAdaptiveFrequencyData.max_delta\n\nMaximum change of S-parameters between two consecutive passes, which serves as a stopping criterion.\n\nAdaptiveFrequencyData.max_passes\n\nMaximum allowed number of mesh refinement cycles.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.differential_pairs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.differential_pairs.html#differential_pairs",
        "title": "differential_pairs",
        "section": "differential_pairs",
        "text": "Get all differential pairs.\ndifferential_pairs\nlegacy.database.nets.EdbDifferentialPairs"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.differential_pairs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.differential_pairs.html#pyedb.dotnet.edb.Edb.differential_pairs",
        "title": "differential_pairs > differential_pairs > differential_pairs",
        "section": "differential_pairs > differential_pairs",
        "text": "property Edb.differential_pairs\n\nGet all differential pairs.\n\nReturns\n\nlegacy.database.nets.EdbDifferentialPairs\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> edbapp.differential_pairs\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.longest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.longest_arc.html#longest_arc",
        "title": "longest_arc",
        "section": "longest_arc",
        "text": "Get the longest arc.\nlongest_arc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.longest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.longest_arc.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.longest_arc",
        "title": "longest_arc > longest_arc > longest_arc",
        "section": "longest_arc > longest_arc",
        "text": "property EdbPolygon.longest_arc\n\nGet the longest arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_void_area_to_mesh",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_void_area_to_mesh.html#min_void_area_to_mesh",
        "title": "min_void_area_to_mesh",
        "section": "min_void_area_to_mesh",
        "text": "The minimum area below which voids are ignored.\nmin_void_area_to_mesh\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_void_area_to_mesh",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_void_area_to_mesh.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_void_area_to_mesh",
        "title": "min_void_area_to_mesh > min_void_area_to_mesh > min_void_area_to_mesh",
        "section": "min_void_area_to_mesh > min_void_area_to_mesh",
        "text": "property HFSSPISimulationSettings.min_void_area_to_mesh\n\nThe minimum area below which voids are ignored.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup.to_dict.html#to_dict",
        "title": "to_dict",
        "section": "to_dict",
        "text": "to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup.to_dict.html#pyedb.configuration.cfg_setup.CfgSIwaveDCSetup.to_dict",
        "title": "to_dict > to_dict > to_dict",
        "section": "to_dict > to_dict",
        "text": "CfgSIwaveDCSetup.to_dict()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.frequency_sweeps.html#frequency_sweeps",
        "title": "frequency_sweeps",
        "section": "frequency_sweeps",
        "text": "frequency_sweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.frequency_sweeps.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.frequency_sweeps",
        "title": "frequency_sweeps > frequency_sweeps > frequency_sweeps",
        "section": "frequency_sweeps > frequency_sweeps",
        "text": "property SiwaveDCSimulationSetup.frequency_sweeps\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.protected_attributes.html#pyedb.configuration.cfg_common.CfgBase.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgBase.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.create_terminals",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.create_terminals.html#create_terminals",
        "title": "create_terminals",
        "section": "create_terminals",
        "text": "Create step 1. Collect positive and negative terminals.\ncreate_terminals"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.create_terminals",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.create_terminals.html#pyedb.configuration.cfg_ports_sources.CfgCircuitElement.create_terminals",
        "title": "create_terminals > create_terminals > create_terminals",
        "section": "create_terminals > create_terminals",
        "text": "CfgCircuitElement.create_terminals()\n\nCreate step 1. Collect positive and negative terminals.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_pins.html#create_port_on_pins",
        "title": "create_port_on_pins",
        "section": "create_port_on_pins",
        "text": "Create circuit port between pins and reference ones.\nstr or EDBComponent object.\nUnion[int, str, EDBPadstackInstance], List[Union[int, str, EDBPadstackInstance]]\nUnion[int, str, EDBPadstackInstance], List[Union[int, str, EDBPadstackInstance]]\nstr, float\nPort name. The default is None, in which case a name is automatically assigned.\nIf True force using pingroup definition on single pin to have the port created at the pad center. If\nFalse the port is created at the pad edge. Default value is False.\ncreate_port_on_pins\nComponent\nreference\ndesignator\npin\nspecifier\ns\nor\ninstance\ns\nwhere\nthe\nport\nterminal\nis\nto\nbe\nSingle\npin\nname\na\npython:list\nof\nreference\npin\nspecifier\ns\nor\ninstance\ns\nfor\nthe\nport\nreference\nAllowed\nvalues\nare\nPort\nimpedance\npython:str\noptional\nNone\noptional\nTrue\nFalse\nFalse\nEDB\nterminal\ncreated\nor\npython:False\nif\nfailed\nto\nOr\nto\ntake\nall\nreference\npins"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_pins.html#pyedb.dotnet.database.components.Components.create_port_on_pins",
        "title": "create_port_on_pins > create_port_on_pins > create_port_on_pins",
        "section": "create_port_on_pins > create_port_on_pins",
        "text": "Components.create_port_on_pins(refdes, pins, reference_pins, impedance=50.0, port_name=None, pec_boundary=False, pingroup_on_single_pin=False)\n\nCreate circuit port between pins and reference ones.\n\nParameters\n\nrefdes\n\nComponent reference designator\n\nstr or EDBComponent object.\n\npins\n\npin specifier(s) or instance(s) where the port terminal is to be created. Single pin name or a python:list of\n\n\n\nseveral can be provided. If several pins are provided a pin group will be created. Pin specifiers can be the\n\n\n\nglobal EDB object ID or padstack instance name or pin name on component with refdes ``refdes``. Pin instances\n\n\n\ncan be provided as ``EDBPadstackInstance`` objects.\n\n\n\nFor instance for the pin called ``Pin1`` located on component with refdes ``U1``: ``U1-Pin1``, ``Pin1`` with\n\n\n\n``refdes=U1``, the pin’s global EDB object ID, or the ``EDBPadstackInstance`` corresponding to the pin can be\n\n\n\nprovided.\n\nUnion[int, str, EDBPadstackInstance], List[Union[int, str, EDBPadstackInstance]]\n\nreference_pins\n\nreference pin specifier(s) or instance(s) for the port reference terminal. Allowed values are\n\n\n\nthe same as for the ``pins`` parameter.\n\nUnion[int, str, EDBPadstackInstance], List[Union[int, str, EDBPadstackInstance]]\n\nimpedance\n\nPort impedance\n\nstr, float\n\nport_name\n\npython:str, optional\n\nPort name. The default is None, in which case a name is automatically assigned.\n\npec_boundary\n\nbool, optional\n\n\n\nWhether to define the PEC boundary, The default is ``False``. If set to ``True``,\n\n\n\na perfect short is created between the pin and impedance is ignored. This\n\n\n\nparameter is only supported on a port created between two pins, such as\n\n\n\nwhen there is no pin group.\n\n\n\npingroup_on_single_pin\n\nbool\n\nIf True force using pingroup definition on single pin to have the port created at the pad center. If\nFalse the port is created at the pad edge. Default value is False.\n\nReturns\n\nEDB terminal created, or python:False if failed to create.\n\n\n\nExample:\n\n\n\n>>> :obj:`from` :obj:`pyedb` :obj:`import` :obj:`Edb`\n    ..\n\n>>> :obj:`edb` = :obj:`Edb`\\(:obj:`path_to_edb_file`)\n    ..\n\n>>> :obj:`pin` = \"AJ6\"\n    ..\n\n>>> :obj:`ref_pins` = [\"AM7\", \"AM4\"]\n    ..\n\nOr to take all reference pins\n\n\n\n>>> :obj:`ref_pins` = [:obj:`pin` :obj:`for` :obj:`pin` :obj:`in` :class:`python:list`\\(:obj:`edb.components`\\[\"U2A5\"]:obj:`.pins.values`\\()) :obj:`if` :obj:`pin.net_name` == \"GND\"]\n    ..\n\n>>> :obj:`edb.components.create_port_on_pins`\\(refdes=\"U2A5\", pins=pin, reference_pins=ref_pins)\n    ..\n\n>>> :obj:`edb.save_edb`\\()\n    ..\n\n>>> :obj:`edb.close_edb`\\()\n    ..\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.setup_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.setup_type.html#setup_type",
        "title": "setup_type",
        "section": "setup_type",
        "text": "Type of the setup.\nsetup_type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.setup_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.setup_type.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.setup_type",
        "title": "setup_type > setup_type > setup_type",
        "section": "setup_type > setup_type",
        "text": "property RaptorXSimulationSetup.setup_type\n\nType of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_power_gound_net",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_power_gound_net.html#is_power_gound_net",
        "title": "is_power_gound_net",
        "section": "is_power_gound_net",
        "text": "Determine if one of the  nets in a list is power or ground.\nList of net names.\nTrue when one of the net names is \"power\" or \"ground\", False otherwise.\nis_power_gound_net\npython:list\nTrue\n\"power\"\n\"ground\"\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_power_gound_net",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_power_gound_net.html#pyedb.dotnet.database.nets.EdbNets.is_power_gound_net",
        "title": "is_power_gound_net > is_power_gound_net > is_power_gound_net",
        "section": "is_power_gound_net > is_power_gound_net",
        "text": "EdbNets.is_power_gound_net(netname_list)\n\nDetermine if one of the  nets in a list is power or ground.\n\nParameters\n\nnetname_list\n\npython:list\n\nList of net names.\n\nReturns\n\nbool\n\nTrue when one of the net names is \"power\" or \"ground\", False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_djordjevicsarkar_dielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_djordjevicsarkar_dielectric.html#add_djordjevicsarkar_dielectric",
        "title": "add_djordjevicsarkar_dielectric",
        "section": "add_djordjevicsarkar_dielectric",
        "text": "Add a dielectric using the Djordjevic-Sarkar model.\nName of the dielectric.\nRelative permittivity of the dielectric.\nLoss tangent for the material.\nTest frequency in GHz for the dielectric.\nadd_djordjevicsarkar_dielectric\npython:str\npython:str\npython:float\npython:int\npython:str\npython:float\npython:int\npython:str\npython:float\npython:int\npyedb.dotnet.database.materials.Material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_djordjevicsarkar_dielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_djordjevicsarkar_dielectric.html#pyedb.dotnet.database.materials.Materials.add_djordjevicsarkar_dielectric",
        "title": "add_djordjevicsarkar_dielectric > add_djordjevicsarkar_dielectric > add_djordjevicsarkar_dielectric",
        "section": "add_djordjevicsarkar_dielectric > add_djordjevicsarkar_dielectric",
        "text": "Materials.add_djordjevicsarkar_dielectric(name, permittivity_at_frequency, loss_tangent_at_frequency, dielectric_model_frequency, dc_conductivity=None, dc_permittivity=None, **kwargs)\n\nAdd a dielectric using the Djordjevic-Sarkar model.\n\nParameters\n\nname\n\npython:str\n\nName of the dielectric.\n\npermittivity_at_frequency\n\npython:str, python:float, python:int\n\nRelative permittivity of the dielectric.\n\nloss_tangent_at_frequency\n\npython:str, python:float, python:int\n\nLoss tangent for the material.\n\ndielectric_model_frequency\n\npython:str, python:float, python:int\n\nTest frequency in GHz for the dielectric.\n\nReturns\n\npyedb.dotnet.database.materials.Material\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.solver_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.solver_type.html#solver_type",
        "title": "solver_type",
        "section": "solver_type",
        "text": "Retrieve the SolverType class to select the solver to be called during the project build.\nselections are supported, Hfss3dLayout and Siwave.\nsolver_type\ndotnet.generic.constants.SolverType"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.solver_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.solver_type.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.solver_type",
        "title": "solver_type > solver_type > solver_type",
        "section": "solver_type > solver_type",
        "text": "property SimulationConfiguration.solver_type\n\nRetrieve the SolverType class to select the solver to be called during the project build.\n\nReturns\n\ndotnet.generic.constants.SolverType\n\nselections are supported, Hfss3dLayout and Siwave.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.protected_attributes.html#pyedb.configuration.cfg_package_definition.CfgHeatSink.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgHeatSink.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_sim_setup_info.html#get_sim_setup_info",
        "title": "get_sim_setup_info",
        "section": "get_sim_setup_info",
        "text": "Get simulation setup information.\nget_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_sim_setup_info.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_sim_setup_info",
        "title": "get_sim_setup_info > get_sim_setup_info > get_sim_setup_info",
        "section": "get_sim_setup_info > get_sim_setup_info",
        "text": "property HfssSimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.find_by_id",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.find_by_id.html#find_by_id",
        "title": "find_by_id",
        "section": "find_by_id",
        "text": "Find a database by ID.\nThe Database’s unique EDB id.\nThe Database or Null on failure.\nfind_by_id\npython:int\nDatabase"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.find_by_id",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.find_by_id.html#pyedb.dotnet.edb.Edb.find_by_id",
        "title": "find_by_id > find_by_id > find_by_id",
        "section": "find_by_id > find_by_id",
        "text": "Edb.find_by_id(db_id)\n\nFind a database by ID.\n\nParameters\n\ndb_id\n\npython:int\n\nThe Database’s unique EDB id.\n\nReturns\n\nDatabase\n\nThe Database or Null on failure.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness.html#hole_plating_thickness",
        "title": "hole_plating_thickness",
        "section": "hole_plating_thickness",
        "text": "Hole plating thickness.\nThickness of the hole plating if present.\nhole_plating_thickness\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness",
        "title": "hole_plating_thickness > hole_plating_thickness > hole_plating_thickness",
        "section": "hole_plating_thickness > hole_plating_thickness",
        "text": "property EDBPadstack.hole_plating_thickness\n\nHole plating thickness.\n\nReturns\n\npython:float\n\nThickness of the hole plating if present.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.value",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.value.html#value",
        "title": "value",
        "section": "value",
        "text": "Variable Value Object.\nvalue\nEdb\nObject"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.value",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.value.html#pyedb.dotnet.database.edb_data.edbvalue.EdbValue.value",
        "title": "value > value > value",
        "section": "value > value",
        "text": "property EdbValue.value\n\nVariable Value Object.\n\nReturns\n\nEdb Object\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.load_config",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.load_config.html#load_config",
        "title": "load_config",
        "section": "load_config",
        "text": "Load HFSS extent configuration.\nParameters of the HFSS extent information.\nload_config"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.load_config",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.load_config.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.load_config",
        "title": "load_config > load_config > load_config",
        "section": "load_config > load_config",
        "text": "HfssExtentInfo.load_config(config)\n\nLoad HFSS extent configuration.\n\nParameters\n\nconfig: dict\n\nParameters of the HFSS extent information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_net_name.html#reference_net_name",
        "title": "reference_net_name",
        "section": "reference_net_name",
        "text": "Net name to which reference_object belongs.\nreference_net_name"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_net_name.html#pyedb.dotnet.database.edb_data.ports.GapPort.reference_net_name",
        "title": "reference_net_name > reference_net_name > reference_net_name",
        "section": "reference_net_name > reference_net_name",
        "text": "property GapPort.reference_net_name\n\nNet name to which reference_object belongs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sim_setup_info",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "sim_setup_info"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sim_setup_info",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sim_setup_info.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property RaptorXSimulationSetup.sim_setup_info\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.output_aedb",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.output_aedb.html#output_aedb",
        "title": "output_aedb",
        "section": "output_aedb",
        "text": "Retrieve the path for the output aedb folder. When provided will copy the initial aedb to the specified\npath. This is used especially to preserve the initial project when several files have to be build based on\nthe last one. When the path is None, the initial project will be overwritten. So when cutout is applied mand\nyou want to preserve the project make sure you provide the full path for the new aedb folder.\nAbsolute path for the created aedb folder.\noutput_aedb\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.output_aedb",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.output_aedb.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.output_aedb",
        "title": "output_aedb > output_aedb > output_aedb",
        "section": "output_aedb > output_aedb",
        "text": "property SimulationConfigurationBatch.output_aedb\n\nRetrieve the path for the output aedb folder. When provided will copy the initial aedb to the specified\npath. This is used especially to preserve the initial project when several files have to be build based on\nthe last one. When the path is None, the initial project will be overwritten. So when cutout is applied mand\nyou want to preserve the project make sure you provide the full path for the new aedb folder.\n\nReturns\n\npython:str\n\nAbsolute path for the created aedb folder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_ratio",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_ratio.html#occupying_ratio",
        "title": "occupying_ratio",
        "section": "occupying_ratio",
        "text": "occupying_ratio"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_ratio",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_ratio.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.occupying_ratio",
        "title": "occupying_ratio > occupying_ratio > occupying_ratio",
        "section": "occupying_ratio > occupying_ratio",
        "text": "property EDBStatistics.occupying_ratio\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.advanced_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.advanced_settings.html#advanced_settings",
        "title": "advanced_settings",
        "section": "advanced_settings",
        "text": "SIwave advanced settings.\nadvanced_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.advanced_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.advanced_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.advanced_settings",
        "title": "advanced_settings > advanced_settings > advanced_settings",
        "section": "advanced_settings > advanced_settings",
        "text": "property SiwaveSimulationSetup.advanced_settings\n\nSIwave advanced settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_x",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_x.html#offset_x",
        "title": "offset_x",
        "section": "offset_x",
        "text": "Offset for the X axis.\nOffset for the X axis.\noffset_x\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_x",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_x.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.offset_x",
        "title": "offset_x > offset_x > offset_x",
        "section": "offset_x > offset_x",
        "text": "property EDBPadProperties.offset_x\n\nOffset for the X axis.\n\nReturns\n\npython:str\n\nOffset for the X axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_orientation",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_orientation.html#fin_orientation",
        "title": "fin_orientation",
        "section": "fin_orientation",
        "text": "The fin orientation.\nfin_orientation"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_orientation",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_orientation.html#pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_orientation",
        "title": "fin_orientation > fin_orientation > fin_orientation",
        "section": "fin_orientation > fin_orientation",
        "text": "property HeatSink.fin_orientation\n\nThe fin orientation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/padstacks/create_padsatck_instance",
        "href": "user_guide/padstacks/create_padsatck_instance.html#create-a-padstack-instance",
        "title": "Create a padstack instance",
        "section": "Create a padstack instance",
        "text": "This page shows how to create a padstack instance.\nCreate a padstack instance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_voltage_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_voltage_source.html#is_voltage_source",
        "title": "is_voltage_source",
        "section": "is_voltage_source",
        "text": "Whether it is a voltage source.\nis_voltage_source"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_voltage_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_voltage_source.html#pyedb.dotnet.database.edb_data.ports.WavePort.is_voltage_source",
        "title": "is_voltage_source > is_voltage_source > is_voltage_source",
        "section": "is_voltage_source > is_voltage_source",
        "text": "property WavePort.is_voltage_source\n\nWhether it is a voltage source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_rlc_values",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_rlc_values.html#illegal_rlc_values",
        "title": "illegal_rlc_values",
        "section": "illegal_rlc_values",
        "text": "Find and fix RLC illegal values.\nillegal_rlc_values"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_rlc_values",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_rlc_values.html#pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_rlc_values",
        "title": "illegal_rlc_values > illegal_rlc_values > illegal_rlc_values",
        "section": "illegal_rlc_values > illegal_rlc_values",
        "text": "LayoutValidation.illegal_rlc_values(fix=False)\n\nFind and fix RLC illegal values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitives",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitives.html#get_primitives",
        "title": "get_primitives",
        "section": "get_primitives",
        "text": "Get primitives by conditions.\nSet filter on net_name. Default is None.\nSet filter on layer_name. Default is None.\nSet filter on primitive type. Default is None.\nSet filter on is_void. Default is ‘False’\nList of filtered primitives\nget_primitives\npython:str\noptional\npython:str\noptional\npython:str\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitives",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitives.html#pyedb.dotnet.database.modeler.Modeler.get_primitives",
        "title": "get_primitives > get_primitives > get_primitives",
        "section": "get_primitives > get_primitives",
        "text": "Modeler.get_primitives(net_name=None, layer_name=None, prim_type=None, is_void=False)\n\nGet primitives by conditions.\n\nParameters\n\nnet_name\n\npython:str, optional\n\nSet filter on net_name. Default is None.\n\nlayer_name\n\npython:str, optional\n\nSet filter on layer_name. Default is None.\n\nprim_type\n\npython:str, optional\n\nSet filter on primitive type. Default is None.\n\nis_void\n\nbool\n\nSet filter on is_void. Default is ‘False’\n\nReturns\n\n\n\n——-\n\n\n\nlist\n\nList of filtered primitives\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_dc_terminal",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_dc_terminal.html#create_dc_terminal",
        "title": "create_dc_terminal",
        "section": "create_dc_terminal",
        "text": "Create a dc terminal.\nName of the positive component.\nName of the positive net.\nName of the source. The default is \"\".\nThe name of the source.\ncreate_dc_terminal\npython:str\npython:str\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_dc_terminal",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_dc_terminal.html#pyedb.dotnet.database.siwave.EdbSiwave.create_dc_terminal",
        "title": "create_dc_terminal > create_dc_terminal > create_dc_terminal",
        "section": "create_dc_terminal > create_dc_terminal",
        "text": "EdbSiwave.create_dc_terminal(component_name, net_name, source_name='')\n\nCreate a dc terminal.\n\nParameters\n\ncomponent_name\n\npython:str\n\nName of the positive component.\n\nnet_name\n\npython:str\n\nName of the positive net.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nThe name of the source.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edb.siwave.create_dc_terminal(\"U2A5\", \"V1P5_S3\", \"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/build_simulation_project/cutout",
        "href": "user_guide/build_simulation_project/cutout.html#clip-a-design",
        "title": "Clip a design",
        "section": "Clip a design",
        "text": "Most of the time, only a specific part of a layout needs to be simulated. Thus, you want to\nclip the design to reduce computer resources and speed up the simulation.\nThis page shows how to clip a design based on net selection.\nClip a design"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.delete_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.delete_material.html#delete_material",
        "title": "delete_material",
        "section": "delete_material",
        "text": "Remove a material from the database.\ndelete_material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.delete_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.delete_material.html#pyedb.dotnet.database.materials.Materials.delete_material",
        "title": "delete_material > delete_material > delete_material",
        "section": "delete_material > delete_material",
        "text": "Materials.delete_material(material_name)\n\nRemove a material from the database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refine_per_pass",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refine_per_pass.html#max_refine_per_pass",
        "title": "max_refine_per_pass",
        "section": "max_refine_per_pass",
        "text": "Maximum number of mesh elementat that can be added during an adaptive pass.\nmax_refine_per_pass\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refine_per_pass",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refine_per_pass.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refine_per_pass",
        "title": "max_refine_per_pass > max_refine_per_pass > max_refine_per_pass",
        "section": "max_refine_per_pass > max_refine_per_pass",
        "text": "property AdaptiveSettings.max_refine_per_pass\n\nMaximum number of mesh elementat that can be added during an adaptive pass.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.si_slider_position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.si_slider_position.html#si_slider_position",
        "title": "si_slider_position",
        "section": "si_slider_position",
        "text": "SI slider position. Values are from 1 to 3.\nsi_slider_position\n1\n3"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.si_slider_position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.si_slider_position.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.si_slider_position",
        "title": "si_slider_position > si_slider_position > si_slider_position",
        "section": "si_slider_position > si_slider_position",
        "text": "property SiwaveSimulationSetup.si_slider_position\n\nSI slider position. Values are from 1 to 3.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_sweep.html#add_sweep",
        "title": "add_sweep",
        "section": "add_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nAdded for grpc compatibility.\nAdded for rpc compatibility.\nAdded for grpc compatibility.\nAdded for grpc compatibility.\nList of frequency points. The default is None.\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\nadd_sweep\npython:str\noptional\nNone\npython:str\noptional\npython:str\noptional\npython:str\noptional\noptional\npython:list\noptional\nNone\npython:str\noptional\n\"interpolation\"\n\"discrete\""
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_sweep.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_sweep",
        "title": "add_sweep > add_sweep > add_sweep",
        "section": "add_sweep > add_sweep",
        "text": "SiwaveDCSimulationSetup.add_sweep(name: str | None = None, distribution: str | None = None, start_freq: str | None = None, stop_freq: str | None = None, step=None, frequency_set: list | None = None, sweep_type: str = 'interpolation', **kwargs)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\ndistribution\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstart_freq\n\npython:str, optional\n\nAdded for rpc compatibility.\n\nstop_freq\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstep\n\noptional\n\nAdded for grpc compatibility.\n\nfrequency_set\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nsweep_type\n\npython:str, optional\n\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\n\nReturns\n\n\n\n——-\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_sweep(name=\"sw1\", frequency_set=[\"linear count\", \"1MHz\", \"100MHz\", 10])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_capacitors",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_capacitors.html#num_capacitors",
        "title": "num_capacitors",
        "section": "num_capacitors",
        "text": "num_capacitors"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_capacitors",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_capacitors.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_capacitors",
        "title": "num_capacitors > num_capacitors > num_capacitors",
        "section": "num_capacitors > num_capacitors",
        "text": "property EDBStatistics.num_capacitors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.open_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.open_edb.html#open_edb",
        "title": "open_edb",
        "section": "open_edb",
        "text": "Open EDB.\nopen_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.open_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.open_edb.html#pyedb.dotnet.edb.Edb.open_edb",
        "title": "open_edb > open_edb > open_edb",
        "section": "open_edb > open_edb",
        "text": "Edb.open_edb()\n\nOpen EDB.\n\nReturns\n\n``True`` when succeed ``False`` if failed\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.html#edbextendednetdata",
        "title": "EDBExtendedNetData",
        "section": "EDBExtendedNetData",
        "text": "Manages EDB functionalities for a primitives.\nIt Inherits EDB Object properties.\nEDBExtendedNetData.add_net(name)\nAdd a new net.\nEDBExtendedNetData.api_create(name)\nEdb Dotnet Api Database Edb.ExtendedNet.Create.\nEDBExtendedNetData.delete()\nEdb Dotnet Api Database Delete.\nEDBExtendedNetData.find_by_name(layout, net)\nEdb Dotnet Api Database Edb.ExtendedNet.FindByName.\nEDBExtendedNetData.api_class\nReturn Ansys.Ansoft.Edb class object.\nEDBExtendedNetData.api_nets\nReturn Edb Nets object dictionary.\nEDBExtendedNetData.components\nDictionary of components.\nEDBExtendedNetData.is_null\nEdb Dotnet Api Database NetClass.IsNull().\nEDBExtendedNetData.name\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\nEDBExtendedNetData.nets\nNets dictionary.\nEDBExtendedNetData.rlc\nDictionary of RLC components.\nEDBExtendedNetData.serial_rlc\nDictionary of serial RLC components.\nEDBExtendedNetData.shunt_rlc\nDictionary of shunt RLC components.\nEDBExtendedNetData\nEDBExtendedNetData.add_net\nEDBExtendedNetData.api_create\nEDBExtendedNetData.delete\nEDBExtendedNetData.find_by_name\nEDBExtendedNetData.api_class\nEDBExtendedNetData.api_nets\nEDBExtendedNetData.components\nEDBExtendedNetData.is_null\nEDBExtendedNetData.name\nEDBExtendedNetData.nets\nEDBExtendedNetData.rlc\nEDBExtendedNetData.serial_rlc\nEDBExtendedNetData.shunt_rlc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData",
        "title": "EDBExtendedNetData > EDBExtendedNetData > EDBExtendedNetData",
        "section": "EDBExtendedNetData > EDBExtendedNetData",
        "text": "class pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData(core_app, raw_extended_net=None)\n\nManages EDB functionalities for a primitives.\nIt Inherits EDB Object properties.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> edb_extended_net = edb.nets.extended_nets[\"GND\"]\n>>> edb_extended_net.name # Class Property\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBExtendedNetData.add_net(name)\n\nAdd a new net.\n\nEDBExtendedNetData.api_create(name)\n\nEdb Dotnet Api Database Edb.ExtendedNet.Create.\n\nEDBExtendedNetData.delete()\n\nEdb Dotnet Api Database Delete.\n\nEDBExtendedNetData.find_by_name(layout, net)\n\nEdb Dotnet Api Database Edb.ExtendedNet.FindByName.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBExtendedNetData.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\nEDBExtendedNetData.api_nets\n\nReturn Edb Nets object dictionary.\n\nEDBExtendedNetData.components\n\nDictionary of components.\n\nEDBExtendedNetData.is_null\n\nEdb Dotnet Api Database NetClass.IsNull().\n\nEDBExtendedNetData.name\n\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\n\nEDBExtendedNetData.nets\n\nNets dictionary.\n\nEDBExtendedNetData.rlc\n\nDictionary of RLC components.\n\nEDBExtendedNetData.serial_rlc\n\nDictionary of serial RLC components.\n\nEDBExtendedNetData.shunt_rlc\n\nDictionary of shunt RLC components.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Adding this property for compatibility with grpc.\nis_null"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_null.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property HfssSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.find_or_create_net",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.find_or_create_net.html#find_or_create_net",
        "title": "find_or_create_net",
        "section": "find_or_create_net",
        "text": "Find or create the net with the given name in the layout.\nName of the net to find or create. The default is \"\".\nAll net name starting with the string. Not case-sensitive.\nAll net name containing the string. Not case-sensitive.\nAll net name ending with the string. Not case-sensitive.\nNet Object.\nfind_or_create_net\npython:str\noptional\n\"\"\npython:str\noptional\npython:str\noptional\npython:str\noptional\nobject"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.find_or_create_net",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.find_or_create_net.html#pyedb.dotnet.database.nets.EdbNets.find_or_create_net",
        "title": "find_or_create_net > find_or_create_net > find_or_create_net",
        "section": "find_or_create_net > find_or_create_net",
        "text": "EdbNets.find_or_create_net(net_name='', start_with='', contain='', end_with='')\n\nFind or create the net with the given name in the layout.\n\nParameters\n\nnet_name\n\npython:str, optional\n\nName of the net to find or create. The default is \"\".\n\nstart_with\n\npython:str, optional\n\nAll net name starting with the string. Not case-sensitive.\n\ncontain\n\npython:str, optional\n\nAll net name containing the string. Not case-sensitive.\n\nend_with\n\npython:str, optional\n\nAll net name ending with the string. Not case-sensitive.\n\nReturns\n\nobject\n\nNet Object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave",
        "href": "api/_autosummary/pyedb.siwave.Siwave.html#siwave",
        "title": "Siwave",
        "section": "Siwave",
        "text": "Initializes SIwave based on the inputs provided and manages SIwave release and closing.\nVersion of AEDT to use. The default is None, in which case\nthe active setup is used or the latest installed version is used.\nSiwave.close_project([save_project])\nClose the project.\nSiwave.export_configuration(file_path[, ...])\nExport layout information into a configuration file.\nSiwave.export_dc_simulation_report(...[, ...])\nExport the Siwave DC simulation report.\nSiwave.export_edb(file_path)\nExport the layout as EDB.\nSiwave.export_element_data(simulation_name, ...)\nExport element data.\nSiwave.export_icepak_project(file_path, ...)\nExports an Icepak project for standalone use.\nSiwave.export_siwave_report(simulation_name, ...)\nExport the Siwave report.\nSiwave.import_edb(file_path)\nImport layout from EDB.\nSiwave.load_configuration(file_path)\nLoad configuration settings from a configure file.Import\nSiwave.open_project([proj_path])\nOpen a project.\nSiwave.quit_application()\nQuit the application.\nSiwave.run_dc_simulation([...])\nRun DC simulation.\nSiwave.run_icepak_simulation(...)\nRuns an Icepak simulation.\nSiwave.save(file_path)\nSave the project.\nSiwave.save_project([projectpath, projectName])\nSave the project.\nSiwave.current_version\nCurrent version of AEDT.\nSiwave.file_dir\nDirectory path of the open project.\nSiwave.file_path\nPath of the open project file.\nSiwave.icepak\n\nSiwave.lock_file\nLock file.\nSiwave.oproject\nProject.\nSiwave.project_file\nProject file.\nSiwave.project_name\nProject name.\nSiwave.project_path\nProject path.\nSiwave.pyaedt_dir\nPyAEDT directory.\nSiwave.results_directory\nResults directory.\nSiwave.src_dir\nSource directory.\nSiwave.version\n\nSiwave.version_keys\nVersion keys for AEDT.\nSiwave\npython:str\npython:int\npython:float\noptional\nNone\nSiwave.close_project\nSiwave.export_configuration\nSiwave.export_dc_simulation_report\nSiwave.export_edb\nSiwave.export_element_data\nSiwave.export_icepak_project\nSiwave.export_siwave_report\nSiwave.import_edb\nSiwave.load_configuration\nSiwave.open_project\nSiwave.quit_application\nSiwave.run_dc_simulation\nSiwave.run_icepak_simulation\nSiwave.save\nSiwave.save_project\nSiwave.current_version\nSiwave.file_dir\nSiwave.file_path\nSiwave.icepak\nSiwave.lock_file\nSiwave.oproject\nSiwave.project_file\nSiwave.project_name\nSiwave.project_path\nSiwave.pyaedt_dir\nSiwave.results_directory\nSiwave.src_dir\nSiwave.version\nSiwave.version_keys"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave",
        "href": "api/_autosummary/pyedb.siwave.Siwave.html#pyedb.siwave.Siwave",
        "title": "Siwave > Siwave > Siwave",
        "section": "Siwave > Siwave",
        "text": "class pyedb.siwave.Siwave(specified_version=None)\n\nInitializes SIwave based on the inputs provided and manages SIwave release and closing.\n\nParameters\n\nspecified_version\n\npython:str, python:int, python:float, optional\n\nVersion of AEDT to use. The default is None, in which case\nthe active setup is used or the latest installed version is used.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSiwave.close_project([save_project])\n\nClose the project.\n\nSiwave.export_configuration(file_path[, ...])\n\nExport layout information into a configuration file.\n\nSiwave.export_dc_simulation_report(...[, ...])\n\nExport the Siwave DC simulation report.\n\nSiwave.export_edb(file_path)\n\nExport the layout as EDB.\n\nSiwave.export_element_data(simulation_name, ...)\n\nExport element data.\n\nSiwave.export_icepak_project(file_path, ...)\n\nExports an Icepak project for standalone use.\n\nSiwave.export_siwave_report(simulation_name, ...)\n\nExport the Siwave report.\n\nSiwave.import_edb(file_path)\n\nImport layout from EDB.\n\nSiwave.load_configuration(file_path)\n\nLoad configuration settings from a configure file.Import\n\nSiwave.open_project([proj_path])\n\nOpen a project.\n\nSiwave.quit_application()\n\nQuit the application.\n\nSiwave.run_dc_simulation([...])\n\nRun DC simulation.\n\nSiwave.run_icepak_simulation(...)\n\nRuns an Icepak simulation.\n\nSiwave.save(file_path)\n\nSave the project.\n\nSiwave.save_project([projectpath, projectName])\n\nSave the project.\n\n\n\nAttributes\n\n\n\n\n\n\n\nSiwave.current_version\n\nCurrent version of AEDT.\n\nSiwave.file_dir\n\nDirectory path of the open project.\n\nSiwave.file_path\n\nPath of the open project file.\n\nSiwave.icepak\n\n\n\nSiwave.lock_file\n\nLock file.\n\nSiwave.oproject\n\nProject.\n\nSiwave.project_file\n\nProject file.\n\nSiwave.project_name\n\nProject name.\n\nSiwave.project_path\n\nProject path.\n\nSiwave.pyaedt_dir\n\nPyAEDT directory.\n\nSiwave.results_directory\n\nResults directory.\n\nSiwave.src_dir\n\nSource directory.\n\nSiwave.version\n\n\n\nSiwave.version_keys\n\nVersion keys for AEDT.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.current_version",
        "href": "api/_autosummary/pyedb.siwave.Siwave.current_version.html#current_version",
        "title": "current_version",
        "section": "current_version",
        "text": "Current version of AEDT.\ncurrent_version"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.current_version",
        "href": "api/_autosummary/pyedb.siwave.Siwave.current_version.html#pyedb.siwave.Siwave.current_version",
        "title": "current_version > current_version > current_version",
        "section": "current_version > current_version",
        "text": "property Siwave.current_version\n\nCurrent version of AEDT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.nets.html#nets",
        "title": "nets",
        "section": "nets",
        "text": "Nets dictionary.\nnets"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.nets.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.nets",
        "title": "nets > nets > nets",
        "section": "nets > nets",
        "text": "property EDBExtendedNetData.nets\n\nNets dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.max_elements.html#max_elements",
        "title": "max_elements",
        "section": "max_elements",
        "text": "Maximum number of elements.\nmax_elements\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.max_elements.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.max_elements",
        "title": "max_elements > max_elements > max_elements",
        "section": "max_elements > max_elements",
        "text": "property SkinDepthMeshOperation.max_elements\n\nMaximum number of elements.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.fix_self_intersections",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.fix_self_intersections.html#fix_self_intersections",
        "title": "fix_self_intersections",
        "section": "fix_self_intersections",
        "text": "Remove self intersections if they exists.\nAll new polygons created from the removal operation.\nfix_self_intersections\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.fix_self_intersections",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.fix_self_intersections.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.fix_self_intersections",
        "title": "fix_self_intersections > fix_self_intersections > fix_self_intersections",
        "section": "fix_self_intersections > fix_self_intersections",
        "text": "EdbPolygon.fix_self_intersections()\n\nRemove self intersections if they exists.\n\nReturns\n\npython:list\n\nAll new polygons created from the removal operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_convergence_matrix",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_convergence_matrix.html#use_convergence_matrix",
        "title": "use_convergence_matrix",
        "section": "use_convergence_matrix",
        "text": "Whether to turn on the convergence matrix.\nTrue if convergence matrix is used, False otherwise.\nuse_convergence_matrix\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_convergence_matrix",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_convergence_matrix.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.use_convergence_matrix",
        "title": "use_convergence_matrix > use_convergence_matrix > use_convergence_matrix",
        "section": "use_convergence_matrix > use_convergence_matrix",
        "text": "property AdaptiveSettings.use_convergence_matrix\n\nWhether to turn on the convergence matrix.\n\nReturns\n\nbool\n\nTrue if convergence matrix is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.subtract",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.subtract.html#subtract",
        "title": "subtract",
        "section": "subtract",
        "text": "Subtract active primitive with one or more primitives.\nsubtract\ndotnet.database.edb_data.EDBPrimitives\nEDB\nPolygonData\nEDB\nPrimitive\npython:list\nList\nof\ndotnet.database.edb_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.subtract",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.subtract.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.subtract",
        "title": "subtract > subtract > subtract",
        "section": "subtract > subtract",
        "text": "EdbPolygon.subtract(primitives)\n\nSubtract active primitive with one or more primitives.\n\nParameters\n\nprimitives\n\ndotnet.database.edb_data.EDBPrimitives or EDB PolygonData or EDB Primitive or python:list\n\n\n\nReturns\n\nList of dotnet.database.edb_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Edb Dotnet Api Database NetClass.name and  NetClass.SetName().\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.name.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EDBDifferentialPairData.name\n\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.serial_rlc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.serial_rlc.html#serial_rlc",
        "title": "serial_rlc",
        "section": "serial_rlc",
        "text": "Dictionary of serial RLC components.\nserial_rlc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.serial_rlc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.serial_rlc.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.serial_rlc",
        "title": "serial_rlc > serial_rlc > serial_rlc",
        "section": "serial_rlc > serial_rlc",
        "text": "property EDBExtendedNetData.serial_rlc\n\nDictionary of serial RLC components.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.fix_self_intersections",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.fix_self_intersections.html#fix_self_intersections",
        "title": "fix_self_intersections",
        "section": "fix_self_intersections",
        "text": "Find and fix self intersections from a given netlist.\nList of nets on which check disjoints. If None is provided then the algorithm will loop on all nets.\nfix_self_intersections\npython:str\npython:list\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.fix_self_intersections",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.fix_self_intersections.html#pyedb.dotnet.database.layout_validation.LayoutValidation.fix_self_intersections",
        "title": "fix_self_intersections > fix_self_intersections > fix_self_intersections",
        "section": "fix_self_intersections > fix_self_intersections",
        "text": "LayoutValidation.fix_self_intersections(net_list=None)\n\nFind and fix self intersections from a given netlist.\n\nParameters\n\nnet_list\n\npython:str, python:list, optional\n\nList of nets on which check disjoints. If None is provided then the algorithm will loop on all nets.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.radiation_box",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.radiation_box.html#radiation_box",
        "title": "radiation_box",
        "section": "radiation_box",
        "text": "Retrieve RadiationBoxType object selection defined for the radiation box type.\nradiation_box\nRadiationBoxType\nobject\nvalues\ncan\nbe\nchosen\nConformal\nBoundingBox"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.radiation_box",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.radiation_box.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.radiation_box",
        "title": "radiation_box > radiation_box > radiation_box",
        "section": "radiation_box > radiation_box",
        "text": "property SimulationConfigurationAc.radiation_box\n\nRetrieve RadiationBoxType object selection defined for the radiation box type.\n\nReturns\n\nRadiationBoxType object\n\n\n\n3 values can be chosen, Conformal, BoundingBox or ConvexHull.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_polygon.html#parametrize_polygon",
        "title": "parametrize_polygon",
        "section": "parametrize_polygon",
        "text": "Parametrize pieces of a polygon based on another polygon.\nName of the polygon.\nPolygon to use as a filter.\nName of the offset to create.  The default is \"offsetx\".\nList of the X and Y origins, which impacts the vector\ncomputation and is needed to determine expansion direction.\nThe default is None, in which case the vector is\ncomputed from the polygon’s center.\nTrue when successful, False when failed.\nparametrize_polygon\npython:str\noptional\n\"offsetx\"\npython:list\noptional\nNone\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_polygon.html#pyedb.dotnet.database.modeler.Modeler.parametrize_polygon",
        "title": "parametrize_polygon > parametrize_polygon > parametrize_polygon",
        "section": "parametrize_polygon > parametrize_polygon",
        "text": "Modeler.parametrize_polygon(polygon, selection_polygon, offset_name='offsetx', origin=None)\n\nParametrize pieces of a polygon based on another polygon.\n\nParameters\n\npolygon\n\nName of the polygon.\n\nselection_polygon\n\nPolygon to use as a filter.\n\noffset_name\n\npython:str, optional\n\nName of the offset to create.  The default is \"offsetx\".\n\norigin\n\npython:list, optional\n\nList of the X and Y origins, which impacts the vector\ncomputation and is needed to determine expansion direction.\nThe default is None, in which case the vector is\ncomputed from the polygon’s center.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes.html#use_eliminate_slit_per_holes",
        "title": "use_eliminate_slit_per_holes",
        "section": "use_eliminate_slit_per_holes",
        "text": "This is a setting that internally simplifies layouts with strain relief or thermal relief slits and\nholes.\nuse_eliminate_slit_per_holes"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes",
        "title": "use_eliminate_slit_per_holes > use_eliminate_slit_per_holes > use_eliminate_slit_per_holes",
        "section": "use_eliminate_slit_per_holes > use_eliminate_slit_per_holes",
        "text": "property RaptorXSimulationAdvancedSettings.use_eliminate_slit_per_holes\n\nThis is a setting that internally simplifies layouts with strain relief or thermal relief slits and\nholes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.object_instance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.object_instance.html#object_instance",
        "title": "object_instance",
        "section": "object_instance",
        "text": "Return Ansys.Ansoft.Edb.LayoutInstance.LayoutObjInstance object.\nobject_instance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.object_instance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.object_instance.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.object_instance",
        "title": "object_instance > object_instance > object_instance",
        "section": "object_instance > object_instance",
        "text": "property EDBPadstackInstance.object_instance\n\nReturn Ansys.Ansoft.Edb.LayoutInstance.LayoutObjInstance object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string.html#hole_diameter_string",
        "title": "hole_diameter_string",
        "section": "hole_diameter_string",
        "text": "Hole diameter in string format.\nhole_diameter_string"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string",
        "title": "hole_diameter_string > hole_diameter_string > hole_diameter_string",
        "section": "hole_diameter_string > hole_diameter_string",
        "text": "property EDBPadstack.hole_diameter_string\n\nHole diameter in string format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/components/create_rlc_component",
        "href": "user_guide/components/create_rlc_component.html#create-an-rlc-component-between-pins",
        "title": "Create an RLC component between pins",
        "section": "Create an RLC component between pins",
        "text": "This page shows how to create an RLC component between pins:\nCreate an RLC component between pins"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.export_properties.html#pyedb.configuration.cfg_pin_groups.CfgPinGroup.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgPinGroup.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save.html#save",
        "title": "save",
        "section": "save",
        "text": "Save the EDB file.\nTrue when successful, False when failed.\nsave\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save.html#pyedb.dotnet.edb.Edb.save",
        "title": "save > save > save",
        "section": "save > save",
        "text": "Edb.save()\n\nSave the EDB file.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_by_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_by_name.html#find_by_name",
        "title": "find_by_name",
        "section": "find_by_name",
        "text": "Edb Dotnet Api Database Edb.Net.FindByName.\nfind_by_name"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_by_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_by_name.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_by_name",
        "title": "find_by_name > find_by_name > find_by_name",
        "section": "find_by_name > find_by_name",
        "text": "EDBNetsData.find_by_name(layout, net)\n\nEdb Dotnet Api Database Edb.Net.FindByName.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_point_terminal",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_point_terminal.html#get_point_terminal",
        "title": "get_point_terminal",
        "section": "get_point_terminal",
        "text": "Place a voltage probe between two points.\nName of the terminal.\nName of the net.\nLocation of the terminal.\nLayer of the terminal.\nget_point_terminal\npython:str\npython:list\nlegacy.edb_core.edb_data.terminals.PointTerminal"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_point_terminal",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_point_terminal.html#pyedb.dotnet.edb.Edb.get_point_terminal",
        "title": "get_point_terminal > get_point_terminal > get_point_terminal",
        "section": "get_point_terminal > get_point_terminal",
        "text": "Edb.get_point_terminal(name, net_name, location, layer)\n\nPlace a voltage probe between two points.\n\nParameters\n\nname\n\nstr,\n\nName of the terminal.\n\nnet_name\n\npython:str\n\nName of the net.\n\nlocation\n\npython:list\n\nLocation of the terminal.\n\nlayer\n\nstr,\n\nLayer of the terminal.\n\nReturns\n\nlegacy.edb_core.edb_data.terminals.PointTerminal\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x.html#hole_offset_x",
        "title": "hole_offset_x",
        "section": "hole_offset_x",
        "text": "Hole offset for the X axis.\nHole offset value for the X axis.\nhole_offset_x\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x",
        "title": "hole_offset_x > hole_offset_x > hole_offset_x",
        "section": "hole_offset_x > hole_offset_x",
        "text": "property EDBPadstack.hole_offset_x\n\nHole offset for the X axis.\n\nReturns\n\npython:str\n\nHole offset value for the X axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.CFG_SOURCE_TYPE",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.CFG_SOURCE_TYPE.html#cfg_source_type",
        "title": "CFG_SOURCE_TYPE",
        "section": "CFG_SOURCE_TYPE",
        "text": "CFG_SOURCE_TYPE"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.CFG_SOURCE_TYPE",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.CFG_SOURCE_TYPE.html#pyedb.configuration.cfg_ports_sources.CfgSource.CFG_SOURCE_TYPE",
        "title": "CFG_SOURCE_TYPE > CFG_SOURCE_TYPE > CFG_SOURCE_TYPE",
        "section": "CFG_SOURCE_TYPE > CFG_SOURCE_TYPE",
        "text": "CfgSource.CFG_SOURCE_TYPE = {'current': [<class 'int'>, <class 'float'>], 'voltage': [<class 'int'>, <class 'float'>]}\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.material_property_to_id",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.material_property_to_id.html#material_property_to_id",
        "title": "material_property_to_id",
        "section": "material_property_to_id",
        "text": "Convert a material property name to a material property ID.\nName of the material property.\nmaterial_property_to_id\npython:str\nAny"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.material_property_to_id",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.material_property_to_id.html#pyedb.dotnet.database.materials.Materials.material_property_to_id",
        "title": "material_property_to_id > material_property_to_id > material_property_to_id",
        "section": "material_property_to_id > material_property_to_id",
        "text": "Materials.material_property_to_id(property_name)\n\nConvert a material property name to a material property ID.\n\nParameters\n\nproperty_name\n\npython:str\n\nName of the material property.\n\nReturns\n\nAny\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.set_attributes.html#pyedb.configuration.cfg_ports_sources.CfgCircuitElement.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgCircuitElement.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.components_by_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.components_by_nets.html#components_by_nets",
        "title": "components_by_nets",
        "section": "components_by_nets",
        "text": "Get all component instances grouped by nets.\ncomponents_by_nets"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.components_by_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.components_by_nets.html#pyedb.dotnet.database.nets.EdbNets.components_by_nets",
        "title": "components_by_nets > components_by_nets > components_by_nets",
        "section": "components_by_nets > components_by_nets",
        "text": "property EdbNets.components_by_nets: dict\n\nGet all component instances grouped by nets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.html#controlfilecomponent",
        "title": "ControlFileComponent",
        "section": "ControlFileComponent",
        "text": "Components.\nControlFileComponent.add_pin(name, x, y, layer)\n\nControlFileComponent.add_port(name, z0, pospin)\n\nControlFileComponent\nControlFileComponent.add_pin\nControlFileComponent.add_port"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.html#pyedb.dotnet.database.edb_data.control_file.ControlFileComponent",
        "title": "ControlFileComponent > ControlFileComponent > ControlFileComponent",
        "section": "ControlFileComponent > ControlFileComponent",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileComponent\n\nComponents.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nControlFileComponent.add_pin(name, x, y, layer)\n\n\n\nControlFileComponent.add_port(name, z0, pospin)\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.apply.html#pyedb.configuration.cfg_components.CfgComponents.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgComponents.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.auto_parametrize_design",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.auto_parametrize_design.html#auto_parametrize_design",
        "title": "auto_parametrize_design",
        "section": "auto_parametrize_design",
        "text": "Assign automatically design and project variables with current values.\nEnable layer thickness parametrization. Default value is True.\nEnable material parametrization. Default value is True.\nEnable via diameter parametrization. Default value is True.\nEnable pads size parametrization. Default value is True.\nEnable anti pads size parametrization. Default value is True.\nEnable trace width parametrization. Default value is True.\nEnable layer filter. Default value is None, all layers are parametrized.\nEnable material filter. Default value is None, all material are parametrized.\nEnable padstack definition filter. Default value is None, all padsatcks are parametrized.\nEnable nets filter for trace width parametrization. Default value is None, all layers are parametrized.\nWhether to use a single design variable for each padstack definition or a variable per pad layer.\nDefault value is True.\nWhether if use an absolute variable for each trace, padstacks and layers or a delta variable instead.\nDefault value is True.\nFull path and name for the new AEDB file. If None, then current aedb will be cutout.\nWhether to open the cutout at the end. The default is True.\nExpansion size on polygons. Polygons will be expanded in all directions. The default is 0.\nExpansion size on polygon voids. Polygons voids will be expanded in all directions. The default is 0.\nWhether if offset the via position or not. The default is True.\nList of all parameters name created.\nauto_parametrize_design\noptional\nTrue\noptional\nTrue\noptional\nTrue\noptional\nTrue\noptional\nTrue\noptional\nTrue\npython:str\nList\npython:str\noptional\nNone\npython:str\nList\npython:str\noptional\nNone\npython:str\nList\npython:str\noptional\nNone\npython:str\nList\npython:str\noptional\nNone\noptional\nTrue\noptional\nTrue\npython:str\noptional\noptional\nTrue\npython:float\noptional\n0\npython:float\noptional\n0\noptional\nTrue\nList\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.auto_parametrize_design",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.auto_parametrize_design.html#pyedb.dotnet.edb.Edb.auto_parametrize_design",
        "title": "auto_parametrize_design > auto_parametrize_design > auto_parametrize_design",
        "section": "auto_parametrize_design > auto_parametrize_design",
        "text": "Edb.auto_parametrize_design(layers=True, materials=True, via_holes=True, pads=True, antipads=True, traces=True, layer_filter=None, material_filter=None, padstack_definition_filter=None, trace_net_filter=None, use_single_variable_for_padstack_definitions=True, use_relative_variables=True, output_aedb_path=None, open_aedb_at_end=True, expand_polygons_size=0, expand_voids_size=0, via_offset=True)\n\nAssign automatically design and project variables with current values.\n\nParameters\n\nlayers\n\nbool, optional\n\nEnable layer thickness parametrization. Default value is True.\n\nmaterials\n\nbool, optional\n\nEnable material parametrization. Default value is True.\n\nvia_holes\n\nbool, optional\n\nEnable via diameter parametrization. Default value is True.\n\npads\n\nbool, optional\n\nEnable pads size parametrization. Default value is True.\n\nantipads\n\nbool, optional\n\nEnable anti pads size parametrization. Default value is True.\n\ntraces\n\nbool, optional\n\nEnable trace width parametrization. Default value is True.\n\nlayer_filter\n\npython:str, List(python:str), optional\n\nEnable layer filter. Default value is None, all layers are parametrized.\n\nmaterial_filter\n\npython:str, List(python:str), optional\n\nEnable material filter. Default value is None, all material are parametrized.\n\npadstack_definition_filter\n\npython:str, List(python:str), optional\n\nEnable padstack definition filter. Default value is None, all padsatcks are parametrized.\n\ntrace_net_filter\n\npython:str, List(python:str), optional\n\nEnable nets filter for trace width parametrization. Default value is None, all layers are parametrized.\n\nuse_single_variable_for_padstack_definitions\n\nbool, optional\n\nWhether to use a single design variable for each padstack definition or a variable per pad layer.\nDefault value is True.\n\nuse_relative_variables\n\nbool, optional\n\nWhether if use an absolute variable for each trace, padstacks and layers or a delta variable instead.\nDefault value is True.\n\noutput_aedb_path\n\npython:str, optional\n\nFull path and name for the new AEDB file. If None, then current aedb will be cutout.\n\nopen_aedb_at_end\n\nbool, optional\n\nWhether to open the cutout at the end. The default is True.\n\nexpand_polygons_size\n\npython:float, optional\n\nExpansion size on polygons. Polygons will be expanded in all directions. The default is 0.\n\nexpand_voids_size\n\npython:float, optional\n\nExpansion size on polygon voids. Polygons voids will be expanded in all directions. The default is 0.\n\nvia_offset\n\nbool, optional\n\nWhether if offset the via position or not. The default is True.\n\nReturns\n\nList(python:str)\n\nList of all parameters name created.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Edb Dotnet Api Database Edb.Net.Delete.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.delete.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "EDBNetsData.delete()\n\nEdb Dotnet Api Database Edb.Net.Delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.close_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.close_edb.html#close_edb",
        "title": "close_edb",
        "section": "close_edb",
        "text": "Close EDB and cleanup variables.\n. deprecated:: pyedb 0.47.0\nUse: func:close instead.\nTrue when successful, False when failed.\nclose_edb\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.close_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.close_edb.html#pyedb.dotnet.edb.Edb.close_edb",
        "title": "close_edb > close_edb > close_edb",
        "section": "close_edb > close_edb",
        "text": "Edb.close_edb()\n\nClose EDB and cleanup variables.\n\n. deprecated:: pyedb 0.47.0\nUse: func:close instead.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.active_db",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.active_db.html#active_db",
        "title": "active_db",
        "section": "active_db",
        "text": "Database object.\nactive_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.active_db",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.active_db.html#pyedb.dotnet.edb.Edb.active_db",
        "title": "active_db > active_db > active_db",
        "section": "active_db > active_db",
        "text": "property Edb.active_db\n\nDatabase object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_outline_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_outline_layer.html#add_outline_layer",
        "title": "add_outline_layer",
        "section": "add_outline_layer",
        "text": "Add an outline layer named \"Outline\" if it is not present.\n“True” if successful, False if failed.\nadd_outline_layer\n\"Outline\"\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_outline_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_outline_layer.html#pyedb.dotnet.database.stackup.Stackup.add_outline_layer",
        "title": "add_outline_layer > add_outline_layer > add_outline_layer",
        "section": "add_outline_layer > add_outline_layer",
        "text": "Stackup.add_outline_layer(outline_name='Outline')\n\nAdd an outline layer named \"Outline\" if it is not present.\n\nReturns\n\nbool\n\n“True” if successful, False if failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points_raw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points_raw.html#points_raw",
        "title": "points_raw",
        "section": "points_raw",
        "text": "Return a list of Edb points.\nEdb Points.\npoints_raw\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points_raw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points_raw.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points_raw",
        "title": "points_raw > points_raw > points_raw",
        "section": "points_raw > points_raw",
        "text": "property EDBArcs.points_raw\n\nReturn a list of Edb points.\n\nReturns\n\npython:list\n\nEdb Points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/settings",
        "href": "api/sim_setup_data/data/settings.html#hfss-simulation-setup-settings",
        "title": "HFSS simulation setup settings",
        "section": "HFSS simulation setup settings",
        "text": "These classes are the containers of HFSS simulation setup settings.\nAdaptiveSettings\nManages EDB methods for adaptive settings.\nDefeatureSettings\nManages EDB methods for defeature settings.\nAdvancedMeshSettings\nManages EDB methods for advanced mesh settings.\nViaSettings\nManages EDB methods for via settings.\nCurveApproxSettings\nManages EDB methods for curve approximate settings.\nDcrSettings\nManages EDB methods for DCR settings.\nHfssPortSettings\nManages EDB methods for HFSS port settings.\nHfssSolverSettings\nManages EDB methods for HFSS solver settings.\nHFSS simulation setup settings\nAdaptiveSettings\nDefeatureSettings\nAdvancedMeshSettings\nViaSettings\nCurveApproxSettings\nDcrSettings\nHfssPortSettings\nHfssSolverSettings"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_bondwires",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_bondwires.html#refine_bondwires",
        "title": "refine_bondwires",
        "section": "refine_bondwires",
        "text": "Whether to refine mesh along bondwires.\nTrue if refine bondwires is used, False otherwise.\nrefine_bondwires\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_bondwires",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_bondwires.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_bondwires",
        "title": "refine_bondwires > refine_bondwires > refine_bondwires",
        "section": "refine_bondwires > refine_bondwires",
        "text": "property DCAdvancedSettings.refine_bondwires\n\nWhether to refine mesh along bondwires.\n\nReturns\n\nbool\n\nTrue if refine bondwires is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_fringe_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_fringe_coupling.html#include_fringe_coupling",
        "title": "include_fringe_coupling",
        "section": "include_fringe_coupling",
        "text": "Whether to include the effect of fringe field coupling between stacked cavities.\nTrue if fringe coupling is used, False otherwise.\ninclude_fringe_coupling\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_fringe_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_fringe_coupling.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_fringe_coupling",
        "title": "include_fringe_coupling > include_fringe_coupling > include_fringe_coupling",
        "section": "include_fringe_coupling > include_fringe_coupling",
        "text": "property AdvancedSettings.include_fringe_coupling\n\nWhether to include the effect of fringe field coupling between stacked cavities.\n\nReturns\n\nbool\n\nTrue if fringe coupling is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_cells.html#copy_cells",
        "title": "copy_cells",
        "section": "copy_cells",
        "text": "Copy Cells from other Databases or this Database into this Database.\nCells to copy.\nNew Cells created in this Database.\ncopy_cells\npython:list\nCell\npython:list\nCell"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.copy_cells.html#pyedb.dotnet.edb.Edb.copy_cells",
        "title": "copy_cells > copy_cells > copy_cells",
        "section": "copy_cells > copy_cells",
        "text": "Edb.copy_cells(cells_to_copy)\n\nCopy Cells from other Databases or this Database into this Database.\n\nParameters\n\ncells_to_copy\n\npython:list[Cell]\n\nCells to copy.\n\nReturns\n\npython:list[Cell]\n\nNew Cells created in this Database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.relative_error",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.relative_error.html#relative_error",
        "title": "relative_error",
        "section": "relative_error",
        "text": "Retrieve relative error used for the interpolating sweep convergence.\nrelative_error\npython:float\nThe\nvalue\nof\nthe\nerror\ninterpolating\nsweep\nto\nreach\nthe\nconvergence"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.relative_error",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.relative_error.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.relative_error",
        "title": "relative_error > relative_error > relative_error",
        "section": "relative_error > relative_error",
        "text": "property SimulationConfigurationAc.relative_error\n\nRetrieve relative error used for the interpolating sweep convergence.\n\nReturns\n\npython:float\n\n\n\nThe value of the error interpolating sweep to reach the convergence criteria.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_to_chord_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_to_chord_error.html#arc_to_chord_error",
        "title": "arc_to_chord_error",
        "section": "arc_to_chord_error",
        "text": "Maximum tolerated error between straight edge (chord) and faceted arc.\narc_to_chord_error\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_to_chord_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_to_chord_error.html#pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.arc_to_chord_error",
        "title": "arc_to_chord_error > arc_to_chord_error > arc_to_chord_error",
        "section": "arc_to_chord_error > arc_to_chord_error",
        "text": "property CurveApproxSettings.arc_to_chord_error\n\nMaximum tolerated error between straight edge (chord) and faceted arc.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.html#adaptivesettings",
        "title": "AdaptiveSettings",
        "section": "AdaptiveSettings",
        "text": "Manages EDB methods for adaptive settings.\nAdaptiveSettings.add_adaptive_frequency_data([...])\nAdd a setup for frequency data.\nAdaptiveSettings.add_broadband_adaptive_frequency_data([...])\nAdd a setup for frequency data.\nAdaptiveSettings.adapt_type\nAdaptive type.\nAdaptiveSettings.adaptive_frequency_data_list\nList of all adaptive frequency data.\nAdaptiveSettings.adaptive_settings\nAdaptive EDB settings.\nAdaptiveSettings.basic\nWhether if turn on basic adaptive.\nAdaptiveSettings.do_adaptive\nWhether if adaptive mesh is on.\nAdaptiveSettings.max_refine_per_pass\nMaximum number of mesh elementat that can be added during an adaptive pass.\nAdaptiveSettings.max_refinement\nMaximum number of mesh elements to be added per pass.\nAdaptiveSettings.min_converged_passes\nMinimum number of converged passes.\nAdaptiveSettings.min_passes\nMinimum number of passes.\nAdaptiveSettings.save_fields\nWhether to turn on save fields.\nAdaptiveSettings.save_rad_field_only\nFlag indicating if the saving of only radiated fields is turned on.\nAdaptiveSettings.use_convergence_matrix\nWhether to turn on the convergence matrix.\nAdaptiveSettings.use_max_refinement\nWhether to turn on maximum refinement.\nAdaptiveSettings\nAdaptiveSettings.add_adaptive_frequency_data\nAdaptiveSettings.add_broadband_adaptive_frequency_data\nAdaptiveSettings.adapt_type\nAdaptiveSettings.adaptive_frequency_data_list\nAdaptiveSettings.adaptive_settings\nAdaptiveSettings.basic\nAdaptiveSettings.do_adaptive\nAdaptiveSettings.max_refine_per_pass\nAdaptiveSettings.max_refinement\nAdaptiveSettings.min_converged_passes\nAdaptiveSettings.min_passes\nAdaptiveSettings.save_fields\nAdaptiveSettings.save_rad_field_only\nAdaptiveSettings.use_convergence_matrix\nAdaptiveSettings.use_max_refinement"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings",
        "title": "AdaptiveSettings > AdaptiveSettings > AdaptiveSettings",
        "section": "AdaptiveSettings > AdaptiveSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings(parent)\n\nManages EDB methods for adaptive settings.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nAdaptiveSettings.add_adaptive_frequency_data([...])\n\nAdd a setup for frequency data.\n\nAdaptiveSettings.add_broadband_adaptive_frequency_data([...])\n\nAdd a setup for frequency data.\n\n\n\nAttributes\n\n\n\n\n\n\n\nAdaptiveSettings.adapt_type\n\nAdaptive type.\n\nAdaptiveSettings.adaptive_frequency_data_list\n\nList of all adaptive frequency data.\n\nAdaptiveSettings.adaptive_settings\n\nAdaptive EDB settings.\n\nAdaptiveSettings.basic\n\nWhether if turn on basic adaptive.\n\nAdaptiveSettings.do_adaptive\n\nWhether if adaptive mesh is on.\n\nAdaptiveSettings.max_refine_per_pass\n\nMaximum number of mesh elementat that can be added during an adaptive pass.\n\nAdaptiveSettings.max_refinement\n\nMaximum number of mesh elements to be added per pass.\n\nAdaptiveSettings.min_converged_passes\n\nMinimum number of converged passes.\n\nAdaptiveSettings.min_passes\n\nMinimum number of passes.\n\nAdaptiveSettings.save_fields\n\nWhether to turn on save fields.\n\nAdaptiveSettings.save_rad_field_only\n\nFlag indicating if the saving of only radiated fields is turned on.\n\nAdaptiveSettings.use_convergence_matrix\n\nWhether to turn on the convergence matrix.\n\nAdaptiveSettings.use_max_refinement\n\nWhether to turn on maximum refinement.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.html#cfgpackage",
        "title": "CfgPackage",
        "section": "CfgPackage",
        "text": "Configuration package class.\nCfgPackage.get_attributes([exclude])\n\nCfgPackage.set_attributes(pedb_object)\n\nCfgPackage.heatsink\n\nCfgPackage.protected_attributes\n\nCfgPackage\nCfgPackage.get_attributes\nCfgPackage.set_attributes\nCfgPackage.heatsink\nCfgPackage.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.html#pyedb.configuration.cfg_package_definition.CfgPackage",
        "title": "CfgPackage > CfgPackage > CfgPackage",
        "section": "CfgPackage > CfgPackage",
        "text": "class pyedb.configuration.cfg_package_definition.CfgPackage(**kwargs)\n\nConfiguration package class.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgPackage.get_attributes([exclude])\n\n\n\nCfgPackage.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgPackage.heatsink\n\n\n\nCfgPackage.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_rectangle",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_rectangle.html#create_rectangle",
        "title": "create_rectangle",
        "section": "create_rectangle",
        "text": "Create rectangle.\nName of the layer on which to create the rectangle.\nName of the net. The default is \"\".\nLower left point when representation_type=\"LowerLeftUpperRight\". The default is \"\".\nUpper right point when representation_type=\"LowerLeftUpperRight\". The default is \"\".\nCenter point when representation_type=\"CenterWidthHeight\". The default is \"\".\nWidth of the rectangle when representation_type=\"CenterWidthHeight\". The default is \"\".\nHeight of the rectangle when representation_type=\"CenterWidthHeight\". The default is \"\".\nType of the rectangle representation. The default is LowerLeftUpperRight. Options are\n\"LowerLeftUpperRight\" and \"CenterWidthHeight\".\nRadius of the rectangle corner. The default is \"0mm\".\nRotation of the rectangle. The default is \"0deg\".\nRectangle when successful, False when failed.\ncreate_rectangle\npython:str\npython:str\n\"\"\npython:list\nrepresentation_type=\"LowerLeftUpperRight\"\n\"\"\npython:list\nrepresentation_type=\"LowerLeftUpperRight\"\n\"\"\npython:list\nrepresentation_type=\"CenterWidthHeight\"\n\"\"\npython:str\nrepresentation_type=\"CenterWidthHeight\"\n\"\"\npython:str\nrepresentation_type=\"CenterWidthHeight\"\n\"\"\npython:str\noptional\nLowerLeftUpperRight\n\"LowerLeftUpperRight\"\n\"CenterWidthHeight\"\npython:str\noptional\n\"0mm\"\npython:str\noptional\n\"0deg\"\npyedb.dotnet.database.edb_data.primitives_data.Primitive\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_rectangle",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_rectangle.html#pyedb.dotnet.database.modeler.Modeler.create_rectangle",
        "title": "create_rectangle > create_rectangle > create_rectangle",
        "section": "create_rectangle > create_rectangle",
        "text": "Modeler.create_rectangle(layer_name, net_name='', lower_left_point='', upper_right_point='', center_point='', width='', height='', representation_type='LowerLeftUpperRight', corner_radius='0mm', rotation='0deg')\n\nCreate rectangle.\n\nParameters\n\nlayer_name\n\npython:str\n\nName of the layer on which to create the rectangle.\n\nnet_name\n\npython:str\n\nName of the net. The default is \"\".\n\nlower_left_point\n\npython:list\n\nLower left point when representation_type=\"LowerLeftUpperRight\". The default is \"\".\n\nupper_right_point\n\npython:list\n\nUpper right point when representation_type=\"LowerLeftUpperRight\". The default is \"\".\n\ncenter_point\n\npython:list\n\nCenter point when representation_type=\"CenterWidthHeight\". The default is \"\".\n\nwidth\n\npython:str\n\nWidth of the rectangle when representation_type=\"CenterWidthHeight\". The default is \"\".\n\nheight\n\npython:str\n\nHeight of the rectangle when representation_type=\"CenterWidthHeight\". The default is \"\".\n\nrepresentation_type\n\npython:str, optional\n\nType of the rectangle representation. The default is LowerLeftUpperRight. Options are\n\"LowerLeftUpperRight\" and \"CenterWidthHeight\".\n\ncorner_radius\n\npython:str, optional\n\nRadius of the rectangle corner. The default is \"0mm\".\n\nrotation\n\npython:str, optional\n\nRotation of the rectangle. The default is \"0deg\".\n\nReturns\n\npyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nRectangle when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_triangles_wave_port",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_triangles_wave_port.html#max_triangles_wave_port",
        "title": "max_triangles_wave_port",
        "section": "max_triangles_wave_port",
        "text": "Maximum number of triangles allowed for wave ports.\nmax_triangles_wave_port\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_triangles_wave_port",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_triangles_wave_port.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_triangles_wave_port",
        "title": "max_triangles_wave_port > max_triangles_wave_port > max_triangles_wave_port",
        "section": "max_triangles_wave_port > max_triangles_wave_port",
        "text": "property HfssPortSettings.max_triangles_wave_port\n\nMaximum number of triangles allowed for wave ports.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_net_names",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_net_names.html#illegal_net_names",
        "title": "illegal_net_names",
        "section": "illegal_net_names",
        "text": "Find and fix illegal net names.\nillegal_net_names"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_net_names",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_net_names.html#pyedb.dotnet.database.layout_validation.LayoutValidation.illegal_net_names",
        "title": "illegal_net_names > illegal_net_names > illegal_net_names",
        "section": "illegal_net_names > illegal_net_names",
        "text": "LayoutValidation.illegal_net_names(fix=False)\n\nFind and fix illegal net names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.top_bottom_association",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.top_bottom_association.html#top_bottom_association",
        "title": "top_bottom_association",
        "section": "top_bottom_association",
        "text": "Top/bottom association of the placement layer.\nTop/bottom association of the placement layer.\n0 Top associated.\n1 No association.\n2 Bottom associated.\n4 Number of top/bottom association type.\n-1 Undefined.\ntop_bottom_association\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.top_bottom_association",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.top_bottom_association.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.top_bottom_association",
        "title": "top_bottom_association > top_bottom_association > top_bottom_association",
        "section": "top_bottom_association > top_bottom_association",
        "text": "property EDBPadstackInstance.top_bottom_association\n\nTop/bottom association of the placement layer.\n\nReturns\n\npython:int\n\nTop/bottom association of the placement layer.\n\n0 Top associated.\n\n1 No association.\n\n2 Bottom associated.\n\n4 Number of top/bottom association type.\n\n-1 Undefined.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/siwave",
        "href": "api/sim_setup_data/io/siwave.html#siwave-io",
        "title": "SIwave IO",
        "section": "SIwave IO",
        "text": "This class is the container of SIwave IO.\nSettingsBase\nProvide base settings.\nAdvancedSettings\n\nDCSettings\n\nDCAdvancedSettings\n\nSIwave IO\nSettingsBase\nAdvancedSettings\nDCSettings\nDCAdvancedSettings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation.html#hole_rotation",
        "title": "hole_rotation",
        "section": "hole_rotation",
        "text": "Hole rotation.\nValue for the hole rotation.\nhole_rotation\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation",
        "title": "hole_rotation > hole_rotation > hole_rotation",
        "section": "hole_rotation > hole_rotation",
        "text": "property EDBPadstack.hole_rotation\n\nHole rotation.\n\nReturns\n\npython:str\n\nValue for the hole rotation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_reference_pins",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_reference_pins.html#get_reference_pins",
        "title": "get_reference_pins",
        "section": "get_reference_pins",
        "text": "Search for reference pins using given criteria.\nReference net. The default is \"GND\".\nSearch radius for finding padstack instances. The default is 5e-3.\nMaximum limit for the padstack instances found. The default is 0, in which\ncase no limit is applied. The maximum limit value occurs on the nearest\nreference pins from the positive one that is found.\nWhether to limit the search to component padstack instances only. The\ndefault is True. When False, the search is extended to the entire layout.\nList of dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.\nget_reference_pins\npython:str\noptional\n\"GND\"\npython:float\noptional\n5e-3\npython:int\noptional\n0\noptional\nTrue\nFalse\npython:list\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_reference_pins",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_reference_pins.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_reference_pins",
        "title": "get_reference_pins > get_reference_pins > get_reference_pins",
        "section": "get_reference_pins > get_reference_pins",
        "text": "EDBPadstackInstance.get_reference_pins(reference_net='GND', search_radius=0.005, max_limit=0, component_only=True)\n\nSearch for reference pins using given criteria.\n\nParameters\n\nreference_net\n\npython:str, optional\n\nReference net. The default is \"GND\".\n\nsearch_radius\n\npython:float, optional\n\nSearch radius for finding padstack instances. The default is 5e-3.\n\nmax_limit\n\npython:int, optional\n\nMaximum limit for the padstack instances found. The default is 0, in which\ncase no limit is applied. The maximum limit value occurs on the nearest\nreference pins from the positive one that is found.\n\ncomponent_only\n\nbool, optional\n\nWhether to limit the search to component padstack instances only. The\ndefault is True. When False, the search is extended to the entire layout.\n\nReturns\n\npython:list\n\nList of dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.\n\nExamples\n\n>>> edbapp = Edb(\"target_path\")\n>>> pin = edbapp.components.instances[\"J5\"].pins[\"19\"]\n>>> reference_pins = pin.get_reference_pins(reference_net=\"GND\", search_radius=5e-3, max_limit=0,\n>>> component_only=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/layer_stackup/define_layer_stackup",
        "href": "user_guide/layer_stackup/define_layer_stackup.html#add-a-layer-in-a-layout-stackup",
        "title": "Add a layer in a layout stackup",
        "section": "Add a layer in a layout stackup",
        "text": "This page shows how to add a layer in the current layer stackup.\nAdd a layer in a layout stackup"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.html#edbarcs",
        "title": "EDBArcs",
        "section": "EDBArcs",
        "text": "Manages EDB Arc Data functionalities.\nIt Inherits EDB primitives arcs properties.\nEDBArcs.center\nArc center.\nEDBArcs.end\nGet the coordinates of the ending point.\nEDBArcs.height\nGet the height of the arc.\nEDBArcs.is_ccw\nTest whether arc is counter clockwise.\nEDBArcs.is_point\nEither if it is a point or not.\nEDBArcs.is_segment\nEither if it is a straight segment or not.\nEDBArcs.length\nArc length.\nEDBArcs.mid_point\nArc mid point.\nEDBArcs.points\nReturn the list of points with arcs converted to segments.\nEDBArcs.points_raw\nReturn a list of Edb points.\nEDBArcs.radius\nArc radius.\nEDBArcs.start\nGet the coordinates of the starting point.\nEDBArcs\nEDBArcs.center\nEDBArcs.end\nEDBArcs.height\nEDBArcs.is_ccw\nEDBArcs.is_point\nEDBArcs.is_segment\nEDBArcs.length\nEDBArcs.mid_point\nEDBArcs.points\nEDBArcs.points_raw\nEDBArcs.radius\nEDBArcs.start"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs",
        "title": "EDBArcs > EDBArcs > EDBArcs",
        "section": "EDBArcs > EDBArcs",
        "text": "class pyedb.dotnet.database.edb_data.primitives_data.EDBArcs(app, arc)\n\nManages EDB Arc Data functionalities.\nIt Inherits EDB primitives arcs properties.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> prim_arcs = edb.modeler.primitives[0].arcs\n>>> prim_arcs.center # arc center\n>>> prim_arcs.points # arc point list\n>>> prim_arcs.mid_point # arc mid point\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nEDBArcs.center\n\nArc center.\n\nEDBArcs.end\n\nGet the coordinates of the ending point.\n\nEDBArcs.height\n\nGet the height of the arc.\n\nEDBArcs.is_ccw\n\nTest whether arc is counter clockwise.\n\nEDBArcs.is_point\n\nEither if it is a point or not.\n\nEDBArcs.is_segment\n\nEither if it is a straight segment or not.\n\nEDBArcs.length\n\nArc length.\n\nEDBArcs.mid_point\n\nArc mid point.\n\nEDBArcs.points\n\nReturn the list of points with arcs converted to segments.\n\nEDBArcs.points_raw\n\nReturn a list of Edb points.\n\nEDBArcs.radius\n\nArc radius.\n\nEDBArcs.start\n\nGet the coordinates of the starting point.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_resistors",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_resistors.html#num_resistors",
        "title": "num_resistors",
        "section": "num_resistors",
        "text": "num_resistors"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_resistors",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_resistors.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_resistors",
        "title": "num_resistors > num_resistors > num_resistors",
        "section": "num_resistors > num_resistors",
        "text": "property EDBStatistics.num_resistors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.extended_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.extended_net.html#extended_net",
        "title": "extended_net",
        "section": "extended_net",
        "text": "Get extended net and associated components.\nextended_net\npyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.extended_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.extended_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.extended_net",
        "title": "extended_net > extended_net > extended_net",
        "section": "extended_net > extended_net",
        "text": "property EDBNetsData.extended_net\n\nGet extended net and associated components.\n\nReturns\n\n:class:` pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> app = Edb()\n>>> app.nets[\"BST_V3P3_S5\"].extended_net\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/SimulationConfigurationEdb",
        "href": "api/SimulationConfigurationEdb.html#simulation-configuration",
        "title": "Simulation configuration",
        "section": "Simulation configuration",
        "text": "These classes are the containers of simulation configuration constructors for the EDB.\nSimulationConfiguration\nProvides an ASCII simulation configuration file parser.\nSimulationConfigurationDc\nContains all DC analysis settings.\nSimulationConfigurationAc\nContains all AC analysis settings.\nSimulationConfigurationBatch\nContains all Cutout and Batch analysis settings.\nSimulation configuration\nSimulationConfiguration\nSimulationConfigurationDc\nSimulationConfigurationAc\nSimulationConfigurationBatch"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_operation_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_operation_type.html#mesh_operation_type",
        "title": "mesh_operation_type",
        "section": "mesh_operation_type",
        "text": "Mesh operation type.\nOptions:\n0- kMeshSetupBase\n1- kMeshSetupLength\n2- kMeshSetupSkinDepth\n3- kNumMeshOpTypes.\nmesh_operation_type\nkMeshSetupBase\nkMeshSetupLength\nkMeshSetupSkinDepth\nkNumMeshOpTypes\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_operation_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_operation_type.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.mesh_operation_type",
        "title": "mesh_operation_type > mesh_operation_type > mesh_operation_type",
        "section": "mesh_operation_type > mesh_operation_type",
        "text": "property LengthMeshOperation.mesh_operation_type\n\nMesh operation type.\nOptions:\n0- kMeshSetupBase\n1- kMeshSetupLength\n2- kMeshSetupSkinDepth\n3- kNumMeshOpTypes.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature_abs_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature_abs_length.html#use_defeature_abs_length",
        "title": "use_defeature_abs_length",
        "section": "use_defeature_abs_length",
        "text": "Whether to turn on the defeature absolute length.\nTrue if defeature absolute length is used, False otherwise.\nuse_defeature_abs_length\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature_abs_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature_abs_length.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature_abs_length",
        "title": "use_defeature_abs_length > use_defeature_abs_length > use_defeature_abs_length",
        "section": "use_defeature_abs_length > use_defeature_abs_length",
        "text": "property DefeatureSettings.use_defeature_abs_length\n\nWhether to turn on the defeature absolute length.\n\nReturns\n\nbool\n\nTrue if defeature absolute length is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.has_voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.has_voids.html#has_voids",
        "title": "has_voids",
        "section": "has_voids",
        "text": "bool: If a primitive has voids inside.\nRead-Only.\nhas_voids\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.has_voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.has_voids.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.has_voids",
        "title": "has_voids > has_voids > has_voids",
        "section": "has_voids > has_voids",
        "text": "property EDBPadstackInstance.has_voids\n\nbool: If a primitive has voids inside.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/simulation_setup/index",
        "href": "user_guide/simulation_setup/index.html#set-up-simulations",
        "title": "Set up simulations",
        "section": "Set up simulations",
        "text": "Learn how to create and set up a SIwave SWZ analysis.\nLearn how to create and set up an HFSS simulation.\nLearn how to define an HFSS extent.\nSet up simulations"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_model",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_model.html#set_component_model",
        "title": "set_component_model",
        "section": "set_component_model",
        "text": "Assign a Spice or Touchstone model to a component.\nName of the component.\nType of the model. Options are \"Spice\" and\n\"Touchstone\".  The default is \"Spice\".\nFull path to the model file. The default is None.\nName of the model. The default is None.\nTrue when successful, False when failed.\nset_component_model\npython:str\npython:str\noptional\n\"Spice\"\n\"Touchstone\"\n\"Spice\"\npython:str\noptional\nNone\npython:str\noptional\nNone\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_model",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_model.html#pyedb.dotnet.database.components.Components.set_component_model",
        "title": "set_component_model > set_component_model > set_component_model",
        "section": "set_component_model > set_component_model",
        "text": "Components.set_component_model(componentname, model_type='Spice', modelpath=None, modelname=None)\n\nAssign a Spice or Touchstone model to a component.\n\nParameters\n\ncomponentname\n\npython:str\n\nName of the component.\n\nmodel_type\n\npython:str, optional\n\nType of the model. Options are \"Spice\" and\n\"Touchstone\".  The default is \"Spice\".\n\nmodelpath\n\npython:str, optional\n\nFull path to the model file. The default is None.\n\nmodelname\n\npython:str, optional\n\nName of the model. The default is None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.set_component_model(\"A1\", model_type=\"Spice\",\n...                                            modelpath=\"pathtospfile\",\n...                                            modelname=\"spicemodelname\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.start_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.start_layer.html#start_layer",
        "title": "start_layer",
        "section": "start_layer",
        "text": "Starting layer.\nName of the starting layer.\nstart_layer\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.start_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.start_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.start_layer",
        "title": "start_layer > start_layer > start_layer",
        "section": "start_layer > start_layer",
        "text": "property EDBPadstackInstance.start_layer\n\nStarting layer.\n\nReturns\n\npython:str\n\nName of the starting layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.build_simulation_project",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.build_simulation_project.html#build_simulation_project",
        "title": "build_simulation_project",
        "section": "build_simulation_project",
        "text": "Build a ready-to-solve simulation project.\nSimulationConfiguration object that can be instantiated or directly loaded with a\nconfiguration file.\nTrue when successful, False when Failed.\nbuild_simulation_project\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration\nTrue\nFailed"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.build_simulation_project",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.build_simulation_project.html#pyedb.dotnet.edb.Edb.build_simulation_project",
        "title": "build_simulation_project > build_simulation_project > build_simulation_project",
        "section": "build_simulation_project > build_simulation_project",
        "text": "Edb.build_simulation_project(simulation_setup: SimulationConfiguration) -> bool\n\nBuild a ready-to-solve simulation project.\n\nParameters\n\nsimulation_setup\n\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.\n\nSimulationConfiguration object that can be instantiated or directly loaded with a\nconfiguration file.\n\nReturns\n\nbool\n\nTrue when successful, False when Failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> from pyedb.dotnet.database.edb_data.simulation_configuration import SimulationConfiguration\n>>> config_file = path_configuration_file\n>>> source_file = path_to_edb_folder\n>>> edb = Edb(source_file)\n>>> sim_setup = SimulationConfiguration(config_file)\n>>> edb.build_simulation_project(sim_setup)\n>>> edb.save_edb()\n>>> edb.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations.html#excitations",
        "title": "excitations",
        "section": "excitations",
        "text": "Get all layout excitations.\nexcitations"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations.html#pyedb.dotnet.edb.Edb.excitations",
        "title": "excitations > excitations > excitations",
        "section": "excitations > excitations",
        "text": "property Edb.excitations\n\nGet all layout excitations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_frequency_sweep.html#add_frequency_sweep",
        "title": "add_frequency_sweep",
        "section": "add_frequency_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nList of frequency points. The default is None.\nadd_frequency_sweep\npython:str\noptional\nNone\npython:list\noptional\nNone\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_frequency_sweep.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_frequency_sweep",
        "title": "add_frequency_sweep > add_frequency_sweep > add_frequency_sweep",
        "section": "add_frequency_sweep > add_frequency_sweep",
        "text": "HfssSimulationSetup.add_frequency_sweep(name=None, frequency_sweep=None)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\nfrequency_sweep\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_frequency_sweep(frequency_sweep=[\n...     [\"linear count\", \"0\", \"1kHz\", 1],\n...     [\"log scale\", \"1kHz\", \"0.1GHz\", 10],\n...     [\"linear scale\", \"0.1GHz\", \"10GHz\", \"0.1GHz\"],\n...     ])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_padstack_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_padstack_terminal_reference_pin.html#get_padstack_terminal_reference_pin",
        "title": "get_padstack_terminal_reference_pin",
        "section": "get_padstack_terminal_reference_pin",
        "text": "Get a list of pad stacks instances and serves Coax wave ports,\npingroup terminals, PadEdge terminals.\nPreferred reference net name.\nget_padstack_terminal_reference_pin\npython:str\noptional\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_padstack_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_padstack_terminal_reference_pin.html#pyedb.dotnet.database.edb_data.ports.WavePort.get_padstack_terminal_reference_pin",
        "title": "get_padstack_terminal_reference_pin > get_padstack_terminal_reference_pin > get_padstack_terminal_reference_pin",
        "section": "get_padstack_terminal_reference_pin > get_padstack_terminal_reference_pin",
        "text": "WavePort.get_padstack_terminal_reference_pin(gnd_net_name_preference=None)\n\nGet a list of pad stacks instances and serves Coax wave ports,\npingroup terminals, PadEdge terminals.\n\nParameters\n\ngnd_net_name_preference\n\npython:str, optional\n\nPreferred reference net name.\n\nReturns\n\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_layer.html#add_layer",
        "title": "add_layer",
        "section": "add_layer",
        "text": "Add a new layer.\nLayer name.\nLayer elevation.\nMaterial for the layer.\nGDS type assigned on the layer. The value must be the same as in the GDS file otherwise geometries won’t be\nimported.\nLayer name assigned in EDB or HFSS 3D layout after import.\nLayer thickness\nDefine the layer type, default value for a layer is \"conductor\"\nWhen True solver will solve inside metal, and not id False. Default value is True.\nDictionary with key and  property value.\nadd_layer\npython:str\npython:float\npython:str\npython:int\npython:str\npython:float\npython:str\n\"conductor\"\nTrue\nFalse\nTrue\npython:dict\npyedb.dotnet.database.edb_data.control_file.ControlFileLayer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_layer.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_layer",
        "title": "add_layer > add_layer > add_layer",
        "section": "add_layer > add_layer",
        "text": "ControlFileStackup.add_layer(layer_name, elevation=0.0, material='', gds_type=0, target_layer='', thickness=0.0, layer_type='conductor', solve_inside=True, properties=None)\n\nAdd a new layer.\n\nParameters\n\nlayer_name\n\npython:str\n\nLayer name.\n\nelevation\n\npython:float\n\nLayer elevation.\n\nmaterial\n\npython:str\n\nMaterial for the layer.\n\ngds_type\n\npython:int\n\nGDS type assigned on the layer. The value must be the same as in the GDS file otherwise geometries won’t be\nimported.\n\ntarget_layer\n\npython:str\n\nLayer name assigned in EDB or HFSS 3D layout after import.\n\nthickness\n\npython:float\n\nLayer thickness\n\nlayer_type\n\npython:str\n\nDefine the layer type, default value for a layer is \"conductor\"\n\nsolve_inside\n\nbool\n\nWhen True solver will solve inside metal, and not id False. Default value is True.\n\nproperties\n\npython:dict\n\nDictionary with key and  property value.\n\nReturns\n\npyedb.dotnet.database.edb_data.control_file.ControlFileLayer\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.add_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.add_void.html#add_void",
        "title": "add_void",
        "section": "add_void",
        "text": "Add a void to current primitive.\nTrue if successful, either  False.\nadd_void\npython:list\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\nEDB\nPrimitive\nPoint\npython:list\nin\nthe\nformat\nof\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.add_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.add_void.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.add_void",
        "title": "add_void > add_void > add_void",
        "section": "add_void > add_void",
        "text": "EdbPolygon.add_void(point_list)\n\nAdd a void to current primitive.\n\nParameters\n\npoint_list\n\npython:list or pyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives             or EDB Primitive Object. Point python:list in the format of [[x1,y1], [x2,y2],..,[xn,yn]].\n\n\n\nReturns\n\nbool\n\nTrue if successful, either  False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets",
        "href": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.html#cfgnets",
        "title": "CfgNets",
        "section": "CfgNets",
        "text": "Manage configuration net class.\nCfgNets.apply()\nApply net on layout.\nCfgNets.get_data_from_db()\nGet net information.\nCfgNets\nCfgNets.apply\nCfgNets.get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets",
        "href": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.html#pyedb.configuration.cfg_nets.CfgNets",
        "title": "CfgNets > CfgNets > CfgNets",
        "section": "CfgNets > CfgNets",
        "text": "class pyedb.configuration.cfg_nets.CfgNets(pdata, signal_nets=None, power_nets=None)\n\nManage configuration net class.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgNets.apply()\n\nApply net on layout.\n\nCfgNets.get_data_from_db()\n\nGet net information.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.get_data_from_db.html#pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgPackageDefinitions.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.aedt_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.aedt_name.html#aedt_name",
        "title": "aedt_name",
        "section": "aedt_name",
        "text": "Retrieve the pin name that is shown in AEDT.\nTo obtain the EDB core pin name, use pin.GetName().\nName of the pin in AEDT.\naedt_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.aedt_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.aedt_name.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.aedt_name",
        "title": "aedt_name > aedt_name > aedt_name",
        "section": "aedt_name > aedt_name",
        "text": "property EDBPadstackInstance.aedt_name\n\nRetrieve the pin name that is shown in AEDT.\n\nTo obtain the EDB core pin name, use pin.GetName().\n\nReturns\n\npython:str\n\nName of the pin in AEDT.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.padstacks.instances[111].get_aedt_pin_name()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.find_by_reference_designator",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.find_by_reference_designator.html#find_by_reference_designator",
        "title": "find_by_reference_designator",
        "section": "find_by_reference_designator",
        "text": "Find a component.\nReference designator of the component.\nfind_by_reference_designator\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.find_by_reference_designator",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.find_by_reference_designator.html#pyedb.dotnet.database.components.Components.find_by_reference_designator",
        "title": "find_by_reference_designator > find_by_reference_designator > find_by_reference_designator",
        "section": "find_by_reference_designator > find_by_reference_designator",
        "text": "Components.find_by_reference_designator(reference_designator)\n\nFind a component.\n\nParameters\n\nreference_designator\n\npython:str\n\nReference designator of the component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.impedance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.impedance.html#impedance",
        "title": "impedance",
        "section": "impedance",
        "text": "Impedance of the port.\nimpedance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.impedance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.impedance.html#pyedb.dotnet.database.edb_data.ports.GapPort.impedance",
        "title": "impedance > impedance > impedance",
        "section": "impedance > impedance",
        "text": "property GapPort.impedance\n\nImpedance of the port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.html#heatsink",
        "title": "HeatSink",
        "section": "HeatSink",
        "text": "Heatsink model description.\nInherited object.\nHeatSink.fin_base_height\nThe base elevation of the fins.\nHeatSink.fin_height\nThe fin height.\nHeatSink.fin_orientation\nThe fin orientation.\nHeatSink.fin_spacing\nThe fin spacing.\nHeatSink.fin_thickness\nThe fin thickness.\nHeatSink\npyedb.dotnet.edb.Edb\nAnsys.Ansoft.Edb.Utility.HeatSink\nHeatSink.fin_base_height\nHeatSink.fin_height\nHeatSink.fin_orientation\nHeatSink.fin_spacing\nHeatSink.fin_thickness"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.html#pyedb.dotnet.database.utilities.heatsink.HeatSink",
        "title": "HeatSink > HeatSink > HeatSink",
        "section": "HeatSink > HeatSink",
        "text": "class pyedb.dotnet.database.utilities.heatsink.HeatSink(pedb, edb_object=None)\n\nHeatsink model description.\n\nParameters\n\npedb\n\npyedb.dotnet.edb.Edb\n\nInherited object.\n\nedb_object\n\nAnsys.Ansoft.Edb.Utility.HeatSink,\n\n\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nHeatSink.fin_base_height\n\nThe base elevation of the fins.\n\nHeatSink.fin_height\n\nThe fin height.\n\nHeatSink.fin_orientation\n\nThe fin orientation.\n\nHeatSink.fin_spacing\n\nThe fin spacing.\n\nHeatSink.fin_thickness\n\nThe fin thickness.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.stop_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.stop_layer.html#stop_layer",
        "title": "stop_layer",
        "section": "stop_layer",
        "text": "Stopping layer.\nName of the stopping layer.\nstop_layer\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.stop_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.stop_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.stop_layer",
        "title": "stop_layer > stop_layer > stop_layer",
        "section": "stop_layer > stop_layer",
        "text": "property EDBPadstackInstance.stop_layer\n\nStopping layer.\n\nReturns\n\npython:str\n\nName of the stopping layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances.html#instances",
        "title": "instances",
        "section": "instances",
        "text": "Definitions Instances.\ninstances"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances",
        "title": "instances > instances > instances",
        "section": "instances > instances",
        "text": "property EDBPadstack.instances\n\nDefinitions Instances.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_amat",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_amat.html#load_amat",
        "title": "load_amat",
        "section": "load_amat",
        "text": "Load materials from an AMAT file.\nFull path to the AMAT file to read and add to the Edb.\nload_amat\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_amat",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_amat.html#pyedb.dotnet.database.materials.Materials.load_amat",
        "title": "load_amat > load_amat > load_amat",
        "section": "load_amat > load_amat",
        "text": "Materials.load_amat(amat_file)\n\nLoad materials from an AMAT file.\n\nParameters\n\namat_file\n\npython:str\n\nFull path to the AMAT file to read and add to the Edb.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_import_thermal_data",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_import_thermal_data.html#dc_import_thermal_data",
        "title": "dc_import_thermal_data",
        "section": "dc_import_thermal_data",
        "text": "Retrieve the value for importing thermal data.\ndc_import_thermal_data\nTrue\nwhen"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_import_thermal_data",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_import_thermal_data.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_import_thermal_data",
        "title": "dc_import_thermal_data > dc_import_thermal_data > dc_import_thermal_data",
        "section": "dc_import_thermal_data > dc_import_thermal_data",
        "text": "property SimulationConfigurationDc.dc_import_thermal_data\n\nRetrieve the value for importing thermal data.\n\nReturns\n\nbool\n\n\n\nTrue when activated,``False`` deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/HfssExtentInfo",
        "href": "api/edb_data/HfssExtentInfo.html#hfss-extent-info",
        "title": "HFSS extent info",
        "section": "HFSS extent info",
        "text": "These class is the containers of HFSS Extent.\nHfssExtentInfo\nManages EDB functionalities for HFSS extent information.\nHFSS extent info\nHfssExtentInfo"
    },
    {
        "objectID": "api/sim_setup_data/data/adaptive_frequency_data",
        "href": "api/sim_setup_data/data/adaptive_frequency_data.html#adaptive-frequency-data",
        "title": "Adaptive frequency data",
        "section": "Adaptive frequency data",
        "text": "This class is the container of HFSS adaptive frequency data.\nAdaptiveFrequencyData\nManages EDB methods for adaptive frequency data.\nAdaptive frequency data\nAdaptiveFrequencyData"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive_by_layer_and_point",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive_by_layer_and_point.html#get_primitive_by_layer_and_point",
        "title": "get_primitive_by_layer_and_point",
        "section": "get_primitive_by_layer_and_point",
        "text": "Return primitive given coordinate point [x, y], layer name and nets.\nCoordinate [x, y]\nlist of layer name or layer name applied on filter.\nlist of net name or single net name applied on filter\nList of primitives, polygons, paths and rectangles.\nget_primitive_by_layer_and_point\npython:list\npython:list\npython:str\noptional\npython:list\npython:str\noptional\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive_by_layer_and_point",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive_by_layer_and_point.html#pyedb.dotnet.database.modeler.Modeler.get_primitive_by_layer_and_point",
        "title": "get_primitive_by_layer_and_point > get_primitive_by_layer_and_point > get_primitive_by_layer_and_point",
        "section": "get_primitive_by_layer_and_point > get_primitive_by_layer_and_point",
        "text": "Modeler.get_primitive_by_layer_and_point(point=None, layer=None, nets=None)\n\nReturn primitive given coordinate point [x, y], layer name and nets.\n\nParameters\n\npoint\n\npython:list\n\nCoordinate [x, y]\n\nlayer\n\npython:list or python:str, optional\n\nlist of layer name or layer name applied on filter.\n\nnets\n\npython:list or python:str, optional\n\nlist of net name or single net name applied on filter\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nList of primitives, polygons, paths and rectangles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_solder_ball_height",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_solder_ball_height.html#get_solder_ball_height",
        "title": "get_solder_ball_height",
        "section": "get_solder_ball_height",
        "text": "Get component solder ball height.\nEDB component or str component name.\nSalder ball height vale, False when failed.\nget_solder_ball_height\npython:str\nself._pedb.component\ndouble\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_solder_ball_height",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_solder_ball_height.html#pyedb.dotnet.database.components.Components.get_solder_ball_height",
        "title": "get_solder_ball_height > get_solder_ball_height > get_solder_ball_height",
        "section": "get_solder_ball_height > get_solder_ball_height",
        "text": "Components.get_solder_ball_height(cmp)\n\nGet component solder ball height.\n\nParameters\n\ncmp\n\npython:str or  self._pedb.component\n\nEDB component or str component name.\n\nReturns\n\ndouble, bool\n\nSalder ball height vale, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.get_configurations.html#get_configurations",
        "title": "get_configurations",
        "section": "get_configurations",
        "text": "Get all attributes.\nget_configurations\npython:dict"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.get_configurations.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.get_configurations",
        "title": "get_configurations > get_configurations > get_configurations",
        "section": "get_configurations > get_configurations",
        "text": "DCSettings.get_configurations()\n\nGet all attributes.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_attributes.html#pyedb.configuration.cfg_operations.CfgOperations.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgOperations.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_via_report_path",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_via_report_path.html#dc_via_report_path",
        "title": "dc_via_report_path",
        "section": "dc_via_report_path",
        "text": "Retrieve the via report file path.\ndc_via_report_path\npython:str\nThe\nfile"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_via_report_path",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_via_report_path.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_via_report_path",
        "title": "dc_via_report_path > dc_via_report_path > dc_via_report_path",
        "section": "dc_via_report_path > dc_via_report_path",
        "text": "property SimulationConfigurationDc.dc_via_report_path\n\nRetrieve the via report file path.\n\nReturns\n\npython:str\n\n\n\nThe file path.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss_setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss_setups.html#hfss_setups",
        "title": "hfss_setups",
        "section": "hfss_setups",
        "text": "Active HFSS setup in EDB.\nhfss_setups\nDict\npython:str\nlegacy.database.edb_data.hfss_simulation_setup_data.HfssSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss_setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss_setups.html#pyedb.dotnet.edb.Edb.hfss_setups",
        "title": "hfss_setups > hfss_setups > hfss_setups",
        "section": "hfss_setups > hfss_setups",
        "text": "property Edb.hfss_setups\n\nActive HFSS setup in EDB.\n\nReturns\n\nDict[python:str, legacy.database.edb_data.hfss_simulation_setup_data.HfssSimulationSetup]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.make_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.make_zone_primitive.html#make_zone_primitive",
        "title": "make_zone_primitive",
        "section": "make_zone_primitive",
        "text": "Make primitive a zone primitive with a zone specified by the provided id.\nId of zone primitive will use.\nmake_zone_primitive\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.make_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.make_zone_primitive.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.make_zone_primitive",
        "title": "make_zone_primitive > make_zone_primitive > make_zone_primitive",
        "section": "make_zone_primitive > make_zone_primitive",
        "text": "EDBPadstackInstance.make_zone_primitive(zone_id)\n\nMake primitive a zone primitive with a zone specified by the provided id.\n\nParameters\n\nzone_id\n\npython:int\n\nId of zone primitive will use.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.mid_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.mid_point.html#mid_point",
        "title": "mid_point",
        "section": "mid_point",
        "text": "Arc mid point.\nmid_point\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.mid_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.mid_point.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.mid_point",
        "title": "mid_point > mid_point > mid_point",
        "section": "mid_point > mid_point",
        "text": "property EDBArcs.mid_point\n\nArc mid point.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation.html#hole_rotation",
        "title": "hole_rotation",
        "section": "hole_rotation",
        "text": "Hole rotation.\nValue for the hole rotation.\nhole_rotation\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_rotation",
        "title": "hole_rotation > hole_rotation > hole_rotation",
        "section": "hole_rotation > hole_rotation",
        "text": "property EDBPadstack.hole_rotation\n\nHole rotation.\n\nReturns\n\npython:str\n\nValue for the hole rotation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_type.html#adaptive_type",
        "title": "adaptive_type",
        "section": "adaptive_type",
        "text": "HFSS adaptive type.\nadaptive_type\npyedb.dotnet.database.edb_data.simulation_setup.AdaptiveType"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_type.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_type",
        "title": "adaptive_type > adaptive_type > adaptive_type",
        "section": "adaptive_type > adaptive_type",
        "text": "property SimulationConfigurationAc.adaptive_type\n\nHFSS adaptive type.\n\nReturns\n\nclass: pyedb.dotnet.database.edb_data.simulation_setup.AdaptiveType\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_log_scale",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_log_scale.html#set_frequencies_log_scale",
        "title": "set_frequencies_log_scale",
        "section": "set_frequencies_log_scale",
        "text": "Set a log-count frequency sweep.\nStart frequency. The default is \"1kHz\".\nStop frequency. The default is \"0.1GHz\".\nStep frequency. The default is 10.\nTrue if correctly executed, False otherwise.\nset_frequencies_log_scale\npython:str\npython:float\noptional\n\"1kHz\"\npython:str\npython:float\noptional\n\"0.1GHz\"\npython:int\noptional\n10\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_log_scale",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_log_scale.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_log_scale",
        "title": "set_frequencies_log_scale > set_frequencies_log_scale > set_frequencies_log_scale",
        "section": "set_frequencies_log_scale > set_frequencies_log_scale",
        "text": "SweepData.set_frequencies_log_scale(start='1kHz', stop='0.1GHz', samples=10)\n\nSet a log-count frequency sweep.\n\nParameters\n\nstart\n\npython:str, python:float, optional\n\nStart frequency. The default is \"1kHz\".\n\nstop\n\npython:str, python:float, optional\n\nStop frequency. The default is \"0.1GHz\".\n\nsamples\n\npython:int, optional\n\nStep frequency. The default is 10.\n\nReturns\n\nbool\n\nTrue if correctly executed, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.top_circuit_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.top_circuit_cells.html#top_circuit_cells",
        "title": "top_circuit_cells",
        "section": "top_circuit_cells",
        "text": "Get top circuit cells.\ntop_circuit_cells\npython:list\nCell"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.top_circuit_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.top_circuit_cells.html#pyedb.dotnet.edb.Edb.top_circuit_cells",
        "title": "top_circuit_cells > top_circuit_cells > top_circuit_cells",
        "section": "top_circuit_cells > top_circuit_cells",
        "text": "property Edb.top_circuit_cells\n\nGet top circuit cells.\n\nReturns\n\npython:list[Cell]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_simulation_settings.html#set_simulation_settings",
        "title": "set_simulation_settings",
        "section": "set_simulation_settings",
        "text": "set_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_simulation_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_simulation_settings",
        "title": "set_simulation_settings > set_simulation_settings > set_simulation_settings",
        "section": "set_simulation_settings > set_simulation_settings",
        "text": "SiwaveSimulationSetup.set_simulation_settings(sim_settings: dict)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.layout_size",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.layout_size.html#layout_size",
        "title": "layout_size",
        "section": "layout_size",
        "text": "layout_size"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.layout_size",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.layout_size.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.layout_size",
        "title": "layout_size > layout_size > layout_size",
        "section": "layout_size > layout_size",
        "text": "property EDBStatistics.layout_size\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/excitations/create_edge_port_on_polygon",
        "href": "user_guide/excitations/create_edge_port_on_polygon.html#create-an-edge-port",
        "title": "Create an edge port",
        "section": "Create an edge port",
        "text": "This page shows how to create an edge port on a polygon and trace.\nCreate an edge port"
    },
    {
        "objectID": "api/SiWave",
        "href": "api/SiWave.html#siwave-manager",
        "title": "SIwave manager",
        "section": "SIwave manager",
        "text": "SIwave is a specialized tool\nfor power integrity, signal integrity, and EMI analysis of IC packages and PCB. This tool\nsolves power delivery systems and high-speed channels in electronic devices. It can be\naccessed from PyEDB in Windows only. All setups can be implemented through EDB API.\nSiwave([specified_version])\nInitializes SIwave based on the inputs provided and manages SIwave release and closing.\nSIwave manager\nSiwave"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_on_net.html#create_pin_group_on_net",
        "title": "create_pin_group_on_net",
        "section": "create_pin_group_on_net",
        "text": "Create pin group on component by net name.\nReferences designator of the component.\nName of the net.\nName of the pin group. The default value is None.\ncreate_pin_group_on_net\npython:str\npython:str\npython:str\noptional\nNone\nPinGroup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_on_net.html#pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_on_net",
        "title": "create_pin_group_on_net > create_pin_group_on_net > create_pin_group_on_net",
        "section": "create_pin_group_on_net > create_pin_group_on_net",
        "text": "EdbSiwave.create_pin_group_on_net(reference_designator, net_name, group_name=None)\n\nCreate pin group on component by net name.\n\nParameters\n\nreference_designator\n\npython:str\n\nReferences designator of the component.\n\nnet_name\n\npython:str\n\nName of the net.\n\ngroup_name\n\npython:str, optional\n\nName of the pin group. The default value is None.\n\nReturns\n\nPinGroup\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.sources",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.sources.html#sources",
        "title": "sources",
        "section": "sources",
        "text": "Get all sources.\nsources"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.sources",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.sources.html#pyedb.dotnet.database.siwave.EdbSiwave.sources",
        "title": "sources > sources > sources",
        "section": "sources > sources",
        "text": "property EdbSiwave.sources\n\nGet all sources.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.plot",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.plot.html#plot",
        "title": "plot",
        "section": "plot",
        "text": "Plot current stackup and, optionally, overlap padstack definitions.\nPlot supports only ‘Laminate’ and ‘Overlapping’ stackup types.\nIf a path is specified the plot will be saved in this location.\nIf save_plot is provided, the show parameter is ignored.\nImage size in pixel (width, height). Default value is (2000, 1500)\nList of padstack definitions to plot on the stackup.\nIt is supported only for Laminate mode.\nFirst layer to plot from the bottom. Default is None to start plotting from bottom.\nLast layer to plot from the bottom. Default is None to plot up to top layer.\nThe real layer thickness is scaled so that max_thickness = 3 * min_thickness.\nDefault is True.\nWhether to show the plot or not. Default is True.\nplot\npython:str\noptional\nsave_plot\nshow\npython:tuple\noptional\n(2000, 1500)\npython:str\npython:list\noptional\npython:str\npyedb.dotnet.database.edb_data.layer_data.LayerEdbClass\npython:str\npyedb.dotnet.database.edb_data.layer_data.LayerEdbClass\noptional\noptional\nmatplotlib.plt"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.plot",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.plot.html#pyedb.dotnet.database.stackup.Stackup.plot",
        "title": "plot > plot > plot",
        "section": "plot > plot",
        "text": "Stackup.plot(save_plot=None, size=(2000, 1500), plot_definitions=None, first_layer=None, last_layer=None, scale_elevation=True, show=True)\n\nPlot current stackup and, optionally, overlap padstack definitions.\nPlot supports only ‘Laminate’ and ‘Overlapping’ stackup types.\n\nParameters\n\nsave_plot\n\npython:str, optional\n\nIf a path is specified the plot will be saved in this location.\nIf save_plot is provided, the show parameter is ignored.\n\nsize\n\npython:tuple, optional\n\nImage size in pixel (width, height). Default value is (2000, 1500)\n\nplot_definitions\n\npython:str, python:list, optional\n\nList of padstack definitions to plot on the stackup.\nIt is supported only for Laminate mode.\n\nfirst_layer\n\npython:str or pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass\n\nFirst layer to plot from the bottom. Default is None to start plotting from bottom.\n\nlast_layer\n\npython:str or pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass\n\nLast layer to plot from the bottom. Default is None to plot up to top layer.\n\nscale_elevation\n\nbool, optional\n\nThe real layer thickness is scaled so that max_thickness = 3 * min_thickness.\nDefault is True.\n\nshow\n\nbool, optional\n\nWhether to show the plot or not. Default is True.\n\nReturns\n\nmatplotlib.plt\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_simulation_settings.html#get_simulation_settings",
        "title": "get_simulation_settings",
        "section": "get_simulation_settings",
        "text": "get_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_simulation_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_simulation_settings",
        "title": "get_simulation_settings > get_simulation_settings > get_simulation_settings",
        "section": "get_simulation_settings > get_simulation_settings",
        "text": "SiwaveDCSimulationSetup.get_simulation_settings()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.honor_user_dielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.honor_user_dielectric.html#honor_user_dielectric",
        "title": "honor_user_dielectric",
        "section": "honor_user_dielectric",
        "text": "Retrieve the boolean to activate the feature “‘Honor user dielectric’”.\nTrue activated, False deactivated.\nhonor_user_dielectric\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.honor_user_dielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.honor_user_dielectric.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.honor_user_dielectric",
        "title": "honor_user_dielectric > honor_user_dielectric > honor_user_dielectric",
        "section": "honor_user_dielectric > honor_user_dielectric",
        "text": "property SimulationConfigurationBatch.honor_user_dielectric\n\nRetrieve the boolean to activate the feature “‘Honor user dielectric’”.\n\nReturns\n\nbool\n\nTrue activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.version_keys",
        "href": "api/_autosummary/pyedb.siwave.Siwave.version_keys.html#version_keys",
        "title": "version_keys",
        "section": "version_keys",
        "text": "Version keys for AEDT.\nversion_keys"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.version_keys",
        "href": "api/_autosummary/pyedb.siwave.Siwave.version_keys.html#pyedb.siwave.Siwave.version_keys",
        "title": "version_keys > version_keys > version_keys",
        "section": "version_keys > version_keys",
        "text": "property Siwave.version_keys\n\nVersion keys for AEDT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_dc_simulation_report",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_dc_simulation_report.html#export_dc_simulation_report",
        "title": "export_dc_simulation_report",
        "section": "export_dc_simulation_report",
        "text": "Export the Siwave DC simulation report.\nName of the setup.\nPath to the exported report.\nColor of the report’s background. The default is \"White\".\nTrue when successful, False when failed.\nexport_dc_simulation_report\npython:str\npython:str\npython:str\noptional\n\"White\"\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_dc_simulation_report",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_dc_simulation_report.html#pyedb.siwave.Siwave.export_dc_simulation_report",
        "title": "export_dc_simulation_report > export_dc_simulation_report > export_dc_simulation_report",
        "section": "export_dc_simulation_report > export_dc_simulation_report",
        "text": "Siwave.export_dc_simulation_report(simulation_name, file_path, background_color='White')\n\nExport the Siwave DC simulation report.\n\nParameters\n\nsimulation_name\n\npython:str\n\nName of the setup.\n\nfile_path\n\npython:str\n\nPath to the exported report.\n\nbackground_color\n\npython:str, optional\n\nColor of the report’s background. The default is \"White\".\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.union_polygons",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.union_polygons.html#union_polygons",
        "title": "union_polygons",
        "section": "union_polygons",
        "text": "Whether to turn on the union of polygons before meshing.\nTrue if union polygons is used, False otherwise.\nunion_polygons\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.union_polygons",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.union_polygons.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.union_polygons",
        "title": "union_polygons > union_polygons > union_polygons",
        "section": "union_polygons > union_polygons",
        "text": "property DefeatureSettings.union_polygons\n\nWhether to turn on the union of polygons before meshing.\n\nReturns\n\nbool\n\nTrue if union polygons is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_ratio",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_ratio.html#defeature_ratio",
        "title": "defeature_ratio",
        "section": "defeature_ratio",
        "text": "Defeature ratio.\ndefeature_ratio\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_ratio",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_ratio.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_ratio",
        "title": "defeature_ratio > defeature_ratio > defeature_ratio",
        "section": "defeature_ratio > defeature_ratio",
        "text": "property DefeatureSettings.defeature_ratio\n\nDefeature ratio.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_instance",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_instance.html#place_instance",
        "title": "place_instance",
        "section": "place_instance",
        "text": "Place current Cell into another cell using 3d placement method.\nFlip the current layer stackup of a layout if requested. Transform parameters currently not supported.\nCell to place in the current layout.\nThe rotation angle applied on the design.\nThe x offset value.\nThe default value is 0.0.\nThe y offset value.\nThe default value is 0.0.\nThe z offset value. (i.e. elevation offset for placement relative to the top layer conductor).\nThe default value is 0.0, which places the cell layout on top of the top conductor\nlayer of the target EDB.\nEither if the current layout is inverted.\nIf True and place_on_top is True the stackup will be flipped before the merge.\nEither if place the component_edb layout on Top or Bottom of destination Layout.\nSolder Ball or Bumps eight.\nThis value will be added to the elevation to align the two layouts.\nTrue when succeed False if not.\nplace_instance\nEdb\ndouble\noptional\ndouble\noptional\n0.0\ndouble\noptional\n0.0\ndouble\noptional\n0.0\noptional\noptional\npython:float\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_instance",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_instance.html#pyedb.dotnet.database.stackup.Stackup.place_instance",
        "title": "place_instance > place_instance > place_instance",
        "section": "place_instance > place_instance",
        "text": "Stackup.place_instance(component_edb, angle=0.0, offset_x=0.0, offset_y=0.0, offset_z=0.0, flipped_stackup=True, place_on_top=True, solder_height=0)\n\nPlace current Cell into another cell using 3d placement method.\nFlip the current layer stackup of a layout if requested. Transform parameters currently not supported.\n\nParameters\n\ncomponent_edb\n\nEdb\n\nCell to place in the current layout.\n\nangle\n\ndouble, optional\n\nThe rotation angle applied on the design.\n\noffset_x\n\ndouble, optional\n\nThe x offset value.\nThe default value is 0.0.\n\noffset_y\n\ndouble, optional\n\nThe y offset value.\nThe default value is 0.0.\n\noffset_z\n\ndouble, optional\n\nThe z offset value. (i.e. elevation offset for placement relative to the top layer conductor).\nThe default value is 0.0, which places the cell layout on top of the top conductor\nlayer of the target EDB.\n\nflipped_stackup\n\nbool, optional\n\nEither if the current layout is inverted.\nIf True and place_on_top is True the stackup will be flipped before the merge.\n\nplace_on_top\n\nbool, optional\n\nEither if place the component_edb layout on Top or Bottom of destination Layout.\n\nsolder_height\n\npython:float, optional\n\nSolder Ball or Bumps eight.\nThis value will be added to the elevation to align the two layouts.\n\nReturns\n\nbool\n\nTrue when succeed False if not.\n\nExamples\n\n>>> edb1 = Edb(edbpath=targetfile1,  edbversion=\"2021.2\")\n>>> edb2 = Edb(edbpath=targetfile2, edbversion=\"2021.2\")\n>>> hosting_cmp = edb1.components.get_component_by_name(\"U100\")\n>>> mounted_cmp = edb2.components.get_component_by_name(\"BGA\")\n>>> edb1.stackup.place_instance(edb2, angle=0.0, offset_x=\"1mm\",\n...                                   offset_y=\"2mm\", flipped_stackup=False, place_on_top=True,\n...                                   )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_multipole_debye_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_multipole_debye_material.html#add_multipole_debye_material",
        "title": "add_multipole_debye_material",
        "section": "add_multipole_debye_material",
        "text": "Add a dielectric with the Multipole Debye model.\nName of the dielectric.\nFrequencies in GHz.\nRelative permittivities at each frequency.\nLoss tangents at each frequency.\nadd_multipole_debye_material\npython:str\npython:list\npython:list\npython:list\npyedb.dotnet.database.materials.Material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_multipole_debye_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_multipole_debye_material.html#pyedb.dotnet.database.materials.Materials.add_multipole_debye_material",
        "title": "add_multipole_debye_material > add_multipole_debye_material > add_multipole_debye_material",
        "section": "add_multipole_debye_material > add_multipole_debye_material",
        "text": "Materials.add_multipole_debye_material(name, frequencies, permittivities, loss_tangents, **kwargs)\n\nAdd a dielectric with the Multipole Debye model.\n\nParameters\n\nname\n\npython:str\n\nName of the dielectric.\n\nfrequencies\n\npython:list\n\nFrequencies in GHz.\n\npermittivities\n\npython:list\n\nRelative permittivities at each frequency.\n\nloss_tangents\n\npython:list\n\nLoss tangents at each frequency.\n\nReturns\n\npyedb.dotnet.database.materials.Material\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb()\n>>> freq = [0, 2, 3, 4, 5, 6]\n>>> rel_perm = [1e9, 1.1e9, 1.2e9, 1.3e9, 1.5e9, 1.6e9]\n>>> loss_tan = [0.025, 0.026, 0.027, 0.028, 0.029, 0.030]\n>>> diel = edb.materials.add_multipole_debye_material(\"My_MP_Debye\", freq, rel_perm, loss_tan)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/edb_information_queries/index",
        "href": "user_guide/edb_information_queries/index.html#run-layout-queries",
        "title": "Run layout queries",
        "section": "Run layout queries",
        "text": "Learn how to run a query for getting layout statistics.\nLearn how to run a query for getting the layout size.\nRun layout queries"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.minimum_void_surface",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.minimum_void_surface.html#minimum_void_surface",
        "title": "minimum_void_surface",
        "section": "minimum_void_surface",
        "text": "Retrieve the minimum void surface to be considered for the layout defeaturing.\nVoids below this value will be ignored.\nminimum_void_surface\nflot\nValue\nof\nthe\nminimum"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.minimum_void_surface",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.minimum_void_surface.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.minimum_void_surface",
        "title": "minimum_void_surface > minimum_void_surface > minimum_void_surface",
        "section": "minimum_void_surface > minimum_void_surface",
        "text": "property SimulationConfigurationAc.minimum_void_surface\n\nRetrieve the minimum void surface to be considered for the layout defeaturing.\nVoids below this value will be ignored.\n\nReturns\n\nflot\n\n\n\nValue of the minimum surface.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.pedb_class",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.pedb_class.html#pedb_class",
        "title": "pedb_class",
        "section": "pedb_class",
        "text": "pedb_class"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.pedb_class",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.pedb_class.html#pyedb.dotnet.edb.Edb.pedb_class",
        "title": "pedb_class > pedb_class > pedb_class",
        "section": "pedb_class > pedb_class",
        "text": "property Edb.pedb_class\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_cutout_subdesign",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_cutout_subdesign.html#do_cutout_subdesign",
        "title": "do_cutout_subdesign",
        "section": "do_cutout_subdesign",
        "text": "Retrieve boolean to perform the cutout during the project build.\ndo_cutout_subdesign\nTrue\nwhen\nclipping\nthe\ndesign\nis\napplied\nFalse\nis"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_cutout_subdesign",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_cutout_subdesign.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_cutout_subdesign",
        "title": "do_cutout_subdesign > do_cutout_subdesign > do_cutout_subdesign",
        "section": "do_cutout_subdesign > do_cutout_subdesign",
        "text": "property SimulationConfigurationBatch.do_cutout_subdesign\n\nRetrieve boolean to perform the cutout during the project build.\n\nReturns\n\nbool\n\n\n\nTrue when clipping the design is applied False is not.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.flip_design",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.flip_design.html#flip_design",
        "title": "flip_design",
        "section": "flip_design",
        "text": "Flip the current design of a layout.\nTrue when succeed False if not.\nflip_design\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.flip_design",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.flip_design.html#pyedb.dotnet.database.stackup.Stackup.flip_design",
        "title": "flip_design > flip_design > flip_design",
        "section": "flip_design > flip_design",
        "text": "Stackup.flip_design()\n\nFlip the current design of a layout.\n\nReturns\n\nbool\n\nTrue when succeed False if not.\n\nExamples\n\n>>> edb = Edb(edbpath=targetfile,  edbversion=\"2021.2\")\n>>> edb.stackup.flip_design()\n>>> edb.save()\n>>> edb.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_source",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_source.html#add_source",
        "title": "add_source",
        "section": "add_source",
        "text": "Add a new source to configuration.\nadd_source\npyedb.dotnet.database.edb_data.sources.Source"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_source",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_source.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_source",
        "title": "add_source > add_source > add_source",
        "section": "add_source > add_source",
        "text": "SimulationConfigurationBatch.add_source(source=None)\n\nAdd a new source to configuration.\n\nParameters\n\nsource\n\npyedb.dotnet.database.edb_data.sources.Source\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Edb Dotnet Api Database Delete.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.delete.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "EDBDifferentialPairData.delete()\n\nEdb Dotnet Api Database Delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.remove_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.remove_hfss_prop.html#remove_hfss_prop",
        "title": "remove_hfss_prop",
        "section": "remove_hfss_prop",
        "text": "Remove HFSS properties.\nremove_hfss_prop"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.remove_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.remove_hfss_prop.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.remove_hfss_prop",
        "title": "remove_hfss_prop > remove_hfss_prop > remove_hfss_prop",
        "section": "remove_hfss_prop > remove_hfss_prop",
        "text": "EdbPolygon.remove_hfss_prop()\n\nRemove HFSS properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.stop_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.stop_freq.html#stop_freq",
        "title": "stop_freq",
        "section": "stop_freq",
        "text": "Retrieve stop frequency for the frequency sweep.\nstop_freq\npython:float\nThe\nvalue\nof\nthe\nfrequency"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.stop_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.stop_freq.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.stop_freq",
        "title": "stop_freq > stop_freq > stop_freq",
        "section": "stop_freq > stop_freq",
        "text": "property SimulationConfigurationAc.stop_freq\n\nRetrieve stop frequency for the frequency sweep.\n\nReturns\n\npython:float\n\n\n\nThe value of the frequency point.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.type.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property SkinDepthMeshOperation.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "Overrides the default sim_setup_info object.\nsim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sim_setup_info.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property SiwaveDCSimulationSetup.sim_setup_info\n\nOverrides the default sim_setup_info object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.add_project_variable",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.add_project_variable.html#add_project_variable",
        "title": "add_project_variable",
        "section": "add_project_variable",
        "text": "Add a variable to edb database (project). The variable will have the prefix $.\nUser can use also the setitem to create or assign a variable. See example below.\nName of the variable. Name can be provided without $ prefix.\nValue of the variable with units.\nDescription of the variable.\nTuple containing the AddVariable result and variable server.\nadd_project_variable\npython:str\n$\npython:str\npython:float\npython:str\noptional\npython:tuple\nAddVariable"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.add_project_variable",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.add_project_variable.html#pyedb.dotnet.edb.Edb.add_project_variable",
        "title": "add_project_variable > add_project_variable > add_project_variable",
        "section": "add_project_variable > add_project_variable",
        "text": "Edb.add_project_variable(variable_name, variable_value, description='')\n\nAdd a variable to edb database (project). The variable will have the prefix $.\n\n..note::\n\nUser can use also the setitem to create or assign a variable. See example below.\n\nParameters\n\nvariable_name\n\npython:str\n\nName of the variable. Name can be provided without $ prefix.\n\nvariable_value\n\npython:str, python:float\n\nValue of the variable with units.\n\ndescription\n\npython:str, optional\n\nDescription of the variable.\n\nReturns\n\npython:tuple\n\nTuple containing the AddVariable result and variable server.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb_app = Edb()\n>>> boolean_1, ant_length = edb_app.add_project_variable(\"my_local_variable\", \"1cm\")\n>>> print(edb_app[\"$my_local_variable\"])    #using getitem\n>>> edb_app[\"$my_local_variable\"] = \"1cm\"   #using setitem\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.scale",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.scale.html#scale",
        "title": "scale",
        "section": "scale",
        "text": "Scales the polygon relative to a center point by a factor.\nScaling factor.\nIf None scaling is done from polygon center.\nTrue when successful, False when failed.\nscale\npython:float\nList\nof\npython:float\npython:str\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.scale",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.scale.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.scale",
        "title": "scale > scale > scale",
        "section": "scale > scale",
        "text": "EdbPolygon.scale(factor, center=None)\n\nScales the polygon relative to a center point by a factor.\n\nParameters\n\nfactor\n\npython:float\n\nScaling factor.\n\ncenter\n\nList of python:float or python:str [x,y], optional\n\nIf None scaling is done from polygon center.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.components",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.components.html#components",
        "title": "components",
        "section": "components",
        "text": "Return the list of components that touch the net.\ncomponents\npython:dict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.components",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.components.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.components",
        "title": "components > components > components",
        "section": "components > components",
        "text": "property EDBNetsData.components\n\nReturn the list of components that touch the net.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value.html#value",
        "title": "value",
        "section": "value",
        "text": "Get the value of this variable.\nvalue\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value.html#pyedb.dotnet.database.edb_data.variables.Variable.value",
        "title": "value > value > value",
        "section": "value > value",
        "text": "property Variable.value\n\nGet the value of this variable.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.place_voltage_probe",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.place_voltage_probe.html#place_voltage_probe",
        "title": "place_voltage_probe",
        "section": "place_voltage_probe",
        "text": "Place a voltage probe between two points.\nName of the probe.\nName of the positive net.\nLocation of the positive terminal.\nLayer of the positive terminal.\nName of the negative net.\nLocation of the negative terminal.\nLayer of the negative terminal.\nplace_voltage_probe\npython:str\npython:list\npython:list\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.place_voltage_probe",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.place_voltage_probe.html#pyedb.dotnet.database.siwave.EdbSiwave.place_voltage_probe",
        "title": "place_voltage_probe > place_voltage_probe > place_voltage_probe",
        "section": "place_voltage_probe > place_voltage_probe",
        "text": "EdbSiwave.place_voltage_probe(name, positive_net_name, positive_location, positive_layer, negative_net_name, negative_location, negative_layer)\n\nPlace a voltage probe between two points.\n\nParameters\n\nname\n\nstr,\n\nName of the probe.\n\npositive_net_name\n\npython:str\n\nName of the positive net.\n\npositive_location\n\npython:list\n\nLocation of the positive terminal.\n\npositive_layer\n\nstr,\n\nLayer of the positive terminal.\n\nnegative_net_name\n\nstr,\n\nName of the negative net.\n\nnegative_location\n\npython:list\n\nLocation of the negative terminal.\n\nnegative_layer\n\npython:str\n\nLayer of the negative terminal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_voltage_source",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_voltage_source.html#add_voltage_source",
        "title": "add_voltage_source",
        "section": "add_voltage_source",
        "text": "Add a voltage source for the current SimulationConfiguration instance.\nSource name.\nAmplitude value of the source. Either amperes for current source or volts for\nvoltage source.\nPhase value of the source.\nImpedance value of the source.\nName of the component used for the positive node.\nName of the component used for the negative node.\nNet used for the positive node.\nNet used for the negative node.\nTrue when successful, False when failed.\nadd_voltage_source\npython:str\npython:float\npython:float\npython:float\npython:str\npython:str\npython:str\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_voltage_source",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_voltage_source.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_voltage_source",
        "title": "add_voltage_source > add_voltage_source > add_voltage_source",
        "section": "add_voltage_source > add_voltage_source",
        "text": "SimulationConfiguration.add_voltage_source(name='', voltage_value=1, phase_value=0, impedance=1e-06, positive_node_component='', positive_node_net='', negative_node_component='', negative_node_net='')\n\nAdd a voltage source for the current SimulationConfiguration instance.\n\nParameters\n\nname\n\npython:str\n\nSource name.\n\nvoltage_value\n\npython:float\n\nAmplitude value of the source. Either amperes for current source or volts for\nvoltage source.\n\nphase_value\n\npython:float\n\nPhase value of the source.\n\nimpedance\n\npython:float\n\nImpedance value of the source.\n\npositive_node_component\n\npython:str\n\nName of the component used for the positive node.\n\nnegative_node_component\n\npython:str\n\nName of the component used for the negative node.\n\npositive_node_net\n\npython:str\n\nNet used for the positive node.\n\nnegative_node_net\n\npython:str\n\nNet used for the negative node.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> edb = Edb(target_file)\n>>> sim_setup = SimulationConfiguration()\n>>> sim_setup.add_voltage_source(voltage_value=1.0, phase_value=0, positive_node_component=\"V1\",\n>>> positive_node_net=\"HSG\", negative_node_component=\"V1\", negative_node_net=\"SW\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.db",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.db.html#db",
        "title": "db",
        "section": "db",
        "text": "Active database object.\ndb"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.db",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.db.html#pyedb.dotnet.edb.Edb.db",
        "title": "db > db > db",
        "section": "db > db",
        "text": "property Edb.db\n\nActive database object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.defeature_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.defeature_settings.html#defeature_settings",
        "title": "defeature_settings",
        "section": "defeature_settings",
        "text": "Defeature settings Class.\ndefeature_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.DefeatureSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.defeature_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.defeature_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.defeature_settings",
        "title": "defeature_settings > defeature_settings > defeature_settings",
        "section": "defeature_settings > defeature_settings",
        "text": "property HfssSimulationSetup.defeature_settings\n\nDefeature settings Class.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.DefeatureSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_probe_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_probe_on_pin_group.html#create_voltage_probe_on_pin_group",
        "title": "create_voltage_probe_on_pin_group",
        "section": "create_voltage_probe_on_pin_group",
        "text": "Create voltage probe between two pin groups.\nName of the probe.\nName of the positive pin group.\nName of the negative pin group.\nPhase of the source.\ncreate_voltage_probe_on_pin_group\npython:str\npython:str\npython:str\npython:int\npython:float\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_probe_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_probe_on_pin_group.html#pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_probe_on_pin_group",
        "title": "create_voltage_probe_on_pin_group > create_voltage_probe_on_pin_group > create_voltage_probe_on_pin_group",
        "section": "create_voltage_probe_on_pin_group > create_voltage_probe_on_pin_group",
        "text": "EdbSiwave.create_voltage_probe_on_pin_group(probe_name, pos_pin_group_name, neg_pin_group_name, impedance=1000000)\n\nCreate voltage probe between two pin groups.\n\nParameters\n\nprobe_name\n\npython:str\n\nName of the probe.\n\npos_pin_group_name\n\npython:str\n\nName of the positive pin group.\n\nneg_pin_group_name\n\npython:str\n\nName of the negative pin group.\n\nimpedance\n\npython:int, python:float, optional\n\nPhase of the source.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.relative_residual",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.relative_residual.html#relative_residual",
        "title": "relative_residual",
        "section": "relative_residual",
        "text": "Residual for use by the iterative solver.\nrelative_residual\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.relative_residual",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.relative_residual.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.relative_residual",
        "title": "relative_residual > relative_residual > relative_residual",
        "section": "relative_residual > relative_residual",
        "text": "property HfssSolverSettings.relative_residual\n\nResidual for use by the iterative solver.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin_group.html#create_voltage_source_on_pin_group",
        "title": "create_voltage_source_on_pin_group",
        "section": "create_voltage_source_on_pin_group",
        "text": "Create voltage source between two pin groups.\nName of the positive pin group.\nName of the negative pin group.\nMagnitude of the source.\nPhase of the source\ncreate_voltage_source_on_pin_group\npython:str\npython:str\npython:int\npython:float\noptional\npython:int\npython:float\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin_group.html#pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_pin_group",
        "title": "create_voltage_source_on_pin_group > create_voltage_source_on_pin_group > create_voltage_source_on_pin_group",
        "section": "create_voltage_source_on_pin_group > create_voltage_source_on_pin_group",
        "text": "EdbSiwave.create_voltage_source_on_pin_group(pos_pin_group_name, neg_pin_group_name, magnitude=1, phase=0, name=None, impedance=0.001)\n\nCreate voltage source between two pin groups.\n\nParameters\n\npos_pin_group_name\n\npython:str\n\nName of the positive pin group.\n\nneg_pin_group_name\n\npython:str\n\nName of the negative pin group.\n\nmagnitude\n\npython:int, python:float, optional\n\nMagnitude of the source.\n\nphase\n\npython:int, python:float, optional\n\nPhase of the source\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.html#modeler",
        "title": "Modeler",
        "section": "Modeler",
        "text": "Manages EDB methods for primitives management accessible from Edb.modeler property.\nModeler.add_void(shape, void_shape)\nAdd a void into a shape.\nModeler.create_bondwire(definition_name, ...)\nCreate a bondwire object.\nModeler.create_circle(layer_name, x, y, radius)\nCreate a circle on a specified layer.\nModeler.create_pin_group(name[, pins_by_id, ...])\nCreate a PinGroup.\nModeler.create_polygon(main_shape, layer_name)\nCreate a polygon based on a list of points and voids.\nModeler.create_rectangle(layer_name[, ...])\nCreate rectangle.\nModeler.create_trace(path_list, layer_name)\nCreate a trace based on a list of points.\nModeler.defeature_polygon(poly[, tolerance])\nDefeature the polygon based on the maximum surface deviation criteria.\nModeler.delete_primitives(net_names)\nDelete primitives by net names.\nModeler.fix_circle_void_for_clipping()\nFix issues when circle void are clipped due to a bug in EDB.\nModeler.get_layout_statistics([...])\nReturn EDBStatistics object from a layout.\nModeler.get_polygon_bounding_box(polygon)\nRetrieve a polygon bounding box.\nModeler.get_polygon_points(polygon)\nRetrieve polygon points.\nModeler.get_polygons_by_layer(layer_name[, ...])\nRetrieve polygons by a layer.\nModeler.get_primitive(primitive_id)\nRetrieve primitive from give id.\nModeler.get_primitive_by_layer_and_point([...])\nReturn primitive given coordinate point [x, y], layer name and nets.\nModeler.get_primitives([net_name, ...])\nGet primitives by conditions.\nModeler.parametrize_polygon(polygon, ...[, ...])\nParametrize pieces of a polygon based on another polygon.\nModeler.parametrize_trace_width(nets_name[, ...])\nParametrize a Trace on specific layer or all stackup.\nModeler.shape_to_polygon_data(shape)\nConvert a shape to polygon data.\nModeler.unite_polygons_on_layer([...])\nTry to unite all Polygons on specified layer.\nModeler.circles\nCircles.\nModeler.db\nDb object.\nModeler.layers\nDictionary of layers.\nModeler.paths\nPaths.\nModeler.polygons\nPolygons.\nModeler.polygons_by_layer\nPrimitives with layer names as keys.\nModeler.primitives\nPrimitives.\nModeler.primitives_by_layer\nPrimitives with layer names as keys.\nModeler.primitives_by_net\nPrimitives with net names as keys.\nModeler.rectangles\nRectangles.\nModeler\nModeler.add_void\nModeler.create_bondwire\nModeler.create_circle\nModeler.create_pin_group\nModeler.create_polygon\nModeler.create_rectangle\nModeler.create_trace\nModeler.defeature_polygon\nModeler.delete_primitives\nModeler.fix_circle_void_for_clipping\nModeler.get_layout_statistics\nModeler.get_polygon_bounding_box\nModeler.get_polygon_points\nModeler.get_polygons_by_layer\nModeler.get_primitive\nModeler.get_primitive_by_layer_and_point\nModeler.get_primitives\nModeler.parametrize_polygon\nModeler.parametrize_trace_width\nModeler.shape_to_polygon_data\nModeler.unite_polygons_on_layer\nModeler.circles\nModeler.db\nModeler.layers\nModeler.paths\nModeler.polygons\nModeler.polygons_by_layer\nModeler.primitives\nModeler.primitives_by_layer\nModeler.primitives_by_net\nModeler.rectangles"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.html#pyedb.dotnet.database.modeler.Modeler",
        "title": "Modeler > Modeler > Modeler",
        "section": "Modeler > Modeler",
        "text": "class pyedb.dotnet.database.modeler.Modeler(p_edb)\n\nManages EDB methods for primitives management accessible from Edb.modeler property.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", edbversion=\"2021.2\")\n>>> edb_layout = edbapp.modeler\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nModeler.add_void(shape, void_shape)\n\nAdd a void into a shape.\n\nModeler.create_bondwire(definition_name, ...)\n\nCreate a bondwire object.\n\nModeler.create_circle(layer_name, x, y, radius)\n\nCreate a circle on a specified layer.\n\nModeler.create_pin_group(name[, pins_by_id, ...])\n\nCreate a PinGroup.\n\nModeler.create_polygon(main_shape, layer_name)\n\nCreate a polygon based on a list of points and voids.\n\nModeler.create_rectangle(layer_name[, ...])\n\nCreate rectangle.\n\nModeler.create_trace(path_list, layer_name)\n\nCreate a trace based on a list of points.\n\nModeler.defeature_polygon(poly[, tolerance])\n\nDefeature the polygon based on the maximum surface deviation criteria.\n\nModeler.delete_primitives(net_names)\n\nDelete primitives by net names.\n\nModeler.fix_circle_void_for_clipping()\n\nFix issues when circle void are clipped due to a bug in EDB.\n\nModeler.get_layout_statistics([...])\n\nReturn EDBStatistics object from a layout.\n\nModeler.get_polygon_bounding_box(polygon)\n\nRetrieve a polygon bounding box.\n\nModeler.get_polygon_points(polygon)\n\nRetrieve polygon points.\n\nModeler.get_polygons_by_layer(layer_name[, ...])\n\nRetrieve polygons by a layer.\n\nModeler.get_primitive(primitive_id)\n\nRetrieve primitive from give id.\n\nModeler.get_primitive_by_layer_and_point([...])\n\nReturn primitive given coordinate point [x, y], layer name and nets.\n\nModeler.get_primitives([net_name, ...])\n\nGet primitives by conditions.\n\nModeler.parametrize_polygon(polygon, ...[, ...])\n\nParametrize pieces of a polygon based on another polygon.\n\nModeler.parametrize_trace_width(nets_name[, ...])\n\nParametrize a Trace on specific layer or all stackup.\n\nModeler.shape_to_polygon_data(shape)\n\nConvert a shape to polygon data.\n\nModeler.unite_polygons_on_layer([...])\n\nTry to unite all Polygons on specified layer.\n\n\n\nAttributes\n\n\n\n\n\n\n\nModeler.circles\n\nCircles.\n\nModeler.db\n\nDb object.\n\nModeler.layers\n\nDictionary of layers.\n\nModeler.paths\n\nPaths.\n\nModeler.polygons\n\nPolygons.\n\nModeler.polygons_by_layer\n\nPrimitives with layer names as keys.\n\nModeler.primitives\n\nPrimitives.\n\nModeler.primitives_by_layer\n\nPrimitives with layer names as keys.\n\nModeler.primitives_by_net\n\nPrimitives with net names as keys.\n\nModeler.rectangles\n\nRectangles.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_syz_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_syz_setup.html#create_siwave_syz_setup",
        "title": "create_siwave_syz_setup",
        "section": "create_siwave_syz_setup",
        "text": "Create a setup from a template.\nSetup name.\ncreate_siwave_syz_setup\npython:str\noptional\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_syz_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_syz_setup.html#pyedb.dotnet.edb.Edb.create_siwave_syz_setup",
        "title": "create_siwave_syz_setup > create_siwave_syz_setup > create_siwave_syz_setup",
        "section": "create_siwave_syz_setup > create_siwave_syz_setup",
        "text": "Edb.create_siwave_syz_setup(name=None, **kwargs)\n\nCreate a setup from a template.\n\nParameters\n\nname\n\npython:str, optional\n\nSetup name.\n\nReturns\n\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb()\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_frequency_sweep(frequency_sweep=[\n...                           [\"linear count\", \"0\", \"1kHz\", 1],\n...                           [\"log scale\", \"1kHz\", \"0.1GHz\", 10],\n...                           [\"linear scale\", \"0.1GHz\", \"10GHz\", \"0.1GHz\"],\n...                           ])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_object.html#api_object",
        "title": "api_object",
        "section": "api_object",
        "text": "Return Ansys.Ansoft.Edb object.\napi_object"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_object.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_object",
        "title": "api_object > api_object > api_object",
        "section": "api_object > api_object",
        "text": "property EDBNetsData.api_object\n\nReturn Ansys.Ansoft.Edb object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.layout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.layout.html#layout",
        "title": "layout",
        "section": "layout",
        "text": "Layout object.\nlayout\nlegacy.database.dotnet.layout.Layout"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.layout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.layout.html#pyedb.dotnet.edb.Edb.layout",
        "title": "layout > layout > layout",
        "section": "layout > layout",
        "text": "property Edb.layout\n\nLayout object.\n\nReturns\n\nlegacy.database.dotnet.layout.Layout\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.excitations",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.excitations.html#excitations",
        "title": "excitations",
        "section": "excitations",
        "text": "Get all excitations.\nexcitations"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.excitations",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.excitations.html#pyedb.dotnet.database.hfss.EdbHfss.excitations",
        "title": "excitations > excitations > excitations",
        "section": "excitations > excitations",
        "text": "property EdbHfss.excitations\n\nGet all excitations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters.html#parameters",
        "title": "parameters",
        "section": "parameters",
        "text": "Get parameters.\nparameters\npython:dict"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters",
        "title": "parameters > parameters > parameters",
        "section": "parameters > parameters",
        "text": "property EDBPadProperties.parameters\n\nGet parameters.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.definition",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.definition.html#definition",
        "title": "definition",
        "section": "definition",
        "text": "Edb Dotnet Api Database Edb.Definition.\ndefinition"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.definition",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.definition.html#pyedb.dotnet.edb.Edb.definition",
        "title": "definition > definition > definition",
        "section": "definition > definition",
        "text": "property Edb.definition\n\nEdb Dotnet Api Database Edb.Definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup.html#cfgsiwaveacsetup",
        "title": "CfgSIwaveACSetup",
        "section": "CfgSIwaveACSetup",
        "text": "CfgSIwaveACSetup.to_dict()\n\nCfgSIwaveACSetup\nCfgSIwaveACSetup.to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup.html#pyedb.configuration.cfg_setup.CfgSIwaveACSetup",
        "title": "CfgSIwaveACSetup > CfgSIwaveACSetup > CfgSIwaveACSetup",
        "section": "CfgSIwaveACSetup > CfgSIwaveACSetup",
        "text": "class pyedb.configuration.cfg_setup.CfgSIwaveACSetup(pedb, pyedb_obj, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgSIwaveACSetup.to_dict()\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.get_attributes.html#pyedb.configuration.cfg_boundaries.CfgBoundaries.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgBoundaries.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.type.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property SiwaveDCSimulationSetup.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_vi_sources",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_vi_sources.html#include_vi_sources",
        "title": "include_vi_sources",
        "section": "include_vi_sources",
        "text": "Whether to include the effect of parasitic elements from voltage and\ncurrent sources.\nTrue if vi sources is used, False otherwise.\ninclude_vi_sources\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_vi_sources",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_vi_sources.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_vi_sources",
        "title": "include_vi_sources > include_vi_sources > include_vi_sources",
        "section": "include_vi_sources > include_vi_sources",
        "text": "property AdvancedSettings.include_vi_sources\n\nWhether to include the effect of parasitic elements from voltage and\ncurrent sources.\n\nReturns\n\nbool\n\nTrue if vi sources is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction.html#use_enable_hybrid_extraction",
        "title": "use_enable_hybrid_extraction",
        "section": "use_enable_hybrid_extraction",
        "text": "This setting allows the modelling engine to separate the layout into two parts in an attempt to\ndecrease the complexity of EM modelling.\nuse_enable_hybrid_extraction"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction",
        "title": "use_enable_hybrid_extraction > use_enable_hybrid_extraction > use_enable_hybrid_extraction",
        "section": "use_enable_hybrid_extraction > use_enable_hybrid_extraction",
        "text": "property RaptorXSimulationAdvancedSettings.use_enable_hybrid_extraction\n\nThis setting allows the modelling engine to separate the layout into two parts in an attempt to\ndecrease the complexity of EM modelling.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.merge_nets_polygons",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.merge_nets_polygons.html#merge_nets_polygons",
        "title": "merge_nets_polygons",
        "section": "merge_nets_polygons",
        "text": "Convert paths from net into polygons, evaluate all connected polygons and perform the merge.\nNet name of list of net name.\nTrue when successful, False when failed.\nmerge_nets_polygons\npython:str\npython:list\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.merge_nets_polygons",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.merge_nets_polygons.html#pyedb.dotnet.database.nets.EdbNets.merge_nets_polygons",
        "title": "merge_nets_polygons > merge_nets_polygons > merge_nets_polygons",
        "section": "merge_nets_polygons > merge_nets_polygons",
        "text": "EdbNets.merge_nets_polygons(net_names_list)\n\nConvert paths from net into polygons, evaluate all connected polygons and perform the merge.\n\nParameters\n\nnet_names_list\n\npython:str or python:list[python:str]\n\nNet name of list of net name.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent_enabled.html#air_box_positive_vertical_extent_enabled",
        "title": "air_box_positive_vertical_extent_enabled",
        "section": "air_box_positive_vertical_extent_enabled",
        "text": "Whether positive vertical extent is enabled for the air box.\nair_box_positive_vertical_extent_enabled"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent_enabled.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent_enabled",
        "title": "air_box_positive_vertical_extent_enabled > air_box_positive_vertical_extent_enabled > air_box_positive_vertical_extent_enabled",
        "section": "air_box_positive_vertical_extent_enabled > air_box_positive_vertical_extent_enabled",
        "text": "property HfssExtentInfo.air_box_positive_vertical_extent_enabled\n\nWhether positive vertical extent is enabled for the air box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.delete_primitives",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.delete_primitives.html#delete_primitives",
        "title": "delete_primitives",
        "section": "delete_primitives",
        "text": "Delete primitives by net names.\nNames of the nets to delete.\nTrue when successful, False when failed.\ndelete_primitives\npython:str\npython:list\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.delete_primitives",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.delete_primitives.html#pyedb.dotnet.database.modeler.Modeler.delete_primitives",
        "title": "delete_primitives > delete_primitives > delete_primitives",
        "section": "delete_primitives > delete_primitives",
        "text": "Modeler.delete_primitives(net_names)\n\nDelete primitives by net names.\n\nParameters\n\nnet_names\n\npython:str, python:list\n\nNames of the nets to delete.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nReferences\n\n>>> Edb.modeler.delete_primitives(net_names=[\"GND\"])\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_object.html#reference_object",
        "title": "reference_object",
        "section": "reference_object",
        "text": "This returns the object assigned as reference. It can be a primitive or a padstack instance.\nreference_object\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance\nor\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.reference_object.html#pyedb.dotnet.database.edb_data.ports.GapPort.reference_object",
        "title": "reference_object > reference_object > reference_object",
        "section": "reference_object > reference_object",
        "text": "property GapPort.reference_object\n\nThis returns the object assigned as reference. It can be a primitive or a padstack instance.\n\nReturns\n\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance or\n\n\n\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sweep_data_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sweep_data_list.html#sweep_data_list",
        "title": "sweep_data_list",
        "section": "sweep_data_list",
        "text": "sweep_data_list"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sweep_data_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sweep_data_list.html#pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sweep_data_list",
        "title": "sweep_data_list > sweep_data_list > sweep_data_list",
        "section": "sweep_data_list > sweep_data_list",
        "text": "property SimSetupInfo.sweep_data_list\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel",
        "href": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel.html#cfgspicemodel",
        "title": "CfgSpiceModel",
        "section": "CfgSpiceModel",
        "text": "CfgSpiceModel.apply()\nApply Spice model on layout.\nCfgSpiceModel\nCfgSpiceModel.apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel",
        "href": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel.html#pyedb.configuration.cfg_spice_models.CfgSpiceModel",
        "title": "CfgSpiceModel > CfgSpiceModel > CfgSpiceModel",
        "section": "CfgSpiceModel > CfgSpiceModel",
        "text": "class pyedb.configuration.cfg_spice_models.CfgSpiceModel(pdata, path_lib, spice_dict)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgSpiceModel.apply()\n\nApply Spice model on layout.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer.html#via_stop_layer",
        "title": "via_stop_layer",
        "section": "via_stop_layer",
        "text": "Stopping layer.\nName of the stopping layer.\nvia_stop_layer\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer",
        "title": "via_stop_layer > via_stop_layer > via_stop_layer",
        "section": "via_stop_layer > via_stop_layer",
        "text": "property EDBPadstack.via_stop_layer\n\nStopping layer.\n\nReturns\n\npython:str\n\nName of the stopping layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.non_stackup_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.non_stackup_layers.html#non_stackup_layers",
        "title": "non_stackup_layers",
        "section": "non_stackup_layers",
        "text": "Retrieve the dictionary of signal layers.\nnon_stackup_layers"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.non_stackup_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.non_stackup_layers.html#pyedb.dotnet.database.stackup.Stackup.non_stackup_layers",
        "title": "non_stackup_layers > non_stackup_layers > non_stackup_layers",
        "section": "non_stackup_layers > non_stackup_layers",
        "text": "property Stackup.non_stackup_layers\n\nRetrieve the dictionary of signal layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size_enabled.html#dielectric_extent_size_enabled",
        "title": "dielectric_extent_size_enabled",
        "section": "dielectric_extent_size_enabled",
        "text": "Whether dielectric extent size is enabled.\ndielectric_extent_size_enabled"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size_enabled.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size_enabled",
        "title": "dielectric_extent_size_enabled > dielectric_extent_size_enabled > dielectric_extent_size_enabled",
        "section": "dielectric_extent_size_enabled > dielectric_extent_size_enabled",
        "text": "property HfssExtentInfo.dielectric_extent_size_enabled\n\nWhether dielectric extent size is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.retrieve_parameters_from_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.retrieve_parameters_from_edb.html#retrieve_parameters_from_edb",
        "title": "retrieve_parameters_from_edb",
        "section": "retrieve_parameters_from_edb",
        "text": "retrieve_parameters_from_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.retrieve_parameters_from_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.retrieve_parameters_from_edb.html#pyedb.configuration.cfg_components.CfgComponents.retrieve_parameters_from_edb",
        "title": "retrieve_parameters_from_edb > retrieve_parameters_from_edb > retrieve_parameters_from_edb",
        "section": "retrieve_parameters_from_edb > retrieve_parameters_from_edb",
        "text": "CfgComponents.retrieve_parameters_from_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_create.html#api_create",
        "title": "api_create",
        "section": "api_create",
        "text": "Edb Dotnet Api Database Edb.DifferentialPair.Create.\napi_create"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_create",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_create.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_create",
        "title": "api_create > api_create > api_create",
        "section": "api_create > api_create",
        "text": "EDBDifferentialPairData.api_create(name)\n\nEdb Dotnet Api Database Edb.DifferentialPair.Create.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersect",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersect.html#intersect",
        "title": "intersect",
        "section": "intersect",
        "text": "Intersect active primitive with one or more primitives.\nintersect\ndotnet.database.edb_data.EDBPrimitives\nEDB\nPolygonData\nEDB\nPrimitive\npython:list\nList\nof\ndotnet.database.edb_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersect",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersect.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersect",
        "title": "intersect > intersect > intersect",
        "section": "intersect > intersect",
        "text": "EDBPadstackInstance.intersect(primitives)\n\nIntersect active primitive with one or more primitives.\n\nParameters\n\nprimitives\n\ndotnet.database.edb_data.EDBPrimitives or EDB PolygonData or EDB Primitive or python:list\n\n\n\nReturns\n\nList of dotnet.database.edb_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_layers",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_layers.html#num_layers",
        "title": "num_layers",
        "section": "num_layers",
        "text": "num_layers"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_layers",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_layers.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_layers",
        "title": "num_layers > num_layers > num_layers",
        "section": "num_layers > num_layers",
        "text": "property EDBStatistics.num_layers\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size.html#dielectric_extent_size",
        "title": "dielectric_extent_size",
        "section": "dielectric_extent_size",
        "text": "Dielectric extent size.\ndielectric_extent_size"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_size",
        "title": "dielectric_extent_size > dielectric_extent_size > dielectric_extent_size",
        "section": "dielectric_extent_size > dielectric_extent_size",
        "text": "property HfssExtentInfo.dielectric_extent_size\n\nDielectric extent size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_net.html#create_circuit_port_on_net",
        "title": "create_circuit_port_on_net",
        "section": "create_circuit_port_on_net",
        "text": "Create a circuit port on a NET.\nIt groups all pins belonging to the specified net and then applies the port on PinGroups.\nName of the positive component.\nName of the positive net.\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\nName of the negative net name. The default is \"GND\".\nPort impedance value. The default is 50.\nName of the port. The default is \"\".\nThe name of the port.\ncreate_circuit_port_on_net\npython:str\npython:str\npython:str\noptional\nNone\npython:str\noptional\n\"GND\"\npython:float\noptional\n50\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_net.html#pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_net",
        "title": "create_circuit_port_on_net > create_circuit_port_on_net > create_circuit_port_on_net",
        "section": "create_circuit_port_on_net > create_circuit_port_on_net",
        "text": "EdbHfss.create_circuit_port_on_net(positive_component_name, positive_net_name, negative_component_name=None, negative_net_name='GND', impedance_value=50, port_name='')\n\nCreate a circuit port on a NET.\nIt groups all pins belonging to the specified net and then applies the port on PinGroups.\n\nParameters\n\npositive_component_name\n\npython:str\n\nName of the positive component.\n\npositive_net_name\n\npython:str\n\nName of the positive net.\n\nnegative_component_name\n\npython:str, optional\n\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\n\nnegative_net_name\n\npython:str, optional\n\nName of the negative net name. The default is \"GND\".\n\nimpedance_value\n\npython:float, optional\n\nPort impedance value. The default is 50.\n\nport_name\n\npython:str, optional\n\nName of the port. The default is \"\".\n\nReturns\n\npython:str\n\nThe name of the port.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.hfss.create_circuit_port_on_net(\"U2A5\", \"V1P5_S3\", \"U2A5\", \"GND\", 50, \"port_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_impedance_crosstalk_scan",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_impedance_crosstalk_scan.html#create_impedance_crosstalk_scan",
        "title": "create_impedance_crosstalk_scan",
        "section": "create_impedance_crosstalk_scan",
        "text": "Create Siwave crosstalk scan object\nScan type to be analyzed. 3 options are available, impedance for frequency impedance scan,\nfrequency_xtalk for frequency domain crosstalk and time_xtalk for time domain crosstalk.\nDefault value is frequency.\ncreate_impedance_crosstalk_scan\npython:str\nimpedance\nfrequency_xtalk\ntime_xtalk\nfrequency"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_impedance_crosstalk_scan",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_impedance_crosstalk_scan.html#pyedb.dotnet.database.siwave.EdbSiwave.create_impedance_crosstalk_scan",
        "title": "create_impedance_crosstalk_scan > create_impedance_crosstalk_scan > create_impedance_crosstalk_scan",
        "section": "create_impedance_crosstalk_scan > create_impedance_crosstalk_scan",
        "text": "EdbSiwave.create_impedance_crosstalk_scan(scan_type='impedance')\n\nCreate Siwave crosstalk scan object\n\nParameters\n\nscan_type\n\npython:str\n\nScan type to be analyzed. 3 options are available, impedance for frequency impedance scan,\nfrequency_xtalk for frequency domain crosstalk and time_xtalk for time domain crosstalk.\nDefault value is frequency.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.polygon_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.polygon_data.html#polygon_data",
        "title": "polygon_data",
        "section": "polygon_data",
        "text": "pyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\npolygon_data\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.polygon_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.polygon_data.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.polygon_data",
        "title": "polygon_data > polygon_data > polygon_data",
        "section": "polygon_data > polygon_data",
        "text": "property EdbPolygon.polygon_data\n\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_frequency_sweep.html#add_frequency_sweep",
        "title": "add_frequency_sweep",
        "section": "add_frequency_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nList of frequency points. The default is None.\nadd_frequency_sweep\npython:str\noptional\nNone\npython:list\noptional\nNone\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_frequency_sweep.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.add_frequency_sweep",
        "title": "add_frequency_sweep > add_frequency_sweep > add_frequency_sweep",
        "section": "add_frequency_sweep > add_frequency_sweep",
        "text": "HFSSPISimulationSetup.add_frequency_sweep(name=None, frequency_sweep=None)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\nfrequency_sweep\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_frequency_sweep(frequency_sweep=[\n...     [\"linear count\", \"0\", \"1kHz\", 1],\n...     [\"log scale\", \"1kHz\", \"0.1GHz\", 10],\n...     [\"linear scale\", \"0.1GHz\", \"10GHz\", \"0.1GHz\"],\n...     ])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.oproject",
        "href": "api/_autosummary/pyedb.siwave.Siwave.oproject.html#oproject",
        "title": "oproject",
        "section": "oproject",
        "text": "Project.\noproject"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.oproject",
        "href": "api/_autosummary/pyedb.siwave.Siwave.oproject.html#pyedb.siwave.Siwave.oproject",
        "title": "oproject > oproject > oproject",
        "section": "oproject > oproject",
        "text": "property Siwave.oproject\n\nProject.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.html#edbpadproperties",
        "title": "EDBPadProperties",
        "section": "EDBPadProperties",
        "text": "Manages EDB functionalities for pad properties.\nName of the layer.\nType of the pad.\nInherited AEDT object.\nEDBPadProperties.int_to_geometry_type([val])\nConvert an integer to an EDB.PadGeometryType.\nEDBPadProperties.int_to_pad_type([val])\nConvert an integer to an EDB.PadGeometryType.\nEDBPadProperties.geometry_type\nGeometry type.\nEDBPadProperties.offset_x\nOffset for the X axis.\nEDBPadProperties.offset_y\nOffset for the Y axis.\nEDBPadProperties.parameters\nGet parameters.\nEDBPadProperties.parameters_values\nParameters.\nEDBPadProperties.parameters_values_string\nParameters value in string format.\nEDBPadProperties.polygon_data\nParameters.\nEDBPadProperties.rotation\nRotation.\nEDBPadProperties.shape\nGet the shape of the pad.\nEDBPadProperties\npython:str\npython:str\nEDBPadProperties.int_to_geometry_type\nEDBPadProperties.int_to_pad_type\nEDBPadProperties.geometry_type\nEDBPadProperties.offset_x\nEDBPadProperties.offset_y\nEDBPadProperties.parameters\nEDBPadProperties.parameters_values\nEDBPadProperties.parameters_values_string\nEDBPadProperties.polygon_data\nEDBPadProperties.rotation\nEDBPadProperties.shape"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties",
        "title": "EDBPadProperties > EDBPadProperties > EDBPadProperties",
        "section": "EDBPadProperties > EDBPadProperties",
        "text": "class pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties(edb_padstack, layer_name, pad_type, p_edb_padstack)\n\nManages EDB functionalities for pad properties.\n\nParameters\n\nedb_padstack\n\n\n\nlayer_name\n\npython:str\n\nName of the layer.\n\npad_type\n\nType of the pad.\n\npedbpadstack\n\npython:str\n\nInherited AEDT object.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> edb_pad_properties = edb.padstacks.definitions[\"MyPad\"].pad_by_layer[\"TOP\"]\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBPadProperties.int_to_geometry_type([val])\n\nConvert an integer to an EDB.PadGeometryType.\n\nEDBPadProperties.int_to_pad_type([val])\n\nConvert an integer to an EDB.PadGeometryType.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBPadProperties.geometry_type\n\nGeometry type.\n\nEDBPadProperties.offset_x\n\nOffset for the X axis.\n\nEDBPadProperties.offset_y\n\nOffset for the Y axis.\n\nEDBPadProperties.parameters\n\nGet parameters.\n\nEDBPadProperties.parameters_values\n\nParameters.\n\nEDBPadProperties.parameters_values_string\n\nParameters value in string format.\n\nEDBPadProperties.polygon_data\n\nParameters.\n\nEDBPadProperties.rotation\n\nRotation.\n\nEDBPadProperties.shape\n\nGet the shape of the pad.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweeps.html#sweeps",
        "title": "sweeps",
        "section": "sweeps",
        "text": "List of frequency sweeps.\nsweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweeps.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweeps",
        "title": "sweeps > sweeps > sweeps",
        "section": "sweeps > sweeps",
        "text": "property SimulationSetup.sweeps\n\nList of frequency sweeps.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances.html#padstack_instances",
        "title": "padstack_instances",
        "section": "padstack_instances",
        "text": "Get all the vias that belongs to active Padstack definition.\npadstack_instances\npython:dict"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances",
        "title": "padstack_instances > padstack_instances > padstack_instances",
        "section": "padstack_instances > padstack_instances",
        "text": "property EDBPadstack.padstack_instances\n\nGet all the vias that belongs to active Padstack definition.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.db",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.db.html#db",
        "title": "db",
        "section": "db",
        "text": "Db object.\ndb"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.db",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.db.html#pyedb.dotnet.database.modeler.Modeler.db",
        "title": "db > db > db",
        "section": "db > db",
        "text": "property Modeler.db\n\nDb object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component.html#component",
        "title": "component",
        "section": "component",
        "text": "Component.\ncomponent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component",
        "title": "component > component > component",
        "section": "component > component",
        "text": "property EDBPadstackInstance.component\n\nComponent.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.simulation_settings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.simulation_settings.html#simulation_settings",
        "title": "simulation_settings",
        "section": "simulation_settings",
        "text": "simulation_settings"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.simulation_settings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.simulation_settings.html#pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.simulation_settings",
        "title": "simulation_settings > simulation_settings > simulation_settings",
        "section": "simulation_settings > simulation_settings",
        "text": "property SimSetupInfo.simulation_settings\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete this variable.\nTrue when successful, False when failed.\ndelete\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.delete.html#pyedb.dotnet.database.edb_data.variables.Variable.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "Variable.delete()\n\nDelete this variable.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb()\n>>> edb.design_variables[\"new_variable\"].delete()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.set_attributes.html#pyedb.configuration.cfg_boundaries.CfgBoundaries.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgBoundaries.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.duplicate",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.duplicate.html#duplicate",
        "title": "duplicate",
        "section": "duplicate",
        "text": "Duplicate a material from the database.\nName of the existing material.\nName of the new duplicated material.\nduplicate\npython:str\npython:str\npyedb.dotnet.database.materials.Material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.duplicate",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.duplicate.html#pyedb.dotnet.database.materials.Materials.duplicate",
        "title": "duplicate > duplicate > duplicate",
        "section": "duplicate > duplicate",
        "text": "Materials.duplicate(material_name, new_material_name)\n\nDuplicate a material from the database.\n\nParameters\n\nmaterial_name\n\npython:str\n\nName of the existing material.\n\nnew_material_name\n\npython:str\n\nName of the new duplicated material.\n\nReturns\n\npyedb.dotnet.database.materials.Material\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete_frequency_sweep",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete_frequency_sweep.html#delete_frequency_sweep",
        "title": "delete_frequency_sweep",
        "section": "delete_frequency_sweep",
        "text": "Delete a frequency sweep.\ndelete_frequency_sweep"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete_frequency_sweep",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete_frequency_sweep.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete_frequency_sweep",
        "title": "delete_frequency_sweep > delete_frequency_sweep > delete_frequency_sweep",
        "section": "delete_frequency_sweep > delete_frequency_sweep",
        "text": "RaptorXSimulationSetup.delete_frequency_sweep(sweep_data)\n\nDelete a frequency sweep.\n\nParameters\n\nsweep_data\n\nEdbFrequencySweep.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.description",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.description.html#description",
        "title": "description",
        "section": "description",
        "text": "Get the description of this variable.\ndescription"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.description",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.description.html#pyedb.dotnet.database.edb_data.variables.Variable.description",
        "title": "description > description > description",
        "section": "description > description",
        "text": "property Variable.description\n\nGet the description of this variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_trace_width_for_traces_with_ports",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_trace_width_for_traces_with_ports.html#get_trace_width_for_traces_with_ports",
        "title": "get_trace_width_for_traces_with_ports",
        "section": "get_trace_width_for_traces_with_ports",
        "text": "Retrieve the trace width for traces with ports.\nDictionary of trace width data.\nget_trace_width_for_traces_with_ports\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_trace_width_for_traces_with_ports",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_trace_width_for_traces_with_ports.html#pyedb.dotnet.database.hfss.EdbHfss.get_trace_width_for_traces_with_ports",
        "title": "get_trace_width_for_traces_with_ports > get_trace_width_for_traces_with_ports > get_trace_width_for_traces_with_ports",
        "section": "get_trace_width_for_traces_with_ports > get_trace_width_for_traces_with_ports",
        "text": "EdbHfss.get_trace_width_for_traces_with_ports()\n\nRetrieve the trace width for traces with ports.\n\nReturns\n\npython:dict\n\nDictionary of trace width data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sim_setup_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sim_setup_type.html#sim_setup_type",
        "title": "sim_setup_type",
        "section": "sim_setup_type",
        "text": "“kHFSS”: self._pedb.simsetupdata.HFSSSimulationSettings,\n“kPEM”: None,\n“kSIwave”: self._pedb.simsetupdata.SIwave.SIWSimulationSettings,\n“kLNA”: None,\n“kTransient”: None,\n“kQEye”: None,\n“kVEye”: None,\n“kAMI”: None,\n“kAnalysisOption”: None,\n“kSIwaveDCIR”: self._pedb.simsetupdata.SIwave.SIWDCIRSimulationSettings,\n“kSIwaveEMI”: None,\n“kHFSSPI”: self._pedb.simsetupdata.HFSSPISimulationSettings,\n“kDDRwizard”: None,\n“kQ3D”: None,\n“kNumSetupTypes”: None,\nsim_setup_type"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sim_setup_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sim_setup_type.html#pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.sim_setup_type",
        "title": "sim_setup_type > sim_setup_type > sim_setup_type",
        "section": "sim_setup_type > sim_setup_type",
        "text": "property SimSetupInfo.sim_setup_type\n\n“kHFSS”: self._pedb.simsetupdata.HFSSSimulationSettings,\n“kPEM”: None,\n“kSIwave”: self._pedb.simsetupdata.SIwave.SIWSimulationSettings,\n“kLNA”: None,\n“kTransient”: None,\n“kQEye”: None,\n“kVEye”: None,\n“kAMI”: None,\n“kAnalysisOption”: None,\n“kSIwaveDCIR”: self._pedb.simsetupdata.SIwave.SIWDCIRSimulationSettings,\n“kSIwaveEMI”: None,\n“kHFSSPI”: self._pedb.simsetupdata.HFSSPISimulationSettings,\n“kDDRwizard”: None,\n“kQ3D”: None,\n“kNumSetupTypes”: None,\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.apply.html#pyedb.configuration.cfg_stackup.CfgStackup.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgStackup.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.upper_elevation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.upper_elevation.html#upper_elevation",
        "title": "upper_elevation",
        "section": "upper_elevation",
        "text": "Upper elevation of the placement layer.\nUpper elevation of the placement layer.\nupper_elevation\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.upper_elevation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.upper_elevation.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.upper_elevation",
        "title": "upper_elevation > upper_elevation > upper_elevation",
        "section": "upper_elevation > upper_elevation",
        "text": "property EDBPadstackInstance.upper_elevation\n\nUpper elevation of the placement layer.\n\nReturns\n\npython:float\n\nUpper elevation of the placement layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_length.html#max_length",
        "title": "max_length",
        "section": "max_length",
        "text": "Maximum length of elements.\nmax_length\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_length.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.max_length",
        "title": "max_length > max_length > max_length",
        "section": "max_length > max_length",
        "text": "property LengthMeshOperation.max_length\n\nMaximum length of elements.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_connected_objects",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_connected_objects.html#get_connected_objects",
        "title": "get_connected_objects",
        "section": "get_connected_objects",
        "text": "Get connected objects.\nget_connected_objects\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_connected_objects",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_connected_objects.html#pyedb.dotnet.edb.Edb.get_connected_objects",
        "title": "get_connected_objects > get_connected_objects > get_connected_objects",
        "section": "get_connected_objects > get_connected_objects",
        "text": "Edb.get_connected_objects(layout_object_instance)\n\nGet connected objects.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_point_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_point_terminal_reference_primitive.html#get_point_terminal_reference_primitive",
        "title": "get_point_terminal_reference_primitive",
        "section": "get_point_terminal_reference_primitive",
        "text": "Find and return the primitive reference for the point terminal or the padstack instance.\nget_point_terminal_reference_primitive\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance\nor\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_point_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_point_terminal_reference_primitive.html#pyedb.dotnet.database.edb_data.ports.WavePort.get_point_terminal_reference_primitive",
        "title": "get_point_terminal_reference_primitive > get_point_terminal_reference_primitive > get_point_terminal_reference_primitive",
        "section": "get_point_terminal_reference_primitive > get_point_terminal_reference_primitive",
        "text": "WavePort.get_point_terminal_reference_primitive()\n\nFind and return the primitive reference for the point terminal or the padstack instance.\n\nReturns\n\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance or\n\n\n\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points_raw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points_raw.html#points_raw",
        "title": "points_raw",
        "section": "points_raw",
        "text": "Return a list of Edb points.\nEdb Points.\npoints_raw\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points_raw",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points_raw.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points_raw",
        "title": "points_raw > points_raw > points_raw",
        "section": "points_raw > points_raw",
        "text": "EDBPadstackInstance.points_raw()\n\nReturn a list of Edb points.\n\nReturns\n\npython:list\n\nEdb Points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_plot_jv",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_plot_jv.html#dc_plot_jv",
        "title": "dc_plot_jv",
        "section": "dc_plot_jv",
        "text": "Retrieve the value for computing current density and voltage distribution.\nTrue when activated, False deactivated. Default value True\ndc_plot_jv\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_plot_jv",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_plot_jv.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_plot_jv",
        "title": "dc_plot_jv > dc_plot_jv > dc_plot_jv",
        "section": "dc_plot_jv > dc_plot_jv",
        "text": "property SimulationConfigurationDc.dc_plot_jv\n\nRetrieve the value for computing current density and voltage distribution.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated. Default value True\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.IOs",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.IOs.html#ios",
        "title": "IOs",
        "section": "IOs",
        "text": "Circuit inupts and outputs.\nDictionary of circuit inputs and outputs.\nIOs\npython:dict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.IOs",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.IOs.html#pyedb.dotnet.database.components.Components.IOs",
        "title": "IOs > IOs > IOs",
        "section": "IOs > IOs",
        "text": "property Components.IOs\n\nCircuit inupts and outputs.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\nDictionary of circuit inputs and outputs.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.IOs\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.circuit_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.circuit_cells.html#circuit_cells",
        "title": "circuit_cells",
        "section": "circuit_cells",
        "text": "Get all circuit cells in the Database.\ncircuit_cells\npython:list\nCell"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.circuit_cells",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.circuit_cells.html#pyedb.dotnet.edb.Edb.circuit_cells",
        "title": "circuit_cells > circuit_cells > circuit_cells",
        "section": "circuit_cells > circuit_cells",
        "text": "property Edb.circuit_cells\n\nGet all circuit cells in the Database.\n\nReturns\n\npython:list[Cell]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.get_attributes.html#pyedb.configuration.cfg_ports_sources.CfgCircuitElement.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgCircuitElement.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.ignore_non_functional_pads",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.ignore_non_functional_pads.html#ignore_non_functional_pads",
        "title": "ignore_non_functional_pads",
        "section": "ignore_non_functional_pads",
        "text": "Exclude non-functional pads.\nTrue` if functional pads have to be ignored, False otherwise.\nignore_non_functional_pads\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.ignore_non_functional_pads",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.ignore_non_functional_pads.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.ignore_non_functional_pads",
        "title": "ignore_non_functional_pads > ignore_non_functional_pads > ignore_non_functional_pads",
        "section": "ignore_non_functional_pads > ignore_non_functional_pads",
        "text": "property AdvancedSettings.ignore_non_functional_pads\n\nExclude non-functional pads.\n\nReturns\n\nbool\n\nTrue` if functional pads have to be ignored, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete this primitive.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.delete.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "EdbPolygon.delete()\n\nDelete this primitive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_exception",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_exception.html#edb_exception",
        "title": "edb_exception",
        "section": "edb_exception",
        "text": "Write the trace stack to AEDT when a Python error occurs.\nedb_exception\npython:None"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_exception",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_exception.html#pyedb.dotnet.edb.Edb.edb_exception",
        "title": "edb_exception > edb_exception > edb_exception",
        "section": "edb_exception > edb_exception",
        "text": "Edb.edb_exception(ex_value, tb_data)\n\nWrite the trace stack to AEDT when a Python error occurs.\n\nParameters\n\nex_value\n\n\n\ntb_data\n\n\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.use_q3d_for_dc",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.use_q3d_for_dc.html#use_q3d_for_dc",
        "title": "use_q3d_for_dc",
        "section": "use_q3d_for_dc",
        "text": "Flag indicating if the Q3D solver is used for DC point extraction.\nTrue if Q3d for DC point is used, False otherwise.\nuse_q3d_for_dc\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.use_q3d_for_dc",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.use_q3d_for_dc.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.use_q3d_for_dc",
        "title": "use_q3d_for_dc > use_q3d_for_dc > use_q3d_for_dc",
        "section": "use_q3d_for_dc > use_q3d_for_dc",
        "text": "property SweepData.use_q3d_for_dc\n\nFlag indicating if the Q3D solver is used for DC point extraction.\n\nReturns\n\nbool\n\nTrue if Q3d for DC point is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.import_bom",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.import_bom.html#import_bom",
        "title": "import_bom",
        "section": "import_bom",
        "text": "Load external BOM file.\nFull path to the BOM file, which is a delimited text file.\nValue to use for the delimiter. The default is \",\".\nColumn index of reference designator. The default is \"0\".\nColumn index of part name. The default is \"1\". Set to None if\nthe column does not exist.\nColumn index of component type. The default is \"2\".\nColumn index of value. The default is \"3\". Set to None\nif the column does not exist.\nimport_bom\npython:str\npython:str\noptional\n\",\"\npython:int\noptional\n\"0\"\npython:int\noptional\n\"1\"\nNone\npython:int\noptional\n\"2\"\npython:int\noptional\n\"3\"\nNone"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.import_bom",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.import_bom.html#pyedb.dotnet.database.components.Components.import_bom",
        "title": "import_bom > import_bom > import_bom",
        "section": "import_bom > import_bom",
        "text": "Components.import_bom(bom_file, delimiter=',', refdes_col=0, part_name_col=1, comp_type_col=2, value_col=3)\n\nLoad external BOM file.\n\nParameters\n\nbom_file\n\npython:str\n\nFull path to the BOM file, which is a delimited text file.\n\ndelimiter\n\npython:str, optional\n\nValue to use for the delimiter. The default is \",\".\n\nrefdes_col\n\npython:int, optional\n\nColumn index of reference designator. The default is \"0\".\n\npart_name_col\n\npython:int, optional\n\nColumn index of part name. The default is \"1\". Set to None if\nthe column does not exist.\n\ncomp_type_col\n\npython:int, optional\n\nColumn index of component type. The default is \"2\".\n\nvalue_col\n\npython:int, optional\n\nColumn index of value. The default is \"3\". Set to None\nif the column does not exist.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_port.html#create_port",
        "title": "create_port",
        "section": "create_port",
        "text": "Create a port on the padstack.\nName of the port. The default is None, in which case a name is automatically assigned.\nNegative terminal of the port.\nWhether it is a circuit port.\ncreate_port\npython:str\noptional\nNone\noptional"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_port.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_port",
        "title": "create_port > create_port > create_port",
        "section": "create_port > create_port",
        "text": "EDBPadstackInstance.create_port(name=None, reference=None, is_circuit_port=False)\n\nCreate a port on the padstack.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the port. The default is None, in which case a name is automatically assigned.\n\nreference\n\nclass:pyedb.dotnet.database.edb_data.nets_data.EDBNetsData,             class:pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance,             class:pyedb.dotnet.database.edb_data.sources.PinGroup, optional\n\nNegative terminal of the port.\n\nis_circuit_port\n\nbool, optional\n\nWhether it is a circuit port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.disable_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.disable_rlc_component.html#disable_rlc_component",
        "title": "disable_rlc_component",
        "section": "disable_rlc_component",
        "text": "Disable a RLC component.\nName of the RLC component.\nTrue when successful, False when failed.\ndisable_rlc_component\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.disable_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.disable_rlc_component.html#pyedb.dotnet.database.components.Components.disable_rlc_component",
        "title": "disable_rlc_component > disable_rlc_component > disable_rlc_component",
        "section": "disable_rlc_component > disable_rlc_component",
        "text": "Components.disable_rlc_component(component_name)\n\nDisable a RLC component.\n\nParameters\n\ncomponent_name\n\npython:str\n\nName of the RLC component.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.disable_rlc_component(\"A1\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.set_attributes.html#pyedb.configuration.cfg_operations.CfgOperations.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgOperations.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_nets",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_nets.html#include_nets",
        "title": "include_nets",
        "section": "include_nets",
        "text": "Add Additional Nets for simulation.\ninclude_nets\npython:str\nList\nof\nnet"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_nets",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_nets.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_nets",
        "title": "include_nets > include_nets > include_nets",
        "section": "include_nets > include_nets",
        "text": "property HFSSPISimulationSettings.include_nets\n\nAdd Additional Nets for simulation.\n\nReturns\n\n[python:str]\n\n\n\nList of net name.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.adjust_solder_dielectrics",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.adjust_solder_dielectrics.html#adjust_solder_dielectrics",
        "title": "adjust_solder_dielectrics",
        "section": "adjust_solder_dielectrics",
        "text": "Adjust the stack-up by adding or modifying dielectric layers that contains Solder Balls.\nThis method identifies the solder-ball height and adjust the dielectric thickness on top (or bottom) to fit\nthe thickness in order to merge another layout.\nadjust_solder_dielectrics"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.adjust_solder_dielectrics",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.adjust_solder_dielectrics.html#pyedb.dotnet.database.stackup.Stackup.adjust_solder_dielectrics",
        "title": "adjust_solder_dielectrics > adjust_solder_dielectrics > adjust_solder_dielectrics",
        "section": "adjust_solder_dielectrics > adjust_solder_dielectrics",
        "text": "Stackup.adjust_solder_dielectrics()\n\nAdjust the stack-up by adding or modifying dielectric layers that contains Solder Balls.\nThis method identifies the solder-ball height and adjust the dielectric thickness on top (or bottom) to fit\nthe thickness in order to merge another layout.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_hfss_prop.html#get_hfss_prop",
        "title": "get_hfss_prop",
        "section": "get_hfss_prop",
        "text": "Get HFSS properties.\nMaterial property name.\nIf solve inside.\nget_hfss_prop\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_hfss_prop.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_hfss_prop",
        "title": "get_hfss_prop > get_hfss_prop > get_hfss_prop",
        "section": "get_hfss_prop > get_hfss_prop",
        "text": "EdbPolygon.get_hfss_prop()\n\nGet HFSS properties.\n\nReturns\n\nmaterial\n\npython:str\n\nMaterial property name.\n\nsolve_inside\n\nbool\n\nIf solve inside.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileDielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileDielectric.html#controlfiledielectric",
        "title": "ControlFileDielectric",
        "section": "ControlFileDielectric",
        "text": "ControlFileDielectric"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileDielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileDielectric.html#pyedb.dotnet.database.edb_data.control_file.ControlFileDielectric",
        "title": "ControlFileDielectric > ControlFileDielectric > ControlFileDielectric",
        "section": "ControlFileDielectric > ControlFileDielectric",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileDielectric(name, properties)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.is_read_only",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.is_read_only.html#is_read_only",
        "title": "is_read_only",
        "section": "is_read_only",
        "text": "Determine if the database is open in a read-only mode.\nTrue if Database is open with read only access, otherwise False.\nis_read_only"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.is_read_only",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.is_read_only.html#pyedb.dotnet.edb.Edb.is_read_only",
        "title": "is_read_only > is_read_only > is_read_only",
        "section": "is_read_only > is_read_only",
        "text": "property Edb.is_read_only\n\nDetermine if the database is open in a read-only mode.\n\nReturns\n\nbool\n\nTrue if Database is open with read only access, otherwise False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Hole material.\nMaterial of the hole.\nmaterial\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property EDBPadstack.material\n\nHole material.\n\nReturns\n\npython:str\n\nMaterial of the hole.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent.html#air_box_horizontal_extent",
        "title": "air_box_horizontal_extent",
        "section": "air_box_horizontal_extent",
        "text": "Size of horizontal extent for the air box.\nReturns:\ndotnet.database.edb_data.edbvalue.EdbValue\nair_box_horizontal_extent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent",
        "title": "air_box_horizontal_extent > air_box_horizontal_extent > air_box_horizontal_extent",
        "section": "air_box_horizontal_extent > air_box_horizontal_extent",
        "text": "property HfssExtentInfo.air_box_horizontal_extent\n\nSize of horizontal extent for the air box.\n\nReturns:\ndotnet.database.edb_data.edbvalue.EdbValue\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_angle",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_angle.html#arc_angle",
        "title": "arc_angle",
        "section": "arc_angle",
        "text": "Retrieve the value for the HFSS meshing arc angle.\narc_angle\npython:float\nValue\nof\nthe\narc"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_angle",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_angle.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_angle",
        "title": "arc_angle > arc_angle > arc_angle",
        "section": "arc_angle > arc_angle",
        "text": "property SimulationConfigurationAc.arc_angle\n\nRetrieve the value for the HFSS meshing arc angle.\n\nReturns\n\npython:float\n\n\n\nValue of the arc angle.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "EDB internal simulation setup object.\nsim_setup_info"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.sim_setup_info.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property DCAdvancedSettings.sim_setup_info\n\nEDB internal simulation setup object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_uid",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_uid.html#edb_uid",
        "title": "edb_uid",
        "section": "edb_uid",
        "text": "Get ID of the database.\nThe unique EDB id of the Database.\nedb_uid\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_uid",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_uid.html#pyedb.dotnet.edb.Edb.edb_uid",
        "title": "edb_uid > edb_uid > edb_uid",
        "section": "edb_uid > edb_uid",
        "text": "property Edb.edb_uid\n\nGet ID of the database.\n\nReturns\n\npython:int\n\nThe unique EDB id of the Database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_infinite_ground",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_infinite_ground.html#include_infinite_ground",
        "title": "include_infinite_ground",
        "section": "include_infinite_ground",
        "text": "Whether to Include a ground plane to serve as a voltage reference for traces and planes\nif they are not defined in the layout.\nTrue if infinite ground is used, False otherwise.\ninclude_infinite_ground\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_infinite_ground",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_infinite_ground.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_infinite_ground",
        "title": "include_infinite_ground > include_infinite_ground > include_infinite_ground",
        "section": "include_infinite_ground > include_infinite_ground",
        "text": "property AdvancedSettings.include_infinite_ground\n\nWhether to Include a ground plane to serve as a voltage reference for traces and planes\nif they are not defined in the layout.\n\nReturns\n\nbool\n\nTrue if infinite ground is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_negative_vertical_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_negative_vertical_extent.html#airbox_negative_vertical_extent",
        "title": "airbox_negative_vertical_extent",
        "section": "airbox_negative_vertical_extent",
        "text": "Negative vertical extent of the airbox for HFSS. When absolute dimensions\nare used, the values are in meters.\nairbox_negative_vertical_extent\npython:float\nValue\nof\nthe\nair\nbox\nnegative\nvertical"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_negative_vertical_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_negative_vertical_extent.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_negative_vertical_extent",
        "title": "airbox_negative_vertical_extent > airbox_negative_vertical_extent > airbox_negative_vertical_extent",
        "section": "airbox_negative_vertical_extent > airbox_negative_vertical_extent",
        "text": "property SimulationConfigurationBatch.airbox_negative_vertical_extent\n\nNegative vertical extent of the airbox for HFSS. When absolute dimensions\nare used, the values are in meters.\n\nReturns\n\npython:float\n\n\n\nValue of the air box negative vertical extent.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_config_file",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_config_file.html#dc_report_config_file",
        "title": "dc_report_config_file",
        "section": "dc_report_config_file",
        "text": "DC Report Config File.\ndc_report_config_file\npython:str\npath\nto\nthe\nDC\nreport\nconfiguration"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_config_file",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_config_file.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_config_file",
        "title": "dc_report_config_file > dc_report_config_file > dc_report_config_file",
        "section": "dc_report_config_file > dc_report_config_file",
        "text": "property SiwaveDCIRSettings.dc_report_config_file\n\nDC Report Config File.\n\nReturns\n\npython:str\n\n\n\npath to the DC report configuration file.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.html#hfsssimulationsetup",
        "title": "HfssSimulationSetup",
        "section": "HfssSimulationSetup",
        "text": "Manages EDB methods for HFSS simulation setup.\nHfssSimulationSetup.add_frequency_sweep([...])\nAdd frequency sweep.\nHfssSimulationSetup.add_length_mesh_operation(...)\nAdd a mesh operation to the setup.\nHfssSimulationSetup.add_skin_depth_mesh_operation(...)\nAdd a mesh operation to the setup.\nHfssSimulationSetup.add_sweep([name, ...])\nAdd frequency sweep.\nHfssSimulationSetup.delete()\nDelete current simulation setup.\nHfssSimulationSetup.delete_frequency_sweep(...)\nDelete a frequency sweep.\nHfssSimulationSetup.get_simulation_settings()\n\nHfssSimulationSetup.set_sim_setup_info(...)\n\nHfssSimulationSetup.set_simulation_settings(...)\n\nHfssSimulationSetup.set_solution_broadband([...])\nSet broadband solution.\nHfssSimulationSetup.set_solution_multi_frequencies([...])\nSet multi-frequency solution.\nHfssSimulationSetup.set_solution_single_frequency([...])\nSet single-frequency solution.\nHfssSimulationSetup.adaptive_settings\nAdaptive Settings Class.\nHfssSimulationSetup.advanced_mesh_settings\nAdvanced mesh settings Class.\nHfssSimulationSetup.curve_approx_settings\nCurve approximation settings Class.\nHfssSimulationSetup.dcr_settings\nDcr settings Class.\nHfssSimulationSetup.defeature_settings\nDefeature settings Class.\nHfssSimulationSetup.enabled\nFlag indicating if the setup is enabled.\nHfssSimulationSetup.frequency_sweeps\n\nHfssSimulationSetup.get_sim_setup_info\nGet simulation setup information.\nHfssSimulationSetup.hfss_port_settings\nHFSS port settings Class.\nHfssSimulationSetup.hfss_solver_settings\nManages EDB methods for HFSS solver settings.\nHfssSimulationSetup.is_auto_setup\nFlag indicating if automatic setup is enabled.\nHfssSimulationSetup.is_null\nAdding this property for compatibility with grpc.\nHfssSimulationSetup.mesh_operations\nMesh operations settings Class.\nHfssSimulationSetup.name\nName of the setup.\nHfssSimulationSetup.position\nPosition in the setup list.\nHfssSimulationSetup.setup_type\nType of the setup.\nHfssSimulationSetup.sim_setup_info\n\nHfssSimulationSetup.solver_slider_type\nSolver slider type.\nHfssSimulationSetup.sweep_data\nAdding property for compatibility with grpc.\nHfssSimulationSetup.sweeps\nList of frequency sweeps.\nHfssSimulationSetup.type\n\nHfssSimulationSetup.via_settings\nVia settings Class.\nHfssSimulationSetup\nHfssSimulationSetup.add_frequency_sweep\nHfssSimulationSetup.add_length_mesh_operation\nHfssSimulationSetup.add_skin_depth_mesh_operation\nHfssSimulationSetup.add_sweep\nHfssSimulationSetup.delete\nHfssSimulationSetup.delete_frequency_sweep\nHfssSimulationSetup.get_simulation_settings\nHfssSimulationSetup.set_sim_setup_info\nHfssSimulationSetup.set_simulation_settings\nHfssSimulationSetup.set_solution_broadband\nHfssSimulationSetup.set_solution_multi_frequencies\nHfssSimulationSetup.set_solution_single_frequency\nHfssSimulationSetup.adaptive_settings\nHfssSimulationSetup.advanced_mesh_settings\nHfssSimulationSetup.curve_approx_settings\nHfssSimulationSetup.dcr_settings\nHfssSimulationSetup.defeature_settings\nHfssSimulationSetup.enabled\nHfssSimulationSetup.frequency_sweeps\nHfssSimulationSetup.get_sim_setup_info\nHfssSimulationSetup.hfss_port_settings\nHfssSimulationSetup.hfss_solver_settings\nHfssSimulationSetup.is_auto_setup\nHfssSimulationSetup.is_null\nHfssSimulationSetup.mesh_operations\nHfssSimulationSetup.name\nHfssSimulationSetup.position\nHfssSimulationSetup.setup_type\nHfssSimulationSetup.sim_setup_info\nHfssSimulationSetup.solver_slider_type\nHfssSimulationSetup.sweep_data\nHfssSimulationSetup.sweeps\nHfssSimulationSetup.type\nHfssSimulationSetup.via_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup",
        "title": "HfssSimulationSetup > HfssSimulationSetup > HfssSimulationSetup",
        "section": "HfssSimulationSetup > HfssSimulationSetup",
        "text": "class pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup(pedb, edb_object=None, name: str | None = None)\n\nManages EDB methods for HFSS simulation setup.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nHfssSimulationSetup.add_frequency_sweep([...])\n\nAdd frequency sweep.\n\nHfssSimulationSetup.add_length_mesh_operation(...)\n\nAdd a mesh operation to the setup.\n\nHfssSimulationSetup.add_skin_depth_mesh_operation(...)\n\nAdd a mesh operation to the setup.\n\nHfssSimulationSetup.add_sweep([name, ...])\n\nAdd frequency sweep.\n\nHfssSimulationSetup.delete()\n\nDelete current simulation setup.\n\nHfssSimulationSetup.delete_frequency_sweep(...)\n\nDelete a frequency sweep.\n\nHfssSimulationSetup.get_simulation_settings()\n\n\n\nHfssSimulationSetup.set_sim_setup_info(...)\n\n\n\nHfssSimulationSetup.set_simulation_settings(...)\n\n\n\nHfssSimulationSetup.set_solution_broadband([...])\n\nSet broadband solution.\n\nHfssSimulationSetup.set_solution_multi_frequencies([...])\n\nSet multi-frequency solution.\n\nHfssSimulationSetup.set_solution_single_frequency([...])\n\nSet single-frequency solution.\n\n\n\nAttributes\n\n\n\n\n\n\n\nHfssSimulationSetup.adaptive_settings\n\nAdaptive Settings Class.\n\nHfssSimulationSetup.advanced_mesh_settings\n\nAdvanced mesh settings Class.\n\nHfssSimulationSetup.curve_approx_settings\n\nCurve approximation settings Class.\n\nHfssSimulationSetup.dcr_settings\n\nDcr settings Class.\n\nHfssSimulationSetup.defeature_settings\n\nDefeature settings Class.\n\nHfssSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\nHfssSimulationSetup.frequency_sweeps\n\n\n\nHfssSimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\nHfssSimulationSetup.hfss_port_settings\n\nHFSS port settings Class.\n\nHfssSimulationSetup.hfss_solver_settings\n\nManages EDB methods for HFSS solver settings.\n\nHfssSimulationSetup.is_auto_setup\n\nFlag indicating if automatic setup is enabled.\n\nHfssSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\nHfssSimulationSetup.mesh_operations\n\nMesh operations settings Class.\n\nHfssSimulationSetup.name\n\nName of the setup.\n\nHfssSimulationSetup.position\n\nPosition in the setup list.\n\nHfssSimulationSetup.setup_type\n\nType of the setup.\n\nHfssSimulationSetup.sim_setup_info\n\n\n\nHfssSimulationSetup.solver_slider_type\n\nSolver slider type.\n\nHfssSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\nHfssSimulationSetup.sweeps\n\nList of frequency sweeps.\n\nHfssSimulationSetup.type\n\n\n\nHfssSimulationSetup.via_settings\n\nVia settings Class.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.frequency_sweeps.html#frequency_sweeps",
        "title": "frequency_sweeps",
        "section": "frequency_sweeps",
        "text": "frequency_sweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.frequency_sweeps.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.frequency_sweeps",
        "title": "frequency_sweeps > frequency_sweeps > frequency_sweeps",
        "section": "frequency_sweeps > frequency_sweeps",
        "text": "property SiwaveSimulationSetup.frequency_sweeps\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_num_pass",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_num_pass.html#dc_max_num_pass",
        "title": "dc_max_num_pass",
        "section": "dc_max_num_pass",
        "text": "Retrieve the maximum number of adaptive passes.\nnumber of passes.\ndc_max_num_pass\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_num_pass",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_num_pass.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_num_pass",
        "title": "dc_max_num_pass > dc_max_num_pass > dc_max_num_pass",
        "section": "dc_max_num_pass > dc_max_num_pass",
        "text": "property SimulationConfigurationDc.dc_max_num_pass\n\nRetrieve the maximum number of adaptive passes.\n\nReturns\n\npython:int\n\nnumber of passes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout_3d_placement",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout_3d_placement.html#place_in_layout_3d_placement",
        "title": "place_in_layout_3d_placement",
        "section": "place_in_layout_3d_placement",
        "text": "Place current Cell into another cell using 3d placement method.\nFlip the current layer stackup of a layout if requested. Transform parameters currently not supported.\nCell on which to place the current layout. If None the Cell will be applied on an empty new Cell.\nThe rotation angle applied on the design.\nThe x offset value.\nThe y offset value.\nEither if the current layout is inverted.\nIf True and place_on_top is True the stackup will be flipped before the merge.\nEither if place the current layout on Top or Bottom of destination Layout.\nSolder Ball or Bumps eight.\nThis value will be added to the elevation to align the two layouts.\nTrue when succeed False if not.\nplace_in_layout_3d_placement\nEdb\ndouble\noptional\ndouble\noptional\ndouble\noptional\noptional\noptional\npython:float\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout_3d_placement",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_in_layout_3d_placement.html#pyedb.dotnet.database.stackup.Stackup.place_in_layout_3d_placement",
        "title": "place_in_layout_3d_placement > place_in_layout_3d_placement > place_in_layout_3d_placement",
        "section": "place_in_layout_3d_placement > place_in_layout_3d_placement",
        "text": "Stackup.place_in_layout_3d_placement(edb, angle=0.0, offset_x=0.0, offset_y=0.0, flipped_stackup=True, place_on_top=True, solder_height=0)\n\nPlace current Cell into another cell using 3d placement method.\nFlip the current layer stackup of a layout if requested. Transform parameters currently not supported.\n\nParameters\n\nedb\n\nEdb\n\nCell on which to place the current layout. If None the Cell will be applied on an empty new Cell.\n\nangle\n\ndouble, optional\n\nThe rotation angle applied on the design.\n\noffset_x\n\ndouble, optional\n\nThe x offset value.\n\noffset_y\n\ndouble, optional\n\nThe y offset value.\n\nflipped_stackup\n\nbool, optional\n\nEither if the current layout is inverted.\nIf True and place_on_top is True the stackup will be flipped before the merge.\n\nplace_on_top\n\nbool, optional\n\nEither if place the current layout on Top or Bottom of destination Layout.\n\nsolder_height\n\npython:float, optional\n\nSolder Ball or Bumps eight.\nThis value will be added to the elevation to align the two layouts.\n\nReturns\n\nbool\n\nTrue when succeed False if not.\n\nExamples\n\n>>> edb1 = Edb(edbpath=targetfile1,  edbversion=\"2021.2\")\n>>> edb2 = Edb(edbpath=targetfile2, edbversion=\"2021.2\")\n>>> hosting_cmp = edb1.components.get_component_by_name(\"U100\")\n>>> mounted_cmp = edb2.components.get_component_by_name(\"BGA\")\n>>> edb2.stackup.place_in_layout(edb1.active_cell, angle=0.0, offset_x=\"1mm\",\n...                                   offset_y=\"2mm\", flipped_stackup=False, place_on_top=True,\n...                                   )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_type.html#sweep_type",
        "title": "sweep_type",
        "section": "sweep_type",
        "text": "Retrieve SweepType object for the frequency sweep.\nsweep_type\nSweepType\nThe\nSweepType\nselections\nare\nsupported\nLinear\nand"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_type.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_type",
        "title": "sweep_type > sweep_type > sweep_type",
        "section": "sweep_type > sweep_type",
        "text": "property SimulationConfigurationAc.sweep_type\n\nRetrieve SweepType object for the frequency sweep.\n\nReturns\n\nSweepType\n\n\n\nThe SweepType object,2 selections are supported Linear and LogCount.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_port.html#is_port",
        "title": "is_port",
        "section": "is_port",
        "text": "Whether it is a port.\nis_port"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_port.html#pyedb.dotnet.database.edb_data.ports.WavePort.is_port",
        "title": "is_port > is_port > is_port",
        "section": "is_port > is_port",
        "text": "property WavePort.is_port\n\nWhether it is a port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_dielectric_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_dielectric_material.html#add_dielectric_material",
        "title": "add_dielectric_material",
        "section": "add_dielectric_material",
        "text": "Add a new dielectric material in library.\nName of the new material.\nPermittivity of the new material.\nDielectric loss tangent of the new material.\nadd_dielectric_material\npython:str\npython:str\npython:float\npython:int\noptional\npython:str\npython:float\npython:int\noptional\npyedb.dotnet.database.materials.Material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_dielectric_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_dielectric_material.html#pyedb.dotnet.database.materials.Materials.add_dielectric_material",
        "title": "add_dielectric_material > add_dielectric_material > add_dielectric_material",
        "section": "add_dielectric_material > add_dielectric_material",
        "text": "Materials.add_dielectric_material(name, permittivity, dielectric_loss_tangent, **kwargs)\n\nAdd a new dielectric material in library.\n\nParameters\n\nname\n\npython:str\n\nName of the new material.\n\npermittivity\n\npython:str, python:float, python:int, optional\n\nPermittivity of the new material.\n\ndielectric_loss_tangent\n\npython:str, python:float, python:int, optional\n\nDielectric loss tangent of the new material.\n\nReturns\n\npyedb.dotnet.database.materials.Material\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_simulation_settings.html#get_simulation_settings",
        "title": "get_simulation_settings",
        "section": "get_simulation_settings",
        "text": "get_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_simulation_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_simulation_settings",
        "title": "get_simulation_settings > get_simulation_settings > get_simulation_settings",
        "section": "get_simulation_settings > get_simulation_settings",
        "text": "HFSSPISimulationSetup.get_simulation_settings()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_horizontal_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_horizontal_extent.html#airbox_horizontal_extent",
        "title": "airbox_horizontal_extent",
        "section": "airbox_horizontal_extent",
        "text": "Horizontal extent of the airbox for HFSS. When absolute dimensions are used,\nthe values are in meters.\nairbox_horizontal_extent\npython:float\nValue\nof\nthe\nair\nbox\nhorizontal"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_horizontal_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_horizontal_extent.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_horizontal_extent",
        "title": "airbox_horizontal_extent > airbox_horizontal_extent > airbox_horizontal_extent",
        "section": "airbox_horizontal_extent > airbox_horizontal_extent",
        "text": "property SimulationConfigurationBatch.airbox_horizontal_extent\n\nHorizontal extent of the airbox for HFSS. When absolute dimensions are used,\nthe values are in meters.\n\nReturns\n\npython:float\n\n\n\nValue of the air box horizontal extent.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_slide_position",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_slide_position.html#dc_slide_position",
        "title": "dc_slide_position",
        "section": "dc_slide_position",
        "text": "Retrieve the SIwave DC slide position value.\nThe position value, 0 Optimum speed, 1 balanced, 2 optimum accuracy.\ndc_slide_position\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_slide_position",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_slide_position.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_slide_position",
        "title": "dc_slide_position > dc_slide_position > dc_slide_position",
        "section": "dc_slide_position > dc_slide_position",
        "text": "property SimulationConfigurationDc.dc_slide_position\n\nRetrieve the SIwave DC slide position value.\n\nReturns\n\npython:int\n\nThe position value, 0 Optimum speed, 1 balanced, 2 optimum accuracy.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.export_properties.html#pyedb.configuration.cfg_ports_sources.CfgSource.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgSource.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_vendor_libraries",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_vendor_libraries.html#get_vendor_libraries",
        "title": "get_vendor_libraries",
        "section": "get_vendor_libraries",
        "text": "Retrieve all capacitors and inductors libraries from ANSYS installation (used by Siwave).\npyedb.component_libraries.ansys_components.ComponentPart\n..\nget_vendor_libraries\nComponentLib\nobject\ncontains\nnested\ndictionaries\nto\nnavigate\nthrough\ncomponent\ntype\nvendors\nseries"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_vendor_libraries",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_vendor_libraries.html#pyedb.dotnet.database.components.Components.get_vendor_libraries",
        "title": "get_vendor_libraries > get_vendor_libraries > get_vendor_libraries",
        "section": "get_vendor_libraries > get_vendor_libraries",
        "text": "Components.get_vendor_libraries()\n\nRetrieve all capacitors and inductors libraries from ANSYS installation (used by Siwave).\n\nReturns\n\nComponentLib object contains nested dictionaries to navigate through [component type][vendors][series]\n\n\n\nclass\n\npyedb.component_libraries.ansys_components.ComponentPart\n..\n\nExamples\n\n>>> edbapp = Edb()\n>>> comp_lib = edbapp.components.get_vendor_libraries()\n>>> network = comp_lib.capacitors[\"AVX\"][\"AccuP01005\"][\"C005YJ0R1ABSTR\"].s_parameters\n>>> network.write_touchstone(os.path.join(edbapp.directory, \"test_export.s2p\"))\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.set_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.set_hfss_prop.html#set_hfss_prop",
        "title": "set_hfss_prop",
        "section": "set_hfss_prop",
        "text": "Set HFSS properties.\nMaterial property name to be set.\nWhether to do solve inside.\nset_hfss_prop\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.set_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.set_hfss_prop.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.set_hfss_prop",
        "title": "set_hfss_prop > set_hfss_prop > set_hfss_prop",
        "section": "set_hfss_prop > set_hfss_prop",
        "text": "EdbPolygon.set_hfss_prop(material, solve_inside)\n\nSet HFSS properties.\n\nParameters\n\nmaterial\n\npython:str\n\nMaterial property name to be set.\n\nsolve_inside\n\nbool\n\nWhether to do solve inside.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer.html#via_stop_layer",
        "title": "via_stop_layer",
        "section": "via_stop_layer",
        "text": "Stopping layer.\nName of the stopping layer.\nvia_stop_layer\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_stop_layer",
        "title": "via_stop_layer > via_stop_layer > via_stop_layer",
        "section": "via_stop_layer > via_stop_layer",
        "text": "property EDBPadstack.via_stop_layer\n\nStopping layer.\n\nReturns\n\npython:str\n\nName of the stopping layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.html#cfglayer",
        "title": "CfgLayer",
        "section": "CfgLayer",
        "text": "CfgLayer.get_attributes([exclude])\n\nCfgLayer.set_attributes(pedb_object)\n\nCfgLayer.protected_attributes\n\nCfgLayer\nCfgLayer.get_attributes\nCfgLayer.set_attributes\nCfgLayer.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.html#pyedb.configuration.cfg_stackup.CfgLayer",
        "title": "CfgLayer > CfgLayer > CfgLayer",
        "section": "CfgLayer > CfgLayer",
        "text": "class pyedb.configuration.cfg_stackup.CfgLayer(**kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgLayer.get_attributes([exclude])\n\n\n\nCfgLayer.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgLayer.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_port_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_port_settings.html#hfss_port_settings",
        "title": "hfss_port_settings",
        "section": "hfss_port_settings",
        "text": "HFSS port settings Class.\nhfss_port_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.HfssPortSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_port_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_port_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_port_settings",
        "title": "hfss_port_settings > hfss_port_settings > hfss_port_settings",
        "section": "hfss_port_settings > hfss_port_settings",
        "text": "property HfssSimulationSetup.hfss_port_settings\n\nHFSS port settings Class.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.HfssPortSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.html#edbpadstack",
        "title": "EDBPadstack",
        "section": "EDBPadstack",
        "text": "Manages EDB functionalities for a padstack.\nInherited AEDT object.\nEDBPadstack.convert_to_3d_microvias([...])\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\nEDBPadstack.split_to_microvias()\nConvert actual padstack definition to multiple microvias definitions.\nEDBPadstack.antipad_by_layer\nAnti pad property.\nEDBPadstack.hole_diameter\nHole diameter.\nEDBPadstack.hole_diameter_string\nHole diameter in string format.\nEDBPadstack.hole_finished_size\nFinished hole size.\nEDBPadstack.hole_offset_x\nHole offset for the X axis.\nEDBPadstack.hole_offset_y\nHole offset for the Y axis.\nEDBPadstack.hole_params\nVia Hole parameters values.\nEDBPadstack.hole_plating_ratio\nHole plating ratio.\nEDBPadstack.hole_plating_thickness\nHole plating thickness.\nEDBPadstack.hole_properties\nHole properties.\nEDBPadstack.hole_range\nGet hole range value from padstack definition.\nEDBPadstack.hole_rotation\nHole rotation.\nEDBPadstack.hole_type\nHole type.\nEDBPadstack.instances\nDefinitions Instances.\nEDBPadstack.material\nHole material.\nEDBPadstack.name\nPadstack Definition Name.\nEDBPadstack.pad_by_layer\nRegular pad property.\nEDBPadstack.padstack_instances\nGet all the vias that belongs to active Padstack definition.\nEDBPadstack.thermalpad_by_layer\nThermal pad property.\nEDBPadstack.via_layers\nLayers.\nEDBPadstack.via_start_layer\nStarting layer.\nEDBPadstack.via_stop_layer\nStopping layer.\nEDBPadstack\npython:str\nEDBPadstack.convert_to_3d_microvias\nEDBPadstack.split_to_microvias\nEDBPadstack.antipad_by_layer\nEDBPadstack.hole_diameter\nEDBPadstack.hole_diameter_string\nEDBPadstack.hole_finished_size\nEDBPadstack.hole_offset_x\nEDBPadstack.hole_offset_y\nEDBPadstack.hole_params\nEDBPadstack.hole_plating_ratio\nEDBPadstack.hole_plating_thickness\nEDBPadstack.hole_properties\nEDBPadstack.hole_range\nEDBPadstack.hole_rotation\nEDBPadstack.hole_type\nEDBPadstack.instances\nEDBPadstack.material\nEDBPadstack.name\nEDBPadstack.pad_by_layer\nEDBPadstack.padstack_instances\nEDBPadstack.thermalpad_by_layer\nEDBPadstack.via_layers\nEDBPadstack.via_start_layer\nEDBPadstack.via_stop_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack",
        "title": "EDBPadstack > EDBPadstack > EDBPadstack",
        "section": "EDBPadstack > EDBPadstack",
        "text": "class pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack(edb_padstack, ppadstack)\n\nManages EDB functionalities for a padstack.\n\nParameters\n\nedb_padstack\n\n\n\nppadstack\n\npython:str\n\nInherited AEDT object.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> edb_padstack = edb.padstacks.definitions[\"MyPad\"]\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBPadstack.convert_to_3d_microvias([...])\n\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\n\nEDBPadstack.split_to_microvias()\n\nConvert actual padstack definition to multiple microvias definitions.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBPadstack.antipad_by_layer\n\nAnti pad property.\n\nEDBPadstack.hole_diameter\n\nHole diameter.\n\nEDBPadstack.hole_diameter_string\n\nHole diameter in string format.\n\nEDBPadstack.hole_finished_size\n\nFinished hole size.\n\nEDBPadstack.hole_offset_x\n\nHole offset for the X axis.\n\nEDBPadstack.hole_offset_y\n\nHole offset for the Y axis.\n\nEDBPadstack.hole_params\n\nVia Hole parameters values.\n\nEDBPadstack.hole_plating_ratio\n\nHole plating ratio.\n\nEDBPadstack.hole_plating_thickness\n\nHole plating thickness.\n\nEDBPadstack.hole_properties\n\nHole properties.\n\nEDBPadstack.hole_range\n\nGet hole range value from padstack definition.\n\nEDBPadstack.hole_rotation\n\nHole rotation.\n\nEDBPadstack.hole_type\n\nHole type.\n\nEDBPadstack.instances\n\nDefinitions Instances.\n\nEDBPadstack.material\n\nHole material.\n\nEDBPadstack.name\n\nPadstack Definition Name.\n\nEDBPadstack.pad_by_layer\n\nRegular pad property.\n\nEDBPadstack.padstack_instances\n\nGet all the vias that belongs to active Padstack definition.\n\nEDBPadstack.thermalpad_by_layer\n\nThermal pad property.\n\nEDBPadstack.via_layers\n\nLayers.\n\nEDBPadstack.via_start_layer\n\nStarting layer.\n\nEDBPadstack.via_stop_layer\n\nStopping layer.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_layers_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_layers_from_db.html#get_layers_from_db",
        "title": "get_layers_from_db",
        "section": "get_layers_from_db",
        "text": "get_layers_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_layers_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_layers_from_db.html#pyedb.configuration.cfg_stackup.CfgStackup.get_layers_from_db",
        "title": "get_layers_from_db > get_layers_from_db > get_layers_from_db",
        "section": "get_layers_from_db > get_layers_from_db",
        "text": "CfgStackup.get_layers_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_attributes.html#pyedb.configuration.cfg_operations.CfgCutout.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgCutout.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_name.html#layer_name",
        "title": "layer_name",
        "section": "layer_name",
        "text": "Get the primitive layer name.\nlayer_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_name.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer_name",
        "title": "layer_name > layer_name > layer_name",
        "section": "layer_name > layer_name",
        "text": "property EDBPadstackInstance.layer_name\n\nGet the primitive layer name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_pad_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_pad_area_to_mesh.html#min_pad_area_to_mesh",
        "title": "min_pad_area_to_mesh",
        "section": "min_pad_area_to_mesh",
        "text": "Retrieve the value of minimum pad area to be meshed by Siwave.\nmin_pad_area_to_mesh\nflot\nValue\nof\nminimum\npad"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_pad_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_pad_area_to_mesh.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_pad_area_to_mesh",
        "title": "min_pad_area_to_mesh > min_pad_area_to_mesh > min_pad_area_to_mesh",
        "section": "min_pad_area_to_mesh > min_pad_area_to_mesh",
        "text": "property SimulationConfigurationAc.min_pad_area_to_mesh\n\nRetrieve the value of minimum pad area to be meshed by Siwave.\n\nReturns\n\nflot\n\n\n\nValue of minimum pad surface.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.position.html#position",
        "title": "position",
        "section": "position",
        "text": "Position in the setup list.\nposition"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.position.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property HFSSPISimulationSetup.position\n\nPosition in the setup list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_simulation_settings.html#set_simulation_settings",
        "title": "set_simulation_settings",
        "section": "set_simulation_settings",
        "text": "set_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_simulation_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_simulation_settings",
        "title": "set_simulation_settings > set_simulation_settings > set_simulation_settings",
        "section": "set_simulation_settings > set_simulation_settings",
        "text": "HfssSimulationSetup.set_simulation_settings(sim_settings: dict)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_attributes.html#pyedb.configuration.cfg_ports_sources.CfgPort.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgPort.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.MultiFrequency",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.MultiFrequency.html#multifrequency",
        "title": "MultiFrequency",
        "section": "MultiFrequency",
        "text": "MultiFrequency"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.MultiFrequency",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.MultiFrequency.html#pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.MultiFrequency",
        "title": "MultiFrequency > MultiFrequency > MultiFrequency",
        "section": "MultiFrequency > MultiFrequency",
        "text": "AdaptiveType.MultiFrequency = 1\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_custom_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_custom_settings.html#use_custom_settings",
        "title": "use_custom_settings",
        "section": "use_custom_settings",
        "text": "Custom settings to use.\nuse_custom_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_custom_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_custom_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.use_custom_settings",
        "title": "use_custom_settings > use_custom_settings > use_custom_settings",
        "section": "use_custom_settings > use_custom_settings",
        "text": "property SiwaveSimulationSetup.use_custom_settings\n\nCustom settings to use.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.shape_to_polygon_data",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.shape_to_polygon_data.html#shape_to_polygon_data",
        "title": "shape_to_polygon_data",
        "section": "shape_to_polygon_data",
        "text": "Convert a shape to polygon data.\nType of the shape to convert. Options are \"rectangle\" and \"polygon\".\nshape_to_polygon_data\npyedb.dotnet.database.modeler.Modeler.Shape\n\"rectangle\"\n\"polygon\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.shape_to_polygon_data",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.shape_to_polygon_data.html#pyedb.dotnet.database.modeler.Modeler.shape_to_polygon_data",
        "title": "shape_to_polygon_data > shape_to_polygon_data > shape_to_polygon_data",
        "section": "shape_to_polygon_data > shape_to_polygon_data",
        "text": "Modeler.shape_to_polygon_data(shape)\n\nConvert a shape to polygon data.\n\nParameters\n\nshape\n\npyedb.dotnet.database.modeler.Modeler.Shape\n\nType of the shape to convert. Options are \"rectangle\" and \"polygon\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Variable name.\nname\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.name.html#pyedb.dotnet.database.edb_data.edbvalue.EdbValue.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EdbValue.name\n\nVariable name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Edb Dotnet Api Database net.name and  Net.SetName().\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.name.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EDBNetsData.name\n\nEdb Dotnet Api Database net.name and  Net.SetName().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.type.html#type",
        "title": "type",
        "section": "type",
        "text": "Return the type of the primitive.\nExpected output is among \"Circle\", \"Rectangle\",``”Polygon”,”Path”`` or \"Bondwire\".\ntype\n\"Circle\"\n\"Rectangle\"\n,\n\"Bondwire\"\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property EDBPadstackInstance.type\n\nReturn the type of the primitive.\n\nExpected output is among \"Circle\", \"Rectangle\",``”Polygon”,”Path”`` or \"Bondwire\".\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_bondwires",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_bondwires.html#mesh_bondwires",
        "title": "mesh_bondwires",
        "section": "mesh_bondwires",
        "text": "Mesh bondwires.\nmesh_bondwires"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_bondwires",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_bondwires.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_bondwires",
        "title": "mesh_bondwires > mesh_bondwires > mesh_bondwires",
        "section": "mesh_bondwires > mesh_bondwires",
        "text": "property DCAdvancedSettings.mesh_bondwires\n\nMesh bondwires.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.get_configurations.html#get_configurations",
        "title": "get_configurations",
        "section": "get_configurations",
        "text": "Get all attributes.\nget_configurations\npython:dict"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.get_configurations",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.get_configurations.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.get_configurations",
        "title": "get_configurations > get_configurations > get_configurations",
        "section": "get_configurations > get_configurations",
        "text": "DCAdvancedSettings.get_configurations()\n\nGet all attributes.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_point.html#get_closest_point",
        "title": "get_closest_point",
        "section": "get_closest_point",
        "text": "Get the closest point of the primitive to the input data.\nget_closest_point\npython:list\nof\npython:float\nPointData\npython:list\nof\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_point.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_point",
        "title": "get_closest_point > get_closest_point > get_closest_point",
        "section": "get_closest_point > get_closest_point",
        "text": "EDBPadstackInstance.get_closest_point(point)\n\nGet the closest point of the primitive to the input data.\n\nParameters\n\npoint\n\npython:list of python:float or PointData\n\n\n\nReturns\n\npython:list of python:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete current simulation setup.\ndelete"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "SiwaveDCSimulationSetup.delete()\n\nDelete current simulation setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/build_simulation_project/index",
        "href": "user_guide/build_simulation_project/index.html#build-simulation-projects",
        "title": "Build simulation projects",
        "section": "Build simulation projects",
        "text": "Learn how to clip a design based on net selection to reduce computer resources and speed up the simulation.\nLearn build an signal integrity project.\nBuild simulation projects"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.attach",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.attach.html#attach",
        "title": "attach",
        "section": "attach",
        "text": "Attach the database to existing AEDT instance.\nattach"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.attach",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.attach.html#pyedb.dotnet.edb.Edb.attach",
        "title": "attach > attach > attach",
        "section": "attach > attach",
        "text": "Edb.attach(hdb)\n\nAttach the database to existing AEDT instance.\n\nParameters\n\nhdb\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bbox",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bbox.html#bbox",
        "title": "bbox",
        "section": "bbox",
        "text": "Return the primitive bounding box points. Lower left corner, upper right corner.\n[lower_left x, lower_left y, upper right x, upper right y]\nbbox\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bbox",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bbox.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bbox",
        "title": "bbox > bbox > bbox",
        "section": "bbox > bbox",
        "text": "property EDBPadstackInstance.bbox\n\nReturn the primitive bounding box points. Lower left corner, upper right corner.\n\nReturns\n\npython:list\n\n[lower_left x, lower_left y, upper right x, upper right y]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_maxwell",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_maxwell.html#export_maxwell",
        "title": "export_maxwell",
        "section": "export_maxwell",
        "text": "Export EDB to Maxwell 3D.\nFull path and name for saving the AEDT file.\nList of nets to export only if certain ones are to be\nexported. The default is None, in which case all nets are exported.\nNumber of cores to use for the export. The default is None.\nName of the AEDT output file without the .aedt extension. The default is None,\nin which case the default name is used.\nOpen Siwave in embedding mode. User will only see Siwave Icon but UI will be hidden.\nFull path to the AEDT file.\nexport_maxwell\npython:str\npython:list\noptional\nNone\npython:int\noptional\nNone.\npython:str\noptional\n.aedt\nNone\noptional\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_maxwell",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_maxwell.html#pyedb.dotnet.edb.Edb.export_maxwell",
        "title": "export_maxwell > export_maxwell > export_maxwell",
        "section": "export_maxwell > export_maxwell",
        "text": "Edb.export_maxwell(path_to_output, net_list=None, num_cores=None, aedt_file_name=None, hidden=False)\n\nExport EDB to Maxwell 3D.\n\nParameters\n\npath_to_output\n\npython:str\n\nFull path and name for saving the AEDT file.\n\nnet_list\n\npython:list, optional\n\nList of nets to export only if certain ones are to be\nexported. The default is None, in which case all nets are exported.\n\nnum_cores\n\npython:int, optional\n\nNumber of cores to use for the export. The default is None.\n\naedt_file_name\n\npython:str, optional\n\nName of the AEDT output file without the .aedt extension. The default is None,\nin which case the default name is used.\n\nhidden\n\nbool, optional\n\nOpen Siwave in embedding mode. User will only see Siwave Icon but UI will be hidden.\n\nReturns\n\npython:str\n\nFull path to the AEDT file.\n\nExamples\n\n>>> from pyedb import Edb\n\n>>> edb = Edb(edbpath=r\"C:      emp\\myproject.aedb\", edbversion=\"2021.2\")\n\n>>> options_config = {'UNITE_NETS' : 1, 'LAUNCH_Q3D' : 0}\n>>> edb.write_export3d_option_config_file(r\"C:  emp\", options_config)\n>>> edb.export_maxwell(r\"C:     emp\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.html#hfsspisimulationsettings",
        "title": "HFSSPISimulationSettings",
        "section": "HFSSPISimulationSettings",
        "text": "HFSSPISimulationSettings.auto_select_nets_for_simulation\nAuto select nets for simulation.\nHFSSPISimulationSettings.enabled\n\nHFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets\nAuto select Nets for simulation\nHFSSPISimulationSettings.ignore_small_holes\nIgnore small holes choice.\nHFSSPISimulationSettings.ignore_small_holes_min_diameter\nMin diameter to ignore small holes.\nHFSSPISimulationSettings.improved_loss_model\nImproved Loss Model on power ground nets option.\nHFSSPISimulationSettings.include_enhanced_bond_wire_modeling\nEnhance Bond wire modeling.\nHFSSPISimulationSettings.include_nets\nAdd Additional Nets for simulation.\nHFSSPISimulationSettings.min_plane_area_to_mesh\nThe minimum area below which geometry is ignored.\nHFSSPISimulationSettings.min_void_area_to_mesh\nThe minimum area below which voids are ignored.\nHFSSPISimulationSettings.model_type\nModel Type setting.\nHFSSPISimulationSettings.perform_erc\nPerform ERC\nHFSSPISimulationSettings.pi_slider_pos\nThe Simulation Preference Slider setting Model type: ``0``= balanced, ``1``=Accuracy. Returns -------     int.\nHFSSPISimulationSettings.rms_surface_roughness\nRMS Surface Roughness setting\nHFSSPISimulationSettings.signal_nets_conductor_modeling\nConductor Modeling.\nHFSSPISimulationSettings.signal_nets_error_tolerance\nError Tolerance\nHFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement\n\nHFSSPISimulationSettings.signal_nets_include_improved_loss_handling\nImproved Dielectric Fill Refinement choice.\nHFSSPISimulationSettings.snap_length_threshold\n\nHFSSPISimulationSettings.surface_roughness_model\nChosen Model setting Model allowed, \"None\", \"Exponential\" or \"Hammerstad\".\nHFSSPISimulationSettings\nHFSSPISimulationSettings.auto_select_nets_for_simulation\nHFSSPISimulationSettings.enabled\nHFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets\nHFSSPISimulationSettings.ignore_small_holes\nHFSSPISimulationSettings.ignore_small_holes_min_diameter\nHFSSPISimulationSettings.improved_loss_model\nHFSSPISimulationSettings.include_enhanced_bond_wire_modeling\nHFSSPISimulationSettings.include_nets\nHFSSPISimulationSettings.min_plane_area_to_mesh\nHFSSPISimulationSettings.min_void_area_to_mesh\nHFSSPISimulationSettings.model_type\nHFSSPISimulationSettings.perform_erc\nHFSSPISimulationSettings.pi_slider_pos\nHFSSPISimulationSettings.rms_surface_roughness\nHFSSPISimulationSettings.signal_nets_conductor_modeling\nHFSSPISimulationSettings.signal_nets_error_tolerance\nHFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement\nHFSSPISimulationSettings.signal_nets_include_improved_loss_handling\nHFSSPISimulationSettings.snap_length_threshold\nHFSSPISimulationSettings.surface_roughness_model\n\"None\"\n\"Exponential\"\n\"Hammerstad\""
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings",
        "title": "HFSSPISimulationSettings > HFSSPISimulationSettings > HFSSPISimulationSettings",
        "section": "HFSSPISimulationSettings > HFSSPISimulationSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings(pedb, sim_setup, edb_object)\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nHFSSPISimulationSettings.auto_select_nets_for_simulation\n\nAuto select nets for simulation.\n\nHFSSPISimulationSettings.enabled\n\n\n\nHFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets\n\nAuto select Nets for simulation\n\nHFSSPISimulationSettings.ignore_small_holes\n\nIgnore small holes choice.\n\nHFSSPISimulationSettings.ignore_small_holes_min_diameter\n\nMin diameter to ignore small holes.\n\nHFSSPISimulationSettings.improved_loss_model\n\nImproved Loss Model on power ground nets option.\n\nHFSSPISimulationSettings.include_enhanced_bond_wire_modeling\n\nEnhance Bond wire modeling.\n\nHFSSPISimulationSettings.include_nets\n\nAdd Additional Nets for simulation.\n\nHFSSPISimulationSettings.min_plane_area_to_mesh\n\nThe minimum area below which geometry is ignored.\n\nHFSSPISimulationSettings.min_void_area_to_mesh\n\nThe minimum area below which voids are ignored.\n\nHFSSPISimulationSettings.model_type\n\nModel Type setting.\n\nHFSSPISimulationSettings.perform_erc\n\nPerform ERC\n\nHFSSPISimulationSettings.pi_slider_pos\n\nThe Simulation Preference Slider setting Model type: ``0``= balanced, ``1``=Accuracy. Returns -------     int.\n\nHFSSPISimulationSettings.rms_surface_roughness\n\nRMS Surface Roughness setting\n\nHFSSPISimulationSettings.signal_nets_conductor_modeling\n\nConductor Modeling.\n\nHFSSPISimulationSettings.signal_nets_error_tolerance\n\nError Tolerance\n\nHFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement\n\n\n\nHFSSPISimulationSettings.signal_nets_include_improved_loss_handling\n\nImproved Dielectric Fill Refinement choice.\n\nHFSSPISimulationSettings.snap_length_threshold\n\n\n\nHFSSPISimulationSettings.surface_roughness_model\n\nChosen Model setting Model allowed, \"None\", \"Exponential\" or \"Hammerstad\".\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.type.html#type",
        "title": "type",
        "section": "type",
        "text": "Type of the edb object.\ntype"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.type.html#pyedb.dotnet.database.edb_data.ports.WavePort.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property WavePort.type\n\nType of the edb object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.get_data_from_db.html#pyedb.configuration.cfg_pin_groups.CfgPinGroups.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgPinGroups.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_type.html#cutout_subdesign_type",
        "title": "cutout_subdesign_type",
        "section": "cutout_subdesign_type",
        "text": "Retrieve the CutoutSubdesignType selection for clipping the design.\ncutout_subdesign_type\nCutoutSubdesignType\nobject"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_type.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_type",
        "title": "cutout_subdesign_type > cutout_subdesign_type > cutout_subdesign_type",
        "section": "cutout_subdesign_type > cutout_subdesign_type",
        "text": "property SimulationConfigurationBatch.cutout_subdesign_type\n\nRetrieve the CutoutSubdesignType selection for clipping the design.\n\nReturns\n\nCutoutSubdesignType object\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize.html#renormalize",
        "title": "renormalize",
        "section": "renormalize",
        "text": "Whether renormalize is active.\nrenormalize"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize.html#pyedb.dotnet.database.edb_data.ports.GapPort.renormalize",
        "title": "renormalize > renormalize > renormalize",
        "section": "renormalize > renormalize",
        "text": "property GapPort.renormalize\n\nWhether renormalize is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.terminal.html#terminal",
        "title": "terminal",
        "section": "terminal",
        "text": "Terminal.\nterminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.terminal.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.terminal",
        "title": "terminal > terminal > terminal",
        "section": "terminal > terminal",
        "text": "property EDBPadstackInstance.terminal\n\nTerminal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweep_data.html#sweep_data",
        "title": "sweep_data",
        "section": "sweep_data",
        "text": "Adding property for compatibility with grpc.\nsweep_data"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweep_data.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sweep_data",
        "title": "sweep_data > sweep_data > sweep_data",
        "section": "sweep_data > sweep_data",
        "text": "property SimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_extents",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_extents.html#configure_hfss_extents",
        "title": "configure_hfss_extents",
        "section": "configure_hfss_extents",
        "text": "Configure the HFSS extent box.\nEdb_DATA.SimulationConfiguration object\nTrue when succeeded, False when failed.\nconfigure_hfss_extents"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_extents",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_extents.html#pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_extents",
        "title": "configure_hfss_extents > configure_hfss_extents > configure_hfss_extents",
        "section": "configure_hfss_extents > configure_hfss_extents",
        "text": "EdbHfss.configure_hfss_extents(simulation_setup=None)\n\nConfigure the HFSS extent box.\n\nParameters\n\nsimulation_setup\n\nEdb_DATA.SimulationConfiguration object\n\nReturns\n\nbool\n\nTrue when succeeded, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Create a Database at the specified file location.\nPath to top-level database folder\ncreate\npython:str\nDatabase"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create.html#pyedb.dotnet.edb.Edb.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "Edb.create(db_path)\n\nCreate a Database at the specified file location.\n\nParameters\n\ndb_path\n\npython:str\n\nPath to top-level database folder\n\nReturns\n\nDatabase\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_net_connection_info",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_net_connection_info.html#get_component_net_connection_info",
        "title": "get_component_net_connection_info",
        "section": "get_component_net_connection_info",
        "text": "Retrieve net connection information.\nReference designator for the net.\nDictionary of the net connection information for the reference designator.\nget_component_net_connection_info\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_net_connection_info",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_net_connection_info.html#pyedb.dotnet.database.components.Components.get_component_net_connection_info",
        "title": "get_component_net_connection_info > get_component_net_connection_info > get_component_net_connection_info",
        "section": "get_component_net_connection_info > get_component_net_connection_info",
        "text": "Components.get_component_net_connection_info(refdes)\n\nRetrieve net connection information.\n\nParameters\n\nrefdes\n\nReference designator for the net.\n\nReturns\n\npython:dict\n\nDictionary of the net connection information for the reference designator.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_component_net_connection_info(refdes)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.ac_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.ac_settings.html#ac_settings",
        "title": "ac_settings",
        "section": "ac_settings",
        "text": "AC Settings class.\nac_settings\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.ac_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.ac_settings.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.ac_settings",
        "title": "ac_settings > ac_settings > ac_settings",
        "section": "ac_settings > ac_settings",
        "text": "property SimulationConfiguration.ac_settings: SimulationConfigurationAc\n\nAC Settings class.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.circles",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.circles.html#circles",
        "title": "circles",
        "section": "circles",
        "text": "Circles.\nList of circles.\ncircles\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.circles",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.circles.html#pyedb.dotnet.database.modeler.Modeler.circles",
        "title": "circles > circles > circles",
        "section": "circles > circles",
        "text": "property Modeler.circles\n\nCircles.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nList of circles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.excitations",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.excitations.html#excitations",
        "title": "excitations",
        "section": "excitations",
        "text": "Get all excitations.\nexcitations"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.excitations",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.excitations.html#pyedb.dotnet.database.siwave.EdbSiwave.excitations",
        "title": "excitations > excitations > excitations",
        "section": "excitations > excitations",
        "text": "property EdbSiwave.excitations\n\nGet all excitations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.longest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.longest_arc.html#longest_arc",
        "title": "longest_arc",
        "section": "longest_arc",
        "text": "Get the longest arc.\nlongest_arc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.longest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.longest_arc.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.longest_arc",
        "title": "longest_arc > longest_arc > longest_arc",
        "section": "longest_arc > longest_arc",
        "text": "property EDBPadstackInstance.longest_arc\n\nGet the longest arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.color",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.color.html#color",
        "title": "color",
        "section": "color",
        "text": "Color of the layer.\nRGB.\ncolor\npython:tuple"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.color",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.color.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.color",
        "title": "color > color > color",
        "section": "color > color",
        "text": "property LayerEdbClass.color\n\nColor of the layer.\n\nReturns\n\npython:tuple\n\nRGB.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.scale",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.scale.html#scale",
        "title": "scale",
        "section": "scale",
        "text": "Uniformly scale all geometry and their locations by a positive factor.\nAmount that coordinates are multiplied by.\nscale\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.scale",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.scale.html#pyedb.dotnet.edb.Edb.scale",
        "title": "scale > scale > scale",
        "section": "scale > scale",
        "text": "Edb.scale(scale_factor)\n\nUniformly scale all geometry and their locations by a positive factor.\n\nParameters\n\nscale_factor\n\npython:float\n\nAmount that coordinates are multiplied by.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_vertical_circuit_port_on_clipped_traces",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_vertical_circuit_port_on_clipped_traces.html#create_vertical_circuit_port_on_clipped_traces",
        "title": "create_vertical_circuit_port_on_clipped_traces",
        "section": "create_vertical_circuit_port_on_clipped_traces",
        "text": "Create an edge port on clipped signal traces.\nString of one net or EDB net or a list of multiple nets or EDB nets.\nName or EDB reference net.\nUse this point list or PolygonData object to check if ports are at this polygon border.\nNested list of str, with net name as first value, X value for point at border, Y value for point at border,\nand terminal name.\ncreate_vertical_circuit_port_on_clipped_traces\npython:list\noptional\npython:str\nEdb\nx\ny\nEDB\nPolygonData\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_vertical_circuit_port_on_clipped_traces",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_vertical_circuit_port_on_clipped_traces.html#pyedb.dotnet.database.hfss.EdbHfss.create_vertical_circuit_port_on_clipped_traces",
        "title": "create_vertical_circuit_port_on_clipped_traces > create_vertical_circuit_port_on_clipped_traces > create_vertical_circuit_port_on_clipped_traces",
        "section": "create_vertical_circuit_port_on_clipped_traces > create_vertical_circuit_port_on_clipped_traces",
        "text": "EdbHfss.create_vertical_circuit_port_on_clipped_traces(nets=None, reference_net=None, user_defined_extent=None)\n\nCreate an edge port on clipped signal traces.\n\nParameters\n\nnets\n\npython:list, optional\n\nString of one net or EDB net or a list of multiple nets or EDB nets.\n\nreference_net\n\npython:str, Edb net.\n\nName or EDB reference net.\n\nuser_defined_extent\n\n[x, y], EDB PolygonData\n\nUse this point list or PolygonData object to check if ports are at this polygon border.\n\nReturns\n\n[[python:str]]\n\nNested list of str, with net name as first value, X value for point at border, Y value for point at border,\nand terminal name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.id.html#id",
        "title": "id",
        "section": "id",
        "text": "Primitive ID.\nid\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.id.html#pyedb.dotnet.database.edb_data.ports.WavePort.id",
        "title": "id > id > id",
        "section": "id > id",
        "text": "property WavePort.id\n\nPrimitive ID.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties.html#hole_properties",
        "title": "hole_properties",
        "section": "hole_properties",
        "text": "Hole properties.\nList of float values for hole properties.\nhole_properties\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_properties",
        "title": "hole_properties > hole_properties > hole_properties",
        "section": "hole_properties > hole_properties",
        "text": "property EDBPadstack.hole_properties\n\nHole properties.\n\nReturns\n\npython:list\n\nList of float values for hole properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.auto_removal_sliver_poly",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.auto_removal_sliver_poly.html#auto_removal_sliver_poly",
        "title": "auto_removal_sliver_poly",
        "section": "auto_removal_sliver_poly",
        "text": "auto_removal_sliver_poly"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.auto_removal_sliver_poly",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.auto_removal_sliver_poly.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.auto_removal_sliver_poly",
        "title": "auto_removal_sliver_poly > auto_removal_sliver_poly > auto_removal_sliver_poly",
        "section": "auto_removal_sliver_poly > auto_removal_sliver_poly",
        "text": "property RaptorXSimulationAdvancedSettings.auto_removal_sliver_poly\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_string",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_string.html#value_string",
        "title": "value_string",
        "section": "value_string",
        "text": "Get/Set the value of this variable.\nvalue_string\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_string",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_string.html#pyedb.dotnet.database.edb_data.variables.Variable.value_string",
        "title": "value_string > value_string > value_string",
        "section": "value_string > value_string",
        "text": "property Variable.value_string\n\nGet/Set the value of this variable.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_simulation_settings.html#set_simulation_settings",
        "title": "set_simulation_settings",
        "section": "set_simulation_settings",
        "text": "set_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_simulation_settings.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_simulation_settings",
        "title": "set_simulation_settings > set_simulation_settings > set_simulation_settings",
        "section": "set_simulation_settings > set_simulation_settings",
        "text": "SimulationSetup.set_simulation_settings(sim_settings: dict)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.decade_count",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.decade_count.html#decade_count",
        "title": "decade_count",
        "section": "decade_count",
        "text": "Retrieve decade count number for the frequency sweep in case of a log sweep selected.\ndecade_count\npython:int\nThe\nvalue\nof\nthe\ndecade\ncount"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.decade_count",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.decade_count.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.decade_count",
        "title": "decade_count > decade_count > decade_count",
        "section": "decade_count > decade_count",
        "text": "property SimulationConfigurationAc.decade_count\n\nRetrieve decade count number for the frequency sweep in case of a log sweep selected.\n\nReturns\n\npython:int\n\n\n\nThe value of the decade count number.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_passivity",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_passivity.html#enforce_passivity",
        "title": "enforce_passivity",
        "section": "enforce_passivity",
        "text": "Flag indicating if passivity is enforced.\nTrue if enforce passivity is used, False otherwise.\nenforce_passivity\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_passivity",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_passivity.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_passivity",
        "title": "enforce_passivity > enforce_passivity > enforce_passivity",
        "section": "enforce_passivity > enforce_passivity",
        "text": "property SweepData.enforce_passivity\n\nFlag indicating if passivity is enforced.\n\nReturns\n\nbool\n\nTrue if enforce passivity is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin.html#create_current_source_on_pin",
        "title": "create_current_source_on_pin",
        "section": "create_current_source_on_pin",
        "text": "Create a current source.\nPositive pin.\nNegative pin.\nValue for the current. The default is 0.1.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nSource Name.\ncreate_current_source_on_pin\nObject\nObject\npython:float\noptional\n0.1\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin.html#pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_pin",
        "title": "create_current_source_on_pin > create_current_source_on_pin > create_current_source_on_pin",
        "section": "create_current_source_on_pin > create_current_source_on_pin",
        "text": "EdbSiwave.create_current_source_on_pin(pos_pin, neg_pin, current_value=0.1, phase_value=0, source_name='')\n\nCreate a current source.\n\nParameters\n\npos_pin\n\nObject\n\nPositive pin.\n\nneg_pin\n\nObject\n\nNegative pin.\n\ncurrent_value\n\npython:float, optional\n\nValue for the current. The default is 0.1.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nSource Name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> pins = edbapp.components.get_pin_from_component(\"U2A5\")\n>>> edbapp.siwave.create_current_source_on_pin(pins[0], pins[1], 50, \"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.html#cfgnearestpinterminalinfo",
        "title": "CfgNearestPinTerminalInfo",
        "section": "CfgNearestPinTerminalInfo",
        "text": "CfgNearestPinTerminalInfo.export_properties()\n\nCfgNearestPinTerminalInfo.get_attributes([...])\n\nCfgNearestPinTerminalInfo.set_attributes(...)\n\nCfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES\n\nCfgNearestPinTerminalInfo.protected_attributes\n\nCfgNearestPinTerminalInfo\nCfgNearestPinTerminalInfo.export_properties\nCfgNearestPinTerminalInfo.get_attributes\nCfgNearestPinTerminalInfo.set_attributes\nCfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES\nCfgNearestPinTerminalInfo.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.html#pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo",
        "title": "CfgNearestPinTerminalInfo > CfgNearestPinTerminalInfo > CfgNearestPinTerminalInfo",
        "section": "CfgNearestPinTerminalInfo > CfgNearestPinTerminalInfo",
        "text": "class pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo(pedb, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgNearestPinTerminalInfo.export_properties()\n\n\n\nCfgNearestPinTerminalInfo.get_attributes([...])\n\n\n\nCfgNearestPinTerminalInfo.set_attributes(...)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES\n\n\n\nCfgNearestPinTerminalInfo.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_sizefactor",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_sizefactor.html#mesh_sizefactor",
        "title": "mesh_sizefactor",
        "section": "mesh_sizefactor",
        "text": "Retrieve the Mesh Size factor value.\nmesh_sizefactor\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_sizefactor",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_sizefactor.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_sizefactor",
        "title": "mesh_sizefactor > mesh_sizefactor > mesh_sizefactor",
        "section": "mesh_sizefactor > mesh_sizefactor",
        "text": "property SimulationConfigurationAc.mesh_sizefactor\n\nRetrieve the Mesh Size factor value.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.id.html#id",
        "title": "id",
        "section": "id",
        "text": "Primitive ID.\nid\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.id.html#pyedb.dotnet.database.edb_data.ports.GapPort.id",
        "title": "id > id > id",
        "section": "id > id",
        "text": "property GapPort.id\n\nPrimitive ID.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_class.html#api_class",
        "title": "api_class",
        "section": "api_class",
        "text": "Return Ansys.Ansoft.Edb class object.\napi_class"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_class.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_class",
        "title": "api_class > api_class > api_class",
        "section": "api_class > api_class",
        "text": "property EDBDifferentialPairData.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.html#simulationsetuptype",
        "title": "SimulationSetupType",
        "section": "SimulationSetupType",
        "text": "An enumeration.\nSimulationSetupType.kHFSS\n\nSimulationSetupType.kPEM\n\nSimulationSetupType.kSIwave\n\nSimulationSetupType.kLNA\n\nSimulationSetupType.kTransient\n\nSimulationSetupType.kQEye\n\nSimulationSetupType.kVEye\n\nSimulationSetupType.kAMI\n\nSimulationSetupType.kAnalysisOption\n\nSimulationSetupType.kSIwaveDCIR\n\nSimulationSetupType.kSIwaveEMI\n\nSimulationSetupType.kHFSSPI\n\nSimulationSetupType.kDDRwizard\n\nSimulationSetupType.kQ3D\n\nSimulationSetupType\nSimulationSetupType.kHFSS\nSimulationSetupType.kPEM\nSimulationSetupType.kSIwave\nSimulationSetupType.kLNA\nSimulationSetupType.kTransient\nSimulationSetupType.kQEye\nSimulationSetupType.kVEye\nSimulationSetupType.kAMI\nSimulationSetupType.kAnalysisOption\nSimulationSetupType.kSIwaveDCIR\nSimulationSetupType.kSIwaveEMI\nSimulationSetupType.kHFSSPI\nSimulationSetupType.kDDRwizard\nSimulationSetupType.kQ3D"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType",
        "title": "SimulationSetupType > SimulationSetupType > SimulationSetupType",
        "section": "SimulationSetupType > SimulationSetupType",
        "text": "class pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType(value)\n\nAn enumeration.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nSimulationSetupType.kHFSS\n\n\n\nSimulationSetupType.kPEM\n\n\n\nSimulationSetupType.kSIwave\n\n\n\nSimulationSetupType.kLNA\n\n\n\nSimulationSetupType.kTransient\n\n\n\nSimulationSetupType.kQEye\n\n\n\nSimulationSetupType.kVEye\n\n\n\nSimulationSetupType.kAMI\n\n\n\nSimulationSetupType.kAnalysisOption\n\n\n\nSimulationSetupType.kSIwaveDCIR\n\n\n\nSimulationSetupType.kSIwaveEMI\n\n\n\nSimulationSetupType.kHFSSPI\n\n\n\nSimulationSetupType.kDDRwizard\n\n\n\nSimulationSetupType.kQ3D\n\n\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_sim_setup_info.html#get_sim_setup_info",
        "title": "get_sim_setup_info",
        "section": "get_sim_setup_info",
        "text": "Get simulation setup information.\nget_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_sim_setup_info.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.get_sim_setup_info",
        "title": "get_sim_setup_info > get_sim_setup_info > get_sim_setup_info",
        "section": "get_sim_setup_info > get_sim_setup_info",
        "text": "property HFSSPISimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Adding this property for compatibility with grpc.\nis_null"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.is_null.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property SiwaveSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.html#hfssportsettings",
        "title": "HfssPortSettings",
        "section": "HfssPortSettings",
        "text": "Manages EDB methods for HFSS port settings.\nHfssPortSettings.enable_set_triangles_wave_port\nWhether to enable setting of minimum and maximum mesh limits for wave ports.\nHfssPortSettings.max_delta_z0\nMaximum change to Z0 in successive passes.\nHfssPortSettings.max_triangles_wave_port\nMaximum number of triangles allowed for wave ports.\nHfssPortSettings.min_triangles_wave_port\nMinimum number of triangles allowed for wave ports.\nHfssPortSettings\nHfssPortSettings.enable_set_triangles_wave_port\nHfssPortSettings.max_delta_z0\nHfssPortSettings.max_triangles_wave_port\nHfssPortSettings.min_triangles_wave_port"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings",
        "title": "HfssPortSettings > HfssPortSettings > HfssPortSettings",
        "section": "HfssPortSettings > HfssPortSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings(parent)\n\nManages EDB methods for HFSS port settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nHfssPortSettings.enable_set_triangles_wave_port\n\nWhether to enable setting of minimum and maximum mesh limits for wave ports.\n\nHfssPortSettings.max_delta_z0\n\nMaximum change to Z0 in successive passes.\n\nHfssPortSettings.max_triangles_wave_port\n\nMaximum number of triangles allowed for wave ports.\n\nHfssPortSettings.min_triangles_wave_port\n\nMinimum number of triangles allowed for wave ports.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlCircuitPt",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlCircuitPt.html#controlcircuitpt",
        "title": "ControlCircuitPt",
        "section": "ControlCircuitPt",
        "text": "Circuit Port.\nControlCircuitPt"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlCircuitPt",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlCircuitPt.html#pyedb.dotnet.database.edb_data.control_file.ControlCircuitPt",
        "title": "ControlCircuitPt > ControlCircuitPt > ControlCircuitPt",
        "section": "ControlCircuitPt > ControlCircuitPt",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlCircuitPt(name, x1, y1, lay1, x2, y2, lay2, z0)\n\nCircuit Port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_config_file",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_config_file.html#dc_report_config_file",
        "title": "dc_report_config_file",
        "section": "dc_report_config_file",
        "text": "Retrieve the report configuration file path.\nThe file path.\ndc_report_config_file\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_config_file",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_config_file.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_config_file",
        "title": "dc_report_config_file > dc_report_config_file > dc_report_config_file",
        "section": "dc_report_config_file > dc_report_config_file",
        "text": "property SimulationConfigurationDc.dc_report_config_file\n\nRetrieve the report configuration file path.\n\nReturns\n\npython:str\n\nThe file path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers_by_id",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers_by_id.html#layers_by_id",
        "title": "layers_by_id",
        "section": "layers_by_id",
        "text": "Retrieve the list of layers with their ids.\nlayers_by_id"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers_by_id",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers_by_id.html#pyedb.dotnet.database.stackup.Stackup.layers_by_id",
        "title": "layers_by_id > layers_by_id > layers_by_id",
        "section": "layers_by_id > layers_by_id",
        "text": "property Stackup.layers_by_id\n\nRetrieve the list of layers with their ids.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/PrimitivesData",
        "href": "api/edb_data/PrimitivesData.html#modeler--primitives",
        "title": "Modeler & primitives",
        "section": "Modeler & primitives",
        "text": "These classes are the containers of primitives and all relative methods.\nPrimitives are planes, lines, rectangles, and circles.\nModeler & primitives"
    },
    {
        "objectID": "api/edb_data/PrimitivesData",
        "href": "api/edb_data/PrimitivesData.html#primitives-properties",
        "title": "Modeler & primitives > Primitives properties",
        "section": "Primitives properties",
        "text": "These classes are the containers of data management for primitives and arcs.\nEDBArcs\nManages EDB Arc Data functionalities.\nEdbPolygon\n\nPrimitives properties\nEDBArcs\nEdbPolygon"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.disjoint_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.disjoint_nets.html#disjoint_nets",
        "title": "disjoint_nets",
        "section": "disjoint_nets",
        "text": "Find and fix disjoint nets from a given netlist.\nList of nets on which check disjoints. If None is provided then the algorithm will loop on all nets.\nRemove all secondary nets other than principal one (the one with more objects in it). Default is False.\nClean all disjoint nets with area less than specified area in square meters. Default is 0.0 to disable it.\nWhether if the naming order has to be by number of objects (fastest) or area (slowest but more accurate).\nDefault is False.\nWhether if delete disjoints pins not connected to any other primitive or not. Default is False.\nNew nets created.\ndisjoint_nets\npython:str\npython:list\noptional\noptional\noptional\noptional\nFalse\noptional\nFalse\nList"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.disjoint_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.disjoint_nets.html#pyedb.dotnet.database.layout_validation.LayoutValidation.disjoint_nets",
        "title": "disjoint_nets > disjoint_nets > disjoint_nets",
        "section": "disjoint_nets > disjoint_nets",
        "text": "LayoutValidation.disjoint_nets(net_list=None, keep_only_main_net=False, clean_disjoints_less_than=0.0, order_by_area=False, keep_disjoint_pins=False)\n\nFind and fix disjoint nets from a given netlist.\n\nParameters\n\nnet_list\n\npython:str, python:list, optional\n\nList of nets on which check disjoints. If None is provided then the algorithm will loop on all nets.\n\nkeep_only_main_net\n\nbool, optional\n\nRemove all secondary nets other than principal one (the one with more objects in it). Default is False.\n\nclean_disjoints_less_than\n\nbool, optional\n\nClean all disjoint nets with area less than specified area in square meters. Default is 0.0 to disable it.\n\norder_by_area\n\nbool, optional\n\nWhether if the naming order has to be by number of objects (fastest) or area (slowest but more accurate).\nDefault is False.\n\nkeep_disjoint_pins\n\nbool, optional\n\nWhether if delete disjoints pins not connected to any other primitive or not. Default is False.\n\nReturns\n\nList\n\nNew nets created.\n\nExamples\n\n>>> renamed_nets = edb.layout_validation.disjoint_nets([\"GND\",\"Net2\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.rectangles",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.rectangles.html#rectangles",
        "title": "rectangles",
        "section": "rectangles",
        "text": "Rectangles.\nList of rectangles.\nrectangles\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.rectangles",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.rectangles.html#pyedb.dotnet.database.modeler.Modeler.rectangles",
        "title": "rectangles > rectangles > rectangles",
        "section": "rectangles > rectangles",
        "text": "property Modeler.rectangles\n\nRectangles.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nList of rectangles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_void_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_void_area_to_mesh.html#dc_min_void_area_to_mesh",
        "title": "dc_min_void_area_to_mesh",
        "section": "dc_min_void_area_to_mesh",
        "text": "Retrieve the value for the minimum void surface to mesh.\nThe area value.\ndc_min_void_area_to_mesh\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_void_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_void_area_to_mesh.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_void_area_to_mesh",
        "title": "dc_min_void_area_to_mesh > dc_min_void_area_to_mesh > dc_min_void_area_to_mesh",
        "section": "dc_min_void_area_to_mesh > dc_min_void_area_to_mesh",
        "text": "property SimulationConfigurationDc.dc_min_void_area_to_mesh\n\nRetrieve the value for the minimum void surface to mesh.\n\nReturns\n\npython:str\n\nThe area value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_show_Active_devices",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_show_Active_devices.html#dc_report_show_active_devices",
        "title": "dc_report_show_Active_devices",
        "section": "dc_report_show_Active_devices",
        "text": "Retrieve the value for showing active devices.\nTrue when activated, False deactivated.\ndc_report_show_Active_devices\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_show_Active_devices",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_show_Active_devices.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_report_show_Active_devices",
        "title": "dc_report_show_Active_devices > dc_report_show_Active_devices > dc_report_show_Active_devices",
        "section": "dc_report_show_Active_devices > dc_report_show_Active_devices",
        "text": "property SimulationConfigurationDc.dc_report_show_Active_devices\n\nRetrieve the value for showing active devices.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_causality",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_causality.html#enforce_causality",
        "title": "enforce_causality",
        "section": "enforce_causality",
        "text": "Retrieve boolean to enforce causality for the frequency sweep.\nenforce_causality\nTrue\nwhen\ncausality\nis\nenforced\nFalse\nif"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_causality",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_causality.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_causality",
        "title": "enforce_causality > enforce_causality > enforce_causality",
        "section": "enforce_causality > enforce_causality",
        "text": "property SimulationConfigurationAc.enforce_causality\n\nRetrieve boolean to enforce causality for the frequency sweep.\n\nReturns\n\nbool\n\n\n\nTrue when causality is enforced False if not.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb.html#save_edb",
        "title": "save_edb",
        "section": "save_edb",
        "text": "Save the EDB file.\n. deprecated:: pyedb 0.47.0\nUse: func:save instead.\nTrue when successful, False when failed.\nsave_edb\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb.html#pyedb.dotnet.edb.Edb.save_edb",
        "title": "save_edb > save_edb > save_edb",
        "section": "save_edb > save_edb",
        "text": "Edb.save_edb()\n\nSave the EDB file.\n\n. deprecated:: pyedb 0.47.0\nUse: func:save instead.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer.html#via_start_layer",
        "title": "via_start_layer",
        "section": "via_start_layer",
        "text": "Starting layer.\nName of the starting layer.\nvia_start_layer\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer",
        "title": "via_start_layer > via_start_layer > via_start_layer",
        "section": "via_start_layer > via_start_layer",
        "text": "property EDBPadstack.via_start_layer\n\nStarting layer.\n\nReturns\n\npython:str\n\nName of the starting layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.arcs",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.arcs.html#arcs",
        "title": "arcs",
        "section": "arcs",
        "text": "Get the Primitive Arc Data.\narcs"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.arcs",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.arcs.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.arcs",
        "title": "arcs > arcs > arcs",
        "section": "arcs > arcs",
        "text": "property EDBPadstackInstance.arcs\n\nGet the Primitive Arc Data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.create_symmetric_stackup",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.create_symmetric_stackup.html#create_symmetric_stackup",
        "title": "create_symmetric_stackup",
        "section": "create_symmetric_stackup",
        "text": "Create a symmetric stackup.\nNumber of layer count.\nThickness of inner conductor layer.\nThickness of outer conductor layer.\nThickness of dielectric layer.\nMaterial of dielectric layer.\nWhether to create soldermask layers. The default is``True``.\nThickness of soldermask layer.\ncreate_symmetric_stackup\npython:int\npython:str\npython:float\noptional\npython:str\npython:float\noptional\npython:str\npython:float\noptional\npython:str\noptional\noptional\npython:str\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.create_symmetric_stackup",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.create_symmetric_stackup.html#pyedb.dotnet.database.stackup.Stackup.create_symmetric_stackup",
        "title": "create_symmetric_stackup > create_symmetric_stackup > create_symmetric_stackup",
        "section": "create_symmetric_stackup > create_symmetric_stackup",
        "text": "Stackup.create_symmetric_stackup(layer_count, inner_layer_thickness='17um', outer_layer_thickness='50um', dielectric_thickness='100um', dielectric_material='FR4_epoxy', soldermask=True, soldermask_thickness='20um')\n\nCreate a symmetric stackup.\n\nParameters\n\nlayer_count\n\npython:int\n\nNumber of layer count.\n\ninner_layer_thickness\n\npython:str, python:float, optional\n\nThickness of inner conductor layer.\n\nouter_layer_thickness\n\npython:str, python:float, optional\n\nThickness of outer conductor layer.\n\ndielectric_thickness\n\npython:str, python:float, optional\n\nThickness of dielectric layer.\n\ndielectric_material\n\npython:str, optional\n\nMaterial of dielectric layer.\n\nsoldermask\n\nbool, optional\n\nWhether to create soldermask layers. The default is``True``.\n\nsoldermask_thickness\n\npython:str, optional\n\nThickness of soldermask layer.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.signal",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.signal.html#signal",
        "title": "signal",
        "section": "signal",
        "text": "Signal nets.\nDictionary of signal nets.\nsignal\npython:dict\npython:str\npyedb.dotnet.database.edb_data.EDBNetsData"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.signal",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.signal.html#pyedb.dotnet.database.nets.EdbNets.signal",
        "title": "signal > signal > signal",
        "section": "signal > signal",
        "text": "property EdbNets.signal\n\nSignal nets.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.edb_data.EDBNetsData]\n\nDictionary of signal nets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_split_plane_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_split_plane_coupling.html#include_split_plane_coupling",
        "title": "include_split_plane_coupling",
        "section": "include_split_plane_coupling",
        "text": "Whether to account for coupling between adjacent parallel plane edges.\nPrimarily, two different cases are being considered:\n- Plane edges that form a split.\n- Plane edges that form a narrow trace-like plane.\nThe former leads to crosstalk between adjacent planes for which\na specific coupling model is applied. For the latter, fringing effects\nare considered to model accurately the propagation characteristics\nof trace-like cavities. Further, the coupling between narrow planes is\nalso modeled by enabling this feature.\nTrue if split plane coupling is used, False otherwise.\ninclude_split_plane_coupling\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_split_plane_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_split_plane_coupling.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_split_plane_coupling",
        "title": "include_split_plane_coupling > include_split_plane_coupling > include_split_plane_coupling",
        "section": "include_split_plane_coupling > include_split_plane_coupling",
        "text": "property AdvancedSettings.include_split_plane_coupling\n\nWhether to account for coupling between adjacent parallel plane edges.\nPrimarily, two different cases are being considered:\n- Plane edges that form a split.\n- Plane edges that form a narrow trace-like plane.\nThe former leads to crosstalk between adjacent planes for which\na specific coupling model is applied. For the latter, fringing effects\nare considered to model accurately the propagation characteristics\nof trace-like cavities. Further, the coupling between narrow planes is\nalso modeled by enabling this feature.\n\nReturns\n\nbool\n\nTrue if split plane coupling is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.add_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.add_net.html#add_net",
        "title": "add_net",
        "section": "add_net",
        "text": "Add a new net.\nThe name of the net to be added.\nadd_net\npython:str\nobject"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.add_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.add_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.add_net",
        "title": "add_net > add_net > add_net",
        "section": "add_net > add_net",
        "text": "EDBNetClassData.add_net(name)\n\nAdd a new net.\n\nParameters\n\nname\n\npython:str\n\nThe name of the net to be added.\n\nReturns\n\nobject\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.mesh_operations",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.mesh_operations.html#mesh_operations",
        "title": "mesh_operations",
        "section": "mesh_operations",
        "text": "mesh_operations"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.mesh_operations",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.mesh_operations.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.mesh_operations",
        "title": "mesh_operations > mesh_operations > mesh_operations",
        "section": "mesh_operations > mesh_operations",
        "text": "property RaptorXSimulationSetup.mesh_operations\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete this primitive.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.delete.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "EDBPadstackInstance.delete()\n\nDelete this primitive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.html#dcrsettings",
        "title": "DcrSettings",
        "section": "DcrSettings",
        "text": "Manages EDB methods for DCR settings.\nDcrSettings.conduction_max_passes\nConduction maximum number of passes.\nDcrSettings.conduction_min_converged_passes\nConduction minimum number of converged passes.\nDcrSettings.conduction_min_passes\nConduction minimum number of passes.\nDcrSettings.conduction_per_error\nWConduction error percentage.\nDcrSettings.conduction_per_refine\nConduction refinement.\nDcrSettings\nDcrSettings.conduction_max_passes\nDcrSettings.conduction_min_converged_passes\nDcrSettings.conduction_min_passes\nDcrSettings.conduction_per_error\nDcrSettings.conduction_per_refine"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings",
        "title": "DcrSettings > DcrSettings > DcrSettings",
        "section": "DcrSettings > DcrSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings(parent)\n\nManages EDB methods for DCR settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nDcrSettings.conduction_max_passes\n\nConduction maximum number of passes.\n\nDcrSettings.conduction_min_converged_passes\n\nConduction minimum number of converged passes.\n\nDcrSettings.conduction_min_passes\n\nConduction minimum number of passes.\n\nDcrSettings.conduction_per_error\n\nWConduction error percentage.\n\nDcrSettings.conduction_per_refine\n\nConduction refinement.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.components_by_partname",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.components_by_partname.html#components_by_partname",
        "title": "components_by_partname",
        "section": "components_by_partname",
        "text": "Components by part name.\nDictionary of components by part name.\ncomponents_by_partname\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.components_by_partname",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.components_by_partname.html#pyedb.dotnet.database.components.Components.components_by_partname",
        "title": "components_by_partname > components_by_partname > components_by_partname",
        "section": "components_by_partname > components_by_partname",
        "text": "property Components.components_by_partname\n\nComponents by part name.\n\nReturns\n\npython:dict\n\nDictionary of components by part name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.components_by_partname\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.components",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.components.html#components",
        "title": "components",
        "section": "components",
        "text": "Edb Components methods and properties.\ncomponents\nInstance\nof\npyedb.dotnet.database.components.Components"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.components",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.components.html#pyedb.dotnet.edb.Edb.components",
        "title": "components > components > components",
        "section": "components > components",
        "text": "property Edb.components\n\nEdb Components methods and properties.\n\nReturns\n\nInstance of pyedb.dotnet.database.components.Components\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> comp = edbapp.components.get_component_by_name(\"J1\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.workflow",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.workflow.html#workflow",
        "title": "workflow",
        "section": "workflow",
        "text": "Workflow class.\nworkflow"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.workflow",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.workflow.html#pyedb.dotnet.edb.Edb.workflow",
        "title": "workflow > workflow > workflow",
        "section": "workflow > workflow",
        "text": "property Edb.workflow\n\nWorkflow class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.results_directory",
        "href": "api/_autosummary/pyedb.siwave.Siwave.results_directory.html#results_directory",
        "title": "results_directory",
        "section": "results_directory",
        "text": "Results directory.\nFull absolute path to the aedtresults directory.\nresults_directory\npython:str\naedtresults"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.results_directory",
        "href": "api/_autosummary/pyedb.siwave.Siwave.results_directory.html#pyedb.siwave.Siwave.results_directory",
        "title": "results_directory > results_directory > results_directory",
        "section": "results_directory > results_directory",
        "text": "property Siwave.results_directory\n\nResults directory.\n\nReturns\n\npython:str\n\nFull absolute path to the aedtresults directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_base_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_base_polygon.html#dielectric_base_polygon",
        "title": "dielectric_base_polygon",
        "section": "dielectric_base_polygon",
        "text": "Dielectric base polygon.\ndielectric_base_polygon\ndotnet.database.edb_data.primitives_data.EDBPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_base_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_base_polygon.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_base_polygon",
        "title": "dielectric_base_polygon > dielectric_base_polygon > dielectric_base_polygon",
        "section": "dielectric_base_polygon > dielectric_base_polygon",
        "text": "property HfssExtentInfo.dielectric_base_polygon\n\nDielectric base polygon.\n\nReturns\n\ndotnet.database.edb_data.primitives_data.EDBPrimitive\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.type.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property HFSSPISimulationSetup.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_to_chord_error",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_to_chord_error.html#arc_to_chord_error",
        "title": "arc_to_chord_error",
        "section": "arc_to_chord_error",
        "text": "Retrieve the value of arc to chord error for HFSS meshing.\narc_to_chord_error\nflot\nValue\nof\nthe\narc\nto\nchord"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_to_chord_error",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_to_chord_error.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.arc_to_chord_error",
        "title": "arc_to_chord_error > arc_to_chord_error > arc_to_chord_error",
        "section": "arc_to_chord_error > arc_to_chord_error",
        "text": "property SimulationConfigurationAc.arc_to_chord_error\n\nRetrieve the value of arc to chord error for HFSS meshing.\n\nReturns\n\nflot\n\n\n\nValue of the arc to chord error.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.materials",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.materials.html#materials",
        "title": "materials",
        "section": "materials",
        "text": "Material Database.\nmaterials\nInstance\nof"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.materials",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.materials.html#pyedb.dotnet.edb.Edb.materials",
        "title": "materials > materials > materials",
        "section": "materials > materials",
        "text": "property Edb.materials\n\nMaterial Database.\n\nReturns\n\nInstance of :class: pyedb.dotnet.database.Materials\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb()\n>>> edbapp.materials.add_material(\"air\", permittivity=1.0)\n>>> edbapp.materials.add_debye_material(\"debye_mat\", 5, 3, 0.02, 0.05, 1e5, 1e9)\n>>> edbapp.materials.add_djordjevicsarkar_material(\"djord_mat\", 3.3, 0.02, 3.3)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.power_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.power_nets.html#power_nets",
        "title": "power_nets",
        "section": "power_nets",
        "text": "Retrieve the list of power and reference net names.\nList of the net name.\npower_nets\npython:list\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.power_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.power_nets.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.power_nets",
        "title": "power_nets > power_nets > power_nets",
        "section": "power_nets > power_nets",
        "text": "property SimulationConfigurationBatch.power_nets\n\nRetrieve the list of power and reference net names.\n\nReturns\n\npython:list[python:str]\n\nList of the net name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "Overrides the default sim_setup_info object.\nsim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sim_setup_info.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property SiwaveSimulationSetup.sim_setup_info\n\nOverrides the default sim_setup_info object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.get_data_from_db.html#pyedb.configuration.cfg_ports_sources.CfgPorts.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgPorts.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_error_energy",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_error_energy.html#dc_error_energy",
        "title": "dc_error_energy",
        "section": "dc_error_energy",
        "text": "Retrieve the value for the DC error energy.\nThe error energy value, 0.2 as default.\ndc_error_energy\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_error_energy",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_error_energy.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_error_energy",
        "title": "dc_error_energy > dc_error_energy > dc_error_energy",
        "section": "dc_error_energy > dc_error_energy",
        "text": "property SimulationConfigurationDc.dc_error_energy\n\nRetrieve the value for the DC error energy.\n\nReturns\n\npython:float\n\nThe error energy value, 0.2 as default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_port_between_pin_and_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_port_between_pin_and_layer.html#create_port_between_pin_and_layer",
        "title": "create_port_between_pin_and_layer",
        "section": "create_port_between_pin_and_layer",
        "text": "Create circuit port between pin and a reference layer.\nComponent name. The default is None.\nPin name or list of pin names. The default is None.\nLayer name. The default is None.\nReference net name. The default is None.\nPort impedance. The default is 50.0 in ohms.\nCreated terminal.\ncreate_port_between_pin_and_layer\npython:str\nNone\npython:str\nNone\npython:str\nNone\npython:str\nNone\npython:float\noptional\n50.0\nPadstackInstanceTerminal"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_port_between_pin_and_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_port_between_pin_and_layer.html#pyedb.dotnet.database.siwave.EdbSiwave.create_port_between_pin_and_layer",
        "title": "create_port_between_pin_and_layer > create_port_between_pin_and_layer > create_port_between_pin_and_layer",
        "section": "create_port_between_pin_and_layer > create_port_between_pin_and_layer",
        "text": "EdbSiwave.create_port_between_pin_and_layer(component_name=None, pins_name=None, layer_name=None, reference_net=None, impedance=50.0)\n\nCreate circuit port between pin and a reference layer.\n\nParameters\n\ncomponent_name\n\npython:str\n\nComponent name. The default is None.\n\npins_name\n\npython:str\n\nPin name or list of pin names. The default is None.\n\nlayer_name\n\npython:str\n\nLayer name. The default is None.\n\nreference_net\n\npython:str\n\nReference net name. The default is None.\n\nimpedance\n\npython:float, optional\n\nPort impedance. The default is 50.0 in ohms.\n\nReturns\n\nPadstackInstanceTerminal\n\nCreated terminal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net.html#net",
        "title": "net",
        "section": "net",
        "text": "Net Object.\nnet\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net",
        "title": "net > net > net",
        "section": "net > net",
        "text": "property EDBPadstackInstance.net\n\nNet Object.\n\nReturns\n\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_suf_dev",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_suf_dev.html#max_suf_dev",
        "title": "max_suf_dev",
        "section": "max_suf_dev",
        "text": "Retrieve the value for the maximum surface deviation for the layout defeaturing.\nmax_suf_dev\nflot\nValue\nof\nmaximum\nsurface"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_suf_dev",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_suf_dev.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_suf_dev",
        "title": "max_suf_dev > max_suf_dev > max_suf_dev",
        "section": "max_suf_dev > max_suf_dev",
        "text": "property SimulationConfigurationAc.max_suf_dev\n\nRetrieve the value for the maximum surface deviation for the layout defeaturing.\n\nReturns\n\nflot\n\n\n\nValue of maximum surface deviation.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_dc_analysis",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_dc_analysis.html#add_siwave_dc_analysis",
        "title": "add_siwave_dc_analysis",
        "section": "add_siwave_dc_analysis",
        "text": "Add a Siwave DC analysis in EDB.\nIf a setup is present, it is deleted and replaced with\nactual settings.\nSource Reference to Ground settings works only from 2021.2\nSetup name.\nSetup object class.\nadd_siwave_dc_analysis\npython:str\noptional\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveDCSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_dc_analysis",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_dc_analysis.html#pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_dc_analysis",
        "title": "add_siwave_dc_analysis > add_siwave_dc_analysis > add_siwave_dc_analysis",
        "section": "add_siwave_dc_analysis > add_siwave_dc_analysis",
        "text": "EdbSiwave.add_siwave_dc_analysis(name=None)\n\nAdd a Siwave DC analysis in EDB.\n\nIf a setup is present, it is deleted and replaced with\nactual settings.\n\nSource Reference to Ground settings works only from 2021.2\n\nParameters\n\nname\n\npython:str, optional\n\nSetup name.\n\nReturns\n\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveDCSimulationSetup\n\nSetup object class.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(\"pathtoaedb\", edbversion=\"2021.2\")\n>>> edb.siwave.add_siwave_ac_analysis()\n>>> edb.siwave.add_siwave_dc_analysis2(\"my_setup\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout.html#cutout",
        "title": "cutout",
        "section": "cutout",
        "text": "Create a cutout using an approach entirely based on PyAEDT.\nThis method replaces all legacy cutout methods in PyAEDT.\nIt does in sequence:\n- delete all nets not in list,\n- create a extent of the nets,\n- check and delete all vias not in the extent,\n- check and delete all the primitives not in extent,\n- check and intersect all the primitives that intersect the extent.\nList of signal strings.\nList of references to add. The default is [\"GND\"].\nType of the extension. Options are \"Conforming\", \"ConvexHull\", and\n\"Bounding\". The default is \"Conforming\".\nExpansion size ratio in meters. The default is 0.002.\nWhether to use round corners. The default is False.\nFull path and name for the new AEDB file. If None, then current aedb will be cutout.\nWhether to open the cutout at the end. The default is True.\nWhether to use new PyAEDT cutout method or EDB API method.\nNew method is faster than native API method since it benefits of multithread.\nNumber of thread to use. Default is 4. Valid only if use_pyaedt_cutout is set to True.\nWhether to use legacy extent computing (experimental) or EDB API.\nDefeature the cutout before applying it to produce simpler geometry for mesh (Experimental).\nIt applies only to Conforming bounding box. Default value is 0 which disable it.\nRemove all Single Pin RLC after the cutout is completed. Default is False.\nPoints list defining the cutout shape. This setting will override extent_type field.\nUnits of the point list. The default is \"mm\". Valid only if custom_extend is provided.\nWhether to include padstack instances that have bounding boxes intersecting with point list polygons.\nThis operation may slow down the cutout export.Valid only if custom_extend and\nuse_pyaedt_cutout is provided.\nBoolean used for keep or not the voids intersecting the polygon used for clipping the layout.\nDefault value is True, False will remove the voids.Valid only if custom_extend is provided.\nWhether to check for all reference terminals and increase extent to include them into the cutout.\nThis applies to components which have a model (spice, touchstone or netlist) associated.\nWhether to check for all pingroups terminals and increase extent to include them into the cutout.\nIt requires check_terminals.\nThe method computes a float representing the largest number between\nthe dielectric thickness or trace width multiplied by the expansion_factor factor.\nThe trace width search is limited to nets with ports attached. Works only if use_pyaedt_cutout.\nDefault is 0 to disable the search.\nMaximum number of iterations before stopping a search for a cutout with an error.\nDefault is 10.\nWhether to preserve all pins of components that have associated models (Spice or NPort).\nThis parameter is applicable only for a PyAEDT cutout (except point list).\nWhether to use the center of the pad to find the intersection with extent or use the bounding box.\nSecond method is much slower and requires to disable multithread on padstack removal.\nDefault is True.\nWhether to keep the lines as Path after they are cutout or convert them to PolygonData.\nThis feature works only in Electronics Desktop (3D Layout).\nIf the flag is set to True it can cause issues in SiWave once the Edb is imported.\nDefault is False to generate PolygonData of cut lines.\nWhether to compute and include voids in pyaedt extent before the cutout. Cutout time can be affected.\nIt works only with Conforming cutout.\nDefault is False to generate extent without voids.\nList of coordinate points defining the extent used for clipping the design. If it failed return an empty\nlist.\ncutout\npython:list\npython:list\noptional\n[\"GND\"]\npython:str\noptional\n\"Conforming\"\n\"ConvexHull\"\n\"Bounding\"\n\"Conforming\"\npython:float\npython:str\noptional\n0.002\noptional\nFalse\npython:str\noptional\noptional\nTrue\noptional\npython:int\noptional\nuse_pyaedt_cutout\nTrue\noptional\npython:float\noptional\n0\noptional\npython:list\npython:str\n\"mm\"\noptional\nTrue\nFalse\noptional\noptional\ncheck_terminals\npython:int\noptional\npython:int\noptional\noptional\noptional\noptional\nTrue\nFalse\noptional\nFalse\nList"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout.html#pyedb.dotnet.edb.Edb.cutout",
        "title": "cutout > cutout > cutout",
        "section": "cutout > cutout",
        "text": "Edb.cutout(signal_list=None, reference_list=None, extent_type='ConvexHull', expansion_size=0.002, use_round_corner=False, output_aedb_path=None, open_cutout_at_end=True, use_pyaedt_cutout=True, number_of_threads=1, use_pyaedt_extent_computing=True, extent_defeature=0, remove_single_pin_components=False, custom_extent=None, custom_extent_units='mm', include_partial_instances=False, keep_voids=True, check_terminals=False, include_pingroups=False, expansion_factor=0, maximum_iterations=10, preserve_components_with_model=False, simple_pad_check=True, keep_lines_as_path=False, include_voids_in_extents=False)\n\nCreate a cutout using an approach entirely based on PyAEDT.\nThis method replaces all legacy cutout methods in PyAEDT.\nIt does in sequence:\n- delete all nets not in list,\n- create a extent of the nets,\n- check and delete all vias not in the extent,\n- check and delete all the primitives not in extent,\n- check and intersect all the primitives that intersect the extent.\n\nParameters\n\nsignal_list\n\npython:list\n\nList of signal strings.\n\nreference_list\n\npython:list, optional\n\nList of references to add. The default is [\"GND\"].\n\nextent_type\n\npython:str, optional\n\nType of the extension. Options are \"Conforming\", \"ConvexHull\", and\n\"Bounding\". The default is \"Conforming\".\n\nexpansion_size\n\npython:float, python:str, optional\n\nExpansion size ratio in meters. The default is 0.002.\n\nuse_round_corner\n\nbool, optional\n\nWhether to use round corners. The default is False.\n\noutput_aedb_path\n\npython:str, optional\n\nFull path and name for the new AEDB file. If None, then current aedb will be cutout.\n\nopen_cutout_at_end\n\nbool, optional\n\nWhether to open the cutout at the end. The default is True.\n\nuse_pyaedt_cutout\n\nbool, optional\n\nWhether to use new PyAEDT cutout method or EDB API method.\nNew method is faster than native API method since it benefits of multithread.\n\nnumber_of_threads\n\npython:int, optional\n\nNumber of thread to use. Default is 4. Valid only if use_pyaedt_cutout is set to True.\n\nuse_pyaedt_extent_computing\n\nbool, optional\n\nWhether to use legacy extent computing (experimental) or EDB API.\n\nextent_defeature\n\npython:float, optional\n\nDefeature the cutout before applying it to produce simpler geometry for mesh (Experimental).\nIt applies only to Conforming bounding box. Default value is 0 which disable it.\n\nremove_single_pin_components\n\nbool, optional\n\nRemove all Single Pin RLC after the cutout is completed. Default is False.\n\ncustom_extent\n\npython:list\n\nPoints list defining the cutout shape. This setting will override extent_type field.\n\ncustom_extent_units\n\npython:str\n\nUnits of the point list. The default is \"mm\". Valid only if custom_extend is provided.\n\ninclude_partial_instances\n\nbool, optional\n\nWhether to include padstack instances that have bounding boxes intersecting with point list polygons.\nThis operation may slow down the cutout export.Valid only if custom_extend and\nuse_pyaedt_cutout is provided.\n\nkeep_voids\n\nbool\n\nBoolean used for keep or not the voids intersecting the polygon used for clipping the layout.\nDefault value is True, False will remove the voids.Valid only if custom_extend is provided.\n\ncheck_terminals\n\nbool, optional\n\nWhether to check for all reference terminals and increase extent to include them into the cutout.\nThis applies to components which have a model (spice, touchstone or netlist) associated.\n\ninclude_pingroups\n\nbool, optional\n\nWhether to check for all pingroups terminals and increase extent to include them into the cutout.\nIt requires check_terminals.\n\nexpansion_factor\n\npython:int, optional\n\nThe method computes a float representing the largest number between\nthe dielectric thickness or trace width multiplied by the expansion_factor factor.\nThe trace width search is limited to nets with ports attached. Works only if use_pyaedt_cutout.\nDefault is 0 to disable the search.\n\nmaximum_iterations\n\npython:int, optional\n\nMaximum number of iterations before stopping a search for a cutout with an error.\nDefault is 10.\n\npreserve_components_with_model\n\nbool, optional\n\nWhether to preserve all pins of components that have associated models (Spice or NPort).\nThis parameter is applicable only for a PyAEDT cutout (except point list).\n\nsimple_pad_check\n\nbool, optional\n\nWhether to use the center of the pad to find the intersection with extent or use the bounding box.\nSecond method is much slower and requires to disable multithread on padstack removal.\nDefault is True.\n\nkeep_lines_as_path\n\nbool, optional\n\nWhether to keep the lines as Path after they are cutout or convert them to PolygonData.\nThis feature works only in Electronics Desktop (3D Layout).\nIf the flag is set to True it can cause issues in SiWave once the Edb is imported.\nDefault is False to generate PolygonData of cut lines.\n\ninclude_voids_in_extents\n\nbool, optional\n\nWhether to compute and include voids in pyaedt extent before the cutout. Cutout time can be affected.\nIt works only with Conforming cutout.\nDefault is False to generate extent without voids.\n\nReturns\n\nList\n\nList of coordinate points defining the extent used for clipping the design. If it failed return an empty\nlist.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(r'C:\\test.aedb', edbversion=\"2022.2\")\n>>> edb.logger.info_timer(\"Edb Opening\")\n>>> edb.logger.reset_timer()\n>>> start = time.time()\n>>> signal_list = []\n>>> for net in edb.nets.netlist:\n>>>      if \"3V3\" in net:\n>>>           signal_list.append(net)\n>>> power_list = [\"PGND\"]\n>>> edb.cutout(signal_list=signal_list, reference_list=power_list, extent_type=\"Conforming\")\n>>> end_time = str((time.time() - start)/60)\n>>> edb.logger.info(\"Total legacy cutout time in min %s\", end_time)\n>>> edb.nets.plot(signal_list, None, color_by_net=True)\n>>> edb.nets.plot(power_list, None, color_by_net=True)\n>>> edb.save_edb()\n>>> edb.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Adding this property for compatibility with grpc.\nis_null"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.is_null.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property SimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.protected_attributes.html#pyedb.configuration.cfg_boundaries.CfgBoundaries.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgBoundaries.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.end",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.end.html#end",
        "title": "end",
        "section": "end",
        "text": "Get the coordinates of the ending point.\nList containing the X and Y coordinates of the ending point.\nend\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.end",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.end.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.end",
        "title": "end > end > end",
        "section": "end > end",
        "text": "property EDBArcs.end\n\nGet the coordinates of the ending point.\n\nReturns\n\npython:list\n\nList containing the X and Y coordinates of the ending point.\n\nExamples\n\n>>> appedb = Edb(fpath, edbversion=\"2024.2\")\n>>> end_coordinate = appedb.nets[\"V1P0_S0\"].primitives[0].arcs[0].end\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_simulation_settings.html#get_simulation_settings",
        "title": "get_simulation_settings",
        "section": "get_simulation_settings",
        "text": "get_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_simulation_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.get_simulation_settings",
        "title": "get_simulation_settings > get_simulation_settings > get_simulation_settings",
        "section": "get_simulation_settings > get_simulation_settings",
        "text": "HfssSimulationSetup.get_simulation_settings()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.export_json",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.export_json.html#export_json",
        "title": "export_json",
        "section": "export_json",
        "text": "Export Json file from SimulationConfiguration object.\nJson file name.\nTrue when succeeded False when file name not provided.\nexport_json\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.export_json",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.export_json.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.export_json",
        "title": "export_json > export_json > export_json",
        "section": "export_json > export_json",
        "text": "SimulationConfiguration.export_json(output_file)\n\nExport Json file from SimulationConfiguration object.\n\nParameters\n\noutput_file\n\npython:str\n\nJson file name.\n\nReturns\n\nbool\n\nTrue when succeeded False when file name not provided.\n\nExamples\n\n>>> from dotnet.database.edb_data.simulation_configuration import SimulationConfiguration\n>>> config = SimulationConfiguration()\n>>> config.export_json(r\"C:\\Temp        est_json        est.json\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers.html#layers",
        "title": "layers",
        "section": "layers",
        "text": "Retrieve the dictionary of layers.\nlayers\nDict\npython:str\npyedb.dotnet.database.edb_data.layer_data.LayerEdbClass"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layers.html#pyedb.dotnet.database.stackup.Stackup.layers",
        "title": "layers > layers > layers",
        "section": "layers > layers",
        "text": "property Stackup.layers\n\nRetrieve the dictionary of layers.\n\nReturns\n\nDict[python:str, pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_net.html#create_current_source_on_net",
        "title": "create_current_source_on_net",
        "section": "create_current_source_on_net",
        "text": "Create a current source.\nName of the positive component.\nName of the positive net.\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\nName of the negative net. The default is \"GND\".\nValue for the current. The default is 0.1.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nSource Name.\ncreate_current_source_on_net\npython:str\npython:str\npython:str\noptional\nNone\npython:str\noptional\n\"GND\"\npython:float\noptional\n0.1\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_net.html#pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_net",
        "title": "create_current_source_on_net > create_current_source_on_net > create_current_source_on_net",
        "section": "create_current_source_on_net > create_current_source_on_net",
        "text": "EdbHfss.create_current_source_on_net(positive_component_name, positive_net_name, negative_component_name=None, negative_net_name='GND', current_value=0.1, phase_value=0, source_name='')\n\nCreate a current source.\n\nParameters\n\npositive_component_name\n\npython:str\n\nName of the positive component.\n\npositive_net_name\n\npython:str\n\nName of the positive net.\n\nnegative_component_name\n\npython:str, optional\n\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\n\nnegative_net_name\n\npython:str, optional\n\nName of the negative net. The default is \"GND\".\n\ncurrent_value\n\npython:float, optional\n\nValue for the current. The default is 0.1.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nSource Name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edb.hfss.create_current_source_on_net(\"U2A5\", \"V1P5_S3\", \"U2A5\", \"GND\", 0.1, 0, \"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.basic",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.basic.html#basic",
        "title": "basic",
        "section": "basic",
        "text": "Whether if turn on basic adaptive.\nbasic\nTrue\nif\nbasic\nadaptive\nis\nused\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.basic",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.basic.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.basic",
        "title": "basic > basic > basic",
        "section": "basic > basic",
        "text": "property AdaptiveSettings.basic\n\nWhether if turn on basic adaptive.\n\nReturns\n\nTrue if basic adaptive is used, False otherwise.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.use_arc_to_chord_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.use_arc_to_chord_error.html#use_arc_to_chord_error",
        "title": "use_arc_to_chord_error",
        "section": "use_arc_to_chord_error",
        "text": "Whether to turn on the arc-to-chord error setting for arc faceting.\nuse_arc_to_chord_error\nTrue\nif\nerror\nis\nused\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.use_arc_to_chord_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.use_arc_to_chord_error.html#pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.use_arc_to_chord_error",
        "title": "use_arc_to_chord_error > use_arc_to_chord_error > use_arc_to_chord_error",
        "section": "use_arc_to_chord_error > use_arc_to_chord_error",
        "text": "property CurveApproxSettings.use_arc_to_chord_error\n\nWhether to turn on the arc-to-chord error setting for arc faceting.\n\nReturns\n\nTrue if arc-to-chord error is used, False otherwise.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_position",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_position.html#get_pin_position",
        "title": "get_pin_position",
        "section": "get_pin_position",
        "text": "Retrieve the pin position in meters.\nName of the pin.\nPin position as a list of float values in the form [x, y].\nget_pin_position\npython:str\npython:list\n[x, y]"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_position",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_position.html#pyedb.dotnet.database.components.Components.get_pin_position",
        "title": "get_pin_position > get_pin_position > get_pin_position",
        "section": "get_pin_position > get_pin_position",
        "text": "Components.get_pin_position(pin)\n\nRetrieve the pin position in meters.\n\nParameters\n\npin\n\npython:str\n\nName of the pin.\n\nReturns\n\npython:list\n\nPin position as a list of float values in the form [x, y].\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_pin_position(pin)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_high_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_high_freq.html#adaptive_high_freq",
        "title": "adaptive_high_freq",
        "section": "adaptive_high_freq",
        "text": "HFSS broadband high frequency adaptive meshing.\nadaptive_high_freq\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_high_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_high_freq.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_high_freq",
        "title": "adaptive_high_freq > adaptive_high_freq > adaptive_high_freq",
        "section": "adaptive_high_freq > adaptive_high_freq",
        "text": "property SimulationConfigurationAc.adaptive_high_freq\n\nHFSS broadband high frequency adaptive meshing.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents.add_component",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents.add_component.html#add_component",
        "title": "add_component",
        "section": "add_component",
        "text": "Create a new component.\nReference Designator name.\nPart name.\nComponent Type. Can be “IC”, “IO” or “Other”.\nDie Type. Can be “None”, “Flip chip” or “Wire bond”.\nSolderball Type. Can be “None”, “Cylinder” or “Spheroid”.\nadd_component\npython:str\npython:str\npython:str\npython:str\noptional\npython:str\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents.add_component",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents.add_component.html#pyedb.dotnet.database.edb_data.control_file.ControlFileComponents.add_component",
        "title": "add_component > add_component > add_component",
        "section": "add_component > add_component",
        "text": "ControlFileComponents.add_component(ref_des, partname, component_type, die_type='None', solderball_shape='None')\n\nCreate a new component.\n\nParameters\n\nref_des\n\npython:str\n\nReference Designator name.\n\npartname\n\npython:str\n\nPart name.\n\ncomponent_type\n\npython:str\n\nComponent Type. Can be “IC”, “IO” or “Other”.\n\ndie_type\n\npython:str, optional\n\nDie Type. Can be “None”, “Flip chip” or “Wire bond”.\n\nsolderball_shape\n\npython:str, optional\n\nSolderball Type. Can be “None”, “Cylinder” or “Spheroid”.\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.nets_layers_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.nets_layers_list.html#nets_layers_list",
        "title": "nets_layers_list",
        "section": "nets_layers_list",
        "text": "List of nets and layers.\nList of lists with three elements. Each list must contain:\n1- net name\n2- layer name\n3- bool.\nThird element is represents whether if the mesh operation is enabled or disabled.\nnets_layers_list\npython:list"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.nets_layers_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.nets_layers_list.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.nets_layers_list",
        "title": "nets_layers_list > nets_layers_list > nets_layers_list",
        "section": "nets_layers_list > nets_layers_list",
        "text": "property LengthMeshOperation.nets_layers_list\n\nList of nets and layers.\n\nReturns\n\npython:list\n\nList of lists with three elements. Each list must contain:\n1- net name\n2- layer name\n3- bool.\nThird element is represents whether if the mesh operation is enabled or disabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.html#cfgpadstacks",
        "title": "CfgPadstacks",
        "section": "CfgPadstacks",
        "text": "Padstack data class.\nCfgPadstacks.apply()\nApply padstack definition and instances on layout.\nCfgPadstacks.clean()\n\nCfgPadstacks.retrieve_parameters_from_edb()\n\nCfgPadstacks\nCfgPadstacks.apply\nCfgPadstacks.clean\nCfgPadstacks.retrieve_parameters_from_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.html#pyedb.configuration.cfg_padstacks.CfgPadstacks",
        "title": "CfgPadstacks > CfgPadstacks > CfgPadstacks",
        "section": "CfgPadstacks > CfgPadstacks",
        "text": "class pyedb.configuration.cfg_padstacks.CfgPadstacks(pedb, padstack_dict=None)\n\nPadstack data class.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgPadstacks.apply()\n\nApply padstack definition and instances on layout.\n\nCfgPadstacks.clean()\n\n\n\nCfgPadstacks.retrieve_parameters_from_edb()\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.html#cfgport",
        "title": "CfgPort",
        "section": "CfgPort",
        "text": "Manage port.\nCfgPort.create_terminals()\nCreate step 1.\nCfgPort.export_properties()\n\nCfgPort.get_attributes([exclude])\n\nCfgPort.set_attributes(pedb_object)\n\nCfgPort.set_parameters_to_edb()\nCreate port.\nCfgPort.CFG_PORT_TYPE\n\nCfgPort.protected_attributes\n\nCfgPort\nCfgPort.create_terminals\nCfgPort.export_properties\nCfgPort.get_attributes\nCfgPort.set_attributes\nCfgPort.set_parameters_to_edb\nCfgPort.CFG_PORT_TYPE\nCfgPort.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.html#pyedb.configuration.cfg_ports_sources.CfgPort",
        "title": "CfgPort > CfgPort > CfgPort",
        "section": "CfgPort > CfgPort",
        "text": "class pyedb.configuration.cfg_ports_sources.CfgPort(pedb, **kwargs)\n\nManage port.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgPort.create_terminals()\n\nCreate step 1.\n\nCfgPort.export_properties()\n\n\n\nCfgPort.get_attributes([exclude])\n\n\n\nCfgPort.set_attributes(pedb_object)\n\n\n\nCfgPort.set_parameters_to_edb()\n\nCreate port.\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgPort.CFG_PORT_TYPE\n\n\n\nCfgPort.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_cutout",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_cutout.html#use_default_cutout",
        "title": "use_default_cutout",
        "section": "use_default_cutout",
        "text": "Whether to use the default EDB cutout. The default is False, in which case\na new PyAEDT cutout is used.\nuse_default_cutout\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_cutout",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_cutout.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_cutout",
        "title": "use_default_cutout > use_default_cutout > use_default_cutout",
        "section": "use_default_cutout > use_default_cutout",
        "text": "property SimulationConfigurationBatch.use_default_cutout\n\nWhether to use the default EDB cutout. The default is False, in which case\na new PyAEDT cutout is used.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/XmlControlFile",
        "href": "api/XmlControlFile.html#xml-control-file",
        "title": "XML control file",
        "section": "XML control file",
        "text": "Convert a technology file to EDB control file.\nControlProperty\n\nControlFileMaterial\n\nControlFileDielectric\n\nControlFileLayer\n\nControlFileVia\n\nControlFileStackup\nClass that manages the Stackup info.\nControlFileImportOptions\nImport Options.\nControlExtent\nExtent options.\nControlCircuitPt\nCircuit Port.\nControlFileComponent\nComponents.\nControlFileComponents\nClass for component management.\nXML control file\nControlProperty\nControlFileMaterial\nControlFileDielectric\nControlFileLayer\nControlFileVia\nControlFileStackup\nControlFileImportOptions\nControlExtent\nControlCircuitPt\nControlFileComponent\nControlFileComponents"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.center",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.center.html#center",
        "title": "center",
        "section": "center",
        "text": "Return the primitive bounding box center coordinate.\n[x, y]\ncenter\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.center",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.center.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.center",
        "title": "center > center > center",
        "section": "center > center",
        "text": "property EdbPolygon.center\n\nReturn the primitive bounding box center coordinate.\n\nReturns\n\npython:list\n\n[x, y]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_passes.html#min_passes",
        "title": "min_passes",
        "section": "min_passes",
        "text": "Minimum number of passes.\nmin_passes\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_passes.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_passes",
        "title": "min_passes > min_passes > min_passes",
        "section": "min_passes > min_passes",
        "text": "property AdaptiveSettings.min_passes\n\nMinimum number of passes.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_vias",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_vias.html#refine_vias",
        "title": "refine_vias",
        "section": "refine_vias",
        "text": "Whether to refine mesh along vias.\nTrue if via refinement is used, False otherwise.\nrefine_vias\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_vias",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_vias.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.refine_vias",
        "title": "refine_vias > refine_vias > refine_vias",
        "section": "refine_vias > refine_vias",
        "text": "property DCAdvancedSettings.refine_vias\n\nWhether to refine mesh along vias.\n\nReturns\n\nbool\n\nTrue if via refinement is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.add_void",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.add_void.html#add_void",
        "title": "add_void",
        "section": "add_void",
        "text": "Add a void into a shape.\nShape of the main object.\nShape of the voids.\nadd_void\nPolygon\npython:list\nPath"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.add_void",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.add_void.html#pyedb.dotnet.database.modeler.Modeler.add_void",
        "title": "add_void > add_void > add_void",
        "section": "add_void > add_void",
        "text": "Modeler.add_void(shape, void_shape)\n\nAdd a void into a shape.\n\nParameters\n\nshape\n\nPolygon\n\nShape of the main object.\n\nvoid_shape\n\npython:list, Path\n\nShape of the voids.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.get_attributes.html#pyedb.configuration.cfg_package_definition.CfgPackage.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgPackage.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Edb Dotnet Api Database NetClass.IsNull().\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.is_null.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property EDBExtendedNetData.is_null\n\nEdb Dotnet Api Database NetClass.IsNull().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.create_terminals",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.create_terminals.html#create_terminals",
        "title": "create_terminals",
        "section": "create_terminals",
        "text": "Create step 1. Collect positive and negative terminals.\ncreate_terminals"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.create_terminals",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.create_terminals.html#pyedb.configuration.cfg_ports_sources.CfgPort.create_terminals",
        "title": "create_terminals > create_terminals > create_terminals",
        "section": "create_terminals > create_terminals",
        "text": "CfgPort.create_terminals()\n\nCreate step 1. Collect positive and negative terminals.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.close",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.close.html#close",
        "title": "close",
        "section": "close",
        "text": "Close EDB and cleanup variables.\nTrue when successful, False when failed.\nclose\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.close",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.close.html#pyedb.dotnet.edb.Edb.close",
        "title": "close > close > close",
        "section": "close > close",
        "text": "Edb.close()\n\nClose EDB and cleanup variables.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup.to_dict.html#to_dict",
        "title": "to_dict",
        "section": "to_dict",
        "text": "to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveACSetup.to_dict.html#pyedb.configuration.cfg_setup.CfgSIwaveACSetup.to_dict",
        "title": "to_dict > to_dict > to_dict",
        "section": "to_dict > to_dict",
        "text": "CfgSIwaveACSetup.to_dict()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.mesh_operations.html#mesh_operations",
        "title": "mesh_operations",
        "section": "mesh_operations",
        "text": "mesh_operations"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.mesh_operations.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.mesh_operations",
        "title": "mesh_operations > mesh_operations > mesh_operations",
        "section": "mesh_operations > mesh_operations",
        "text": "property HFSSPISimulationSetup.mesh_operations\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_attributes.html#pyedb.configuration.cfg_ports_sources.CfgSource.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgSource.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.add_design_variable",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.add_design_variable.html#add_design_variable",
        "title": "add_design_variable",
        "section": "add_design_variable",
        "text": "Add a variable to edb. The variable can be a design one or a project variable (using $ prefix).\nUser can use also the setitem to create or assign a variable. See example below.\nName of the variable. To added the variable as a project variable, the name\nmust begin with $.\nValue of the variable with units.\nWhether to add the variable as a local variable. The default is False.\nWhen True, the variable is added as a parameter default.\nDescription of the variable.\nTuple containing the AddVariable result and variable server.\nadd_design_variable\n$\npython:str\n$\npython:str\npython:float\noptional\nFalse\nTrue\npython:str\noptional\nAddVariable"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.add_design_variable",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.add_design_variable.html#pyedb.dotnet.edb.Edb.add_design_variable",
        "title": "add_design_variable > add_design_variable > add_design_variable",
        "section": "add_design_variable > add_design_variable",
        "text": "Edb.add_design_variable(variable_name, variable_value, is_parameter=False, description='')\n\nAdd a variable to edb. The variable can be a design one or a project variable (using $ prefix).\n\n..note::\n\nUser can use also the setitem to create or assign a variable. See example below.\n\nParameters\n\nvariable_name\n\npython:str\n\nName of the variable. To added the variable as a project variable, the name\nmust begin with $.\n\nvariable_value\n\npython:str, python:float\n\nValue of the variable with units.\n\nis_parameter\n\nbool, optional\n\nWhether to add the variable as a local variable. The default is False.\nWhen True, the variable is added as a parameter default.\n\ndescription\n\npython:str, optional\n\nDescription of the variable.\n\nReturns\n\n\n\n——-\n\n\n\ntuple\n\nTuple containing the AddVariable result and variable server.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb_app = Edb()\n>>> boolean_1, ant_length = edb_app.add_design_variable(\"my_local_variable\", \"1cm\")\n>>> print(edb_app[\"my_local_variable\"])    #using getitem\n>>> edb_app[\"my_local_variable\"] = \"1cm\"   #using setitem\n>>> boolean_2, para_length = edb_app.change_design_variable_value(\"my_parameter\", \"1m\", is_parameter=True\n>>> boolean_3, project_length = edb_app.change_design_variable_value(\"$my_project_variable\", \"1m\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_via_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_via_layer.html#is_via_layer",
        "title": "is_via_layer",
        "section": "is_via_layer",
        "text": "Determine whether this layer is a via layer.\nTrue if this layer is a via layer, False otherwise.\nis_via_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_via_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_via_layer.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_via_layer",
        "title": "is_via_layer > is_via_layer > is_via_layer",
        "section": "is_via_layer > is_via_layer",
        "text": "property LayerEdbClass.is_via_layer\n\nDetermine whether this layer is a via layer.\n\nReturns\n\nbool\n\nTrue if this layer is a via layer, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.rlc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.rlc.html#rlc",
        "title": "rlc",
        "section": "rlc",
        "text": "Dictionary of RLC components.\nrlc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.rlc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.rlc.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.rlc",
        "title": "rlc > rlc > rlc",
        "section": "rlc > rlc",
        "text": "property EDBExtendedNetData.rlc\n\nDictionary of RLC components.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_sim_setup_info.html#set_sim_setup_info",
        "title": "set_sim_setup_info",
        "section": "set_sim_setup_info",
        "text": "set_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_sim_setup_info.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_sim_setup_info",
        "title": "set_sim_setup_info > set_sim_setup_info > set_sim_setup_info",
        "section": "set_sim_setup_info > set_sim_setup_info",
        "text": "SiwaveSimulationSetup.set_sim_setup_info(sim_setup_info)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.layers",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.layers.html#layers",
        "title": "layers",
        "section": "layers",
        "text": "Dictionary of layers.\nDictionary of layers.\nlayers\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.layers",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.layers.html#pyedb.dotnet.database.modeler.Modeler.layers",
        "title": "layers > layers > layers",
        "section": "layers > layers",
        "text": "property Modeler.layers\n\nDictionary of layers.\n\nReturns\n\npython:dict\n\nDictionary of layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.use_dc_custom_settings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.use_dc_custom_settings.html#use_dc_custom_settings",
        "title": "use_dc_custom_settings",
        "section": "use_dc_custom_settings",
        "text": "Whether to use DC custom settings.\nThis setting is automatically enabled by other properties when needed.\nTrue if custom dc settings are used, False otherwise.\nuse_dc_custom_settings\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.use_dc_custom_settings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.use_dc_custom_settings.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.use_dc_custom_settings",
        "title": "use_dc_custom_settings > use_dc_custom_settings > use_dc_custom_settings",
        "section": "use_dc_custom_settings > use_dc_custom_settings",
        "text": "property DCSettings.use_dc_custom_settings\n\nWhether to use DC custom settings.\nThis setting is automatically enabled by other properties when needed.\n\nReturns\n\nbool\n\nTrue if custom dc settings are used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_excitations",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_excitations.html#generate_excitations",
        "title": "generate_excitations",
        "section": "generate_excitations",
        "text": "Activate ports and sources for DC generation when build project with the class.\nTrue ports are created, False skip port generation. Default value is True.\ngenerate_excitations\nTrue\nFalse\nTrue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_excitations",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_excitations.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_excitations",
        "title": "generate_excitations > generate_excitations > generate_excitations",
        "section": "generate_excitations > generate_excitations",
        "text": "property SimulationConfigurationBatch.generate_excitations\n\nActivate ports and sources for DC generation when build project with the class.\n\nReturns\n\nbool\n\nTrue ports are created, False skip port generation. Default value is True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.html#edbvalue",
        "title": "EdbValue",
        "section": "EdbValue",
        "text": "Class defining Edb Value properties.\nEdbValue.name\nVariable name.\nEdbValue.tofloat\nReturns the float number of the variable.\nEdbValue.tostring\nReturns the string of the variable.\nEdbValue.value\nVariable Value Object.\nEdbValue\nEdbValue.name\nEdbValue.tofloat\nEdbValue.tostring\nEdbValue.value"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.html#pyedb.dotnet.database.edb_data.edbvalue.EdbValue",
        "title": "EdbValue > EdbValue > EdbValue",
        "section": "EdbValue > EdbValue",
        "text": "class pyedb.dotnet.database.edb_data.edbvalue.EdbValue(edb_obj)\n\nClass defining Edb Value properties.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nEdbValue.name\n\nVariable name.\n\nEdbValue.tofloat\n\nReturns the float number of the variable.\n\nEdbValue.tostring\n\nReturns the string of the variable.\n\nEdbValue.value\n\nVariable Value Object.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_analysis_setup",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_analysis_setup.html#configure_hfss_analysis_setup",
        "title": "configure_hfss_analysis_setup",
        "section": "configure_hfss_analysis_setup",
        "text": "Configure HFSS analysis setup.\nEdb_DATA.SimulationConfiguration object\nTrue when succeeded, False when failed.\nconfigure_hfss_analysis_setup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_analysis_setup",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_analysis_setup.html#pyedb.dotnet.database.hfss.EdbHfss.configure_hfss_analysis_setup",
        "title": "configure_hfss_analysis_setup > configure_hfss_analysis_setup > configure_hfss_analysis_setup",
        "section": "configure_hfss_analysis_setup > configure_hfss_analysis_setup",
        "text": "EdbHfss.configure_hfss_analysis_setup(simulation_setup=None)\n\nConfigure HFSS analysis setup.\n\nParameters\n\nsimulation_setup\n\nEdb_DATA.SimulationConfiguration object\n\nReturns\n\nbool\n\nTrue when succeeded, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.dc_slider_position",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.dc_slider_position.html#dc_slider_position",
        "title": "dc_slider_position",
        "section": "dc_slider_position",
        "text": "DC simulation accuracy level slider position. This property only change slider position.\nOptions:\n0- optimal speed\n1- balanced\n2- optimal accuracy.\ndc_slider_position\noptimal speed\nbalanced\noptimal accuracy"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.dc_slider_position",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.dc_slider_position.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.dc_slider_position",
        "title": "dc_slider_position > dc_slider_position > dc_slider_position",
        "section": "dc_slider_position > dc_slider_position",
        "text": "property DCSettings.dc_slider_position\n\nDC simulation accuracy level slider position. This property only change slider position.\nOptions:\n0- optimal speed\n1- balanced\n2- optimal accuracy.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_frequency_sweep.html#add_frequency_sweep",
        "title": "add_frequency_sweep",
        "section": "add_frequency_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nList of frequency points. The default is None.\nadd_frequency_sweep\npython:str\noptional\nNone\npython:list\noptional\nNone\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_frequency_sweep.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_frequency_sweep",
        "title": "add_frequency_sweep > add_frequency_sweep > add_frequency_sweep",
        "section": "add_frequency_sweep > add_frequency_sweep",
        "text": "SiwaveDCSimulationSetup.add_frequency_sweep(name=None, frequency_sweep=None)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\nfrequency_sweep\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_frequency_sweep(frequency_sweep=[\n...     [\"linear count\", \"0\", \"1kHz\", 1],\n...     [\"log scale\", \"1kHz\", \"0.1GHz\", 10],\n...     [\"linear scale\", \"0.1GHz\", \"10GHz\", \"0.1GHz\"],\n...     ])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.html#cfgstackup",
        "title": "CfgStackup",
        "section": "CfgStackup",
        "text": "CfgStackup.apply()\n\nCfgStackup.get_data_from_db()\nGet configuration data from layout.\nCfgStackup.get_layers_from_db()\n\nCfgStackup.get_materials_from_db()\n\nCfgStackup\nCfgStackup.apply\nCfgStackup.get_data_from_db\nCfgStackup.get_layers_from_db\nCfgStackup.get_materials_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.html#pyedb.configuration.cfg_stackup.CfgStackup",
        "title": "CfgStackup > CfgStackup > CfgStackup",
        "section": "CfgStackup > CfgStackup",
        "text": "class pyedb.configuration.cfg_stackup.CfgStackup(pedb: Edb, data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgStackup.apply()\n\n\n\nCfgStackup.get_data_from_db()\n\nGet configuration data from layout.\n\nCfgStackup.get_layers_from_db()\n\n\n\nCfgStackup.get_materials_from_db()\n\n\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_skin_depth_mesh_operation",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_skin_depth_mesh_operation.html#add_skin_depth_mesh_operation",
        "title": "add_skin_depth_mesh_operation",
        "section": "add_skin_depth_mesh_operation",
        "text": "Add a mesh operation to the setup.\nDictionary containing nets and layers on which enable Mesh operation. Example {\"A0_N\": [\"TOP\", \"PWR\"]}.\nMesh operation name.\nMaximum number of elements. Default is 1000.\nSkin Depth. Default is 1um.\nWhether to restrict number of elements. Default is True.\nSurface Triangle length. Default is 1mm.\nNumber of layers. Default is 2.\nMesh region name.\nWhether to refine inside or not.  Default is False.\nadd_skin_depth_mesh_operation\npython:dict\n{\"A0_N\": [\"TOP\", \"PWR\"]}\npython:str\noptional\npython:int\noptional\n1000\npython:str\noptional\n1um\noptional\nTrue\noptional\n1mm\npython:int\npython:str\noptional\n2\npython:str\noptional\noptional\nFalse\ndotnet.database.edb_data.hfss_simulation_setup_data.LengthMeshOperation"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_skin_depth_mesh_operation",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_skin_depth_mesh_operation.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_skin_depth_mesh_operation",
        "title": "add_skin_depth_mesh_operation > add_skin_depth_mesh_operation > add_skin_depth_mesh_operation",
        "section": "add_skin_depth_mesh_operation > add_skin_depth_mesh_operation",
        "text": "HfssSimulationSetup.add_skin_depth_mesh_operation(net_layer_list, name=None, max_elements=1000, skin_depth='1um', restrict_elements=True, surface_triangle_length='1mm', number_of_layers=2, refine_inside=False, mesh_region=None)\n\nAdd a mesh operation to the setup.\n\nParameters\n\nnet_layer_list\n\npython:dict\n\nDictionary containing nets and layers on which enable Mesh operation. Example {\"A0_N\": [\"TOP\", \"PWR\"]}.\n\nname\n\npython:str, optional\n\nMesh operation name.\n\nmax_elements\n\npython:int, optional\n\nMaximum number of elements. Default is 1000.\n\nskin_depth\n\npython:str, optional\n\nSkin Depth. Default is 1um.\n\nrestrict_elements\n\nbool, optional\n\nWhether to restrict number of elements. Default is True.\n\nsurface_triangle_length\n\nbool, optional\n\nSurface Triangle length. Default is 1mm.\n\nnumber_of_layers\n\npython:int, python:str, optional\n\nNumber of layers. Default is 2.\n\nmesh_region\n\npython:str, optional\n\nMesh region name.\n\nrefine_inside\n\nbool, optional\n\nWhether to refine inside or not.  Default is False.\n\nReturns\n\ndotnet.database.edb_data.hfss_simulation_setup_data.LengthMeshOperation\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.create",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Create a SIwave DCIR setup.\ncreate\nSiwaveDCSimulationSetup"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.create",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.create.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "SiwaveDCSimulationSetup.create(name=None)\n\nCreate a SIwave DCIR setup.\n\nReturns\n\nSiwaveDCSimulationSetup\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss.html#hfss",
        "title": "hfss",
        "section": "hfss",
        "text": "Core HFSS methods and properties.\nhfss\npyedb.dotnet.database.hfss.EdbHfss\nlegacy.database.edb_data.simulation_configuration.SimulationConfiguration"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.hfss.html#pyedb.dotnet.edb.Edb.hfss",
        "title": "hfss > hfss > hfss",
        "section": "hfss > hfss",
        "text": "property Edb.hfss\n\nCore HFSS methods and properties.\n\nReturns\n\npyedb.dotnet.database.hfss.EdbHfss\n\n\n\nlegacy.database.edb_data.simulation_configuration.SimulationConfiguration\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> sim_config = edbapp.new_simulation_configuration()\n>>> sim_config.mesh_freq = \"10Ghz\"\n>>> edbapp.hfss.configure_hfss_analysis_setup(sim_config)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_rad_field_only",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_rad_field_only.html#save_rad_field_only",
        "title": "save_rad_field_only",
        "section": "save_rad_field_only",
        "text": "Flag indicating if the saving of only radiated fields is turned on.\nTrue if save radiated field only is used, False otherwise.\nsave_rad_field_only\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_rad_field_only",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_rad_field_only.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_rad_field_only",
        "title": "save_rad_field_only > save_rad_field_only > save_rad_field_only",
        "section": "save_rad_field_only > save_rad_field_only",
        "text": "property AdaptiveSettings.save_rad_field_only\n\nFlag indicating if the saving of only radiated fields is turned on.\n\nReturns\n\nbool\n\nTrue if save radiated field only is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pad_edge_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pad_edge_terminal_reference_pin.html#get_pad_edge_terminal_reference_pin",
        "title": "get_pad_edge_terminal_reference_pin",
        "section": "get_pad_edge_terminal_reference_pin",
        "text": "Get the closest pin padstack instances and serves any edge terminal connected to a pad.\nPreferred reference net name. Optianal, default is None which will auto compute the gnd name.\nget_pad_edge_terminal_reference_pin\npython:str\noptional\npyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pad_edge_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pad_edge_terminal_reference_pin.html#pyedb.dotnet.database.edb_data.ports.GapPort.get_pad_edge_terminal_reference_pin",
        "title": "get_pad_edge_terminal_reference_pin > get_pad_edge_terminal_reference_pin > get_pad_edge_terminal_reference_pin",
        "section": "get_pad_edge_terminal_reference_pin > get_pad_edge_terminal_reference_pin",
        "text": "GapPort.get_pad_edge_terminal_reference_pin(gnd_net_name_preference=None)\n\nGet the closest pin padstack instances and serves any edge terminal connected to a pad.\n\nParameters\n\ngnd_net_name_preference\n\npython:str, optional\n\nPreferred reference net name. Optianal, default is None which will auto compute the gnd name.\n\nReturns\n\npyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.html#cfgpackagedefinitions",
        "title": "CfgPackageDefinitions",
        "section": "CfgPackageDefinitions",
        "text": "CfgPackageDefinitions.apply()\n\nCfgPackageDefinitions.get_data_from_db()\n\nCfgPackageDefinitions\nCfgPackageDefinitions.apply\nCfgPackageDefinitions.get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackageDefinitions.html#pyedb.configuration.cfg_package_definition.CfgPackageDefinitions",
        "title": "CfgPackageDefinitions > CfgPackageDefinitions > CfgPackageDefinitions",
        "section": "CfgPackageDefinitions > CfgPackageDefinitions",
        "text": "class pyedb.configuration.cfg_package_definition.CfgPackageDefinitions(pedb, data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgPackageDefinitions.apply()\n\n\n\nCfgPackageDefinitions.get_data_from_db()\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.configure_siw_analysis_setup",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.configure_siw_analysis_setup.html#configure_siw_analysis_setup",
        "title": "configure_siw_analysis_setup",
        "section": "configure_siw_analysis_setup",
        "text": "Configure Siwave analysis setup.\nEdb_DATA.SimulationConfiguration object.\nTrue when successful, False when failed.\nconfigure_siw_analysis_setup\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.configure_siw_analysis_setup",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.configure_siw_analysis_setup.html#pyedb.dotnet.database.siwave.EdbSiwave.configure_siw_analysis_setup",
        "title": "configure_siw_analysis_setup > configure_siw_analysis_setup > configure_siw_analysis_setup",
        "section": "configure_siw_analysis_setup > configure_siw_analysis_setup",
        "text": "EdbSiwave.configure_siw_analysis_setup(simulation_setup=None, delete_existing_setup=True)\n\nConfigure Siwave analysis setup.\n\nParameters\n\nsimulation_setup\n\nEdb_DATA.SimulationConfiguration object.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.adaptive_frequency",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.adaptive_frequency.html#adaptive_frequency",
        "title": "adaptive_frequency",
        "section": "adaptive_frequency",
        "text": "Adaptive frequency for the setup.\nFrequency with units.\nadaptive_frequency\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.adaptive_frequency",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.adaptive_frequency.html#pyedb.dotnet.database.sim_setup_data.data.adaptive_frequency_data.AdaptiveFrequencyData.adaptive_frequency",
        "title": "adaptive_frequency > adaptive_frequency > adaptive_frequency",
        "section": "adaptive_frequency > adaptive_frequency",
        "text": "property AdaptiveFrequencyData.adaptive_frequency\n\nAdaptive frequency for the setup.\n\nReturns\n\npython:str\n\nFrequency with units.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/excitations/index",
        "href": "user_guide/excitations/index.html#create-sources",
        "title": "Create sources",
        "section": "Create sources",
        "text": "Learn how to retrieve pins and create a circuit port on a component.\nLearn how to create an HFSS coaxial port on a component.\nLearn how to create current and voltage sources on a component.\nLearn how to create an edge port on a polygon and trace.\nLearn how to create a port between a pin and a layer.\nCreate sources"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.set_attributes.html#pyedb.configuration.cfg_stackup.CfgLayer.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgLayer.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_void_area",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_void_area.html#min_void_area",
        "title": "min_void_area",
        "section": "min_void_area",
        "text": "Retrieve the value of minimum void area to be considered by Siwave.\nmin_void_area\nflot\nValue\nof\nthe\narc\nto\nchord"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_void_area",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_void_area.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_void_area",
        "title": "min_void_area > min_void_area > min_void_area",
        "section": "min_void_area > min_void_area",
        "text": "property SimulationConfigurationAc.min_void_area\n\nRetrieve the value of minimum void area to be considered by Siwave.\n\nReturns\n\nflot\n\n\n\nValue of the arc to chord error.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.restrict_max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.restrict_max_elements.html#restrict_max_elements",
        "title": "restrict_max_elements",
        "section": "restrict_max_elements",
        "text": "Whether to restrict maximum number  of elements.\nrestrict_max_elements"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.restrict_max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.restrict_max_elements.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.restrict_max_elements",
        "title": "restrict_max_elements > restrict_max_elements > restrict_max_elements",
        "section": "restrict_max_elements > restrict_max_elements",
        "text": "property MeshOperation.restrict_max_elements\n\nWhether to restrict maximum number  of elements.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params.html#hole_params",
        "title": "hole_params",
        "section": "hole_params",
        "text": "Via Hole parameters values.\nhole_params"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_params",
        "title": "hole_params > hole_params > hole_params",
        "section": "hole_params > hole_params",
        "text": "property EDBPadstack.hole_params\n\nVia Hole parameters values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly.html#use_auto_removal_sliver_poly",
        "title": "use_auto_removal_sliver_poly",
        "section": "use_auto_removal_sliver_poly",
        "text": "Setting this option simplifies layouts by aligning slightly misaligned overlapping polygons.\nuse_auto_removal_sliver_poly"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly",
        "title": "use_auto_removal_sliver_poly > use_auto_removal_sliver_poly > use_auto_removal_sliver_poly",
        "section": "use_auto_removal_sliver_poly > use_auto_removal_sliver_poly",
        "text": "property RaptorXSimulationAdvancedSettings.use_auto_removal_sliver_poly\n\nSetting this option simplifies layouts by aligning slightly misaligned overlapping polygons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.html#hfsssimulationsettings",
        "title": "HFSSSimulationSettings",
        "section": "HFSSSimulationSettings",
        "text": "HFSSSimulationSettings.enabled\n\nHFSSSimulationSettings.mesh_operations\n\nHFSSSimulationSettings\nHFSSSimulationSettings.enabled\nHFSSSimulationSettings.mesh_operations"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings",
        "title": "HFSSSimulationSettings > HFSSSimulationSettings > HFSSSimulationSettings",
        "section": "HFSSSimulationSettings > HFSSSimulationSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings(pedb, sim_setup, edb_object)\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nHFSSSimulationSettings.enabled\n\n\n\nHFSSSimulationSettings.mesh_operations\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.CFG_TERMINAL_TYPES",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.CFG_TERMINAL_TYPES.html#cfg_terminal_types",
        "title": "CFG_TERMINAL_TYPES",
        "section": "CFG_TERMINAL_TYPES",
        "text": "CFG_TERMINAL_TYPES"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.CFG_TERMINAL_TYPES",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.CFG_TERMINAL_TYPES.html#pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.CFG_TERMINAL_TYPES",
        "title": "CFG_TERMINAL_TYPES > CFG_TERMINAL_TYPES > CFG_TERMINAL_TYPES",
        "section": "CFG_TERMINAL_TYPES > CFG_TERMINAL_TYPES",
        "text": "CfgTerminalInfo.CFG_TERMINAL_TYPES = ['pin', 'net', 'pin_group', 'nearest_pin', 'coordinates']\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.layout_defeaturing",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.layout_defeaturing.html#layout_defeaturing",
        "title": "layout_defeaturing",
        "section": "layout_defeaturing",
        "text": "Defeature the layout by reducing the number of points for polygons based on surface deviation criteria.\nTrue when successful, False when failed.\nlayout_defeaturing\nEdb_DATA.SimulationConfiguration\nobject\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.layout_defeaturing",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.layout_defeaturing.html#pyedb.dotnet.database.hfss.EdbHfss.layout_defeaturing",
        "title": "layout_defeaturing > layout_defeaturing > layout_defeaturing",
        "section": "layout_defeaturing > layout_defeaturing",
        "text": "EdbHfss.layout_defeaturing(simulation_setup=None)\n\nDefeature the layout by reducing the number of points for polygons based on surface deviation criteria.\n\nParameters\n\nsimulation_setup\n\nEdb_DATA.SimulationConfiguration object\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.protected_attributes.html#pyedb.configuration.cfg_operations.CfgCutout.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgCutout.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_vrm_module",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_vrm_module.html#create_vrm_module",
        "title": "create_vrm_module",
        "section": "create_vrm_module",
        "text": "Create a voltage regulator module.\nName of the voltage regulator.\nSet the voltage regulator active or not. Default value is True.\nSet the voltage value.\ndefining the positive sensor pin.\ndefining the negative sensor pin.\ndefinition the load regulation current value.\ndefinition the load regulation percent value.\ncreate_vrm_module\npython:str\noptional\nTrue\npython:int\nclass\npyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance\npython:int\nclass\npyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance\npython:str\npython:float\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_vrm_module",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_vrm_module.html#pyedb.dotnet.database.siwave.EdbSiwave.create_vrm_module",
        "title": "create_vrm_module > create_vrm_module > create_vrm_module",
        "section": "create_vrm_module > create_vrm_module",
        "text": "EdbSiwave.create_vrm_module(name=None, is_active=True, voltage='3V', positive_sensor_pin=None, negative_sensor_pin=None, load_regulation_current='1A', load_regulation_percent=0.1)\n\nCreate a voltage regulator module.\n\nParameters\n\nname\n\npython:str\n\nName of the voltage regulator.\n\nis_active\n\nbool optional\n\nSet the voltage regulator active or not. Default value is True.\n\nvoltage ; str, float\n\nSet the voltage value.\n\npositive_sensor_pin\n\npython:int, class pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance\n\ndefining the positive sensor pin.\n\nnegative_sensor_pin\n\npython:int, class pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance\n\ndefining the negative sensor pin.\n\nload_regulation_current\n\npython:str or python:float\n\ndefinition the load regulation current value.\n\nload_regulation_percent\n\npython:float\n\ndefinition the load regulation percent value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete current simulation setup.\ndelete"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "HFSSPISimulationSetup.delete()\n\nDelete current simulation setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_current_source",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_current_source.html#add_current_source",
        "title": "add_current_source",
        "section": "add_current_source",
        "text": "Add a current source for the current SimulationConfiguration instance.\nSource name.\nAmplitude value of the source. Either amperes for current source or volts for\nvoltage source.\nPhase value of the source.\nImpedance value of the source.\nName of the component used for the positive node.\nName of the component used for the negative node.\nNet used for the positive node.\nNet used for the negative node.\nTrue when successful, False when failed.\nadd_current_source\npython:str\npython:float\npython:float\npython:float\npython:str\npython:str\npython:str\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_current_source",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_current_source.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_current_source",
        "title": "add_current_source > add_current_source > add_current_source",
        "section": "add_current_source > add_current_source",
        "text": "SimulationConfiguration.add_current_source(name='', current_value=0.1, phase_value=0, impedance=50000000.0, positive_node_component='', positive_node_net='', negative_node_component='', negative_node_net='')\n\nAdd a current source for the current SimulationConfiguration instance.\n\nParameters\n\nname\n\npython:str\n\nSource name.\n\ncurrent_value\n\npython:float\n\nAmplitude value of the source. Either amperes for current source or volts for\nvoltage source.\n\nphase_value\n\npython:float\n\nPhase value of the source.\n\nimpedance\n\npython:float\n\nImpedance value of the source.\n\npositive_node_component\n\npython:str\n\nName of the component used for the positive node.\n\nnegative_node_component\n\npython:str\n\nName of the component used for the negative node.\n\npositive_node_net\n\npython:str\n\nNet used for the positive node.\n\nnegative_node_net\n\npython:str\n\nNet used for the negative node.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> edb = Edb(target_file)\n>>> sim_setup = SimulationConfiguration()\n>>> sim_setup.add_voltage_source(voltage_value=1.0, phase_value=0, positive_node_component=\"V1\",\n>>> positive_node_net=\"HSG\", negative_node_component=\"V1\", negative_node_net=\"SW\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.run_dc_simulation",
        "href": "api/_autosummary/pyedb.siwave.Siwave.run_dc_simulation.html#run_dc_simulation",
        "title": "run_dc_simulation",
        "section": "run_dc_simulation",
        "text": "Run DC simulation.\nrun_dc_simulation"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.run_dc_simulation",
        "href": "api/_autosummary/pyedb.siwave.Siwave.run_dc_simulation.html#pyedb.siwave.Siwave.run_dc_simulation",
        "title": "run_dc_simulation > run_dc_simulation > run_dc_simulation",
        "section": "run_dc_simulation > run_dc_simulation",
        "text": "Siwave.run_dc_simulation(export_dc_power_data_to_icepak=False)\n\nRun DC simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.include_inter_plane_coupling",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.include_inter_plane_coupling.html#include_inter_plane_coupling",
        "title": "include_inter_plane_coupling",
        "section": "include_inter_plane_coupling",
        "text": "Boolean to activate the inter-plane coupling with Siwave.\ninclude_inter_plane_coupling\nTrue\nactivated\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.include_inter_plane_coupling",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.include_inter_plane_coupling.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.include_inter_plane_coupling",
        "title": "include_inter_plane_coupling > include_inter_plane_coupling > include_inter_plane_coupling",
        "section": "include_inter_plane_coupling > include_inter_plane_coupling",
        "text": "property SimulationConfigurationAc.include_inter_plane_coupling\n\nBoolean to activate the inter-plane coupling with Siwave.\n\nReturns\n\nbool\n\n\n\nTrue activated False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES.html#cfg_terminal_types",
        "title": "CFG_TERMINAL_TYPES",
        "section": "CFG_TERMINAL_TYPES",
        "text": "CFG_TERMINAL_TYPES"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES.html#pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES",
        "title": "CFG_TERMINAL_TYPES > CFG_TERMINAL_TYPES > CFG_TERMINAL_TYPES",
        "section": "CFG_TERMINAL_TYPES > CFG_TERMINAL_TYPES",
        "text": "CfgNearestPinTerminalInfo.CFG_TERMINAL_TYPES = ['pin', 'net', 'pin_group', 'nearest_pin', 'coordinates']\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_layer.html#primitives_by_layer",
        "title": "primitives_by_layer",
        "section": "primitives_by_layer",
        "text": "Primitives with layer names as keys.\nDictionary of primitives with layer names as keys.\nprimitives_by_layer\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_layer.html#pyedb.dotnet.database.modeler.Modeler.primitives_by_layer",
        "title": "primitives_by_layer > primitives_by_layer > primitives_by_layer",
        "section": "primitives_by_layer > primitives_by_layer",
        "text": "property Modeler.primitives_by_layer\n\nPrimitives with layer names as keys.\n\nReturns\n\npython:dict\n\nDictionary of primitives with layer names as keys.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_max_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_max_passes.html#conduction_max_passes",
        "title": "conduction_max_passes",
        "section": "conduction_max_passes",
        "text": "Conduction maximum number of passes.\nconduction_max_passes\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_max_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_max_passes.html#pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_max_passes",
        "title": "conduction_max_passes > conduction_max_passes > conduction_max_passes",
        "section": "conduction_max_passes > conduction_max_passes",
        "text": "property DcrSettings.conduction_max_passes\n\nConduction maximum number of passes.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.plot",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.plot.html#plot",
        "title": "plot",
        "section": "plot",
        "text": "Plot a Net to Matplotlib 2D Chart.\nName of the net or list of nets to plot. If None all nets will be plotted.\nName of the layers to include in the plot. If None all the signal layers will be considered.\nIf True  the plot will be colored by net.\nIf False the plot will be colored by layer. (default)\nIf True the legend is shown in the plot. (default)\nIf False the legend is not shown.\nIf a path is specified the plot will be saved in this location.\nIf save_plot is provided, the show parameter is ignored.\nList of points of the outline to plot.\nImage size in pixel (width, height). Default value is (6000, 3000)\nWhether if use top view or bottom view. Components will be visible only for the highest layer in the view.\nIf True  the components placed on top layer are plotted.\nIf False the components are not plotted. (default).\nThis may impact in the plot computation time.\nIf nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.\nWhether to add the component names to the plot or not. Default is True.\nWhether to plot vias (circular and rectangular) or not. This may impact in the plot computation time.\nDefault is False.\nSpecify the default plot title. Is value is None the project name is assigned by default. Default value\nis None.\nWhether to show the plot or not. Default is True.\nMatplotlib ax and figures.\nplot\npython:str\npython:list\noptional\nNone\npython:str\npython:list\noptional\nNone\noptional\nTrue\nFalse\noptional\nTrue\nFalse\npython:str\noptional\nsave_plot\nshow\npython:list\noptional\npython:tuple\npython:int\noptional\n(6000, 3000)\noptional\noptional\nTrue\nFalse\nTrue\noptional\nFalse\npython:str\noptional\nNone\nNone\noptional\nax\nfig"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.plot",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.plot.html#pyedb.dotnet.database.nets.EdbNets.plot",
        "title": "plot > plot > plot",
        "section": "plot > plot",
        "text": "EdbNets.plot(nets=None, layers=None, color_by_net=False, show_legend=True, save_plot=None, outline=None, size=(6000, 3000), plot_components=True, top_view=True, show=True, annotate_component_names=True, plot_vias=False, title=None, **kwargs)\n\nPlot a Net to Matplotlib 2D Chart.\n\nParameters\n\nnets\n\npython:str, python:list, optional\n\nName of the net or list of nets to plot. If None all nets will be plotted.\n\nlayers\n\npython:str, python:list, optional\n\nName of the layers to include in the plot. If None all the signal layers will be considered.\n\ncolor_by_net\n\nbool, optional\n\nIf True  the plot will be colored by net.\nIf False the plot will be colored by layer. (default)\n\nshow_legend\n\nbool, optional\n\nIf True the legend is shown in the plot. (default)\nIf False the legend is not shown.\n\nsave_plot\n\npython:str, optional\n\nIf a path is specified the plot will be saved in this location.\nIf save_plot is provided, the show parameter is ignored.\n\noutline\n\npython:list, optional\n\nList of points of the outline to plot.\n\nsize\n\npython:tuple, python:int, optional\n\nImage size in pixel (width, height). Default value is (6000, 3000)\n\ntop_view\n\nbool, optional\n\nWhether if use top view or bottom view. Components will be visible only for the highest layer in the view.\n\nplot_components\n\nbool, optional\n\nIf True  the components placed on top layer are plotted.\nIf False the components are not plotted. (default).\nThis may impact in the plot computation time.\nIf nets and/or layers is specified, only the components belonging to the specified nets/layers are plotted.\n\nannotate_component_names: bool, optional\n\nWhether to add the component names to the plot or not. Default is True.\n\nplot_vias\n\nbool, optional\n\nWhether to plot vias (circular and rectangular) or not. This may impact in the plot computation time.\nDefault is False.\n\ntitle\n\npython:str, optional\n\nSpecify the default plot title. Is value is None the project name is assigned by default. Default value\nis None.\n\nshow\n\nbool, optional\n\nWhether to show the plot or not. Default is True.\n\nReturns\n\n(ax, fig)\n\nMatplotlib ax and figures.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points.html#points",
        "title": "points",
        "section": "points",
        "text": "Return the list of points with arcs converted to segments.\nNumber of facets to convert an arc. Default is 6.\nThe tuple contains 2 lists made of X and Y points coordinates.\npoints\npython:int\npython:tuple"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.points",
        "title": "points > points > points",
        "section": "points > points",
        "text": "EdbPolygon.points(arc_segments=6)\n\nReturn the list of points with arcs converted to segments.\n\nParameters\n\narc_segments\n\npython:int\n\nNumber of facets to convert an arc. Default is 6.\n\nReturns\n\npython:tuple\n\nThe tuple contains 2 lists made of X and Y points coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_from_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_from_component.html#get_pin_from_component",
        "title": "get_pin_from_component",
        "section": "get_pin_from_component",
        "text": "Retrieve the pins of a component.\nName of the component or the EDB component object.\nFilter on the net name as an alternative to\npinName. The default is None.\nFilter on the pin name an alternative to\nnetName. The default is None.\nList of pins when the component is found or [] otherwise.\nget_pin_from_component\npython:str\nEDB\ncomponent\npython:str\noptional\npinName\nNone\npython:str\noptional\nnetName\nNone\npython:list\n[]"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_from_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pin_from_component.html#pyedb.dotnet.database.components.Components.get_pin_from_component",
        "title": "get_pin_from_component > get_pin_from_component > get_pin_from_component",
        "section": "get_pin_from_component > get_pin_from_component",
        "text": "Components.get_pin_from_component(component, netName=None, pinName=None)\n\nRetrieve the pins of a component.\n\nParameters\n\ncomponent\n\npython:str or EDB component\n\nName of the component or the EDB component object.\n\nnetName\n\npython:str, optional\n\nFilter on the net name as an alternative to\npinName. The default is None.\n\npinName\n\npython:str, optional\n\nFilter on the pin name an alternative to\nnetName. The default is None.\n\nReturns\n\npython:list\n\nList of pins when the component is found or [] otherwise.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_pin_from_component(\"R1\", refdes)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction.html#use_enable_substrate_network_extraction",
        "title": "use_enable_substrate_network_extraction",
        "section": "use_enable_substrate_network_extraction",
        "text": "This setting models substrate coupling effects using an equivalent distributed RC network.\nuse_enable_substrate_network_extraction"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction",
        "title": "use_enable_substrate_network_extraction > use_enable_substrate_network_extraction > use_enable_substrate_network_extraction",
        "section": "use_enable_substrate_network_extraction > use_enable_substrate_network_extraction",
        "text": "property RaptorXSimulationAdvancedSettings.use_enable_substrate_network_extraction\n\nThis setting models substrate coupling effects using an equivalent distributed RC network.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.advanced_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.advanced_settings.html#advanced_settings",
        "title": "advanced_settings",
        "section": "advanced_settings",
        "text": "advanced_settings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.advanced_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.advanced_settings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.advanced_settings",
        "title": "advanced_settings > advanced_settings > advanced_settings",
        "section": "advanced_settings > advanced_settings",
        "text": "property RaptorXSimulationSettings.advanced_settings\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupSkinDepth",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupSkinDepth.html#kmeshsetupskindepth",
        "title": "kMeshSetupSkinDepth",
        "section": "kMeshSetupSkinDepth",
        "text": "kMeshSetupSkinDepth"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupSkinDepth",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupSkinDepth.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupSkinDepth",
        "title": "kMeshSetupSkinDepth > kMeshSetupSkinDepth > kMeshSetupSkinDepth",
        "section": "kMeshSetupSkinDepth > kMeshSetupSkinDepth",
        "text": "MeshOpType.kMeshSetupSkinDepth = 'skin_depth'\n\n"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.html#settingsbase",
        "title": "SettingsBase",
        "section": "SettingsBase",
        "text": "Provide base settings.\nSettingsBase.get_configurations()\nGet all attributes.\nSettingsBase.restore_default()\n\nSettingsBase.sim_setup_info\nEDB internal simulation setup object.\nSettingsBase\nSettingsBase.get_configurations\nSettingsBase.restore_default\nSettingsBase.sim_setup_info"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.html#pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase",
        "title": "SettingsBase > SettingsBase > SettingsBase",
        "section": "SettingsBase > SettingsBase",
        "text": "class pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase(parent)\n\nProvide base settings.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSettingsBase.get_configurations()\n\nGet all attributes.\n\nSettingsBase.restore_default()\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nSettingsBase.sim_setup_info\n\nEDB internal simulation setup object.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_port_impedance",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_port_impedance.html#interpolation_use_port_impedance",
        "title": "interpolation_use_port_impedance",
        "section": "interpolation_use_port_impedance",
        "text": "Flag indicating if port impedance interpolation is turned on.\nTrue if port impedance is used, False otherwise.\ninterpolation_use_port_impedance\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_port_impedance",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_port_impedance.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_port_impedance",
        "title": "interpolation_use_port_impedance > interpolation_use_port_impedance > interpolation_use_port_impedance",
        "section": "interpolation_use_port_impedance > interpolation_use_port_impedance",
        "text": "property SweepData.interpolation_use_port_impedance\n\nFlag indicating if port impedance interpolation is turned on.\n\nReturns\n\nbool\n\nTrue if port impedance is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_coax_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_coax_port.html#create_coax_port",
        "title": "create_coax_port",
        "section": "create_coax_port",
        "text": "Create a coax port.\ncreate_coax_port"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_coax_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_coax_port.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_coax_port",
        "title": "create_coax_port > create_coax_port > create_coax_port",
        "section": "create_coax_port > create_coax_port",
        "text": "EDBPadstackInstance.create_coax_port(name=None, radial_extent_factor=0)\n\nCreate a coax port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.logger",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.logger.html#logger",
        "title": "logger",
        "section": "logger",
        "text": "Logger for EDB.\nlogger\npyedb.edb_logger.EDBLogger"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.logger",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.logger.html#pyedb.dotnet.edb.Edb.logger",
        "title": "logger > logger > logger",
        "section": "logger > logger",
        "text": "property Edb.logger\n\nLogger for EDB.\n\nReturns\n\npyedb.edb_logger.EDBLogger\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_a3dcomp_3d_placement",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_a3dcomp_3d_placement.html#place_a3dcomp_3d_placement",
        "title": "place_a3dcomp_3d_placement",
        "section": "place_a3dcomp_3d_placement",
        "text": "3D Component ports are not visible via EDB. They will be visible after the EDB has been opened in Ansys\nElectronics Desktop as a project.\nPath to the 3D Component file (*.a3dcomp) to place.\nClockwise rotation angle applied to the a3dcomp.\nThe x offset value.\nThe default value is 0.0.\nThe y offset value.\nThe default value is 0.0.\nThe z offset value. (i.e. elevation)\nThe default value is 0.0.\nWhether to place the 3D Component on the top or the bottom of this layout.\nIf False then the 3D Component will also be flipped over around its X axis.\nTrue if successful and False if not.\nplace_a3dcomp_3d_placement\npython:str\ndouble\noptional\ndouble\noptional\n0.0\ndouble\noptional\n0.0\ndouble\noptional\n0.0\noptional\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_a3dcomp_3d_placement",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.place_a3dcomp_3d_placement.html#pyedb.dotnet.database.stackup.Stackup.place_a3dcomp_3d_placement",
        "title": "place_a3dcomp_3d_placement > place_a3dcomp_3d_placement > place_a3dcomp_3d_placement",
        "section": "place_a3dcomp_3d_placement > place_a3dcomp_3d_placement",
        "text": "Stackup.place_a3dcomp_3d_placement(a3dcomp_path, angle=0.0, offset_x=0.0, offset_y=0.0, offset_z=0.0, place_on_top=True)\n\nPlace a 3D Component into current layout.\n\n3D Component ports are not visible via EDB. They will be visible after the EDB has been opened in Ansys\nElectronics Desktop as a project.\n\nParameters\n\na3dcomp_path\n\npython:str\n\nPath to the 3D Component file (*.a3dcomp) to place.\n\nangle\n\ndouble, optional\n\nClockwise rotation angle applied to the a3dcomp.\n\noffset_x\n\ndouble, optional\n\nThe x offset value.\nThe default value is 0.0.\n\noffset_y\n\ndouble, optional\n\nThe y offset value.\nThe default value is 0.0.\n\noffset_z\n\ndouble, optional\n\nThe z offset value. (i.e. elevation)\nThe default value is 0.0.\n\nplace_on_top\n\nbool, optional\n\nWhether to place the 3D Component on the top or the bottom of this layout.\nIf False then the 3D Component will also be flipped over around its X axis.\n\nReturns\n\nbool\n\nTrue if successful and False if not.\n\nExamples\n\n>>> edb1 = Edb(edbpath=targetfile1,  edbversion=\"2021.2\")\n>>> a3dcomp_path = \"connector.a3dcomp\"\n>>> edb1.stackup.place_a3dcomp_3d_placement(a3dcomp_path, angle=0.0, offset_x=\"1mm\",\n...                                   offset_y=\"2mm\", flipped_stackup=False, place_on_top=True,\n...                                   )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_count",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_count.html#set_frequencies_linear_count",
        "title": "set_frequencies_linear_count",
        "section": "set_frequencies_linear_count",
        "text": "Set a linear count frequency sweep.\nStart frequency. The default is \"1kHz\".\nStop frequency. The default is \"0.1GHz\".\nStep frequency. The default is 10.\nTrue if correctly executed, False otherwise.\nset_frequencies_linear_count\npython:str\npython:float\noptional\n\"1kHz\"\npython:str\npython:float\noptional\n\"0.1GHz\"\npython:int\noptional\n10\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_count",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_count.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_count",
        "title": "set_frequencies_linear_count > set_frequencies_linear_count > set_frequencies_linear_count",
        "section": "set_frequencies_linear_count > set_frequencies_linear_count",
        "text": "SweepData.set_frequencies_linear_count(start='1kHz', stop='0.1GHz', count=10)\n\nSet a linear count frequency sweep.\n\nParameters\n\nstart\n\npython:str, python:float, optional\n\nStart frequency. The default is \"1kHz\".\n\nstop\n\npython:str, python:float, optional\n\nStop frequency. The default is \"0.1GHz\".\n\ncount\n\npython:int, optional\n\nStep frequency. The default is 10.\n\nReturns\n\nbool\n\nTrue if correctly executed, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_rlc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_rlc.html#add_rlc",
        "title": "add_rlc",
        "section": "add_rlc",
        "text": "Add a voltage source for the current SimulationConfiguration instance.\nSource name.\nResistor value in Ohms.\nInductance value in Henry.\nCapacitance value in Farrad.\nName of the component used for the positive node.\nName of the component used for the negative node.\nNet used for the positive node.\nNet used for the negative node.\nWhen True create a physical Rlc component. Recommended setting to True to be compatible with Siwave.\nTrue when successful, False when failed.\nadd_rlc\npython:str\npython:float\npython:float\npython:float\npython:str\npython:str\npython:str\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_rlc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_rlc.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_rlc",
        "title": "add_rlc > add_rlc > add_rlc",
        "section": "add_rlc > add_rlc",
        "text": "SimulationConfiguration.add_rlc(name='', r_value=1.0, c_value=0.0, l_value=0.0, positive_node_component='', positive_node_net='', negative_node_component='', negative_node_net='', create_physical_rlc=True)\n\nAdd a voltage source for the current SimulationConfiguration instance.\n\nParameters\n\nname\n\npython:str\n\nSource name.\n\nr_value\n\npython:float\n\nResistor value in Ohms.\n\nl_value\n\npython:float\n\nInductance value in Henry.\n\nc_value\n\npython:float\n\nCapacitance value in Farrad.\n\npositive_node_component\n\npython:str\n\nName of the component used for the positive node.\n\nnegative_node_component\n\npython:str\n\nName of the component used for the negative node.\n\npositive_node_net\n\npython:str\n\nNet used for the positive node.\n\nnegative_node_net\n\npython:str\n\nNet used for the negative node.\n\ncreate_physical_rlc\n\nbool\n\nWhen True create a physical Rlc component. Recommended setting to True to be compatible with Siwave.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> edb = Edb(target_file)\n>>> sim_setup = SimulationConfiguration()\n>>> sim_setup.add_voltage_source(voltage_value=1.0, phase_value=0, positive_node_component=\"V1\",\n>>> positive_node_net=\"HSG\", negative_node_component=\"V1\", negative_node_net=\"SW\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.file_dir",
        "href": "api/_autosummary/pyedb.siwave.Siwave.file_dir.html#file_dir",
        "title": "file_dir",
        "section": "file_dir",
        "text": "Directory path of the open project.\nfile_dir"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.file_dir",
        "href": "api/_autosummary/pyedb.siwave.Siwave.file_dir.html#pyedb.siwave.Siwave.file_dir",
        "title": "file_dir > file_dir > file_dir",
        "section": "file_dir > file_dir",
        "text": "property Siwave.file_dir: str\n\nDirectory path of the open project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Mesh operation name.\nname\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.name.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property MeshOperation.name\n\nMesh operation name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tostring",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tostring.html#tostring",
        "title": "tostring",
        "section": "tostring",
        "text": "Returns the string of the variable.\ntostring\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tostring",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tostring.html#pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tostring",
        "title": "tostring > tostring > tostring",
        "section": "tostring > tostring",
        "text": "property EdbValue.tostring\n\nReturns the string of the variable.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property.html#get_product_property",
        "title": "get_product_property",
        "section": "get_product_property",
        "text": "Get the product-specific property value.\nProduct ID.\nAttribute ID.\nProperty value returned.\nget_product_property\nProductIdType\npython:int\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property.html#pyedb.dotnet.edb.Edb.get_product_property",
        "title": "get_product_property > get_product_property > get_product_property",
        "section": "get_product_property > get_product_property",
        "text": "Edb.get_product_property(prod_id, attr_it)\n\nGet the product-specific property value.\n\nParameters\n\nprod_id\n\nProductIdType\n\nProduct ID.\n\nattr_it\n\npython:int\n\nAttribute ID.\n\nReturns\n\npython:str\n\nProperty value returned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Edb Dotnet Api Database NetClass.name and  NetClass.SetName().\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.name.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EDBExtendedNetData.name\n\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.unite",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.unite.html#unite",
        "title": "unite",
        "section": "unite",
        "text": "Unite active primitive with one or more primitives.\nunite\ndotnet.database.edb_data.EDBPrimitives\nEDB\nPolygonData\nEDB\nPrimitive\npython:list\nList\nof\ndotnet.database.edb_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.unite",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.unite.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.unite",
        "title": "unite > unite > unite",
        "section": "unite > unite",
        "text": "EDBPadstackInstance.unite(primitives)\n\nUnite active primitive with one or more primitives.\n\nParameters\n\nprimitives\n\ndotnet.database.edb_data.EDBPrimitives or EDB PolygonData or EDB Primitive or python:list\n\n\n\nReturns\n\nList of dotnet.database.edb_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.run_as_standalone",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.run_as_standalone.html#run_as_standalone",
        "title": "run_as_standalone",
        "section": "run_as_standalone",
        "text": "Set if Edb is run as standalone or embedded in AEDT.\nWhether if Edb is run as standalone or embedded in AEDT.\nrun_as_standalone"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.run_as_standalone",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.run_as_standalone.html#pyedb.dotnet.edb.Edb.run_as_standalone",
        "title": "run_as_standalone > run_as_standalone > run_as_standalone",
        "section": "run_as_standalone > run_as_standalone",
        "text": "Edb.run_as_standalone(flag)\n\nSet if Edb is run as standalone or embedded in AEDT.\n\nParameters\n\nflag\n\nbool\n\nWhether if Edb is run as standalone or embedded in AEDT.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_accelerate_via_extraction",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_accelerate_via_extraction.html#use_accelerate_via_extraction",
        "title": "use_accelerate_via_extraction",
        "section": "use_accelerate_via_extraction",
        "text": "Setting this option will simplify/merge neighboring vias before sending the layout for processing\nto the mesh engine and to the EM engine.\nuse_accelerate_via_extraction"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_accelerate_via_extraction",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_accelerate_via_extraction.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_accelerate_via_extraction",
        "title": "use_accelerate_via_extraction > use_accelerate_via_extraction > use_accelerate_via_extraction",
        "section": "use_accelerate_via_extraction > use_accelerate_via_extraction",
        "text": "property RaptorXSimulationAdvancedSettings.use_accelerate_via_extraction\n\nSetting this option will simplify/merge neighboring vias before sending the layout for processing\nto the mesh engine and to the EM engine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio.html#hole_plating_ratio",
        "title": "hole_plating_ratio",
        "section": "hole_plating_ratio",
        "text": "Hole plating ratio.\nPercentage for the hole plating.\nhole_plating_ratio\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_ratio",
        "title": "hole_plating_ratio > hole_plating_ratio > hole_plating_ratio",
        "section": "hole_plating_ratio > hole_plating_ratio",
        "text": "property EDBPadstack.hole_plating_ratio\n\nHole plating ratio.\n\nReturns\n\npython:float\n\nPercentage for the hole plating.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_port",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_port.html#add_port",
        "title": "add_port",
        "section": "add_port",
        "text": "add_port"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_port",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_port.html#pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_port",
        "title": "add_port > add_port > add_port",
        "section": "add_port > add_port",
        "text": "ControlFileComponent.add_port(name, z0, pospin, refpin=None, pos_type='pin', ref_type='pin')\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_show_active_devices",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_show_active_devices.html#dc_report_show_active_devices",
        "title": "dc_report_show_active_devices",
        "section": "dc_report_show_active_devices",
        "text": "DC Report Show Active Devices.\ndc_report_show_active_devices\nTrue\nwhen\nactivated\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_show_active_devices",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_show_active_devices.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.dc_report_show_active_devices",
        "title": "dc_report_show_active_devices > dc_report_show_active_devices > dc_report_show_active_devices",
        "section": "dc_report_show_active_devices > dc_report_show_active_devices",
        "text": "property SiwaveDCIRSettings.dc_report_show_active_devices\n\nDC Report Show Active Devices.\n\nReturns\n\nbool\n\n\n\nTrue when activated, False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.max_frequency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.max_frequency.html#max_frequency",
        "title": "max_frequency",
        "section": "max_frequency",
        "text": "max_frequency"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.max_frequency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.max_frequency.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.max_frequency",
        "title": "max_frequency > max_frequency > max_frequency",
        "section": "max_frequency > max_frequency",
        "text": "property RaptorXGeneralSettings.max_frequency\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_rad_fields_only",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_rad_fields_only.html#save_rad_fields_only",
        "title": "save_rad_fields_only",
        "section": "save_rad_fields_only",
        "text": "Flag indicating if the saving of only radiated fields is turned on.\nTrue if save radiated field only is used, False otherwise.\nsave_rad_fields_only\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_rad_fields_only",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_rad_fields_only.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_rad_fields_only",
        "title": "save_rad_fields_only > save_rad_fields_only > save_rad_fields_only",
        "section": "save_rad_fields_only > save_rad_fields_only",
        "text": "property SweepData.save_rad_fields_only\n\nFlag indicating if the saving of only radiated fields is turned on.\n\nReturns\n\nbool\n\nTrue if save radiated field only is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer.html#layer",
        "title": "layer",
        "section": "layer",
        "text": "Get the primitive edb layer object.\nlayer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.layer",
        "title": "layer > layer > layer",
        "section": "layer > layer",
        "text": "property EdbPolygon.layer\n\nGet the primitive edb layer object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.component.html#component",
        "title": "component",
        "section": "component",
        "text": "Component connected to this object.\ncomponent\ndotnet.database.edb_data.nets_data.EDBComponent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.component.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.component",
        "title": "component > component > component",
        "section": "component > component",
        "text": "property EdbPolygon.component\n\nComponent connected to this object.\n\nReturns\n\ndotnet.database.edb_data.nets_data.EDBComponent\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/index",
        "href": "api/sim_setup_data/io/index.html#simulation-setup-io",
        "title": "Simulation setup IO",
        "section": "Simulation setup IO",
        "text": "This section describes Simulation setup IO.\nSimulation setup IO"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the setup.\nname"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.name.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property SiwaveDCSimulationSetup.name\n\nName of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.frequency_sweeps",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.frequency_sweeps.html#frequency_sweeps",
        "title": "frequency_sweeps",
        "section": "frequency_sweeps",
        "text": "frequency_sweeps"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.frequency_sweeps",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.frequency_sweeps.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.frequency_sweeps",
        "title": "frequency_sweeps > frequency_sweeps > frequency_sweeps",
        "section": "frequency_sweeps > frequency_sweeps",
        "text": "property RaptorXSimulationSetup.frequency_sweeps\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.get_smallest_trace_width",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.get_smallest_trace_width.html#get_smallest_trace_width",
        "title": "get_smallest_trace_width",
        "section": "get_smallest_trace_width",
        "text": "Retrieve the smallest trace width from paths.\nTrace smallest width.\nget_smallest_trace_width\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.get_smallest_trace_width",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.get_smallest_trace_width.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.get_smallest_trace_width",
        "title": "get_smallest_trace_width > get_smallest_trace_width > get_smallest_trace_width",
        "section": "get_smallest_trace_width > get_smallest_trace_width",
        "text": "EDBNetsData.get_smallest_trace_width()\n\nRetrieve the smallest trace width from paths.\n\nReturns\n\npython:float\n\nTrace smallest width.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.html#hfsssolversettings",
        "title": "HfssSolverSettings",
        "section": "HfssSolverSettings",
        "text": "Manages EDB methods for HFSS solver settings.\nHfssSolverSettings.enhanced_low_freq_accuracy\nWhether to enable legacy low-frequency sampling.\nHfssSolverSettings.order_basis\nOrder of the basic functions for HFSS.\nHfssSolverSettings.relative_residual\nResidual for use by the iterative solver.\nHfssSolverSettings.solver_type\nGet solver type to use (Direct/Iterative/Auto) for HFSS.\nHfssSolverSettings.use_shell_elements\nWhether to enable use of shell elements.\nHfssSolverSettings\nHfssSolverSettings.enhanced_low_freq_accuracy\nHfssSolverSettings.order_basis\nHfssSolverSettings.relative_residual\nHfssSolverSettings.solver_type\nHfssSolverSettings.use_shell_elements"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings",
        "title": "HfssSolverSettings > HfssSolverSettings > HfssSolverSettings",
        "section": "HfssSolverSettings > HfssSolverSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings(sim_setup)\n\nManages EDB methods for HFSS solver settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nHfssSolverSettings.enhanced_low_freq_accuracy\n\nWhether to enable legacy low-frequency sampling.\n\nHfssSolverSettings.order_basis\n\nOrder of the basic functions for HFSS.\n\nHfssSolverSettings.relative_residual\n\nResidual for use by the iterative solver.\n\nHfssSolverSettings.solver_type\n\nGet solver type to use (Direct/Iterative/Auto) for HFSS.\n\nHfssSolverSettings.use_shell_elements\n\nWhether to enable use of shell elements.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.position",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.position.html#position",
        "title": "position",
        "section": "position",
        "text": "position"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.position",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.position.html#pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property SimSetupInfo.position\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_source_terminal_to_ground",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_source_terminal_to_ground.html#add_source_terminal_to_ground",
        "title": "add_source_terminal_to_ground",
        "section": "add_source_terminal_to_ground",
        "text": "Add a source terminal to ground.\nSource name.\nTerminal to assign. Options are:\n0=Unspecified\n1=Negative node\n2=Positive none\nadd_source_terminal_to_ground\npython:int\noptional"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_source_terminal_to_ground",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_source_terminal_to_ground.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.add_source_terminal_to_ground",
        "title": "add_source_terminal_to_ground > add_source_terminal_to_ground > add_source_terminal_to_ground",
        "section": "add_source_terminal_to_ground > add_source_terminal_to_ground",
        "text": "SiwaveDCSimulationSetup.add_source_terminal_to_ground(source_name, terminal=0)\n\nAdd a source terminal to ground.\n\nParameters\n\nsource_name\n\nstr,\n\nSource name.\n\nterminal\n\npython:int, optional\n\nTerminal to assign. Options are:\n\n0=Unspecified\n\n1=Negative node\n\n2=Positive none\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.type.html#type",
        "title": "type",
        "section": "type",
        "text": "Type of the edb object.\ntype"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.type.html#pyedb.dotnet.database.edb_data.ports.GapPort.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property GapPort.type\n\nType of the edb object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_sim_setup_info.html#set_sim_setup_info",
        "title": "set_sim_setup_info",
        "section": "set_sim_setup_info",
        "text": "set_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_sim_setup_info.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.set_sim_setup_info",
        "title": "set_sim_setup_info > set_sim_setup_info > set_sim_setup_info",
        "section": "set_sim_setup_info > set_sim_setup_info",
        "text": "HFSSPISimulationSetup.set_sim_setup_info(sim_setup_info)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_probe",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_probe.html#create_voltage_probe",
        "title": "create_voltage_probe",
        "section": "create_voltage_probe",
        "text": "Create a voltage probe.\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\npyedb.dotnet.database.edb_data.terminals.PointTerminal,\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\nPositive terminal of the port.\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\npyedb.dotnet.database.edb_data.terminals.PointTerminal,\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\nNegative terminal of the probe.\ncreate_voltage_probe\npyedb.dotnet.database.edb_data.terminals.EdgeTerminal\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal\npyedb.dotnet.database.edb_data.terminals.PointTerminal\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal\npyedb.dotnet.database.edb_data.terminals.EdgeTerminal\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal\npyedb.dotnet.database.edb_data.terminals.PointTerminal\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal\npyedb.dotnet.database.edb_data.terminals.Terminal"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_probe",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_probe.html#pyedb.dotnet.edb.Edb.create_voltage_probe",
        "title": "create_voltage_probe > create_voltage_probe > create_voltage_probe",
        "section": "create_voltage_probe > create_voltage_probe",
        "text": "Edb.create_voltage_probe(terminal, ref_terminal)\n\nCreate a voltage probe.\n\nParameters\n\nterminal\n\npyedb.dotnet.database.edb_data.terminals.EdgeTerminal,\n\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\npyedb.dotnet.database.edb_data.terminals.PointTerminal,\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\nPositive terminal of the port.\n\nref_terminal\n\npyedb.dotnet.database.edb_data.terminals.EdgeTerminal,\n\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\npyedb.dotnet.database.edb_data.terminals.PointTerminal,\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\nNegative terminal of the probe.\n\nReturns\n\npyedb.dotnet.database.edb_data.terminals.Terminal\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.update_rlc_from_bom",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.update_rlc_from_bom.html#update_rlc_from_bom",
        "title": "update_rlc_from_bom",
        "section": "update_rlc_from_bom",
        "text": "Update the EDC core component values (RLCs) with values coming from a BOM file.\nFull path to the BOM file, which is a delimited text file.\nHeader values needed inside the BOM reader must\nbe explicitly set if different from the defaults.\nValue to use for the delimiter. The default is \";\".\nField header containing the value of the component. The default is \"Func des\".\nThe value for this parameter must being with the value of the component\nfollowed by a space and then the rest of the value. For example, \"22pF\".\nField header containing the type of component. The default is \"Prod name\". For\nexample, you might enter \"Inductor\".\nField header containing the reference designator of the component. The default is\n\"Pos / Place\". For example, you might enter \"C100\".\nTrue if the file contains the header and it is correctly parsed. True is\nreturned even if no values are assigned.\nupdate_rlc_from_bom\npython:str\npython:str\noptional\n\";\"\npython:str\noptional\n\"Func des\"\n\"22pF\"\npython:str\noptional\n\"Prod name\"\n\"Inductor\"\npython:str\noptional\n\"Pos / Place\"\n\"C100\"\nTrue\nTrue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.update_rlc_from_bom",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.update_rlc_from_bom.html#pyedb.dotnet.database.components.Components.update_rlc_from_bom",
        "title": "update_rlc_from_bom > update_rlc_from_bom > update_rlc_from_bom",
        "section": "update_rlc_from_bom > update_rlc_from_bom",
        "text": "Components.update_rlc_from_bom(bom_file, delimiter=';', valuefield='Func des', comptype='Prod name', refdes='Pos / Place')\n\nUpdate the EDC core component values (RLCs) with values coming from a BOM file.\n\nParameters\n\nbom_file\n\npython:str\n\nFull path to the BOM file, which is a delimited text file.\nHeader values needed inside the BOM reader must\nbe explicitly set if different from the defaults.\n\ndelimiter\n\npython:str, optional\n\nValue to use for the delimiter. The default is \";\".\n\nvaluefield\n\npython:str, optional\n\nField header containing the value of the component. The default is \"Func des\".\nThe value for this parameter must being with the value of the component\nfollowed by a space and then the rest of the value. For example, \"22pF\".\n\ncomptype\n\npython:str, optional\n\nField header containing the type of component. The default is \"Prod name\". For\nexample, you might enter \"Inductor\".\n\nrefdes\n\npython:str, optional\n\nField header containing the reference designator of the component. The default is\n\"Pos / Place\". For example, you might enter \"C100\".\n\nReturns\n\nbool\n\nTrue if the file contains the header and it is correctly parsed. True is\nreturned even if no values are assigned.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer.html#layer",
        "title": "layer",
        "section": "layer",
        "text": "Get the primitive edb layer object.\nlayer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.layer",
        "title": "layer > layer > layer",
        "section": "layer > layer",
        "text": "property EDBPadstackInstance.layer\n\nGet the primitive edb layer object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.restore_default.html#restore_default",
        "title": "restore_default",
        "section": "restore_default",
        "text": "restore_default"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.restore_default.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.restore_default",
        "title": "restore_default > restore_default > restore_default",
        "section": "restore_default > restore_default",
        "text": "AdvancedSettings.restore_default()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.stackup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.stackup.html#stackup",
        "title": "stackup",
        "section": "stackup",
        "text": "Stackup manager.\nstackup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.stackup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.stackup.html#pyedb.dotnet.edb.Edb.stackup",
        "title": "stackup > stackup > stackup",
        "section": "stackup > stackup",
        "text": "property Edb.stackup\n\nStackup manager.\n\nReturns\n\nInstance of :class: ‘pyedb.dotnet.database.Stackup`\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> edbapp.stackup.layers[\"TOP\"].thickness = 4e-5\n>>> edbapp.stackup.layers[\"TOP\"].thickness == 4e-05\n>>> edbapp.stackup.add_layer(\"Diel\", \"GND\", layer_type=\"dielectric\", thickness=\"0.1mm\", material=\"FR4_epoxy\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_edb",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_edb.html#export_edb",
        "title": "export_edb",
        "section": "export_edb",
        "text": "Export the layout as EDB.\nPath to the EDB.\nexport_edb\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_edb",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_edb.html#pyedb.siwave.Siwave.export_edb",
        "title": "export_edb > export_edb > export_edb",
        "section": "export_edb > export_edb",
        "text": "Siwave.export_edb(file_path: str)\n\nExport the layout as EDB.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the EDB.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_siwave_report",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_siwave_report.html#export_siwave_report",
        "title": "export_siwave_report",
        "section": "export_siwave_report",
        "text": "Export the Siwave report.\nName of the setup.\nPath to the exported report.\nColor of the report’s background. The default is \"White\".\nTrue when successful, False when failed.\nexport_siwave_report\npython:str\npython:str\npython:str\noptional\n\"White\"\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_siwave_report",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_siwave_report.html#pyedb.siwave.Siwave.export_siwave_report",
        "title": "export_siwave_report > export_siwave_report > export_siwave_report",
        "section": "export_siwave_report > export_siwave_report",
        "text": "Siwave.export_siwave_report(simulation_name, file_path, bkground_color='White')\n\nExport the Siwave report.\n\nParameters\n\nsimulation_name\n\npython:str\n\nName of the setup.\n\nfile_path\n\npython:str\n\nPath to the exported report.\n\nbkground_color\n\npython:str, optional\n\nColor of the report’s background. The default is \"White\".\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "Get configuration data from layout.\nget_data_from_db\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_data_from_db.html#pyedb.configuration.cfg_stackup.CfgStackup.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgStackup.get_data_from_db()\n\nGet configuration data from layout.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.load",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.load.html#load",
        "title": "load",
        "section": "load",
        "text": "Import configuration settings from a configure file.\nFull path to configure file in JSON or TOML format. Dictionary is also supported.\nWhether if the new file will append to existing properties or the properties will be cleared before import.\nDefault is True to keep stored properties\nWhether to apply the file after the load or not. Default is False.\nFull path to the new aedb folder where the configured project will be saved.\nWhether to keep the new generated file opened at the end. Default is True.\nConfig dictionary.\nload\npython:str\npython:dict\noptional\nTrue\noptional\nFalse\npython:str\noptional\noptional\nTrue\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.load",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.load.html#pyedb.configuration.configuration.Configuration.load",
        "title": "load > load > load",
        "section": "load > load",
        "text": "Configuration.load(config_file, append=True, apply_file=False, output_file=None, open_at_the_end=True)\n\nImport configuration settings from a configure file.\n\nParameters\n\nconfig_file\n\npython:str, python:dict\n\nFull path to configure file in JSON or TOML format. Dictionary is also supported.\n\nappend\n\nbool, optional\n\nWhether if the new file will append to existing properties or the properties will be cleared before import.\nDefault is True to keep stored properties\n\napply_file\n\nbool, optional\n\nWhether to apply the file after the load or not. Default is False.\n\noutput_file\n\npython:str, optional\n\nFull path to the new aedb folder where the configured project will be saved.\n\nopen_at_the_end\n\nbool, optional\n\nWhether to keep the new generated file opened at the end. Default is True.\n\nReturns\n\npython:dict\n\nConfig dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Flag indicating if this object is null.\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_null.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property EdbPolygon.is_null\n\nFlag indicating if this object is null.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.new_simulation_configuration",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.new_simulation_configuration.html#new_simulation_configuration",
        "title": "new_simulation_configuration",
        "section": "new_simulation_configuration",
        "text": "New SimulationConfiguration Object.\nInput config file.\nnew_simulation_configuration\npython:str\noptional\nlegacy.database.edb_data.simulation_configuration.SimulationConfiguration"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.new_simulation_configuration",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.new_simulation_configuration.html#pyedb.dotnet.edb.Edb.new_simulation_configuration",
        "title": "new_simulation_configuration > new_simulation_configuration > new_simulation_configuration",
        "section": "new_simulation_configuration > new_simulation_configuration",
        "text": "Edb.new_simulation_configuration(filename: str | None = None) -> SimulationConfiguration\n\nNew SimulationConfiguration Object.\n\nParameters\n\nfilename\n\npython:str, optional\n\nInput config file.\n\nReturns\n\nlegacy.database.edb_data.simulation_configuration.SimulationConfiguration\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.shortest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.shortest_arc.html#shortest_arc",
        "title": "shortest_arc",
        "section": "shortest_arc",
        "text": "Get the longest arc.\nshortest_arc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.shortest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.shortest_arc.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.shortest_arc",
        "title": "shortest_arc > shortest_arc > shortest_arc",
        "section": "shortest_arc > shortest_arc",
        "text": "property EdbPolygon.shortest_arc\n\nGet the longest arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete_frequency_sweep.html#delete_frequency_sweep",
        "title": "delete_frequency_sweep",
        "section": "delete_frequency_sweep",
        "text": "Delete a frequency sweep.\ndelete_frequency_sweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete_frequency_sweep.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.delete_frequency_sweep",
        "title": "delete_frequency_sweep > delete_frequency_sweep > delete_frequency_sweep",
        "section": "delete_frequency_sweep > delete_frequency_sweep",
        "text": "HFSSPISimulationSetup.delete_frequency_sweep(sweep_data)\n\nDelete a frequency sweep.\n\nParameters\n\nsweep_data\n\nEdbFrequencySweep.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Hole material.\nMaterial of the hole.\nmaterial\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property EDBPadstack.material\n\nHole material.\n\nReturns\n\npython:str\n\nMaterial of the hole.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Flag indicating if this object is null.\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_null.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property EDBPadstackInstance.is_null\n\nFlag indicating if this object is null.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.quit_application",
        "href": "api/_autosummary/pyedb.siwave.Siwave.quit_application.html#quit_application",
        "title": "quit_application",
        "section": "quit_application",
        "text": "Quit the application.\nTrue when successful, False when failed.\nquit_application\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.quit_application",
        "href": "api/_autosummary/pyedb.siwave.Siwave.quit_application.html#pyedb.siwave.Siwave.quit_application",
        "title": "quit_application > quit_application > quit_application",
        "section": "quit_application > quit_application",
        "text": "Siwave.quit_application()\n\nQuit the application.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.type.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property MeshOperation.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Retrieve name of the layer.\nname\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.name.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property LayerEdbClass.name\n\nRetrieve name of the layer.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.center",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.center.html#center",
        "title": "center",
        "section": "center",
        "text": "Return the primitive bounding box center coordinate.\n[x, y]\ncenter\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.center",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.center.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.center",
        "title": "center > center > center",
        "section": "center > center",
        "text": "property EDBPadstackInstance.center\n\nReturn the primitive bounding box center coordinate.\n\nReturns\n\npython:list\n\n[x, y]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.mesh_operations.html#mesh_operations",
        "title": "mesh_operations",
        "section": "mesh_operations",
        "text": "mesh_operations"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.mesh_operations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.mesh_operations.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.mesh_operations",
        "title": "mesh_operations > mesh_operations > mesh_operations",
        "section": "mesh_operations > mesh_operations",
        "text": "property SimulationSetup.mesh_operations\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Mesh operation name.\nname\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.name.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property SkinDepthMeshOperation.name\n\nMesh operation name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.unite",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.unite.html#unite",
        "title": "unite",
        "section": "unite",
        "text": "Unite active primitive with one or more primitives.\nunite\ndotnet.database.edb_data.EDBPrimitives\nEDB\nPolygonData\nEDB\nPrimitive\npython:list\nList\nof\ndotnet.database.edb_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.unite",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.unite.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.unite",
        "title": "unite > unite > unite",
        "section": "unite > unite",
        "text": "EdbPolygon.unite(primitives)\n\nUnite active primitive with one or more primitives.\n\nParameters\n\nprimitives\n\ndotnet.database.edb_data.EDBPrimitives or EDB PolygonData or EDB Primitive or python:list\n\n\n\nReturns\n\nList of dotnet.database.edb_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.sources",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.sources.html#sources",
        "title": "sources",
        "section": "sources",
        "text": "Get all sources.\nsources"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.sources",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.sources.html#pyedb.dotnet.database.hfss.EdbHfss.sources",
        "title": "sources > sources > sources",
        "section": "sources > sources",
        "text": "property EdbHfss.sources\n\nGet all sources.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.import_edb",
        "href": "api/_autosummary/pyedb.siwave.Siwave.import_edb.html#import_edb",
        "title": "import_edb",
        "section": "import_edb",
        "text": "Import layout from EDB.\nPath to the EDB file.\nimport_edb\nStr"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.import_edb",
        "href": "api/_autosummary/pyedb.siwave.Siwave.import_edb.html#pyedb.siwave.Siwave.import_edb",
        "title": "import_edb > import_edb > import_edb",
        "section": "import_edb > import_edb",
        "text": "Siwave.import_edb(file_path: str)\n\nImport layout from EDB.\n\nParameters\n\nfile_path\n\nStr\n\nPath to the EDB file.\n\nReturns\n\n\n\n——-\n\n\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.import_material_from_control_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.import_material_from_control_file.html#import_material_from_control_file",
        "title": "import_material_from_control_file",
        "section": "import_material_from_control_file",
        "text": "Import materials from the provided control file.\nControl file name with full path.\nSchema file path.\nTrue if the existing materials in Database are kept. False to remove existing materials in database.\nimport_material_from_control_file\npython:str\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.import_material_from_control_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.import_material_from_control_file.html#pyedb.dotnet.edb.Edb.import_material_from_control_file",
        "title": "import_material_from_control_file > import_material_from_control_file > import_material_from_control_file",
        "section": "import_material_from_control_file > import_material_from_control_file",
        "text": "Edb.import_material_from_control_file(control_file, schema_dir=None, append=True)\n\nImport materials from the provided control file.\n\nParameters\n\ncontrol_file\n\npython:str\n\nControl file name with full path.\n\nschema_dir\n\npython:str\n\nSchema file path.\n\nappend\n\nbool\n\nTrue if the existing materials in Database are kept. False to remove existing materials in database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.type.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property HfssSimulationSetup.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.html#raptorxsimulationsettings",
        "title": "RaptorXSimulationSettings",
        "section": "RaptorXSimulationSettings",
        "text": "RaptorXSimulationSettings.advanced_settings\n\nRaptorXSimulationSettings.enabled\n\nRaptorXSimulationSettings.general_settings\n\nRaptorXSimulationSettings\nRaptorXSimulationSettings.advanced_settings\nRaptorXSimulationSettings.enabled\nRaptorXSimulationSettings.general_settings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings",
        "title": "RaptorXSimulationSettings > RaptorXSimulationSettings > RaptorXSimulationSettings",
        "section": "RaptorXSimulationSettings > RaptorXSimulationSettings",
        "text": "class pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings(edb_setup_info, pedb)\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nRaptorXSimulationSettings.advanced_settings\n\n\n\nRaptorXSimulationSettings.enabled\n\n\n\nRaptorXSimulationSettings.general_settings\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.convert_to_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.convert_to_polygon.html#convert_to_polygon",
        "title": "convert_to_polygon",
        "section": "convert_to_polygon",
        "text": "Convert path to polygon.\nPolygon when successful, False when failed.\nconvert_to_polygon\ndotnet.database.edb_data.primitives.EDBPrimitives\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.convert_to_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.convert_to_polygon.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.convert_to_polygon",
        "title": "convert_to_polygon > convert_to_polygon > convert_to_polygon",
        "section": "convert_to_polygon > convert_to_polygon",
        "text": "EdbPolygon.convert_to_polygon()\n\nConvert path to polygon.\n\nReturns\n\nbool, dotnet.database.edb_data.primitives.EDBPrimitives\n\nPolygon when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "build_breaking_change",
        "href": "build_breaking_change.html#build-breaking-changes-in-linux",
        "title": "Build breaking changes in Linux",
        "section": "Build breaking changes in Linux",
        "text": "Build breaking changes in Linux"
    },
    {
        "objectID": "build_breaking_change",
        "href": "build_breaking_change.html#key-change",
        "title": "Build breaking changes in Linux > Key change",
        "section": "Key change",
        "text": "Due to compatibility issues detected with Ubuntu 22.04, the use of dotnetcore2 has been removed.\nThe embedded version of .NET associated to dotnetcore2 is old and has incompatibilities with the\nversion of openssl that is installed by default in Ubuntu 22.04. This caused errors and conflicts with\ncritical dependencies in the environment.\nKey change"
    },
    {
        "objectID": "build_breaking_change",
        "href": "build_breaking_change.html#workaround-considered",
        "title": "Build breaking changes in Linux > Workaround considered",
        "section": "Workaround considered",
        "text": "A temporary workaround was considered, which involved manually installing an older version of the\nlibssl1.1 library. While this allowed the use of dotnetcore2, it is not recommended as a\nlong-term solution for the following reasons:\nSecurity risks: Installing an older version of libssl introduces vulnerabilities, as it may lack the latest security updates provided in the newer versions.\nSystem instability: Manually forcing an older version of libssl can lead to dependency conflicts with other software packages that rely on newer versions of this library, potentially causing further compatibility issues in the system.\nMaintenance overhead: Relying on deprecated or unsupported libraries increases the complexity of future upgrades and system maintenance, making the environment harder to manage in the long term.\nWorkaround considered"
    },
    {
        "objectID": "build_breaking_change",
        "href": "build_breaking_change.html#impact",
        "title": "Build breaking changes in Linux > Impact",
        "section": "Impact",
        "text": "Users need to install .NET themselves. The installation process can be done following the official\nMicrosoft documentation for .NET on Linux to ensure proper setup and compatibility. See\nRegister Microsoft package repository\nand Install .NET.\nStarting with Ubuntu 22.04, .NET is available in the official Ubuntu repository.\nIf you want to use the Microsoft package to install .NET, you can use the following\napproach to “demote” the Ubuntu packages so that the Microsoft packages take precedence.\n1. Ensure the removal of any existing .NET installation. In Ubuntu, this can be done with\nthe following command:\n2. Create a preference file in /etc/apt/preferences.d, for example microsoft-dotnet.pref,\nwith the following content:\nPerform an update and install of the version you want, for example .NET 6.0 or 8.0\nImpact"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete current simulation setup.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "RaptorXSimulationSetup.delete()\n\nDelete current simulation setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.use_shell_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.use_shell_elements.html#use_shell_elements",
        "title": "use_shell_elements",
        "section": "use_shell_elements",
        "text": "Whether to enable use of shell elements.\nTrue if shall elements are used, False otherwise.\nuse_shell_elements\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.use_shell_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.use_shell_elements.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.use_shell_elements",
        "title": "use_shell_elements > use_shell_elements > use_shell_elements",
        "section": "use_shell_elements > use_shell_elements",
        "text": "property HfssSolverSettings.use_shell_elements\n\nWhether to enable use of shell elements.\n\nReturns\n\nbool\n\nTrue if shall elements are used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer.html#thermalpad_by_layer",
        "title": "thermalpad_by_layer",
        "section": "thermalpad_by_layer",
        "text": "Thermal pad property.\nthermalpad_by_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer",
        "title": "thermalpad_by_layer > thermalpad_by_layer > thermalpad_by_layer",
        "section": "thermalpad_by_layer > thermalpad_by_layer",
        "text": "property EDBPadstack.thermalpad_by_layer\n\nThermal pad property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.open_edb_after_build",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.open_edb_after_build.html#open_edb_after_build",
        "title": "open_edb_after_build",
        "section": "open_edb_after_build",
        "text": "Either if open the Edb after the build or not.\nopen_edb_after_build"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.open_edb_after_build",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.open_edb_after_build.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.open_edb_after_build",
        "title": "open_edb_after_build > open_edb_after_build > open_edb_after_build",
        "section": "open_edb_after_build > open_edb_after_build",
        "text": "property SimulationConfiguration.open_edb_after_build\n\nEither if open the Edb after the build or not.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.sources",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.sources.html#sources",
        "title": "sources",
        "section": "sources",
        "text": "Get all layout sources.\nsources"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.sources",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.sources.html#pyedb.dotnet.edb.Edb.sources",
        "title": "sources > sources > sources",
        "section": "sources > sources",
        "text": "property Edb.sources\n\nGet all layout sources.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.html#simulationconfigurationac",
        "title": "SimulationConfigurationAc",
        "section": "SimulationConfigurationAc",
        "text": "Contains all AC analysis settings.\nThe class is part of SimulationConfiguration class as a property.\nSimulationConfigurationAc.adaptive_high_freq\nHFSS broadband high frequency adaptive meshing.\nSimulationConfigurationAc.adaptive_low_freq\nHFSS broadband low frequency adaptive meshing.\nSimulationConfigurationAc.adaptive_type\nHFSS adaptive type.\nSimulationConfigurationAc.arc_angle\nRetrieve the value for the HFSS meshing arc angle.\nSimulationConfigurationAc.arc_to_chord_error\nRetrieve the value of arc to chord error for HFSS meshing.\nSimulationConfigurationAc.basis_order\nRetrieve the BasisOrder object.\nSimulationConfigurationAc.decade_count\nRetrieve decade count number for the frequency sweep in case of a log sweep selected.\nSimulationConfigurationAc.defeature_abs_length\nRetrieve the value of arc to chord for HFSS meshing.\nSimulationConfigurationAc.defeature_layout\nRetrieve the boolean to activate the layout defeaturing.This method has been developed to simplify polygons with reducing the number of points to simplify the meshing with controlling its surface deviation.\nSimulationConfigurationAc.do_lambda_refinement\nRetrieve boolean to activate the lambda refinement.\nSimulationConfigurationAc.enforce_causality\nRetrieve boolean to enforce causality for the frequency sweep.\nSimulationConfigurationAc.enforce_passivity\nRetrieve boolean to enforce passivity for the frequency sweep.\nSimulationConfigurationAc.ignore_non_functional_pads\nBoolean to ignore nonfunctional pads with Siwave.\nSimulationConfigurationAc.include_inter_plane_coupling\nBoolean to activate the inter-plane coupling with Siwave.\nSimulationConfigurationAc.max_arc_points\nRetrieve the value of the maximum arc points number for the HFSS meshing.\nSimulationConfigurationAc.max_mag_delta_s\nRetrieve the magnitude of the delta S convergence criteria for the interpolating sweep.\nSimulationConfigurationAc.max_num_passes\nRetrieve maximum of points for the HFSS adaptive meshing.\nSimulationConfigurationAc.max_suf_dev\nRetrieve the value for the maximum surface deviation for the layout defeaturing.\nSimulationConfigurationAc.mesh_freq\nRetrieve the meshing frequency for the HFSS adaptive convergence.\nSimulationConfigurationAc.mesh_sizefactor\nRetrieve the Mesh Size factor value.\nSimulationConfigurationAc.min_num_passes\nRetrieve the minimum number of adaptive passes for HFSS convergence.\nSimulationConfigurationAc.min_pad_area_to_mesh\nRetrieve the value of minimum pad area to be meshed by Siwave.\nSimulationConfigurationAc.min_plane_area_to_mesh\nRetrieve the minimum plane area to be meshed by Siwave.\nSimulationConfigurationAc.min_void_area\nRetrieve the value of minimum void area to be considered by Siwave.\nSimulationConfigurationAc.minimum_void_surface\nRetrieve the minimum void surface to be considered for the layout defeaturing.\nSimulationConfigurationAc.passivity_tolerance\nRetrieve the value for the passivity tolerance when used.\nSimulationConfigurationAc.percentage_error_z0\nRetrieve boolean to perform the cutout during the project build.\nSimulationConfigurationAc.process_padstack_definitions\nRetrieve the boolean for activating the padstack definition processing.\nSimulationConfigurationAc.radiation_box\nRetrieve RadiationBoxType object selection defined for the radiation box type.\nSimulationConfigurationAc.relative_error\nRetrieve relative error used for the interpolating sweep convergence.\nSimulationConfigurationAc.return_current_distribution\nBoolean to activate the current distribution return with Siwave.\nSimulationConfigurationAc.snap_length_threshold\nRetrieve the boolean to activate the snapping threshold feature.\nSimulationConfigurationAc.start_azimuth\nRetrieve the value of the starting azimuth for the HFSS meshing.\nSimulationConfigurationAc.start_freq\nStarting frequency for the frequency sweep.\nSimulationConfigurationAc.step_freq\nRetrieve step frequency for the frequency sweep.\nSimulationConfigurationAc.stop_freq\nRetrieve stop frequency for the frequency sweep.\nSimulationConfigurationAc.sweep_interpolating\nRetrieve boolean to add a sweep interpolating sweep.\nSimulationConfigurationAc.sweep_name\nRetrieve frequency sweep name.\nSimulationConfigurationAc.sweep_type\nRetrieve SweepType object for the frequency sweep.\nSimulationConfigurationAc.use_arc_to_chord_error\nRetrieve the boolean for activating the arc to chord for HFSS meshing.\nSimulationConfigurationAc.use_error_z0\nRetrieve value for the error on Z0 for the port.\nSimulationConfigurationAc.use_q3d_for_dc\nRetrieve boolean to Q3D solver for DC point value computation.\nSimulationConfigurationAc.xtalk_threshold\nReturn the value for Siwave cross talk threshold.\nSimulationConfigurationAc\nSimulationConfigurationAc.adaptive_high_freq\nSimulationConfigurationAc.adaptive_low_freq\nSimulationConfigurationAc.adaptive_type\nSimulationConfigurationAc.arc_angle\nSimulationConfigurationAc.arc_to_chord_error\nSimulationConfigurationAc.basis_order\nSimulationConfigurationAc.decade_count\nSimulationConfigurationAc.defeature_abs_length\nSimulationConfigurationAc.defeature_layout\nSimulationConfigurationAc.do_lambda_refinement\nSimulationConfigurationAc.enforce_causality\nSimulationConfigurationAc.enforce_passivity\nSimulationConfigurationAc.ignore_non_functional_pads\nSimulationConfigurationAc.include_inter_plane_coupling\nSimulationConfigurationAc.max_arc_points\nSimulationConfigurationAc.max_mag_delta_s\nSimulationConfigurationAc.max_num_passes\nSimulationConfigurationAc.max_suf_dev\nSimulationConfigurationAc.mesh_freq\nSimulationConfigurationAc.mesh_sizefactor\nSimulationConfigurationAc.min_num_passes\nSimulationConfigurationAc.min_pad_area_to_mesh\nSimulationConfigurationAc.min_plane_area_to_mesh\nSimulationConfigurationAc.min_void_area\nSimulationConfigurationAc.minimum_void_surface\nSimulationConfigurationAc.passivity_tolerance\nSimulationConfigurationAc.percentage_error_z0\nSimulationConfigurationAc.process_padstack_definitions\nSimulationConfigurationAc.radiation_box\nSimulationConfigurationAc.relative_error\nSimulationConfigurationAc.return_current_distribution\nSimulationConfigurationAc.snap_length_threshold\nSimulationConfigurationAc.start_azimuth\nSimulationConfigurationAc.start_freq\nSimulationConfigurationAc.step_freq\nSimulationConfigurationAc.stop_freq\nSimulationConfigurationAc.sweep_interpolating\nSimulationConfigurationAc.sweep_name\nSimulationConfigurationAc.sweep_type\nSimulationConfigurationAc.use_arc_to_chord_error\nSimulationConfigurationAc.use_error_z0\nSimulationConfigurationAc.use_q3d_for_dc\nSimulationConfigurationAc.xtalk_threshold"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc",
        "title": "SimulationConfigurationAc > SimulationConfigurationAc > SimulationConfigurationAc",
        "section": "SimulationConfigurationAc > SimulationConfigurationAc",
        "text": "class pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc\n\nContains all AC analysis settings.\nThe class is part of SimulationConfiguration class as a property.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nSimulationConfigurationAc.adaptive_high_freq\n\nHFSS broadband high frequency adaptive meshing.\n\nSimulationConfigurationAc.adaptive_low_freq\n\nHFSS broadband low frequency adaptive meshing.\n\nSimulationConfigurationAc.adaptive_type\n\nHFSS adaptive type.\n\nSimulationConfigurationAc.arc_angle\n\nRetrieve the value for the HFSS meshing arc angle.\n\nSimulationConfigurationAc.arc_to_chord_error\n\nRetrieve the value of arc to chord error for HFSS meshing.\n\nSimulationConfigurationAc.basis_order\n\nRetrieve the BasisOrder object.\n\nSimulationConfigurationAc.decade_count\n\nRetrieve decade count number for the frequency sweep in case of a log sweep selected.\n\nSimulationConfigurationAc.defeature_abs_length\n\nRetrieve the value of arc to chord for HFSS meshing.\n\nSimulationConfigurationAc.defeature_layout\n\nRetrieve the boolean to activate the layout defeaturing.This method has been developed to simplify polygons with reducing the number of points to simplify the meshing with controlling its surface deviation.\n\nSimulationConfigurationAc.do_lambda_refinement\n\nRetrieve boolean to activate the lambda refinement.\n\nSimulationConfigurationAc.enforce_causality\n\nRetrieve boolean to enforce causality for the frequency sweep.\n\nSimulationConfigurationAc.enforce_passivity\n\nRetrieve boolean to enforce passivity for the frequency sweep.\n\nSimulationConfigurationAc.ignore_non_functional_pads\n\nBoolean to ignore nonfunctional pads with Siwave.\n\nSimulationConfigurationAc.include_inter_plane_coupling\n\nBoolean to activate the inter-plane coupling with Siwave.\n\nSimulationConfigurationAc.max_arc_points\n\nRetrieve the value of the maximum arc points number for the HFSS meshing.\n\nSimulationConfigurationAc.max_mag_delta_s\n\nRetrieve the magnitude of the delta S convergence criteria for the interpolating sweep.\n\nSimulationConfigurationAc.max_num_passes\n\nRetrieve maximum of points for the HFSS adaptive meshing.\n\nSimulationConfigurationAc.max_suf_dev\n\nRetrieve the value for the maximum surface deviation for the layout defeaturing.\n\nSimulationConfigurationAc.mesh_freq\n\nRetrieve the meshing frequency for the HFSS adaptive convergence.\n\nSimulationConfigurationAc.mesh_sizefactor\n\nRetrieve the Mesh Size factor value.\n\nSimulationConfigurationAc.min_num_passes\n\nRetrieve the minimum number of adaptive passes for HFSS convergence.\n\nSimulationConfigurationAc.min_pad_area_to_mesh\n\nRetrieve the value of minimum pad area to be meshed by Siwave.\n\nSimulationConfigurationAc.min_plane_area_to_mesh\n\nRetrieve the minimum plane area to be meshed by Siwave.\n\nSimulationConfigurationAc.min_void_area\n\nRetrieve the value of minimum void area to be considered by Siwave.\n\nSimulationConfigurationAc.minimum_void_surface\n\nRetrieve the minimum void surface to be considered for the layout defeaturing.\n\nSimulationConfigurationAc.passivity_tolerance\n\nRetrieve the value for the passivity tolerance when used.\n\nSimulationConfigurationAc.percentage_error_z0\n\nRetrieve boolean to perform the cutout during the project build.\n\nSimulationConfigurationAc.process_padstack_definitions\n\nRetrieve the boolean for activating the padstack definition processing.\n\nSimulationConfigurationAc.radiation_box\n\nRetrieve RadiationBoxType object selection defined for the radiation box type.\n\nSimulationConfigurationAc.relative_error\n\nRetrieve relative error used for the interpolating sweep convergence.\n\nSimulationConfigurationAc.return_current_distribution\n\nBoolean to activate the current distribution return with Siwave.\n\nSimulationConfigurationAc.snap_length_threshold\n\nRetrieve the boolean to activate the snapping threshold feature.\n\nSimulationConfigurationAc.start_azimuth\n\nRetrieve the value of the starting azimuth for the HFSS meshing.\n\nSimulationConfigurationAc.start_freq\n\nStarting frequency for the frequency sweep.\n\nSimulationConfigurationAc.step_freq\n\nRetrieve step frequency for the frequency sweep.\n\nSimulationConfigurationAc.stop_freq\n\nRetrieve stop frequency for the frequency sweep.\n\nSimulationConfigurationAc.sweep_interpolating\n\nRetrieve boolean to add a sweep interpolating sweep.\n\nSimulationConfigurationAc.sweep_name\n\nRetrieve frequency sweep name.\n\nSimulationConfigurationAc.sweep_type\n\nRetrieve SweepType object for the frequency sweep.\n\nSimulationConfigurationAc.use_arc_to_chord_error\n\nRetrieve the boolean for activating the arc to chord for HFSS meshing.\n\nSimulationConfigurationAc.use_error_z0\n\nRetrieve value for the error on Z0 for the port.\n\nSimulationConfigurationAc.use_q3d_for_dc\n\nRetrieve boolean to Q3D solver for DC point value computation.\n\nSimulationConfigurationAc.xtalk_threshold\n\nReturn the value for Siwave cross talk threshold.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_perform_adaptive_refinement",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_perform_adaptive_refinement.html#dc_perform_adaptive_refinement",
        "title": "dc_perform_adaptive_refinement",
        "section": "dc_perform_adaptive_refinement",
        "text": "Retrieve the value for performing adaptive meshing.\nTrue when activated, False deactivated.\ndc_perform_adaptive_refinement\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_perform_adaptive_refinement",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_perform_adaptive_refinement.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_perform_adaptive_refinement",
        "title": "dc_perform_adaptive_refinement > dc_perform_adaptive_refinement > dc_perform_adaptive_refinement",
        "section": "dc_perform_adaptive_refinement > dc_perform_adaptive_refinement",
        "text": "property SimulationConfigurationDc.dc_perform_adaptive_refinement\n\nRetrieve the value for performing adaptive meshing.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponent.set_attributes.html#pyedb.configuration.cfg_components.CfgComponent.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgComponent.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.html#lengthmeshoperation",
        "title": "LengthMeshOperation",
        "section": "LengthMeshOperation",
        "text": "Mesh operation Length class.\nThis class is accessible from Hfss Setup in EDB and add_length_mesh_operation method.\nLengthMeshOperation.enabled\nWhether if mesh operation is enabled.\nLengthMeshOperation.max_elements\nMaximum number of elements.\nLengthMeshOperation.max_length\nMaximum length of elements.\nLengthMeshOperation.mesh_operation_type\nMesh operation type.\nLengthMeshOperation.mesh_region\nMesh region name.\nLengthMeshOperation.name\nMesh operation name.\nLengthMeshOperation.net_layer_info\nAdding property for grpc compatibility.\nLengthMeshOperation.nets_layers_list\nList of nets and layers.\nLengthMeshOperation.refine_inside\nWhether to turn on refine inside objects.\nLengthMeshOperation.restrict_length\nWhether to restrict length of elements.\nLengthMeshOperation.restrict_max_elements\nWhether to restrict maximum number  of elements.\nLengthMeshOperation.restrict_max_length\nAdding property for grpc compatibility.\nLengthMeshOperation.type\n\nLengthMeshOperation\nLengthMeshOperation.enabled\nLengthMeshOperation.max_elements\nLengthMeshOperation.max_length\nLengthMeshOperation.mesh_operation_type\nLengthMeshOperation.mesh_region\nLengthMeshOperation.name\nLengthMeshOperation.net_layer_info\nLengthMeshOperation.nets_layers_list\nLengthMeshOperation.refine_inside\nLengthMeshOperation.restrict_length\nLengthMeshOperation.restrict_max_elements\nLengthMeshOperation.restrict_max_length\nLengthMeshOperation.type"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation",
        "title": "LengthMeshOperation > LengthMeshOperation > LengthMeshOperation",
        "section": "LengthMeshOperation > LengthMeshOperation",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation(parent, edb_object)\n\nMesh operation Length class.\nThis class is accessible from Hfss Setup in EDB and add_length_mesh_operation method.\n\nExamples\n\n>>> mop = edbapp.setups[\"setup1a\"].add_length_mesh_operation({\"GND\": [\"TOP\", \"BOTTOM\"]})\n>>> mop.max_elements = 3000\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nLengthMeshOperation.enabled\n\nWhether if mesh operation is enabled.\n\nLengthMeshOperation.max_elements\n\nMaximum number of elements.\n\nLengthMeshOperation.max_length\n\nMaximum length of elements.\n\nLengthMeshOperation.mesh_operation_type\n\nMesh operation type.\n\nLengthMeshOperation.mesh_region\n\nMesh region name.\n\nLengthMeshOperation.name\n\nMesh operation name.\n\nLengthMeshOperation.net_layer_info\n\nAdding property for grpc compatibility.\n\nLengthMeshOperation.nets_layers_list\n\nList of nets and layers.\n\nLengthMeshOperation.refine_inside\n\nWhether to turn on refine inside objects.\n\nLengthMeshOperation.restrict_length\n\nWhether to restrict length of elements.\n\nLengthMeshOperation.restrict_max_elements\n\nWhether to restrict maximum number  of elements.\n\nLengthMeshOperation.restrict_max_length\n\nAdding property for grpc compatibility.\n\nLengthMeshOperation.type\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.voids.html#voids",
        "title": "voids",
        "section": "voids",
        "text": "list of Primitive: List of void        primitive objects inside the primitive.\nRead-Only.\nvoids\nlist\nPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.voids.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.voids",
        "title": "voids > voids > voids",
        "section": "voids > voids",
        "text": "property EDBPadstackInstance.voids\n\nlist of Primitive: List of void        primitive objects inside the primitive.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_above",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_above.html#add_layer_above",
        "title": "add_layer_above",
        "section": "add_layer_above",
        "text": "Add a layer above a layer.\nName of the layer.\nName of the base layer.\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\nadd_layer_above\npython:str\n\"signal\"\n\"signal\"\n\"dielectric\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_above",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_above.html#pyedb.dotnet.database.stackup.Stackup.add_layer_above",
        "title": "add_layer_above > add_layer_above > add_layer_above",
        "section": "add_layer_above > add_layer_above",
        "text": "Stackup.add_layer_above(name, base_layer_name, layer_type='signal', **kwargs)\n\nAdd a layer above a layer.\n\nParameters\n\nname\n\npython:str\n\nName of the layer.\n\nbase_layer_name: str\n\nName of the base layer.\n\nlayer_type: str, optional\n\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\n\nkwargs\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfss_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfss_setup.html#create_hfss_setup",
        "title": "create_hfss_setup",
        "section": "create_hfss_setup",
        "text": "Create an HFSS simulation setup from a template.\nSetup name.\ncreate_hfss_setup\npython:str\noptional\nlegacy.database.edb_data.hfss_simulation_setup_data.HfssSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfss_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfss_setup.html#pyedb.dotnet.edb.Edb.create_hfss_setup",
        "title": "create_hfss_setup > create_hfss_setup > create_hfss_setup",
        "section": "create_hfss_setup > create_hfss_setup",
        "text": "Edb.create_hfss_setup(name=None)\n\nCreate an HFSS simulation setup from a template.\n\nParameters\n\nname\n\npython:str, optional\n\nSetup name.\n\nReturns\n\nlegacy.database.edb_data.hfss_simulation_setup_data.HfssSimulationSetup\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb()\n>>> setup1 = edbapp.create_hfss_setup(\"setup1\")\n>>> setup1.hfss_port_settings.max_delta_z0 = 0.5\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.delete_single_pin_rlc",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.delete_single_pin_rlc.html#delete_single_pin_rlc",
        "title": "delete_single_pin_rlc",
        "section": "delete_single_pin_rlc",
        "text": "Delete all RLC components with a single pin.\nSingle pin component model type will be reverted to \"RLC\".\nWhether to only deactivate RLC components with a single point rather than\ndelete them. The default is False, in which case they are deleted.\nList of deleted RLC components.\ndelete_single_pin_rlc\n\"RLC\"\noptional\nFalse\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.delete_single_pin_rlc",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.delete_single_pin_rlc.html#pyedb.dotnet.database.components.Components.delete_single_pin_rlc",
        "title": "delete_single_pin_rlc > delete_single_pin_rlc > delete_single_pin_rlc",
        "section": "delete_single_pin_rlc > delete_single_pin_rlc",
        "text": "Components.delete_single_pin_rlc(deactivate_only: bool = False) -> list\n\nDelete all RLC components with a single pin.\nSingle pin component model type will be reverted to \"RLC\".\n\nParameters\n\ndeactivate_only\n\nbool, optional\n\nWhether to only deactivate RLC components with a single point rather than\ndelete them. The default is False, in which case they are deleted.\n\nReturns\n\npython:list\n\nList of deleted RLC components.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> list_of_deleted_rlcs = edbapp.components.delete_single_pin_rlc()\n>>> print(list_of_deleted_rlcs)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias.html#convert_to_3d_microvias",
        "title": "convert_to_3d_microvias",
        "section": "convert_to_3d_microvias",
        "text": "Convert actual padstack instance to microvias 3D Objects with a given aspect ratio.\nEither to convert only vias belonging to signal nets or all vias. Defaults is True.\nAngle of laser penetration in degrees. The angle defines the lowest hole diameter with this formula:\nHoleDiameter -2*tan(laser_angle* Hole depth). Hole depth is the height of the via (dielectric thickness).\nThe default is 15.\nThe lowest hole is 0.75*HoleDepth/HoleDiam.\nWhether to delete the padstack definition. The default is True.\nIf False, the padstack definition is not deleted and the hole size is set to zero.\nconvert_to_3d_microvias\noptional\nTrue\npython:float\noptional\n15\n0.75*HoleDepth/HoleDiam\noptional\nTrue\nFalse\nTrue\nwhen\nsuccessful\nFalse\nwhen"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias",
        "title": "convert_to_3d_microvias > convert_to_3d_microvias > convert_to_3d_microvias",
        "section": "convert_to_3d_microvias > convert_to_3d_microvias",
        "text": "EDBPadstack.convert_to_3d_microvias(convert_only_signal_vias=True, hole_wall_angle=75, delete_padstack_def=True)\n\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\n\nParameters\n\nconvert_only_signal_vias\n\nbool, optional\n\nEither to convert only vias belonging to signal nets or all vias. Defaults is True.\n\nhole_wall_angle\n\npython:float, optional\n\nAngle of laser penetration in degrees. The angle defines the lowest hole diameter with this formula:\nHoleDiameter -2*tan(laser_angle* Hole depth). Hole depth is the height of the via (dielectric thickness).\nThe default is 15.\nThe lowest hole is 0.75*HoleDepth/HoleDiam.\n\ndelete_padstack_def\n\nbool, optional\n\nWhether to delete the padstack definition. The default is True.\nIf False, the padstack definition is not deleted and the hole size is set to zero.\n\nReturns\n\nTrue when successful, False when failed.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.etching_factor_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.etching_factor_instances.html#etching_factor_instances",
        "title": "etching_factor_instances",
        "section": "etching_factor_instances",
        "text": "Retrieve the list of etching factor with associated layers.\netching_factor_instances\npython:list\npython:str\npython:list\netching\nparameters\nwith\nlayer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.etching_factor_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.etching_factor_instances.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.etching_factor_instances",
        "title": "etching_factor_instances > etching_factor_instances > etching_factor_instances",
        "section": "etching_factor_instances > etching_factor_instances",
        "text": "property SimulationConfigurationBatch.etching_factor_instances\n\nRetrieve the list of etching factor with associated layers.\n\nReturns\n\npython:list[python:str]\n\n\n\npython:list etching parameters with layer name.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/index",
        "href": "api/utilities/index.html#utilities",
        "title": "Utilities",
        "section": "Utilities",
        "text": "This section describes utilities.\nUtilities"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_plane_area_to_mesh",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_plane_area_to_mesh.html#min_plane_area_to_mesh",
        "title": "min_plane_area_to_mesh",
        "section": "min_plane_area_to_mesh",
        "text": "The minimum area below which geometry is ignored.\nmin_plane_area_to_mesh\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_plane_area_to_mesh",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_plane_area_to_mesh.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.min_plane_area_to_mesh",
        "title": "min_plane_area_to_mesh > min_plane_area_to_mesh > min_plane_area_to_mesh",
        "section": "min_plane_area_to_mesh > min_plane_area_to_mesh",
        "text": "property HFSSPISimulationSettings.min_plane_area_to_mesh\n\nThe minimum area below which geometry is ignored.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_gds_comp_xml",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_gds_comp_xml.html#export_gds_comp_xml",
        "title": "export_gds_comp_xml",
        "section": "export_gds_comp_xml",
        "text": "Exports an XML file with selected components information for use in a GDS import.\nList of components whose information will be exported to xml file.\nGDS_COMPONENTS section units. Default is \"mm\".\nPath for outputting the XML file.\nTrue when successful, False when failed.\nexport_gds_comp_xml\npython:list\npython:str\noptional\n\"mm\"\npython:str\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_gds_comp_xml",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_gds_comp_xml.html#pyedb.dotnet.edb.Edb.export_gds_comp_xml",
        "title": "export_gds_comp_xml > export_gds_comp_xml > export_gds_comp_xml",
        "section": "export_gds_comp_xml > export_gds_comp_xml",
        "text": "Edb.export_gds_comp_xml(comps_to_export, gds_comps_unit='mm', control_path=None)\n\nExports an XML file with selected components information for use in a GDS import.\n\nParameters\n\ncomps_to_export\n\npython:list\n\nList of components whose information will be exported to xml file.\n\ngds_comps_unit\n\npython:str, optional\n\nGDS_COMPONENTS section units. Default is \"mm\".\n\ncontrol_path\n\npython:str, optional\n\nPath for outputting the XML file.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.truncate_air_box_at_ground",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.truncate_air_box_at_ground.html#truncate_air_box_at_ground",
        "title": "truncate_air_box_at_ground",
        "section": "truncate_air_box_at_ground",
        "text": "Truncate air box at ground.\ntruncate_air_box_at_ground"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.truncate_air_box_at_ground",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.truncate_air_box_at_ground.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.truncate_air_box_at_ground",
        "title": "truncate_air_box_at_ground > truncate_air_box_at_ground > truncate_air_box_at_ground",
        "section": "truncate_air_box_at_ground > truncate_air_box_at_ground",
        "text": "property HfssExtentInfo.truncate_air_box_at_ground\n\nTruncate air box at ground.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.type.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property LengthMeshOperation.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.frequency_sweeps.html#frequency_sweeps",
        "title": "frequency_sweeps",
        "section": "frequency_sweeps",
        "text": "frequency_sweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.frequency_sweeps.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.frequency_sweeps",
        "title": "frequency_sweeps > frequency_sweeps > frequency_sweeps",
        "section": "frequency_sweeps > frequency_sweeps",
        "text": "property HfssSimulationSetup.frequency_sweeps\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons.html#polygons",
        "title": "polygons",
        "section": "polygons",
        "text": "Polygons.\nList of polygons.\npolygons\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.polygons.html#pyedb.dotnet.database.modeler.Modeler.polygons",
        "title": "polygons > polygons > polygons",
        "section": "polygons > polygons",
        "text": "property Modeler.polygons\n\nPolygons.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nList of polygons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.probes",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.probes.html#probes",
        "title": "probes",
        "section": "probes",
        "text": "Get all probes.\nprobes"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.probes",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.probes.html#pyedb.dotnet.database.hfss.EdbHfss.probes",
        "title": "probes > probes > probes",
        "section": "probes > probes",
        "text": "property EdbHfss.probes\n\nGet all probes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points.html#points",
        "title": "points",
        "section": "points",
        "text": "Return the list of points with arcs converted to segments.\nNumber of facets to convert an arc. Default is 6.\nThe tuple contains 2 lists made of X and Y points coordinates.\npoints\npython:int\npython:tuple"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.points",
        "title": "points > points > points",
        "section": "points > points",
        "text": "EDBPadstackInstance.points(arc_segments=6)\n\nReturn the list of points with arcs converted to segments.\n\nParameters\n\narc_segments\n\npython:int\n\nNumber of facets to convert an arc. Default is 6.\n\nReturns\n\npython:tuple\n\nThe tuple contains 2 lists made of X and Y points coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_pin.html#create_current_source_on_pin",
        "title": "create_current_source_on_pin",
        "section": "create_current_source_on_pin",
        "text": "Create a current source.\nPositive Pin.\nNegative Pin.\nValue for the current. The default is 0.1.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nSource Name.\ncreate_current_source_on_pin\nObject\nObject\npython:float\noptional\n0.1\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_pin.html#pyedb.dotnet.database.hfss.EdbHfss.create_current_source_on_pin",
        "title": "create_current_source_on_pin > create_current_source_on_pin > create_current_source_on_pin",
        "section": "create_current_source_on_pin > create_current_source_on_pin",
        "text": "EdbHfss.create_current_source_on_pin(pos_pin, neg_pin, current_value=0.1, phase_value=0, source_name='')\n\nCreate a current source.\n\nParameters\n\npos_pin\n\nObject\n\nPositive Pin.\n\nneg_pin\n\nObject\n\nNegative Pin.\n\ncurrent_value\n\npython:float, optional\n\nValue for the current. The default is 0.1.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nSource Name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> pins =edbapp.components.get_pin_from_component(\"U2A5\")\n>>> edbapp.hfss.create_current_source_on_pin(pins[0], pins[1],50,\"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.eligible_power_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.eligible_power_nets.html#eligible_power_nets",
        "title": "eligible_power_nets",
        "section": "eligible_power_nets",
        "text": "It uses the same algorithm implemented in SIwave.\nArea ratio used by the get_power_ground_nets method.\neligible_power_nets\npython:float\noptional\nget_power_ground_nets\npython:list\nof\npyedb.dotnet.database.edb_data.EDBNetsData"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.eligible_power_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.eligible_power_nets.html#pyedb.dotnet.database.nets.EdbNets.eligible_power_nets",
        "title": "eligible_power_nets > eligible_power_nets > eligible_power_nets",
        "section": "eligible_power_nets > eligible_power_nets",
        "text": "EdbNets.eligible_power_nets(threshold=0.3)\n\nReturn a list of nets calculated by area to be eligible for PWR/Ground net classification.\n\nIt uses the same algorithm implemented in SIwave.\n\nParameters\n\nthreshold\n\npython:float, optional\n\nArea ratio used by the get_power_ground_nets method.\n\nReturns\n\npython:list of  pyedb.dotnet.database.edb_data.EDBNetsData\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.phase",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.phase.html#phase",
        "title": "phase",
        "section": "phase",
        "text": "Get the phase of the source.\nphase"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.phase",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.phase.html#pyedb.dotnet.database.edb_data.ports.WavePort.phase",
        "title": "phase > phase > phase",
        "section": "phase > phase",
        "text": "property WavePort.phase\n\nGet the phase of the source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_res_path",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_res_path.html#dc_per_pin_res_path",
        "title": "dc_per_pin_res_path",
        "section": "dc_per_pin_res_path",
        "text": "Retrieve the file path.\ndc_per_pin_res_path\npython:str\nThe\nfile"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_res_path",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_res_path.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_res_path",
        "title": "dc_per_pin_res_path > dc_per_pin_res_path > dc_per_pin_res_path",
        "section": "dc_per_pin_res_path > dc_per_pin_res_path",
        "text": "property SimulationConfigurationDc.dc_per_pin_res_path\n\nRetrieve the file path.\n\nReturns\n\npython:str\n\n\n\nThe file path.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_resistor_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_resistor_on_pin.html#create_resistor_on_pin",
        "title": "create_resistor_on_pin",
        "section": "create_resistor_on_pin",
        "text": "Create a Resistor boundary between two given pins..\nPositive Pin.\nNegative Pin.\nResistance value. The default is 1.\nName of the resistor. The default is \"\".\nName of the resistor.\ncreate_resistor_on_pin\nObject\nObject\npython:float\noptional\n1\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_resistor_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_resistor_on_pin.html#pyedb.dotnet.database.siwave.EdbSiwave.create_resistor_on_pin",
        "title": "create_resistor_on_pin > create_resistor_on_pin > create_resistor_on_pin",
        "section": "create_resistor_on_pin > create_resistor_on_pin",
        "text": "EdbSiwave.create_resistor_on_pin(pos_pin, neg_pin, rvalue=1, resistor_name='')\n\nCreate a Resistor boundary between two given pins..\n\nParameters\n\npos_pin\n\nObject\n\nPositive Pin.\n\nneg_pin\n\nObject\n\nNegative Pin.\n\nrvalue\n\npython:float, optional\n\nResistance value. The default is 1.\n\nresistor_name\n\npython:str, optional\n\nName of the resistor. The default is \"\".\n\nReturns\n\npython:str\n\nName of the resistor.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> pins =edbapp.components.get_pin_from_component(\"U2A5\")\n>>> edbapp.siwave.create_resistor_on_pin(pins[0], pins[1],50,\"res_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer.html#via_start_layer",
        "title": "via_start_layer",
        "section": "via_start_layer",
        "text": "Starting layer.\nName of the starting layer.\nvia_start_layer\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_start_layer",
        "title": "via_start_layer > via_start_layer > via_start_layer",
        "section": "via_start_layer > via_start_layer",
        "text": "property EDBPadstack.via_start_layer\n\nStarting layer.\n\nReturns\n\npython:str\n\nName of the starting layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_objects",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_objects.html#get_connected_objects",
        "title": "get_connected_objects",
        "section": "get_connected_objects",
        "text": "Get connected objects.\nget_connected_objects\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_objects",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_objects.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_objects",
        "title": "get_connected_objects > get_connected_objects > get_connected_objects",
        "section": "get_connected_objects > get_connected_objects",
        "text": "EDBPadstackInstance.get_connected_objects()\n\nGet connected objects.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.do_adaptive",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.do_adaptive.html#do_adaptive",
        "title": "do_adaptive",
        "section": "do_adaptive",
        "text": "Whether if adaptive mesh is on.\nTrue if adaptive is used, False otherwise.\ndo_adaptive\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.do_adaptive",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.do_adaptive.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.do_adaptive",
        "title": "do_adaptive > do_adaptive > do_adaptive",
        "section": "do_adaptive > do_adaptive",
        "text": "property AdaptiveSettings.do_adaptive\n\nWhether if adaptive mesh is on.\n\nReturns\n\nbool\n\nTrue if adaptive is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/simulation_settings",
        "href": "api/sim_setup_data/data/simulation_settings.html#simulation-settings",
        "title": "Simulation settings",
        "section": "Simulation settings",
        "text": "These classes are the containers of simulation settings.\nBaseSimulationSettings\n\nSimulationSettings\n\nHFSSSimulationSettings\n\nHFSSPISimulationSettings\n\nSimulation settings\nBaseSimulationSettings\nSimulationSettings\nHFSSSimulationSettings\nHFSSPISimulationSettings"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.replace_rlc_by_gap_boundaries",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.replace_rlc_by_gap_boundaries.html#replace_rlc_by_gap_boundaries",
        "title": "replace_rlc_by_gap_boundaries",
        "section": "replace_rlc_by_gap_boundaries",
        "text": "Replace RLC component by RLC gap boundaries. These boundary types are compatible with 3D modeler export.\nOnly 2 pins RLC components are supported in this command.\nReference designator of the RLC component.\nreplace_rlc_by_gap_boundaries\npython:str\nTrue\nwhen\nsucceed\nFalse\nif\nit"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.replace_rlc_by_gap_boundaries",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.replace_rlc_by_gap_boundaries.html#pyedb.dotnet.database.components.Components.replace_rlc_by_gap_boundaries",
        "title": "replace_rlc_by_gap_boundaries > replace_rlc_by_gap_boundaries > replace_rlc_by_gap_boundaries",
        "section": "replace_rlc_by_gap_boundaries > replace_rlc_by_gap_boundaries",
        "text": "Components.replace_rlc_by_gap_boundaries(component=None)\n\nReplace RLC component by RLC gap boundaries. These boundary types are compatible with 3D modeler export.\nOnly 2 pins RLC components are supported in this command.\n\nParameters\n\ncomponent\n\npython:str\n\nReference designator of the RLC component.\n\nReturns\n\nbool\n\n\n\nTrue when succeed, False if it failed.\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(edb_file)\n>>>  for refdes, cmp in edb.components.capacitors.items():\n>>>     edb.components.replace_rlc_by_gap_boundaries(refdes)\n>>> edb.save_edb()\n>>> edb.close_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.version",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.version.html#version",
        "title": "version",
        "section": "version",
        "text": "Get version of the Database.\nA tuple of the version numbers [major, minor]\nversion\npython:tuple\npython:int\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.version",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.version.html#pyedb.dotnet.edb.Edb.version",
        "title": "version > version > version",
        "section": "version > version",
        "text": "property Edb.version\n\nGet version of the Database.\n\nReturns\n\npython:tuple(python:int, python:int)\n\nA tuple of the version numbers [major, minor]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_debye_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_debye_material.html#add_debye_material",
        "title": "add_debye_material",
        "section": "add_debye_material",
        "text": "Add a dielectric with the Debye model.\nName of the dielectric.\nRelative permittivity of the dielectric at the frequency specified\nfor lower_frequency.\nRelative permittivity of the dielectric at the frequency specified\nfor higher_frequency.\nLoss tangent for the material at the frequency specified\nfor lower_frequency.\nLoss tangent for the material at the frequency specified\nfor higher_frequency.\nValue for the lower frequency.\nValue for the higher frequency.\nadd_debye_material\npython:str\npython:float\npython:int\nlower_frequency\npython:float\npython:int\nhigher_frequency\npython:float\npython:int\nlower_frequency\npython:float\npython:int\nhigher_frequency\npython:str\npython:float\npython:int\npython:str\npython:float\npython:int\npyedb.dotnet.database.materials.Material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_debye_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_debye_material.html#pyedb.dotnet.database.materials.Materials.add_debye_material",
        "title": "add_debye_material > add_debye_material > add_debye_material",
        "section": "add_debye_material > add_debye_material",
        "text": "Materials.add_debye_material(name, permittivity_low, permittivity_high, loss_tangent_low, loss_tangent_high, lower_freqency, higher_frequency, **kwargs)\n\nAdd a dielectric with the Debye model.\n\nParameters\n\nname\n\npython:str\n\nName of the dielectric.\n\npermittivity_low\n\npython:float, python:int\n\nRelative permittivity of the dielectric at the frequency specified\nfor lower_frequency.\n\npermittivity_high\n\npython:float, python:int\n\nRelative permittivity of the dielectric at the frequency specified\nfor higher_frequency.\n\nloss_tangent_low\n\npython:float, python:int\n\nLoss tangent for the material at the frequency specified\nfor lower_frequency.\n\nloss_tangent_high\n\npython:float, python:int\n\nLoss tangent for the material at the frequency specified\nfor higher_frequency.\n\nlower_freqency\n\npython:str, python:float, python:int\n\nValue for the lower frequency.\n\nhigher_frequency\n\npython:str, python:float, python:int\n\nValue for the higher frequency.\n\nReturns\n\npyedb.dotnet.database.materials.Material\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.html#cfgpingroup",
        "title": "CfgPinGroup",
        "section": "CfgPinGroup",
        "text": "CfgPinGroup.create()\nApply pin group on layout.\nCfgPinGroup.export_properties()\n\nCfgPinGroup.get_attributes([exclude])\n\nCfgPinGroup.set_attributes(pedb_object)\n\nCfgPinGroup.protected_attributes\n\nCfgPinGroup\nCfgPinGroup.create\nCfgPinGroup.export_properties\nCfgPinGroup.get_attributes\nCfgPinGroup.set_attributes\nCfgPinGroup.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.html#pyedb.configuration.cfg_pin_groups.CfgPinGroup",
        "title": "CfgPinGroup > CfgPinGroup > CfgPinGroup",
        "section": "CfgPinGroup > CfgPinGroup",
        "text": "class pyedb.configuration.cfg_pin_groups.CfgPinGroup(pedb, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgPinGroup.create()\n\nApply pin group on layout.\n\nCfgPinGroup.export_properties()\n\n\n\nCfgPinGroup.get_attributes([exclude])\n\n\n\nCfgPinGroup.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgPinGroup.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.db",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.db.html#db",
        "title": "db",
        "section": "db",
        "text": "Db object.\ndb"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.db",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.db.html#pyedb.dotnet.database.nets.EdbNets.db",
        "title": "db > db > db",
        "section": "db > db",
        "text": "property EdbNets.db\n\nDb object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_horizontal",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_horizontal.html#create_edge_port_horizontal",
        "title": "create_edge_port_horizontal",
        "section": "create_edge_port_horizontal",
        "text": "Create a horizontal edge port.\nPrimitive ID.\nCoordinate of the point to define the edge terminal.\nThe point must be on the target edge but not on the two\nends of the edge.\nReference primitive ID. The default is None.\nCoordinate of the point to define the reference edge\nterminal. The point must be on the target edge but not\non the two ends of the edge. The default is None.\nName of the port. The default is None.\nImpedance of the port. The default value is 50.\nLayer alignment. The default value is Upper. Options are \"Upper\", \"Lower\".\nName of the port.\ncreate_edge_port_horizontal\npython:int\npython:list\npython:int\noptional\nNone\npython:list\noptional\nNone\npython:str\noptional\nNone\npython:int\npython:float\noptional\n50\npython:str\noptional\nUpper\n\"Upper\"\n\"Lower\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_horizontal",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_horizontal.html#pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_horizontal",
        "title": "create_edge_port_horizontal > create_edge_port_horizontal > create_edge_port_horizontal",
        "section": "create_edge_port_horizontal > create_edge_port_horizontal",
        "text": "EdbHfss.create_edge_port_horizontal(prim_id, point_on_edge, ref_prim_id=None, point_on_ref_edge=None, port_name=None, impedance=50, layer_alignment='Upper')\n\nCreate a horizontal edge port.\n\nParameters\n\nprim_id\n\npython:int\n\nPrimitive ID.\n\npoint_on_edge\n\npython:list\n\nCoordinate of the point to define the edge terminal.\nThe point must be on the target edge but not on the two\nends of the edge.\n\nref_prim_id\n\npython:int, optional\n\nReference primitive ID. The default is None.\n\npoint_on_ref_edge\n\npython:list, optional\n\nCoordinate of the point to define the reference edge\nterminal. The point must be on the target edge but not\non the two ends of the edge. The default is None.\n\nport_name\n\npython:str, optional\n\nName of the port. The default is None.\n\nimpedance\n\npython:int, python:float, optional\n\nImpedance of the port. The default value is 50.\n\nlayer_alignment\n\npython:str, optional\n\nLayer alignment. The default value is Upper. Options are \"Upper\", \"Lower\".\n\nReturns\n\npython:str\n\nName of the port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.set_solder_ball",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.set_solder_ball.html#set_solder_ball",
        "title": "set_solder_ball",
        "section": "set_solder_ball",
        "text": "Set cylindrical solder balls on a given component.\nName of the discrete component.\nDiameter of the solder ball.\nHeight of the solder ball.\nShape of solder ball. Options are \"Cylinder\",\n\"Spheroid\". The default is \"Cylinder\".\nMid diameter of the solder ball.\nGive the chip orientation, \"chip_down\" or \"chip_up\". Default is \"chip_down\". Only applicable on\nIC model.\nWhether to automatically set reference size.\nX size of the reference. Applicable when auto_reference_size is False.\nY size of the reference. Applicable when auto_reference_size is False.\nHeight of the reference. Applicable when auto_reference_size is False.\nTrue when successful, False when failed.\nset_solder_ball\npython:str\nEDB\ncomponent\noptional\npython:str\npython:float\noptional\npython:str\npython:float\noptional\npython:str\noptional\n\"Cylinder\"\n\"Spheroid\"\n\"Cylinder\"\npython:str\npython:float\noptional\npython:str\noptional\n\"chip_down\"\n\"chip_up\"\n\"chip_down\"\noptional\npython:int\npython:str\npython:float\noptional\npython:int\npython:str\npython:float\noptional\npython:int\npython:str\npython:float\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.set_solder_ball",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.set_solder_ball.html#pyedb.dotnet.database.components.Components.set_solder_ball",
        "title": "set_solder_ball > set_solder_ball > set_solder_ball",
        "section": "set_solder_ball > set_solder_ball",
        "text": "Components.set_solder_ball(component='', sball_diam=None, sball_height=None, shape='Cylinder', sball_mid_diam=None, chip_orientation='chip_down', auto_reference_size=True, reference_size_x=0, reference_size_y=0, reference_height=0)\n\nSet cylindrical solder balls on a given component.\n\nParameters\n\ncomponent\n\npython:str or EDB component, optional\n\nName of the discrete component.\n\nsball_diam\n\npython:str, python:float, optional\n\nDiameter of the solder ball.\n\nsball_height\n\npython:str, python:float, optional\n\nHeight of the solder ball.\n\nshape\n\npython:str, optional\n\nShape of solder ball. Options are \"Cylinder\",\n\"Spheroid\". The default is \"Cylinder\".\n\nsball_mid_diam\n\npython:str, python:float, optional\n\nMid diameter of the solder ball.\n\nchip_orientation\n\npython:str, optional\n\nGive the chip orientation, \"chip_down\" or \"chip_up\". Default is \"chip_down\". Only applicable on\nIC model.\n\nauto_reference_size\n\nbool, optional\n\nWhether to automatically set reference size.\n\nreference_size_x\n\npython:int, python:str, python:float, optional\n\nX size of the reference. Applicable when auto_reference_size is False.\n\nreference_size_y\n\npython:int, python:str, python:float, optional\n\nY size of the reference. Applicable when auto_reference_size is False.\n\nreference_height\n\npython:int, python:str, python:float, optional\n\nHeight of the reference. Applicable when auto_reference_size is False.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.set_solder_ball(\"A1\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple.html#use_airbox_positive_vertical_extent_multiple",
        "title": "use_airbox_positive_vertical_extent_multiple",
        "section": "use_airbox_positive_vertical_extent_multiple",
        "text": "Whether the multiple value for the positive extent of the airbox is used.\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\nuse_airbox_positive_vertical_extent_multiple\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple",
        "title": "use_airbox_positive_vertical_extent_multiple > use_airbox_positive_vertical_extent_multiple > use_airbox_positive_vertical_extent_multiple",
        "section": "use_airbox_positive_vertical_extent_multiple > use_airbox_positive_vertical_extent_multiple",
        "text": "property SimulationConfigurationBatch.use_airbox_positive_vertical_extent_multiple\n\nWhether the multiple value for the positive extent of the airbox is used.\n\nReturns\n\nbool\n\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Adding this property for compatibility with grpc.\nis_null"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.is_null.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property SiwaveDCSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pad_edge_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pad_edge_terminal_reference_pin.html#get_pad_edge_terminal_reference_pin",
        "title": "get_pad_edge_terminal_reference_pin",
        "section": "get_pad_edge_terminal_reference_pin",
        "text": "Get the closest pin padstack instances and serves any edge terminal connected to a pad.\nPreferred reference net name. Optianal, default is None which will auto compute the gnd name.\nget_pad_edge_terminal_reference_pin\npython:str\noptional\npyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pad_edge_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_pad_edge_terminal_reference_pin.html#pyedb.dotnet.database.edb_data.ports.WavePort.get_pad_edge_terminal_reference_pin",
        "title": "get_pad_edge_terminal_reference_pin > get_pad_edge_terminal_reference_pin > get_pad_edge_terminal_reference_pin",
        "section": "get_pad_edge_terminal_reference_pin > get_pad_edge_terminal_reference_pin",
        "text": "WavePort.get_pad_edge_terminal_reference_pin(gnd_net_name_preference=None)\n\nGet the closest pin padstack instances and serves any edge terminal connected to a pad.\n\nParameters\n\ngnd_net_name_preference\n\npython:str, optional\n\nPreferred reference net name. Optianal, default is None which will auto compute the gnd name.\n\nReturns\n\npyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweep_data.html#sweep_data",
        "title": "sweep_data",
        "section": "sweep_data",
        "text": "Adding property for compatibility with grpc.\nsweep_data"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweep_data.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweep_data",
        "title": "sweep_data > sweep_data > sweep_data",
        "section": "sweep_data > sweep_data",
        "text": "property HfssSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQEye",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQEye.html#kqeye",
        "title": "kQEye",
        "section": "kQEye",
        "text": "kQEye"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQEye",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQEye.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQEye",
        "title": "kQEye > kQEye > kQEye",
        "section": "kQEye > kQEye",
        "text": "SimulationSetupType.kQEye = 'quick_eye'\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.ref_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.ref_terminal.html#ref_terminal",
        "title": "ref_terminal",
        "section": "ref_terminal",
        "text": "Get reference terminal.\n.deprecated:: pyedb 0.47.0\nUse: attribute:reference_terminal instead.\nref_terminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.ref_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.ref_terminal.html#pyedb.dotnet.database.edb_data.ports.GapPort.ref_terminal",
        "title": "ref_terminal > ref_terminal > ref_terminal",
        "section": "ref_terminal > ref_terminal",
        "text": "property GapPort.ref_terminal\n\nGet reference terminal.\n\n.deprecated:: pyedb 0.47.0\nUse: attribute:reference_terminal instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/Utilities",
        "href": "api/edb_data/Utilities.html#edb-utilities",
        "title": "EDB utilities",
        "section": "EDB utilities",
        "text": "Class managing EDB utilities.\nEDBStatistics\nStatistics object\nEDB utilities\nEDBStatistics"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_override_shrink_fac",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_override_shrink_fac.html#use_override_shrink_fac",
        "title": "use_override_shrink_fac",
        "section": "use_override_shrink_fac",
        "text": "Set the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node\ntechnologies.\nuse_override_shrink_fac"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_override_shrink_fac",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_override_shrink_fac.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_override_shrink_fac",
        "title": "use_override_shrink_fac > use_override_shrink_fac > use_override_shrink_fac",
        "section": "use_override_shrink_fac > use_override_shrink_fac",
        "text": "property RaptorXSimulationAdvancedSettings.use_override_shrink_fac\n\nSet the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node\ntechnologies.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupBase",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupBase.html#kmeshsetupbase",
        "title": "kMeshSetupBase",
        "section": "kMeshSetupBase",
        "text": "kMeshSetupBase"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupBase",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupBase.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupBase",
        "title": "kMeshSetupBase > kMeshSetupBase > kMeshSetupBase",
        "section": "kMeshSetupBase > kMeshSetupBase",
        "text": "MeshOpType.kMeshSetupBase = 'base'\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.refine_inside",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.refine_inside.html#refine_inside",
        "title": "refine_inside",
        "section": "refine_inside",
        "text": "Whether to turn on refine inside objects.\nTrue if refine inside objects is used, False otherwise.\nrefine_inside\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.refine_inside",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.refine_inside.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.refine_inside",
        "title": "refine_inside > refine_inside > refine_inside",
        "section": "refine_inside > refine_inside",
        "text": "property LengthMeshOperation.refine_inside\n\nWhether to turn on refine inside objects.\n\nReturns\n\nbool\n\nTrue if refine inside objects is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.perform_erc",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.perform_erc.html#perform_erc",
        "title": "perform_erc",
        "section": "perform_erc",
        "text": "Perform ERC\nperform_erc"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.perform_erc",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.perform_erc.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.perform_erc",
        "title": "perform_erc > perform_erc > perform_erc",
        "section": "perform_erc > perform_erc",
        "text": "property HFSSPISimulationSettings.perform_erc\n\nPerform ERC\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.surface_triangle_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.surface_triangle_length.html#surface_triangle_length",
        "title": "surface_triangle_length",
        "section": "surface_triangle_length",
        "text": "Surface triangle length value.\nsurface_triangle_length\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.surface_triangle_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.surface_triangle_length.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.surface_triangle_length",
        "title": "surface_triangle_length > surface_triangle_length > surface_triangle_length",
        "section": "surface_triangle_length > surface_triangle_length",
        "text": "property SkinDepthMeshOperation.surface_triangle_length\n\nSurface triangle length value.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_solver_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_solver_settings.html#hfss_solver_settings",
        "title": "hfss_solver_settings",
        "section": "hfss_solver_settings",
        "text": "Manages EDB methods for HFSS solver settings.\nhfss_solver_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.HfssSolverSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_solver_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_solver_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.hfss_solver_settings",
        "title": "hfss_solver_settings > hfss_solver_settings > hfss_solver_settings",
        "section": "hfss_solver_settings > hfss_solver_settings",
        "text": "property HfssSimulationSetup.hfss_solver_settings\n\nManages EDB methods for HFSS solver settings.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.HfssSolverSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup.html#cfghfsssetup",
        "title": "CfgHFSSSetup",
        "section": "CfgHFSSSetup",
        "text": "CfgHFSSSetup.to_dict()\n\nCfgHFSSSetup\nCfgHFSSSetup.to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup.html#pyedb.configuration.cfg_setup.CfgHFSSSetup",
        "title": "CfgHFSSSetup > CfgHFSSSetup > CfgHFSSSetup",
        "section": "CfgHFSSSetup > CfgHFSSSetup",
        "text": "class pyedb.configuration.cfg_setup.CfgHFSSSetup(pedb, pyedb_obj, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgHFSSSetup.to_dict()\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb_as",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb_as.html#save_edb_as",
        "title": "save_edb_as",
        "section": "save_edb_as",
        "text": "Save the EDB file as another file.\n. deprecated:: pyedb 0.47.0\nUse: func:save_as instead.\nName of the new file to save to.\nTrue when successful, False when failed.\nsave_edb_as\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb_as",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save_edb_as.html#pyedb.dotnet.edb.Edb.save_edb_as",
        "title": "save_edb_as > save_edb_as > save_edb_as",
        "section": "save_edb_as > save_edb_as",
        "text": "Edb.save_edb_as(path)\n\nSave the EDB file as another file.\n\n. deprecated:: pyedb 0.47.0\nUse: func:save_as instead.\n\nParameters\n\npath\n\npython:str\n\nName of the new file to save to.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_xy_data_extent_for_vertical_expansion",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_xy_data_extent_for_vertical_expansion.html#use_xy_data_extent_for_vertical_expansion",
        "title": "use_xy_data_extent_for_vertical_expansion",
        "section": "use_xy_data_extent_for_vertical_expansion",
        "text": "Whether using the xy data extent for vertical expansion is enabled.\nuse_xy_data_extent_for_vertical_expansion"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_xy_data_extent_for_vertical_expansion",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_xy_data_extent_for_vertical_expansion.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_xy_data_extent_for_vertical_expansion",
        "title": "use_xy_data_extent_for_vertical_expansion > use_xy_data_extent_for_vertical_expansion > use_xy_data_extent_for_vertical_expansion",
        "section": "use_xy_data_extent_for_vertical_expansion > use_xy_data_extent_for_vertical_expansion",
        "text": "property HfssExtentInfo.use_xy_data_extent_for_vertical_expansion\n\nWhether using the xy data extent for vertical expansion is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group.html#create_pin_group",
        "title": "create_pin_group",
        "section": "create_pin_group",
        "text": "Create pin group on the component.\nReferences designator of the component.\nList of pin names.\nName of the pin group.\ncreate_pin_group\npython:str\npython:int\npython:str\npython:list\npython:str\noptional\nPinGroup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group.html#pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group",
        "title": "create_pin_group > create_pin_group > create_pin_group",
        "section": "create_pin_group > create_pin_group",
        "text": "EdbSiwave.create_pin_group(reference_designator, pin_numbers, group_name=None)\n\nCreate pin group on the component.\n\nParameters\n\nreference_designator\n\npython:str\n\nReferences designator of the component.\n\npin_numbers\n\npython:int, python:str, python:list\n\nList of pin names.\n\ngroup_name\n\npython:str, optional\n\nName of the pin group.\n\nReturns\n\nPinGroup\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_object_id_set",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_object_id_set.html#get_connected_object_id_set",
        "title": "get_connected_object_id_set",
        "section": "get_connected_object_id_set",
        "text": "Produce a list of all geometries physically connected to a given layout object.\nFound connected objects IDs with Layout object.\nget_connected_object_id_set\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_object_id_set",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_object_id_set.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_object_id_set",
        "title": "get_connected_object_id_set > get_connected_object_id_set > get_connected_object_id_set",
        "section": "get_connected_object_id_set > get_connected_object_id_set",
        "text": "EdbPolygon.get_connected_object_id_set()\n\nProduce a list of all geometries physically connected to a given layout object.\n\nReturns\n\npython:list\n\nFound connected objects IDs with Layout object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_error.html#conduction_per_error",
        "title": "conduction_per_error",
        "section": "conduction_per_error",
        "text": "WConduction error percentage.\nconduction_per_error\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_error.html#pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_error",
        "title": "conduction_per_error > conduction_per_error > conduction_per_error",
        "section": "conduction_per_error > conduction_per_error",
        "text": "property DcrSettings.conduction_per_error\n\nWConduction error percentage.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_dc_setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_dc_setups.html#siwave_dc_setups",
        "title": "siwave_dc_setups",
        "section": "siwave_dc_setups",
        "text": "Active Siwave DC IR Setups.\nsiwave_dc_setups\nDict\npython:str\nlegacy.database.edb_data.siwave_simulation_setup_data.SiwaveDCSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_dc_setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_dc_setups.html#pyedb.dotnet.edb.Edb.siwave_dc_setups",
        "title": "siwave_dc_setups > siwave_dc_setups > siwave_dc_setups",
        "section": "siwave_dc_setups > siwave_dc_setups",
        "text": "property Edb.siwave_dc_setups\n\nActive Siwave DC IR Setups.\n\nReturns\n\nDict[python:str, legacy.database.edb_data.siwave_simulation_setup_data.SiwaveDCSimulationSetup]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias.html#convert_to_3d_microvias",
        "title": "convert_to_3d_microvias",
        "section": "convert_to_3d_microvias",
        "text": "Convert actual padstack instance to microvias 3D Objects with a given aspect ratio.\nEither to convert only vias belonging to signal nets or all vias. Defaults is True.\nAngle of laser penetration in degrees. The angle defines the lowest hole diameter with this formula:\nHoleDiameter -2*tan(laser_angle* Hole depth). Hole depth is the height of the via (dielectric thickness).\nThe default is 15.\nThe lowest hole is 0.75*HoleDepth/HoleDiam.\nWhether to delete the padstack definition. The default is True.\nIf False, the padstack definition is not deleted and the hole size is set to zero.\nconvert_to_3d_microvias\noptional\nTrue\npython:float\noptional\n15\n0.75*HoleDepth/HoleDiam\noptional\nTrue\nFalse\nTrue\nwhen\nsuccessful\nFalse\nwhen"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.convert_to_3d_microvias",
        "title": "convert_to_3d_microvias > convert_to_3d_microvias > convert_to_3d_microvias",
        "section": "convert_to_3d_microvias > convert_to_3d_microvias",
        "text": "EDBPadstack.convert_to_3d_microvias(convert_only_signal_vias=True, hole_wall_angle=75, delete_padstack_def=True)\n\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\n\nParameters\n\nconvert_only_signal_vias\n\nbool, optional\n\nEither to convert only vias belonging to signal nets or all vias. Defaults is True.\n\nhole_wall_angle\n\npython:float, optional\n\nAngle of laser penetration in degrees. The angle defines the lowest hole diameter with this formula:\nHoleDiameter -2*tan(laser_angle* Hole depth). Hole depth is the height of the via (dielectric thickness).\nThe default is 15.\nThe lowest hole is 0.75*HoleDepth/HoleDiam.\n\ndelete_padstack_def\n\nbool, optional\n\nWhether to delete the padstack definition. The default is True.\nIf False, the padstack definition is not deleted and the hole size is set to zero.\n\nReturns\n\nTrue when successful, False when failed.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/edb_information_queries/edb_queries",
        "href": "user_guide/edb_information_queries/edb_queries.html#get-layout-statistics",
        "title": "Get layout statistics",
        "section": "Get layout statistics",
        "text": "PyEDB allows you to query a layout for statistics. This page shows how to perform\nthese tasks:\nLoad a layout.\nGet statistics.\nGet nets and plot them in matplotlib.\nGet all components and then get pins from components connected to a given net.\nGet layout statistics"
    },
    {
        "objectID": "user_guide/edb_information_queries/edb_queries",
        "href": "user_guide/edb_information_queries/edb_queries.html#load-a-layout",
        "title": "Get layout statistics > Load a layout",
        "section": "Load a layout",
        "text": "Load a layout"
    },
    {
        "objectID": "user_guide/edb_information_queries/edb_queries",
        "href": "user_guide/edb_information_queries/edb_queries.html#get-statistics",
        "title": "Get layout statistics > Get statistics",
        "section": "Get statistics",
        "text": "Get statistics"
    },
    {
        "objectID": "user_guide/edb_information_queries/edb_queries",
        "href": "user_guide/edb_information_queries/edb_queries.html#get-nets-and-plot-them-in-matplotlib",
        "title": "Get layout statistics > Get nets and plot them in matplotlib",
        "section": "Get nets and plot them in matplotlib",
        "text": "Get nets and plot them in matplotlib"
    },
    {
        "objectID": "user_guide/edb_information_queries/edb_queries",
        "href": "user_guide/edb_information_queries/edb_queries.html#get-all-components-and-then-pins-from-components-connected-to-a-net",
        "title": "Get layout statistics > Get all components and then pins from components connected to a net",
        "section": "Get all components and then pins from components connected to a net",
        "text": "Get all components and then pins from components connected to a net"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.html#edbstatistics",
        "title": "EDBStatistics",
        "section": "EDBStatistics",
        "text": "Statistics object\nObject properties example.\n>>> stat_model = EDBStatistics()\n>>> stat_model.num_capacitors\n>>> stat_model.num_resistors\n>>> stat_model.num_inductors\n>>> stat_model.layout_size\n>>> stat_model.num_discrete_components\n>>> stat_model.num_inductors\n>>> stat_model.num_resistors\n>>> stat_model.num_capacitors\n>>> stat_model.num_nets\n>>> stat_model.num_traces\n>>> stat_model.num_polygons\n>>> stat_model.num_vias\n>>> stat_model.stackup_thickness\n>>> stat_model.occupying_surface\n>>> stat_model.occupying_ratio\nEDBStatistics.layout_size\n\nEDBStatistics.num_capacitors\n\nEDBStatistics.num_discrete_components\n\nEDBStatistics.num_inductors\n\nEDBStatistics.num_layers\n\nEDBStatistics.num_nets\n\nEDBStatistics.num_polygons\n\nEDBStatistics.num_resistors\n\nEDBStatistics.num_traces\n\nEDBStatistics.num_vias\n\nEDBStatistics.occupying_ratio\n\nEDBStatistics.occupying_surface\n\nEDBStatistics.stackup_thickness\n\nEDBStatistics\nEDBStatistics.layout_size\nEDBStatistics.num_capacitors\nEDBStatistics.num_discrete_components\nEDBStatistics.num_inductors\nEDBStatistics.num_layers\nEDBStatistics.num_nets\nEDBStatistics.num_polygons\nEDBStatistics.num_resistors\nEDBStatistics.num_traces\nEDBStatistics.num_vias\nEDBStatistics.occupying_ratio\nEDBStatistics.occupying_surface\nEDBStatistics.stackup_thickness"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics",
        "title": "EDBStatistics > EDBStatistics > EDBStatistics",
        "section": "EDBStatistics > EDBStatistics",
        "text": "class pyedb.dotnet.database.edb_data.utilities.EDBStatistics\n\nStatistics object\n\nObject properties example.\n>>> stat_model = EDBStatistics()\n>>> stat_model.num_capacitors\n>>> stat_model.num_resistors\n>>> stat_model.num_inductors\n>>> stat_model.layout_size\n>>> stat_model.num_discrete_components\n>>> stat_model.num_inductors\n>>> stat_model.num_resistors\n>>> stat_model.num_capacitors\n>>> stat_model.num_nets\n>>> stat_model.num_traces\n>>> stat_model.num_polygons\n>>> stat_model.num_vias\n>>> stat_model.stackup_thickness\n>>> stat_model.occupying_surface\n>>> stat_model.occupying_ratio\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nEDBStatistics.layout_size\n\n\n\nEDBStatistics.num_capacitors\n\n\n\nEDBStatistics.num_discrete_components\n\n\n\nEDBStatistics.num_inductors\n\n\n\nEDBStatistics.num_layers\n\n\n\nEDBStatistics.num_nets\n\n\n\nEDBStatistics.num_polygons\n\n\n\nEDBStatistics.num_resistors\n\n\n\nEDBStatistics.num_traces\n\n\n\nEDBStatistics.num_vias\n\n\n\nEDBStatistics.occupying_ratio\n\n\n\nEDBStatistics.occupying_surface\n\n\n\nEDBStatistics.stackup_thickness\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Flag indicating if the setup is enabled.\nenabled"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.enabled.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property RaptorXSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/heatsink",
        "href": "api/utilities/heatsink.html#icepak-heat-sink",
        "title": "Icepak heat sink",
        "section": "Icepak heat sink",
        "text": "This class is the container of Icepak heat sink.\nHeatSink\nHeatsink model description.\nIcepak heat sink\nHeatSink"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_trace_width",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_trace_width.html#parametrize_trace_width",
        "title": "parametrize_trace_width",
        "section": "parametrize_trace_width",
        "text": "Parametrize a Trace on specific layer or all stackup.\nname of the net or list of nets to parametrize.\nname of the layer or list of layers to which the net to parametrize has to be included.\nname of the parameter to create.\nvalue with units of parameter to create.\nIf None, the first trace width of Net will be used as parameter value.\nparametrize_trace_width\npython:str\npython:list\npython:str\noptional\npython:str\noptional\npython:str\npython:float\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_trace_width",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.parametrize_trace_width.html#pyedb.dotnet.database.modeler.Modeler.parametrize_trace_width",
        "title": "parametrize_trace_width > parametrize_trace_width > parametrize_trace_width",
        "section": "parametrize_trace_width > parametrize_trace_width",
        "text": "Modeler.parametrize_trace_width(nets_name, layers_name=None, parameter_name='trace_width', variable_value=None)\n\nParametrize a Trace on specific layer or all stackup.\n\nParameters\n\nnets_name\n\npython:str, python:list\n\nname of the net or list of nets to parametrize.\n\nlayers_name\n\npython:str, optional\n\nname of the layer or list of layers to which the net to parametrize has to be included.\n\nparameter_name\n\npython:str, optional\n\nname of the parameter to create.\n\nvariable_value\n\npython:str, python:float, optional\n\nvalue with units of parameter to create.\nIf None, the first trace width of Net will be used as parameter value.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.length.html#length",
        "title": "length",
        "section": "length",
        "text": "Arc length.\nlength\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.length.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.length",
        "title": "length > length > length",
        "section": "length > length",
        "text": "property EDBArcs.length\n\nArc length.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_hfss",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_hfss.html#export_hfss",
        "title": "export_hfss",
        "section": "export_hfss",
        "text": "Export EDB to HFSS.\nFull path and name for saving the AEDT file.\nList of nets to export if only certain ones are to be exported.\nThe default is None, in which case all nets are eported.\nNumber of cores to use for the export. The default is None.\nName of the AEDT output file without the .aedt extension. The default is None,\nin which case the default name is used.\nOpen Siwave in embedding mode. User will only see Siwave Icon but UI will be hidden.\nFull path to the AEDT file.\nexport_hfss\npython:str\npython:list\noptional\nNone\npython:int\noptional\nNone\npython:str\noptional\n.aedt\nNone\noptional\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_hfss",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_hfss.html#pyedb.dotnet.edb.Edb.export_hfss",
        "title": "export_hfss > export_hfss > export_hfss",
        "section": "export_hfss > export_hfss",
        "text": "Edb.export_hfss(path_to_output, net_list=None, num_cores=None, aedt_file_name=None, hidden=False)\n\nExport EDB to HFSS.\n\nParameters\n\npath_to_output\n\npython:str\n\nFull path and name for saving the AEDT file.\n\nnet_list\n\npython:list, optional\n\nList of nets to export if only certain ones are to be exported.\nThe default is None, in which case all nets are eported.\n\nnum_cores\n\npython:int, optional\n\nNumber of cores to use for the export. The default is None.\n\naedt_file_name\n\npython:str, optional\n\nName of the AEDT output file without the .aedt extension. The default is None,\nin which case the default name is used.\n\nhidden\n\nbool, optional\n\nOpen Siwave in embedding mode. User will only see Siwave Icon but UI will be hidden.\n\nReturns\n\npython:str\n\nFull path to the AEDT file.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(edbpath=r\"C:      emp\\myproject.aedb\", edbversion=\"2023.2\")\n\n>>> options_config = {'UNITE_NETS' : 1, 'LAUNCH_Q3D' : 0}\n>>> edb.write_export3d_option_config_file(r\"C:  emp\", options_config)\n>>> edb.export_hfss(r\"C:        emp\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.mode",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.mode.html#mode",
        "title": "mode",
        "section": "mode",
        "text": "Stackup mode.\nType of the stackup mode, where:\n0 - Laminate\n1 - Overlapping\n2 - MultiZone\nmode\npython:int\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.mode",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.mode.html#pyedb.dotnet.database.stackup.Stackup.mode",
        "title": "mode > mode > mode",
        "section": "mode > mode",
        "text": "property Stackup.mode\n\nStackup mode.\n\nReturns\n\npython:int, python:str\n\nType of the stackup mode, where:\n\n0 - Laminate\n\n1 - Overlapping\n\n2 - MultiZone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.protected_attributes.html#pyedb.configuration.cfg_pin_groups.CfgPinGroup.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgPinGroup.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.html#cfgterminalinfo",
        "title": "CfgTerminalInfo",
        "section": "CfgTerminalInfo",
        "text": "CfgTerminalInfo.export_properties()\n\nCfgTerminalInfo.get_attributes([exclude])\n\nCfgTerminalInfo.set_attributes(pedb_object)\n\nCfgTerminalInfo.CFG_TERMINAL_TYPES\n\nCfgTerminalInfo.protected_attributes\n\nCfgTerminalInfo\nCfgTerminalInfo.export_properties\nCfgTerminalInfo.get_attributes\nCfgTerminalInfo.set_attributes\nCfgTerminalInfo.CFG_TERMINAL_TYPES\nCfgTerminalInfo.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.html#pyedb.configuration.cfg_ports_sources.CfgTerminalInfo",
        "title": "CfgTerminalInfo > CfgTerminalInfo > CfgTerminalInfo",
        "section": "CfgTerminalInfo > CfgTerminalInfo",
        "text": "class pyedb.configuration.cfg_ports_sources.CfgTerminalInfo(pedb, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgTerminalInfo.export_properties()\n\n\n\nCfgTerminalInfo.get_attributes([exclude])\n\n\n\nCfgTerminalInfo.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgTerminalInfo.CFG_TERMINAL_TYPES\n\n\n\nCfgTerminalInfo.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.project_variables",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.project_variables.html#project_variables",
        "title": "project_variables",
        "section": "project_variables",
        "text": "Get all project variables.\nproject_variables\nDict\npython:str\npyedb.dotnet.database.edb_data.variables.Variable"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.project_variables",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.project_variables.html#pyedb.dotnet.edb.Edb.project_variables",
        "title": "project_variables > project_variables > project_variables",
        "section": "project_variables > project_variables",
        "text": "property Edb.project_variables\n\nGet all project variables.\n\nReturns\n\nvariables dictionary\n\nDict[python:str, pyedb.dotnet.database.edb_data.variables.Variable]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "EDB internal simulation setup object.\nsim_setup_info"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.sim_setup_info.html#pyedb.dotnet.database.sim_setup_data.io.siwave.SettingsBase.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property SettingsBase.sim_setup_info\n\nEDB internal simulation setup object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin.html#create_circuit_port_on_pin",
        "title": "create_circuit_port_on_pin",
        "section": "create_circuit_port_on_pin",
        "text": "Create a circuit port on a pin.\nEdb Pin\nEdb Pin\nPort Impedance\nPort Name\nPort Name.\ncreate_circuit_port_on_pin\nObject\nObject\npython:float\npython:str\noptional\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin.html#pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin",
        "title": "create_circuit_port_on_pin > create_circuit_port_on_pin > create_circuit_port_on_pin",
        "section": "create_circuit_port_on_pin > create_circuit_port_on_pin",
        "text": "EdbSiwave.create_circuit_port_on_pin(pos_pin, neg_pin, impedance=50, port_name=None)\n\nCreate a circuit port on a pin.\n\nParameters\n\npos_pin\n\nObject\n\nEdb Pin\n\nneg_pin\n\nObject\n\nEdb Pin\n\nimpedance\n\npython:float\n\nPort Impedance\n\nport_name\n\npython:str, optional\n\nPort Name\n\nReturns\n\npython:str\n\nPort Name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> pins = edbapp.components.get_pin_from_component(\"U2A5\")\n>>> edbapp.siwave.create_circuit_port_on_pin(pins[0], pins[1], 50, \"port_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer.html#antipad_by_layer",
        "title": "antipad_by_layer",
        "section": "antipad_by_layer",
        "text": "Anti pad property.\nantipad_by_layer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer",
        "title": "antipad_by_layer > antipad_by_layer > antipad_by_layer",
        "section": "antipad_by_layer > antipad_by_layer",
        "text": "property EDBPadstack.antipad_by_layer\n\nAnti pad property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/SourceData",
        "href": "api/edb_data/SourceData.html#sources-and-excitations",
        "title": "Sources and excitations",
        "section": "Sources and excitations",
        "text": "These classes are the containers of sources methods of the EDB for both HFSS and SIwave.\nSources and excitations"
    },
    {
        "objectID": "user_guide/load_export_edb/loading_layout",
        "href": "user_guide/load_export_edb/loading_layout.html#load-a-layout",
        "title": "Load a layout",
        "section": "Load a layout",
        "text": "Although you can use PyEDB to build an entire layout from scratch, most of the time you\nload an layout in an existing AEDB file. This page shows how to load a layout in EDB and\nstart manipulating objects.\nLoad a layout"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_frequency_sweep.html#add_frequency_sweep",
        "title": "add_frequency_sweep",
        "section": "add_frequency_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nList of frequency points. The default is None.\nadd_frequency_sweep\npython:str\noptional\nNone\npython:list\noptional\nNone\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_frequency_sweep.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.add_frequency_sweep",
        "title": "add_frequency_sweep > add_frequency_sweep > add_frequency_sweep",
        "section": "add_frequency_sweep > add_frequency_sweep",
        "text": "SiwaveSimulationSetup.add_frequency_sweep(name=None, frequency_sweep=None)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\nfrequency_sweep\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_frequency_sweep(frequency_sweep=[\n...     [\"linear count\", \"0\", \"1kHz\", 1],\n...     [\"log scale\", \"1kHz\", \"0.1GHz\", 10],\n...     [\"linear scale\", \"0.1GHz\", \"10GHz\", \"0.1GHz\"],\n...     ])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.clear",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.clear.html#clear",
        "title": "clear",
        "section": "clear",
        "text": "clear"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.clear",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.clear.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.clear",
        "title": "clear > clear > clear",
        "section": "clear > clear",
        "text": "SweepData.clear()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_num_pass",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_num_pass.html#dc_min_num_pass",
        "title": "dc_min_num_pass",
        "section": "dc_min_num_pass",
        "text": "Retrieve the minimum number of adaptive passes.\nnumber of passes.\ndc_min_num_pass\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_num_pass",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_num_pass.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_min_num_pass",
        "title": "dc_min_num_pass > dc_min_num_pass > dc_min_num_pass",
        "section": "dc_min_num_pass > dc_min_num_pass",
        "text": "property SimulationConfigurationDc.dc_min_num_pass\n\nRetrieve the minimum number of adaptive passes.\n\nReturns\n\npython:int\n\nnumber of passes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the setup.\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.name.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property RaptorXSimulationSetup.name\n\nName of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.html#siwavedcsimulationsetup",
        "title": "SiwaveDCSimulationSetup",
        "section": "SiwaveDCSimulationSetup",
        "text": "Manages EDB methods for SIwave DC simulation setup.\nSiwaveDCSimulationSetup.add_frequency_sweep([...])\nAdd frequency sweep.\nSiwaveDCSimulationSetup.add_source_terminal_to_ground(...)\nAdd a source terminal to ground.\nSiwaveDCSimulationSetup.add_sweep([name, ...])\nAdd frequency sweep.\nSiwaveDCSimulationSetup.create([name])\nCreate a SIwave DCIR setup.\nSiwaveDCSimulationSetup.delete()\nDelete current simulation setup.\nSiwaveDCSimulationSetup.delete_frequency_sweep(...)\nDelete a frequency sweep.\nSiwaveDCSimulationSetup.get_configurations()\nGet SIwave DC simulation settings.\nSiwaveDCSimulationSetup.get_simulation_settings()\n\nSiwaveDCSimulationSetup.set_dc_slider(value)\nSet DC simulation accuracy level.\nSiwaveDCSimulationSetup.set_sim_setup_info(...)\n\nSiwaveDCSimulationSetup.set_simulation_settings(...)\n\nSiwaveDCSimulationSetup.dc_advanced_settings\nSiwave DC advanced settings.\nSiwaveDCSimulationSetup.dc_ir_settings\nDC IR settings.\nSiwaveDCSimulationSetup.dc_settings\nSIwave DC setting.\nSiwaveDCSimulationSetup.enabled\nFlag indicating if the setup is enabled.\nSiwaveDCSimulationSetup.frequency_sweeps\n\nSiwaveDCSimulationSetup.get_sim_setup_info\nGet simulation information from the setup.\nSiwaveDCSimulationSetup.is_null\nAdding this property for compatibility with grpc.\nSiwaveDCSimulationSetup.mesh_operations\n\nSiwaveDCSimulationSetup.name\nName of the setup.\nSiwaveDCSimulationSetup.position\nPosition in the setup list.\nSiwaveDCSimulationSetup.setup_type\nType of the setup.\nSiwaveDCSimulationSetup.sim_setup_info\nOverrides the default sim_setup_info object.\nSiwaveDCSimulationSetup.source_terms_to_ground\nDictionary of grounded terminals.\nSiwaveDCSimulationSetup.sweep_data\nAdding property for compatibility with grpc.\nSiwaveDCSimulationSetup.sweeps\nList of frequency sweeps.\nSiwaveDCSimulationSetup.type\n\nSiwaveDCSimulationSetup\nSiwaveDCSimulationSetup.add_frequency_sweep\nSiwaveDCSimulationSetup.add_source_terminal_to_ground\nSiwaveDCSimulationSetup.add_sweep\nSiwaveDCSimulationSetup.create\nSiwaveDCSimulationSetup.delete\nSiwaveDCSimulationSetup.delete_frequency_sweep\nSiwaveDCSimulationSetup.get_configurations\nSiwaveDCSimulationSetup.get_simulation_settings\nSiwaveDCSimulationSetup.set_dc_slider\nSiwaveDCSimulationSetup.set_sim_setup_info\nSiwaveDCSimulationSetup.set_simulation_settings\nSiwaveDCSimulationSetup.dc_advanced_settings\nSiwaveDCSimulationSetup.dc_ir_settings\nSiwaveDCSimulationSetup.dc_settings\nSiwaveDCSimulationSetup.enabled\nSiwaveDCSimulationSetup.frequency_sweeps\nSiwaveDCSimulationSetup.get_sim_setup_info\nSiwaveDCSimulationSetup.is_null\nSiwaveDCSimulationSetup.mesh_operations\nSiwaveDCSimulationSetup.name\nSiwaveDCSimulationSetup.position\nSiwaveDCSimulationSetup.setup_type\nSiwaveDCSimulationSetup.sim_setup_info\nSiwaveDCSimulationSetup.source_terms_to_ground\nSiwaveDCSimulationSetup.sweep_data\nSiwaveDCSimulationSetup.sweeps\nSiwaveDCSimulationSetup.type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup",
        "title": "SiwaveDCSimulationSetup > SiwaveDCSimulationSetup > SiwaveDCSimulationSetup",
        "section": "SiwaveDCSimulationSetup > SiwaveDCSimulationSetup",
        "text": "class pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup(pedb, edb_object=None, name: str | None = None)\n\nManages EDB methods for SIwave DC simulation setup.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSiwaveDCSimulationSetup.add_frequency_sweep([...])\n\nAdd frequency sweep.\n\nSiwaveDCSimulationSetup.add_source_terminal_to_ground(...)\n\nAdd a source terminal to ground.\n\nSiwaveDCSimulationSetup.add_sweep([name, ...])\n\nAdd frequency sweep.\n\nSiwaveDCSimulationSetup.create([name])\n\nCreate a SIwave DCIR setup.\n\nSiwaveDCSimulationSetup.delete()\n\nDelete current simulation setup.\n\nSiwaveDCSimulationSetup.delete_frequency_sweep(...)\n\nDelete a frequency sweep.\n\nSiwaveDCSimulationSetup.get_configurations()\n\nGet SIwave DC simulation settings.\n\nSiwaveDCSimulationSetup.get_simulation_settings()\n\n\n\nSiwaveDCSimulationSetup.set_dc_slider(value)\n\nSet DC simulation accuracy level.\n\nSiwaveDCSimulationSetup.set_sim_setup_info(...)\n\n\n\nSiwaveDCSimulationSetup.set_simulation_settings(...)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nSiwaveDCSimulationSetup.dc_advanced_settings\n\nSiwave DC advanced settings.\n\nSiwaveDCSimulationSetup.dc_ir_settings\n\nDC IR settings.\n\nSiwaveDCSimulationSetup.dc_settings\n\nSIwave DC setting.\n\nSiwaveDCSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\nSiwaveDCSimulationSetup.frequency_sweeps\n\n\n\nSiwaveDCSimulationSetup.get_sim_setup_info\n\nGet simulation information from the setup.\n\nSiwaveDCSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\nSiwaveDCSimulationSetup.mesh_operations\n\n\n\nSiwaveDCSimulationSetup.name\n\nName of the setup.\n\nSiwaveDCSimulationSetup.position\n\nPosition in the setup list.\n\nSiwaveDCSimulationSetup.setup_type\n\nType of the setup.\n\nSiwaveDCSimulationSetup.sim_setup_info\n\nOverrides the default sim_setup_info object.\n\nSiwaveDCSimulationSetup.source_terms_to_ground\n\nDictionary of grounded terminals.\n\nSiwaveDCSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\nSiwaveDCSimulationSetup.sweeps\n\nList of frequency sweeps.\n\nSiwaveDCSimulationSetup.type\n\n\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.pi_slider_position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.pi_slider_position.html#pi_slider_position",
        "title": "pi_slider_position",
        "section": "pi_slider_position",
        "text": "PI solider position. Values are from 1 to 3.\npi_slider_position\n1\n3"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.pi_slider_position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.pi_slider_position.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.pi_slider_position",
        "title": "pi_slider_position > pi_slider_position > pi_slider_position",
        "section": "pi_slider_position > pi_slider_position",
        "text": "property SiwaveSimulationSetup.pi_slider_position\n\nPI solider position. Values are from 1 to 3.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.fix_circle_void_for_clipping",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.fix_circle_void_for_clipping.html#fix_circle_void_for_clipping",
        "title": "fix_circle_void_for_clipping",
        "section": "fix_circle_void_for_clipping",
        "text": "Fix issues when circle void are clipped due to a bug in EDB.\nTrue when successful, False when no changes were applied.\nfix_circle_void_for_clipping\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.fix_circle_void_for_clipping",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.fix_circle_void_for_clipping.html#pyedb.dotnet.database.modeler.Modeler.fix_circle_void_for_clipping",
        "title": "fix_circle_void_for_clipping > fix_circle_void_for_clipping > fix_circle_void_for_clipping",
        "section": "fix_circle_void_for_clipping > fix_circle_void_for_clipping",
        "text": "Modeler.fix_circle_void_for_clipping()\n\nFix issues when circle void are clipped due to a bug in EDB.\n\nReturns\n\nbool\n\nTrue when successful, False when no changes were applied.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_error_tolerance",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_error_tolerance.html#signal_nets_error_tolerance",
        "title": "signal_nets_error_tolerance",
        "section": "signal_nets_error_tolerance",
        "text": "Error Tolerance\nsignal_nets_error_tolerance\npython:str\nValue\nbetween\nand"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_error_tolerance",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_error_tolerance.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_error_tolerance",
        "title": "signal_nets_error_tolerance > signal_nets_error_tolerance > signal_nets_error_tolerance",
        "section": "signal_nets_error_tolerance > signal_nets_error_tolerance",
        "text": "property HFSSPISimulationSettings.signal_nets_error_tolerance\n\nError Tolerance\n\nReturns\n\npython:str\n\n\n\nValue between 0.02 and 1.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_trace",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_trace.html#create_trace",
        "title": "create_trace",
        "section": "create_trace",
        "text": "Create a trace based on a list of points.\nList of points.\nName of the layer on which to create the path.\nWidth of the path. The default is 1.\nName of the net. The default is \"\".\nStyle of the cap at its start. Options are \"Round\",\n\"Extended\", and \"Flat\". The default is\n\"Round\".\nStyle of the cap at its end. Options are \"Round\",\n\"Extended\", and \"Flat\". The default is\n\"Round\".\nStyle of the corner. Options are \"Round\",\n\"Sharp\" and \"Mitered\". The default is \"Round\".\ncreate_trace\npython:list\npython:str\npython:float\noptional\n1\npython:str\noptional\n\"\"\npython:str\noptional\n\"Round\"\n\"Extended\",\n\"Flat\"\n\"Round\"\npython:str\noptional\n\"Round\"\n\"Extended\",\n\"Flat\"\n\"Round\"\npython:str\noptional\n\"Round\"\n\"Sharp\"\n\"Mitered\"\n\"Round\"\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_trace",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_trace.html#pyedb.dotnet.database.modeler.Modeler.create_trace",
        "title": "create_trace > create_trace > create_trace",
        "section": "create_trace > create_trace",
        "text": "Modeler.create_trace(path_list, layer_name, width=1, net_name='', start_cap_style='Round', end_cap_style='Round', corner_style='Round')\n\nCreate a trace based on a list of points.\n\nParameters\n\npath_list\n\npython:list\n\nList of points.\n\nlayer_name\n\npython:str\n\nName of the layer on which to create the path.\n\nwidth\n\npython:float, optional\n\nWidth of the path. The default is 1.\n\nnet_name\n\npython:str, optional\n\nName of the net. The default is \"\".\n\nstart_cap_style\n\npython:str, optional\n\nStyle of the cap at its start. Options are \"Round\",\n\"Extended\", and \"Flat\". The default is\n\"Round\".\n\nend_cap_style\n\npython:str, optional\n\nStyle of the cap at its end. Options are \"Round\",\n\"Extended\", and \"Flat\". The default is\n\"Round\".\n\ncorner_style\n\npython:str, optional\n\nStyle of the corner. Options are \"Round\",\n\"Sharp\" and \"Mitered\". The default is \"Round\".\n\nReturns\n\npyedb.dotnet.database.edb_data.primitives_data.Primitive\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.nets_layers_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.nets_layers_list.html#nets_layers_list",
        "title": "nets_layers_list",
        "section": "nets_layers_list",
        "text": "List of nets and layers.\nList of lists with three elements. Each list must contain:\n1- net name\n2- layer name\n3- bool.\nThird element is represents whether if the mesh operation is enabled or disabled.\nnets_layers_list\npython:list"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.nets_layers_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.nets_layers_list.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.nets_layers_list",
        "title": "nets_layers_list > nets_layers_list > nets_layers_list",
        "section": "nets_layers_list > nets_layers_list",
        "text": "property MeshOperation.nets_layers_list\n\nList of nets and layers.\n\nReturns\n\npython:list\n\nList of lists with three elements. Each list must contain:\n1- net name\n2- layer name\n3- bool.\nThird element is represents whether if the mesh operation is enabled or disabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_object_id_set",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_object_id_set.html#get_connected_object_id_set",
        "title": "get_connected_object_id_set",
        "section": "get_connected_object_id_set",
        "text": "Produce a list of all geometries physically connected to a given layout object.\nFound connected objects IDs with Layout object.\nget_connected_object_id_set\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_object_id_set",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_object_id_set.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_connected_object_id_set",
        "title": "get_connected_object_id_set > get_connected_object_id_set > get_connected_object_id_set",
        "section": "get_connected_object_id_set > get_connected_object_id_set",
        "text": "EDBPadstackInstance.get_connected_object_id_set()\n\nProduce a list of all geometries physically connected to a given layout object.\n\nReturns\n\npython:list\n\nFound connected objects IDs with Layout object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweeps.html#sweeps",
        "title": "sweeps",
        "section": "sweeps",
        "text": "List of frequency sweeps.\nsweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweeps.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweeps",
        "title": "sweeps > sweeps > sweeps",
        "section": "sweeps > sweeps",
        "text": "property HFSSPISimulationSetup.sweeps\n\nList of frequency sweeps.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_plane_projection_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_plane_projection_factor.html#use_plane_projection_factor",
        "title": "use_plane_projection_factor",
        "section": "use_plane_projection_factor",
        "text": "To eliminate unnecessary mesh complexity of “large” metal planes and improve overall\nextraction time, user can define the mesh of certain planes using a combination of the Plane Projection\nFactor and settings of the Nets Advanced Options.\nuse_plane_projection_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_plane_projection_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_plane_projection_factor.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_plane_projection_factor",
        "title": "use_plane_projection_factor > use_plane_projection_factor > use_plane_projection_factor",
        "section": "use_plane_projection_factor > use_plane_projection_factor",
        "text": "property RaptorXSimulationAdvancedSettings.use_plane_projection_factor\n\nTo eliminate unnecessary mesh complexity of “large” metal planes and improve overall\nextraction time, user can define the mesh of certain planes using a combination of the Plane Projection\nFactor and settings of the Nets Advanced Options.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.layers",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.layers.html#layers",
        "title": "layers",
        "section": "layers",
        "text": "Layer list.\nlayers\npython:list\nof\npyedb.dotnet.database.edb_data.control_file.ControlFileLayer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.layers",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.layers.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.layers",
        "title": "layers > layers > layers",
        "section": "layers > layers",
        "text": "property ControlFileStackup.layers\n\nLayer list.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.control_file.ControlFileLayer\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.get_attributes.html#pyedb.configuration.cfg_stackup.CfgLayer.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgLayer.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.netlist",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.netlist.html#netlist",
        "title": "netlist",
        "section": "netlist",
        "text": "Return the cell netlist.\nNet names.\nnetlist\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.netlist",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.netlist.html#pyedb.dotnet.database.nets.EdbNets.netlist",
        "title": "netlist > netlist > netlist",
        "section": "netlist > netlist",
        "text": "property EdbNets.netlist\n\nReturn the cell netlist.\n\nReturns\n\npython:list\n\nNet names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances.html#instances",
        "title": "instances",
        "section": "instances",
        "text": "Definitions Instances.\ninstances"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.instances",
        "title": "instances > instances > instances",
        "section": "instances > instances",
        "text": "property EDBPadstack.instances\n\nDefinitions Instances.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_material.html#add_material",
        "title": "add_material",
        "section": "add_material",
        "text": "Add a new material.\nMaterial name.\nadd_material\npython:str\npyedb.dotnet.database.materials.Material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.add_material.html#pyedb.dotnet.database.materials.Materials.add_material",
        "title": "add_material > add_material > add_material",
        "section": "add_material > add_material",
        "text": "Materials.add_material(name: str, **kwargs)\n\nAdd a new material.\n\nParameters\n\nname\n\npython:str\n\nMaterial name.\n\nReturns\n\npyedb.dotnet.database.materials.Material\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.rms_surface_roughness",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.rms_surface_roughness.html#rms_surface_roughness",
        "title": "rms_surface_roughness",
        "section": "rms_surface_roughness",
        "text": "RMS Surface Roughness setting\nrms_surface_roughness\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.rms_surface_roughness",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.rms_surface_roughness.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.rms_surface_roughness",
        "title": "rms_surface_roughness > rms_surface_roughness > rms_surface_roughness",
        "section": "rms_surface_roughness > rms_surface_roughness",
        "text": "property HFSSPISimulationSettings.rms_surface_roughness\n\nRMS Surface Roughness setting\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.components",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.components.html#components",
        "title": "components",
        "section": "components",
        "text": "Retrieve the list component name to be included in the simulation.\nList of the component name.\ncomponents\npython:list\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.components",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.components.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.components",
        "title": "components > components > components",
        "section": "components > components",
        "text": "property SimulationConfigurationBatch.components\n\nRetrieve the list component name to be included in the simulation.\n\nReturns\n\npython:list[python:str]\n\nList of the component name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.dcr_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.dcr_settings.html#dcr_settings",
        "title": "dcr_settings",
        "section": "dcr_settings",
        "text": "Dcr settings Class.\ndcr_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.DcrSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.dcr_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.dcr_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.dcr_settings",
        "title": "dcr_settings > dcr_settings > dcr_settings",
        "section": "dcr_settings > dcr_settings",
        "text": "property HfssSimulationSetup.dcr_settings\n\nDcr settings Class.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.DcrSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_bottom",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_bottom.html#add_layer_bottom",
        "title": "add_layer_bottom",
        "section": "add_layer_bottom",
        "text": "Add a layer on bottom of the stackup.\nName of the layer.\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\nadd_layer_bottom\npython:str\n\"signal\"\n\"signal\"\n\"dielectric\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_bottom",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer_bottom.html#pyedb.dotnet.database.stackup.Stackup.add_layer_bottom",
        "title": "add_layer_bottom > add_layer_bottom > add_layer_bottom",
        "section": "add_layer_bottom > add_layer_bottom",
        "text": "Stackup.add_layer_bottom(name, layer_type='signal', **kwargs)\n\nAdd a layer on bottom of the stackup.\n\nParameters\n\nname\n\npython:str\n\nName of the layer.\n\nlayer_type: str, optional\n\nType of the layer. The default to \"signal\". Options are \"signal\", \"dielectric\"\n\nkwargs\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.nets_layers_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.nets_layers_list.html#nets_layers_list",
        "title": "nets_layers_list",
        "section": "nets_layers_list",
        "text": "List of nets and layers.\nList of lists with three elements. Each list must contain:\n1- net name\n2- layer name\n3- bool.\nThird element is represents whether if the mesh operation is enabled or disabled.\nnets_layers_list\npython:list"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.nets_layers_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.nets_layers_list.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.nets_layers_list",
        "title": "nets_layers_list > nets_layers_list > nets_layers_list",
        "section": "nets_layers_list > nets_layers_list",
        "text": "property SkinDepthMeshOperation.nets_layers_list\n\nList of nets and layers.\n\nReturns\n\npython:list\n\nList of lists with three elements. Each list must contain:\n1- net name\n2- layer name\n3- bool.\nThird element is represents whether if the mesh operation is enabled or disabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refinement",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refinement.html#max_refinement",
        "title": "max_refinement",
        "section": "max_refinement",
        "text": "Maximum number of mesh elements to be added per pass.\nmax_refinement\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refinement",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refinement.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.max_refinement",
        "title": "max_refinement > max_refinement > max_refinement",
        "section": "max_refinement > max_refinement",
        "text": "property AdaptiveSettings.max_refinement\n\nMaximum number of mesh elements to be added per pass.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.project_name",
        "href": "api/_autosummary/pyedb.siwave.Siwave.project_name.html#project_name",
        "title": "project_name",
        "section": "project_name",
        "text": "Project name.\nName of the project.\nproject_name\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.project_name",
        "href": "api/_autosummary/pyedb.siwave.Siwave.project_name.html#pyedb.siwave.Siwave.project_name",
        "title": "project_name > project_name > project_name",
        "section": "project_name > project_name",
        "text": "property Siwave.project_name\n\nProject name.\n\nReturns\n\npython:str\n\nName of the project.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.expand",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.expand.html#expand",
        "title": "expand",
        "section": "expand",
        "text": "Expand the polygon shape by an absolute value in all direction.\nOffset can be negative for negative expansion.\nOffset value in meters.\nTolerance in meters.\nWhether to round corners or not.\nIf True, use rounded corners in the expansion otherwise use straight edges (can be degenerate).\nThe maximum corner extension (when round corners are not used) at which point the corner is clipped.\nexpand\npython:float\noptional\npython:float\noptional\noptional\npython:float\noptional"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.expand",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.expand.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.expand",
        "title": "expand > expand > expand",
        "section": "expand > expand",
        "text": "EdbPolygon.expand(offset=0.001, tolerance=1e-12, round_corners=True, maximum_corner_extension=0.001)\n\nExpand the polygon shape by an absolute value in all direction.\nOffset can be negative for negative expansion.\n\nParameters\n\noffset\n\npython:float, optional\n\nOffset value in meters.\n\ntolerance\n\npython:float, optional\n\nTolerance in meters.\n\nround_corners\n\nbool, optional\n\nWhether to round corners or not.\nIf True, use rounded corners in the expansion otherwise use straight edges (can be degenerate).\n\nmaximum_corner_extension\n\npython:float, optional\n\nThe maximum corner extension (when round corners are not used) at which point the corner is clipped.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_trace_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_trace_coupling.html#include_trace_coupling",
        "title": "include_trace_coupling",
        "section": "include_trace_coupling",
        "text": "Whether to model coupling between adjacent traces.\nCoupling is considered for parallel and almost parallel trace segments.\nTrue if trace coupling is used, False otherwise.\ninclude_trace_coupling\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_trace_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_trace_coupling.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_trace_coupling",
        "title": "include_trace_coupling > include_trace_coupling > include_trace_coupling",
        "section": "include_trace_coupling > include_trace_coupling",
        "text": "property AdvancedSettings.include_trace_coupling\n\nWhether to model coupling between adjacent traces.\nCoupling is considered for parallel and almost parallel trace segments.\n\nReturns\n\nbool\n\nTrue if trace coupling is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin.html#pin",
        "title": "pin",
        "section": "pin",
        "text": "EDB padstack object.\npin"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pin",
        "title": "pin > pin > pin",
        "section": "pin > pin",
        "text": "property EDBPadstackInstance.pin\n\nEDB padstack object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.export_properties.html#pyedb.configuration.cfg_ports_sources.CfgPort.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgPort.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.html#cfgcutout",
        "title": "CfgCutout",
        "section": "CfgCutout",
        "text": "CfgCutout.export_properties()\n\nCfgCutout.get_attributes([exclude])\n\nCfgCutout.get_data_from_db()\n\nCfgCutout.set_attributes(pedb_object)\n\nCfgCutout.protected_attributes\n\nCfgCutout\nCfgCutout.export_properties\nCfgCutout.get_attributes\nCfgCutout.get_data_from_db\nCfgCutout.set_attributes\nCfgCutout.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.html#pyedb.configuration.cfg_operations.CfgCutout",
        "title": "CfgCutout > CfgCutout > CfgCutout",
        "section": "CfgCutout > CfgCutout",
        "text": "class pyedb.configuration.cfg_operations.CfgCutout(pedb, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgCutout.export_properties()\n\n\n\nCfgCutout.get_attributes([exclude])\n\n\n\nCfgCutout.get_data_from_db()\n\n\n\nCfgCutout.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgCutout.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.hfss_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.hfss_type.html#hfss_type",
        "title": "hfss_type",
        "section": "hfss_type",
        "text": "HFSS port type.\nhfss_type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.hfss_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.hfss_type.html#pyedb.dotnet.database.edb_data.ports.WavePort.hfss_type",
        "title": "hfss_type > hfss_type > hfss_type",
        "section": "hfss_type > hfss_type",
        "text": "property WavePort.hfss_type\n\nHFSS port type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.couple_ports",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.couple_ports.html#couple_ports",
        "title": "couple_ports",
        "section": "couple_ports",
        "text": "Create a bundle wave port.\nPorts to be added.\ncouple_ports\ndotnet.database.ports.WavePort\ndotnet.database.ports.GapPort\npython:list\noptional\ndotnet.database.ports.BundleWavePort"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.couple_ports",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.couple_ports.html#pyedb.dotnet.database.edb_data.ports.WavePort.couple_ports",
        "title": "couple_ports > couple_ports > couple_ports",
        "section": "couple_ports > couple_ports",
        "text": "WavePort.couple_ports(port)\n\nCreate a bundle wave port.\n\nParameters\n\nport\n\ndotnet.database.ports.WavePort, dotnet.database.ports.GapPort, python:list, optional\n\nPorts to be added.\n\nReturns\n\ndotnet.database.ports.BundleWavePort\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_expansion",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_expansion.html#cutout_subdesign_expansion",
        "title": "cutout_subdesign_expansion",
        "section": "cutout_subdesign_expansion",
        "text": "Retrieve expansion factor used for clipping the design.\nThe value used as a ratio.\ncutout_subdesign_expansion\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_expansion",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_expansion.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_expansion",
        "title": "cutout_subdesign_expansion > cutout_subdesign_expansion > cutout_subdesign_expansion",
        "section": "cutout_subdesign_expansion > cutout_subdesign_expansion",
        "text": "property SimulationConfigurationBatch.cutout_subdesign_expansion\n\nRetrieve expansion factor used for clipping the design.\n\nReturns\n\npython:float\n\nThe value used as a ratio.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.update",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.update.html#update",
        "title": "update",
        "section": "update",
        "text": "update"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.update",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.update.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.update",
        "title": "update > update > update",
        "section": "update > update",
        "text": "LayerEdbClass.update(**kwargs)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.dielectric_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.dielectric_extent.html#dielectric_extent",
        "title": "dielectric_extent",
        "section": "dielectric_extent",
        "text": "Retrieve the value of dielectric extent.\nValue of the dielectric extent. When absolute dimensions are used,\nthe values are in meters.\ndielectric_extent\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.dielectric_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.dielectric_extent.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.dielectric_extent",
        "title": "dielectric_extent > dielectric_extent > dielectric_extent",
        "section": "dielectric_extent > dielectric_extent",
        "text": "property SimulationConfigurationBatch.dielectric_extent\n\nRetrieve the value of dielectric extent.\n\nReturns\n\npython:float\n\nValue of the dielectric extent. When absolute dimensions are used,\nthe values are in meters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_net.html#create_voltage_source_on_net",
        "title": "create_voltage_source_on_net",
        "section": "create_voltage_source_on_net",
        "text": "Create a voltage source.\nName of the positive component.\nName of the positive net.\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\nName of the negative net name. The default is None which will look for GND Nets.\nValue for the voltage. The default is 3.3.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nThe name of the source.\ncreate_voltage_source_on_net\npython:str\npython:str\npython:str\noptional\nNone\npython:str\noptional\nNone\npython:float\noptional\n3.3\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_net.html#pyedb.dotnet.database.siwave.EdbSiwave.create_voltage_source_on_net",
        "title": "create_voltage_source_on_net > create_voltage_source_on_net > create_voltage_source_on_net",
        "section": "create_voltage_source_on_net > create_voltage_source_on_net",
        "text": "EdbSiwave.create_voltage_source_on_net(positive_component_name, positive_net_name, negative_component_name=None, negative_net_name=None, voltage_value=3.3, phase_value=0, source_name='')\n\nCreate a voltage source.\n\nParameters\n\npositive_component_name\n\npython:str\n\nName of the positive component.\n\npositive_net_name\n\npython:str\n\nName of the positive net.\n\nnegative_component_name\n\npython:str, optional\n\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\n\nnegative_net_name\n\npython:str, optional\n\nName of the negative net name. The default is None which will look for GND Nets.\n\nvoltage_value\n\npython:float, optional\n\nValue for the voltage. The default is 3.3.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nThe name of the source.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edb.siwave.create_voltage_source_on_net(\"U2A5\",\"V1P5_S3\",\"U2A5\",\"GND\",3.3,0,\"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_icepak_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_icepak_project.html#export_icepak_project",
        "title": "export_icepak_project",
        "section": "export_icepak_project",
        "text": "Exports an Icepak project for standalone use.\nPath of the Icepak project.\nName of the DC simulation.\nTrue when successful, False when failed.\nexport_icepak_project\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_icepak_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_icepak_project.html#pyedb.siwave.Siwave.export_icepak_project",
        "title": "export_icepak_project > export_icepak_project > export_icepak_project",
        "section": "export_icepak_project > export_icepak_project",
        "text": "Siwave.export_icepak_project(file_path, dc_simulation_name)\n\nExports an Icepak project for standalone use.\n\nParameters\n\nfile_path\n\nstr,\n\nPath of the Icepak project.\n\ndc_simulation_name\n\npython:str\n\nName of the DC simulation.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/layer_stackup/index",
        "href": "user_guide/layer_stackup/index.html#work-with-a-layer-stackup",
        "title": "Work with a layer stackup",
        "section": "Work with a layer stackup",
        "text": "Learn how to edit a layer in the current layer stackup.\nLearn how to add a layer in the current layout stackup.\nWork with a layer stackup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layer_types",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layer_types.html#layer_types",
        "title": "layer_types",
        "section": "layer_types",
        "text": "Layer types.\nTypes of layers.\nlayer_types\ntype"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layer_types",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.layer_types.html#pyedb.dotnet.database.stackup.Stackup.layer_types",
        "title": "layer_types > layer_types > layer_types",
        "section": "layer_types > layer_types",
        "text": "property Stackup.layer_types\n\nLayer types.\n\nReturns\n\ntype\n\nTypes of layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.signal_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.signal_layers.html#signal_layers",
        "title": "signal_layers",
        "section": "signal_layers",
        "text": "Retrieve the dictionary of signal layers.\nsignal_layers\nDict\npython:str\npyedb.dotnet.database.edb_data.layer_data.LayerEdbClass"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.signal_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.signal_layers.html#pyedb.dotnet.database.stackup.Stackup.signal_layers",
        "title": "signal_layers > signal_layers > signal_layers",
        "section": "signal_layers > signal_layers",
        "text": "property Stackup.signal_layers\n\nRetrieve the dictionary of signal layers.\n\nReturns\n\nDict[python:str, pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.override_shrink_fac",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.override_shrink_fac.html#override_shrink_fac",
        "title": "override_shrink_fac",
        "section": "override_shrink_fac",
        "text": "Set the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node\ntechnologies.\nUnits: unitless.\noverride_shrink_fac"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.override_shrink_fac",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.override_shrink_fac.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.override_shrink_fac",
        "title": "override_shrink_fac > override_shrink_fac > override_shrink_fac",
        "section": "override_shrink_fac > override_shrink_fac",
        "text": "property RaptorXSimulationAdvancedSettings.override_shrink_fac\n\nSet the shrink factor explicitly, that is, review what-if scenarios of migrating to half-node\ntechnologies.\nUnits: unitless.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete current simulation setup.\ndelete"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "HfssSimulationSetup.delete()\n\nDelete current simulation setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_arc.html#is_arc",
        "title": "is_arc",
        "section": "is_arc",
        "text": "Either if a point is an arc or not.\nis_arc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_arc.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_arc",
        "title": "is_arc > is_arc > is_arc",
        "section": "is_arc > is_arc",
        "text": "EdbPolygon.is_arc(point)\n\nEither if a point is an arc or not.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_layout",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_layout.html#defeature_layout",
        "title": "defeature_layout",
        "section": "defeature_layout",
        "text": "Retrieve the boolean to activate the layout defeaturing.This method has been developed to simplify polygons\nwith reducing the number of points to simplify the meshing with controlling its surface deviation. This method\nshould be used at last resort when other methods failed.\ndefeature_layout\nTrue\nwhen\nactivated\nwhen"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_layout",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_layout.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_layout",
        "title": "defeature_layout > defeature_layout > defeature_layout",
        "section": "defeature_layout > defeature_layout",
        "text": "property SimulationConfigurationAc.defeature_layout\n\nRetrieve the boolean to activate the layout defeaturing.This method has been developed to simplify polygons\nwith reducing the number of points to simplify the meshing with controlling its surface deviation. This method\nshould be used at last resort when other methods failed.\n\nReturns\n\nbool\n\n\n\nTrue when activated ‘False when deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.create_terminals",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.create_terminals.html#create_terminals",
        "title": "create_terminals",
        "section": "create_terminals",
        "text": "Create step 1. Collect positive and negative terminals.\ncreate_terminals"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.create_terminals",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.create_terminals.html#pyedb.configuration.cfg_ports_sources.CfgSource.create_terminals",
        "title": "create_terminals > create_terminals > create_terminals",
        "section": "create_terminals > create_terminals",
        "text": "CfgSource.create_terminals()\n\nCreate step 1. Collect positive and negative terminals.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.protected_attributes.html#pyedb.configuration.cfg_stackup.CfgMaterial.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgMaterial.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.magnitude",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.magnitude.html#magnitude",
        "title": "magnitude",
        "section": "magnitude",
        "text": "Magnitude.\nmagnitude"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.magnitude",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.magnitude.html#pyedb.dotnet.database.edb_data.ports.GapPort.magnitude",
        "title": "magnitude > magnitude > magnitude",
        "section": "magnitude > magnitude",
        "text": "property GapPort.magnitude\n\nMagnitude.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.apply.html#pyedb.configuration.cfg_setup.CfgSetups.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgSetups.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_arc_midpoint",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_arc_midpoint.html#get_closest_arc_midpoint",
        "title": "get_closest_arc_midpoint",
        "section": "get_closest_arc_midpoint",
        "text": "Get the closest arc midpoint of the primitive to the input data.\nget_closest_arc_midpoint\npython:list\nof\npython:float\nPointData\npython:list\nof\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_arc_midpoint",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_arc_midpoint.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_arc_midpoint",
        "title": "get_closest_arc_midpoint > get_closest_arc_midpoint > get_closest_arc_midpoint",
        "section": "get_closest_arc_midpoint > get_closest_arc_midpoint",
        "text": "EdbPolygon.get_closest_arc_midpoint(point)\n\nGet the closest arc midpoint of the primitive to the input data.\n\nParameters\n\npoint\n\npython:list of python:float or PointData\n\n\n\nReturns\n\npython:list of python:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.position",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.position.html#position",
        "title": "position",
        "section": "position",
        "text": "Padstack instance position.\nList of [x, y] coordinates for the padstack instance position.\nposition\npython:list\n[x, y]"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.position",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.position.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property EDBPadstackInstance.position\n\nPadstack instance position.\n\nReturns\n\npython:list\n\nList of [x, y] coordinates for the padstack instance position.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout_multizone_layout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout_multizone_layout.html#cutout_multizone_layout",
        "title": "cutout_multizone_layout",
        "section": "cutout_multizone_layout",
        "text": "Create a multizone project cutout.\nDictionary with EDB path as key and EDB PolygonData as value defining the zone region.\nThis dictionary is returned from the command copy_zones():\n>>> edb = Edb(edb_file)\n>>> zone_dict = edb.copy_zones(r”C:Temp    est”)\nthe common reference net name. This net name must be provided to provide a valid project.\ncutout_multizone_layout\npython:dict\npython:str\nEDB\nPolygonData\npython:str\npython:dict\npython:str\npython:str\npython:list\nof\npython:str\nfirst\ndictionary\ndefined_ports\nwith\nedb\nname\nas\nkey\nand\nexisting\nport\nname\npython:list\nas\nThose\nports\nare\nthe\nones\ndefined\nbefore\nprocessing\nthe\nmultizone\nsecond\nis\nthe\npython:list\nof\nconnected"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout_multizone_layout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.cutout_multizone_layout.html#pyedb.dotnet.edb.Edb.cutout_multizone_layout",
        "title": "cutout_multizone_layout > cutout_multizone_layout > cutout_multizone_layout",
        "section": "cutout_multizone_layout > cutout_multizone_layout",
        "text": "Edb.cutout_multizone_layout(zone_dict, common_reference_net=None)\n\nCreate a multizone project cutout.\n\nParameters\n\nzone_dict\n\npython:dict[python:str](EDB PolygonData)\n\nDictionary with EDB path as key and EDB PolygonData as value defining the zone region.\nThis dictionary is returned from the command copy_zones():\n>>> edb = Edb(edb_file)\n>>> zone_dict = edb.copy_zones(r”C:Temp    est”)\n\ncommon_reference_net\n\npython:str\n\nthe common reference net name. This net name must be provided to provide a valid project.\n\nReturns\n\npython:dict[python:str][python:str] , python:list of python:str\n\n\n\nfirst dictionary defined_ports with edb name as key and existing port name python:list as value. Those ports are the\n\n\n\nones defined before processing the multizone clipping.\n\n\n\nsecond is the python:list of connected port.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAnalysisOption",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAnalysisOption.html#kanalysisoption",
        "title": "kAnalysisOption",
        "section": "kAnalysisOption",
        "text": "kAnalysisOption"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAnalysisOption",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAnalysisOption.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAnalysisOption",
        "title": "kAnalysisOption > kAnalysisOption > kAnalysisOption",
        "section": "kAnalysisOption > kAnalysisOption",
        "text": "SimulationSetupType.kAnalysisOption = 'analysis_option'\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_current_source",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_current_source.html#create_current_source",
        "title": "create_current_source",
        "section": "create_current_source",
        "text": "Create a current source.\nlegacy.database.edb_data.terminals.PadstackInstanceTerminal,\nlegacy.database.edb_data.terminals.PointTerminal,\nlegacy.database.edb_data.terminals.PinGroupTerminal,\nPositive terminal of the port.\nlegacy.database.edb_data.terminals.PadstackInstanceTerminal,\nlegacy.database.edb_data.terminals.PointTerminal,\nlegacy.database.edb_data.terminals.PinGroupTerminal,\nNegative terminal of the source.\ncreate_current_source\nlegacy.database.edb_data.terminals.EdgeTerminal\nlegacy.database.edb_data.terminals.PadstackInstanceTerminal\nlegacy.database.edb_data.terminals.PointTerminal\nlegacy.database.edb_data.terminals.PinGroupTerminal\nlegacy.database.edb_data.terminals.PadstackInstanceTerminal\nlegacy.database.edb_data.terminals.PointTerminal\nlegacy.database.edb_data.terminals.PinGroupTerminal\nlegacy.edb_core.edb_data.ports.ExcitationSources"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_current_source",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_current_source.html#pyedb.dotnet.edb.Edb.create_current_source",
        "title": "create_current_source > create_current_source > create_current_source",
        "section": "create_current_source > create_current_source",
        "text": "Edb.create_current_source(terminal, ref_terminal)\n\nCreate a current source.\n\nParameters\n\nterminal\n\nlegacy.database.edb_data.terminals.EdgeTerminal,\n\nlegacy.database.edb_data.terminals.PadstackInstanceTerminal,\nlegacy.database.edb_data.terminals.PointTerminal,\nlegacy.database.edb_data.terminals.PinGroupTerminal,\nPositive terminal of the port.\n\nref_terminal\n\nclass:legacy.database.edb_data.terminals.EdgeTerminal,\n\nlegacy.database.edb_data.terminals.PadstackInstanceTerminal,\nlegacy.database.edb_data.terminals.PointTerminal,\nlegacy.database.edb_data.terminals.PinGroupTerminal,\nNegative terminal of the source.\n\nReturns\n\nlegacy.edb_core.edb_data.ports.ExcitationSources\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.html#edbpolygon",
        "title": "EdbPolygon",
        "section": "EdbPolygon",
        "text": "EdbPolygon.add_void(point_list)\nAdd a void to current primitive.\nEdbPolygon.area([include_voids])\nReturn the total area.\nEdbPolygon.clone()\nClone a primitive object with keeping same definition and location.\nEdbPolygon.convert_to_polygon()\nConvert path to polygon.\nEdbPolygon.delete()\nDelete this primitive.\nEdbPolygon.duplicate_across_layers(layers)\nDuplicate across layer a primitive object.\nEdbPolygon.expand([offset, tolerance, ...])\nExpand the polygon shape by an absolute value in all direction.\nEdbPolygon.fix_self_intersections()\nRemove self intersections if they exists.\nEdbPolygon.get_closest_arc_midpoint(point)\nGet the closest arc midpoint of the primitive to the input data.\nEdbPolygon.get_closest_point(point)\nGet the closest point of the primitive to the input data.\nEdbPolygon.get_connected_object_id_set()\nProduce a list of all geometries physically connected to a given layout object.\nEdbPolygon.get_connected_objects()\nGet connected objects.\nEdbPolygon.get_hfss_prop()\nGet HFSS properties.\nEdbPolygon.in_polygon(point_data[, ...])\nCheck if padstack Instance is in given polygon data.\nEdbPolygon.intersect(primitives)\nIntersect active primitive with one or more primitives.\nEdbPolygon.intersection_type(primitive)\nGet intersection type between actual primitive and another primitive or polygon data.\nEdbPolygon.is_arc(point)\nEither if a point is an arc or not.\nEdbPolygon.is_intersecting(primitive)\nCheck if actual primitive and another primitive or polygon data intesects.\nEdbPolygon.make_zone_primitive(zone_id)\nMake primitive a zone primitive with a zone specified by the provided id.\nEdbPolygon.move(vector)\nMove polygon along a vector.\nEdbPolygon.move_layer(layer)\nMove polygon to given layer.\nEdbPolygon.points([arc_segments])\nReturn the list of points with arcs converted to segments.\nEdbPolygon.points_raw()\nReturn a list of Edb points.\nEdbPolygon.remove_hfss_prop()\nRemove HFSS properties.\nEdbPolygon.rotate(angle[, center])\nRotate polygon around a center point by an angle.\nEdbPolygon.scale(factor[, center])\nScales the polygon relative to a center point by a factor.\nEdbPolygon.set_hfss_prop(material, solve_inside)\nSet HFSS properties.\nEdbPolygon.subtract(primitives)\nSubtract active primitive with one or more primitives.\nEdbPolygon.unite(primitives)\nUnite active primitive with one or more primitives.\nEdbPolygon.aedt_name\nName to be visualized in AEDT.\nEdbPolygon.api_class\n\nEdbPolygon.arcs\nGet the Primitive Arc Data.\nEdbPolygon.bbox\nReturn the primitive bounding box points.\nEdbPolygon.can_be_zone_primitive\nbool: If a primitive can be a zone.\nEdbPolygon.center\nReturn the primitive bounding box center coordinate.\nEdbPolygon.component\nComponent connected to this object.\nEdbPolygon.dcir_equipotential_region\nCheck whether dcir equipotential region is enabled.\nEdbPolygon.has_self_intersections\nCheck if Polygon has self intersections.\nEdbPolygon.has_voids\nbool: If a primitive has voids inside.\nEdbPolygon.id\nPrimitive ID.\nEdbPolygon.is_negative\nDetermine whether this primitive is negative.\nEdbPolygon.is_null\nFlag indicating if this object is null.\nEdbPolygon.is_parameterized\nbool: Primitive's parametrization.\nEdbPolygon.is_void\nEither if the primitive is a void or not.\nEdbPolygon.is_zone_primitive\nbool: If primitive object is a zone.\nEdbPolygon.layer\nGet the primitive edb layer object.\nEdbPolygon.layer_name\nGet the primitive layer name.\nEdbPolygon.longest_arc\nGet the longest arc.\nEdbPolygon.name\nName of the definition.\nEdbPolygon.net\nNet Object.\nEdbPolygon.net_name\nGet the primitive layer name.\nEdbPolygon.owner\nPrimitive: Owner of the primitive object.\nEdbPolygon.polygon_data\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\nEdbPolygon.primitive_type\nReturn the type of the primitive.\nEdbPolygon.shortest_arc\nGet the longest arc.\nEdbPolygon.type\nReturn the type of the primitive.\nEdbPolygon.voids\nlist of Primitive: List of void        primitive objects inside the primitive.\nEdbPolygon\nEdbPolygon.add_void\nEdbPolygon.area\nEdbPolygon.clone\nEdbPolygon.convert_to_polygon\nEdbPolygon.delete\nEdbPolygon.duplicate_across_layers\nEdbPolygon.expand\nEdbPolygon.fix_self_intersections\nEdbPolygon.get_closest_arc_midpoint\nEdbPolygon.get_closest_point\nEdbPolygon.get_connected_object_id_set\nEdbPolygon.get_connected_objects\nEdbPolygon.get_hfss_prop\nEdbPolygon.in_polygon\nEdbPolygon.intersect\nEdbPolygon.intersection_type\nEdbPolygon.is_arc\nEdbPolygon.is_intersecting\nEdbPolygon.make_zone_primitive\nEdbPolygon.move\nEdbPolygon.move_layer\nEdbPolygon.points\nEdbPolygon.points_raw\nEdbPolygon.remove_hfss_prop\nEdbPolygon.rotate\nEdbPolygon.scale\nEdbPolygon.set_hfss_prop\nEdbPolygon.subtract\nEdbPolygon.unite\nEdbPolygon.aedt_name\nEdbPolygon.api_class\nEdbPolygon.arcs\nEdbPolygon.bbox\nEdbPolygon.can_be_zone_primitive\nbool\nEdbPolygon.center\nEdbPolygon.component\nEdbPolygon.dcir_equipotential_region\nEdbPolygon.has_self_intersections\nEdbPolygon.has_voids\nbool\nEdbPolygon.id\nEdbPolygon.is_negative\nEdbPolygon.is_null\nEdbPolygon.is_parameterized\nbool\nEdbPolygon.is_void\nEdbPolygon.is_zone_primitive\nbool\nEdbPolygon.layer\nEdbPolygon.layer_name\nEdbPolygon.longest_arc\nEdbPolygon.name\nEdbPolygon.net\nEdbPolygon.net_name\nEdbPolygon.owner\nPrimitive\nEdbPolygon.polygon_data\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet\nEdbPolygon.primitive_type\nEdbPolygon.shortest_arc\nEdbPolygon.type\nEdbPolygon.voids\nlist\nPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon",
        "title": "EdbPolygon > EdbPolygon > EdbPolygon",
        "section": "EdbPolygon > EdbPolygon",
        "text": "class pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon(raw_primitive, core_app)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEdbPolygon.add_void(point_list)\n\nAdd a void to current primitive.\n\nEdbPolygon.area([include_voids])\n\nReturn the total area.\n\nEdbPolygon.clone()\n\nClone a primitive object with keeping same definition and location.\n\nEdbPolygon.convert_to_polygon()\n\nConvert path to polygon.\n\nEdbPolygon.delete()\n\nDelete this primitive.\n\nEdbPolygon.duplicate_across_layers(layers)\n\nDuplicate across layer a primitive object.\n\nEdbPolygon.expand([offset, tolerance, ...])\n\nExpand the polygon shape by an absolute value in all direction.\n\nEdbPolygon.fix_self_intersections()\n\nRemove self intersections if they exists.\n\nEdbPolygon.get_closest_arc_midpoint(point)\n\nGet the closest arc midpoint of the primitive to the input data.\n\nEdbPolygon.get_closest_point(point)\n\nGet the closest point of the primitive to the input data.\n\nEdbPolygon.get_connected_object_id_set()\n\nProduce a list of all geometries physically connected to a given layout object.\n\nEdbPolygon.get_connected_objects()\n\nGet connected objects.\n\nEdbPolygon.get_hfss_prop()\n\nGet HFSS properties.\n\nEdbPolygon.in_polygon(point_data[, ...])\n\nCheck if padstack Instance is in given polygon data.\n\nEdbPolygon.intersect(primitives)\n\nIntersect active primitive with one or more primitives.\n\nEdbPolygon.intersection_type(primitive)\n\nGet intersection type between actual primitive and another primitive or polygon data.\n\nEdbPolygon.is_arc(point)\n\nEither if a point is an arc or not.\n\nEdbPolygon.is_intersecting(primitive)\n\nCheck if actual primitive and another primitive or polygon data intesects.\n\nEdbPolygon.make_zone_primitive(zone_id)\n\nMake primitive a zone primitive with a zone specified by the provided id.\n\nEdbPolygon.move(vector)\n\nMove polygon along a vector.\n\nEdbPolygon.move_layer(layer)\n\nMove polygon to given layer.\n\nEdbPolygon.points([arc_segments])\n\nReturn the list of points with arcs converted to segments.\n\nEdbPolygon.points_raw()\n\nReturn a list of Edb points.\n\nEdbPolygon.remove_hfss_prop()\n\nRemove HFSS properties.\n\nEdbPolygon.rotate(angle[, center])\n\nRotate polygon around a center point by an angle.\n\nEdbPolygon.scale(factor[, center])\n\nScales the polygon relative to a center point by a factor.\n\nEdbPolygon.set_hfss_prop(material, solve_inside)\n\nSet HFSS properties.\n\nEdbPolygon.subtract(primitives)\n\nSubtract active primitive with one or more primitives.\n\nEdbPolygon.unite(primitives)\n\nUnite active primitive with one or more primitives.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEdbPolygon.aedt_name\n\nName to be visualized in AEDT.\n\nEdbPolygon.api_class\n\n\n\nEdbPolygon.arcs\n\nGet the Primitive Arc Data.\n\nEdbPolygon.bbox\n\nReturn the primitive bounding box points.\n\nEdbPolygon.can_be_zone_primitive\n\nbool: If a primitive can be a zone.\n\nEdbPolygon.center\n\nReturn the primitive bounding box center coordinate.\n\nEdbPolygon.component\n\nComponent connected to this object.\n\nEdbPolygon.dcir_equipotential_region\n\nCheck whether dcir equipotential region is enabled.\n\nEdbPolygon.has_self_intersections\n\nCheck if Polygon has self intersections.\n\nEdbPolygon.has_voids\n\nbool: If a primitive has voids inside.\n\nEdbPolygon.id\n\nPrimitive ID.\n\nEdbPolygon.is_negative\n\nDetermine whether this primitive is negative.\n\nEdbPolygon.is_null\n\nFlag indicating if this object is null.\n\nEdbPolygon.is_parameterized\n\nbool: Primitive's parametrization.\n\nEdbPolygon.is_void\n\nEither if the primitive is a void or not.\n\nEdbPolygon.is_zone_primitive\n\nbool: If primitive object is a zone.\n\nEdbPolygon.layer\n\nGet the primitive edb layer object.\n\nEdbPolygon.layer_name\n\nGet the primitive layer name.\n\nEdbPolygon.longest_arc\n\nGet the longest arc.\n\nEdbPolygon.name\n\nName of the definition.\n\nEdbPolygon.net\n\nNet Object.\n\nEdbPolygon.net_name\n\nGet the primitive layer name.\n\nEdbPolygon.owner\n\nPrimitive: Owner of the primitive object.\n\nEdbPolygon.polygon_data\n\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\n\nEdbPolygon.primitive_type\n\nReturn the type of the primitive.\n\nEdbPolygon.shortest_arc\n\nGet the longest arc.\n\nEdbPolygon.type\n\nReturn the type of the primitive.\n\nEdbPolygon.voids\n\nlist of Primitive: List of void        primitive objects inside the primitive.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.load_configuration",
        "href": "api/_autosummary/pyedb.siwave.Siwave.load_configuration.html#load_configuration",
        "title": "load_configuration",
        "section": "load_configuration",
        "text": "Load configuration settings from a configure file.Import\nPath to the configuration file.\nload_configuration\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.load_configuration",
        "href": "api/_autosummary/pyedb.siwave.Siwave.load_configuration.html#pyedb.siwave.Siwave.load_configuration",
        "title": "load_configuration > load_configuration > load_configuration",
        "section": "load_configuration > load_configuration",
        "text": "Siwave.load_configuration(file_path: str)\n\nLoad configuration settings from a configure file.Import\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the configuration file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.start_azimuth",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.start_azimuth.html#start_azimuth",
        "title": "start_azimuth",
        "section": "start_azimuth",
        "text": "Azimuth angle for first mesh point of the arc.\nstart_azimuth\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.start_azimuth",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.start_azimuth.html#pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.start_azimuth",
        "title": "start_azimuth > start_azimuth > start_azimuth",
        "section": "start_azimuth > start_azimuth",
        "text": "property CurveApproxSettings.start_azimuth\n\nAzimuth angle for first mesh point of the arc.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_inter_plane_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_inter_plane_coupling.html#include_inter_plane_coupling",
        "title": "include_inter_plane_coupling",
        "section": "include_inter_plane_coupling",
        "text": "Whether to turn on InterPlane Coupling.\nThe setter will also enable custom settings.\nTrue if interplane coupling is used, False otherwise.\ninclude_inter_plane_coupling\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_inter_plane_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_inter_plane_coupling.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_inter_plane_coupling",
        "title": "include_inter_plane_coupling > include_inter_plane_coupling > include_inter_plane_coupling",
        "section": "include_inter_plane_coupling > include_inter_plane_coupling",
        "text": "property AdvancedSettings.include_inter_plane_coupling\n\nWhether to turn on InterPlane Coupling.\nThe setter will also enable custom settings.\n\nReturns\n\nbool\n\nTrue if interplane coupling is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "EDB internal simulation setup object.\nsim_setup_info"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.sim_setup_info",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.sim_setup_info.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property AdvancedSettings.sim_setup_info\n\nEDB internal simulation setup object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.dielectrics",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.dielectrics.html#dielectrics",
        "title": "dielectrics",
        "section": "dielectrics",
        "text": "Dielectric layer list.\ndielectrics\npython:list\nof\npyedb.dotnet.database.edb_data.control_file.ControlFileLayer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.dielectrics",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.dielectrics.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.dielectrics",
        "title": "dielectrics > dielectrics > dielectrics",
        "section": "dielectrics > dielectrics",
        "text": "property ControlFileStackup.dielectrics\n\nDielectric layer list.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.control_file.ControlFileLayer\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.export_properties.html#pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgTerminalInfo.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias.html#split_to_microvias",
        "title": "split_to_microvias",
        "section": "split_to_microvias",
        "text": "Convert actual padstack definition to multiple microvias definitions.\nsplit_to_microvias\nList\nof\npyedb.dotnet.database.padstackEDBPadstack"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias",
        "title": "split_to_microvias > split_to_microvias > split_to_microvias",
        "section": "split_to_microvias > split_to_microvias",
        "text": "EDBPadstack.split_to_microvias()\n\nConvert actual padstack definition to multiple microvias definitions.\n\nReturns\n\nList of pyedb.dotnet.database.padstackEDBPadstack\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_current_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_current_source.html#is_current_source",
        "title": "is_current_source",
        "section": "is_current_source",
        "text": "Whether it is a current source.\nis_current_source"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_current_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_current_source.html#pyedb.dotnet.database.edb_data.ports.GapPort.is_current_source",
        "title": "is_current_source > is_current_source > is_current_source",
        "section": "is_current_source > is_current_source",
        "text": "property GapPort.is_current_source\n\nWhether it is a current source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_contact_radius",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_contact_radius.html#dc_contact_radius",
        "title": "dc_contact_radius",
        "section": "dc_contact_radius",
        "text": "Retrieve the value for SIwave DC contact radius.\nThe contact radius value.\ndc_contact_radius\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_contact_radius",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_contact_radius.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_contact_radius",
        "title": "dc_contact_radius > dc_contact_radius > dc_contact_radius",
        "section": "dc_contact_radius > dc_contact_radius",
        "text": "property SimulationConfigurationDc.dc_contact_radius\n\nRetrieve the value for SIwave DC contact radius.\n\nReturns\n\npython:str\n\nThe contact radius value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_hfss_prop.html#get_hfss_prop",
        "title": "get_hfss_prop",
        "section": "get_hfss_prop",
        "text": "Get HFSS properties.\nMaterial property name.\nIf solve inside.\nget_hfss_prop\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_hfss_prop.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_hfss_prop",
        "title": "get_hfss_prop > get_hfss_prop > get_hfss_prop",
        "section": "get_hfss_prop > get_hfss_prop",
        "text": "EDBPadstackInstance.get_hfss_prop()\n\nGet HFSS properties.\n\nReturns\n\nmaterial\n\npython:str\n\nMaterial property name.\n\nsolve_inside\n\nbool\n\nIf solve inside.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.area",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.area.html#area",
        "title": "area",
        "section": "area",
        "text": "Return the total area.\nEither if the voids have to be included in computation.\nThe default value is True.\narea\noptional\nTrue\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.area",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.area.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.area",
        "title": "area > area > area",
        "section": "area > area",
        "text": "EDBPadstackInstance.area(include_voids=True)\n\nReturn the total area.\n\nParameters\n\ninclude_voids\n\nbool, optional\n\nEither if the voids have to be included in computation.\nThe default value is True.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Mesh operation name.\nname\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.name.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property LengthMeshOperation.name\n\nMesh operation name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.probes",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.probes.html#probes",
        "title": "probes",
        "section": "probes",
        "text": "Get all layout probes.\nprobes"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.probes",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.probes.html#pyedb.dotnet.edb.Edb.probes",
        "title": "probes > probes > probes",
        "section": "probes > probes",
        "text": "property Edb.probes\n\nGet all layout probes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersection_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersection_type.html#intersection_type",
        "title": "intersection_type",
        "section": "intersection_type",
        "text": "Get intersection type between actual primitive and another primitive or polygon data.\nIntersection type:\n0 - objects do not intersect,\n1 - this object fully inside other (no common contour points),\n2 - other object fully inside this,\n3 - common contour points,\n4 - undefined intersection.\nintersection_type\npyaeedt.database.edb_data.primitives_data.EDBPrimitives\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersection_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersection_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.intersection_type",
        "title": "intersection_type > intersection_type > intersection_type",
        "section": "intersection_type > intersection_type",
        "text": "EDBPadstackInstance.intersection_type(primitive)\n\nGet intersection type between actual primitive and another primitive or polygon data.\n\nParameters\n\nprimitive\n\npyaeedt.database.edb_data.primitives_data.EDBPrimitives or PolygonData\n\n\n\nReturns\n\npython:int\n\nIntersection type:\n0 - objects do not intersect,\n1 - this object fully inside other (no common contour points),\n2 - other object fully inside this,\n3 - common contour points,\n4 - undefined intersection.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup.html#cfgsiwavedcsetup",
        "title": "CfgSIwaveDCSetup",
        "section": "CfgSIwaveDCSetup",
        "text": "CfgSIwaveDCSetup.to_dict()\n\nCfgSIwaveDCSetup\nCfgSIwaveDCSetup.to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSIwaveDCSetup.html#pyedb.configuration.cfg_setup.CfgSIwaveDCSetup",
        "title": "CfgSIwaveDCSetup > CfgSIwaveDCSetup > CfgSIwaveDCSetup",
        "section": "CfgSIwaveDCSetup > CfgSIwaveDCSetup",
        "text": "class pyedb.configuration.cfg_setup.CfgSIwaveDCSetup(pedb, pyedb_obj, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgSIwaveDCSetup.to_dict()\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_etch_transform",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_etch_transform.html#use_enable_etch_transform",
        "title": "use_enable_etch_transform",
        "section": "use_enable_etch_transform",
        "text": "Pre-distorts the layout based on the foundry rules, applying the conductor’s bias (positive/negative –\ndeflation/inflation) at the conductor edges due to unavoidable optical effects in the manufacturing process.\nuse_enable_etch_transform"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_etch_transform",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_etch_transform.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_enable_etch_transform",
        "title": "use_enable_etch_transform > use_enable_etch_transform > use_enable_etch_transform",
        "section": "use_enable_etch_transform > use_enable_etch_transform",
        "text": "property RaptorXSimulationAdvancedSettings.use_enable_etch_transform\n\nPre-distorts the layout based on the foundry rules, applying the conductor’s bias (positive/negative –\ndeflation/inflation) at the conductor edges due to unavoidable optical effects in the manufacturing process.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_pingroup",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_pingroup.html#do_pingroup",
        "title": "do_pingroup",
        "section": "do_pingroup",
        "text": "Do pingroup on multi-pin component. True all pins from the same net are grouped, False one port\nis created for each pin.\ndo_pingroup\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_pingroup",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_pingroup.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.do_pingroup",
        "title": "do_pingroup > do_pingroup > do_pingroup",
        "section": "do_pingroup > do_pingroup",
        "text": "property SimulationConfigurationBatch.do_pingroup\n\nDo pingroup on multi-pin component. True all pins from the same net are grouped, False one port\nis created for each pin.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_current_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_current_source.html#is_current_source",
        "title": "is_current_source",
        "section": "is_current_source",
        "text": "Whether it is a current source.\nis_current_source"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_current_source",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_current_source.html#pyedb.dotnet.database.edb_data.ports.WavePort.is_current_source",
        "title": "is_current_source > is_current_source > is_current_source",
        "section": "is_current_source > is_current_source",
        "text": "property WavePort.is_current_source\n\nWhether it is a current source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.automatic_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.automatic_mesh.html#automatic_mesh",
        "title": "automatic_mesh",
        "section": "automatic_mesh",
        "text": "Whether to automatically pick a suitable mesh refinement frequency,\ndepending on drawing size, number of modes, and/or maximum sweep\nfrequency.\nTrue if automatic mesh is used, False otherwise.\nautomatic_mesh\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.automatic_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.automatic_mesh.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.automatic_mesh",
        "title": "automatic_mesh > automatic_mesh > automatic_mesh",
        "section": "automatic_mesh > automatic_mesh",
        "text": "property AdvancedSettings.automatic_mesh\n\nWhether to automatically pick a suitable mesh refinement frequency,\ndepending on drawing size, number of modes, and/or maximum sweep\nfrequency.\n\nReturns\n\nbool\n\nTrue if automatic mesh is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_rlc_boundary_on_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_rlc_boundary_on_pins.html#create_rlc_boundary_on_pins",
        "title": "create_rlc_boundary_on_pins",
        "section": "create_rlc_boundary_on_pins",
        "text": "Create hfss rlc boundary on pins.\nEdb.Cell.Primitive.PadstackInstance\nEdb.Cell.Primitive.PadstackInstance\nTrue when successful, False when failed.\ncreate_rlc_boundary_on_pins\nPositive\nNegative\nResistance\nvalue\nInductance\nvalue\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_rlc_boundary_on_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_rlc_boundary_on_pins.html#pyedb.dotnet.database.hfss.EdbHfss.create_rlc_boundary_on_pins",
        "title": "create_rlc_boundary_on_pins > create_rlc_boundary_on_pins > create_rlc_boundary_on_pins",
        "section": "create_rlc_boundary_on_pins > create_rlc_boundary_on_pins",
        "text": "EdbHfss.create_rlc_boundary_on_pins(positive_pin=None, negative_pin=None, rvalue=0.0, lvalue=0.0, cvalue=0.0)\n\nCreate hfss rlc boundary on pins.\n\nParameters\n\npositive_pin\n\nPositive pin.\n\nEdb.Cell.Primitive.PadstackInstance\n\nnegative_pin\n\nNegative pin.\n\nEdb.Cell.Primitive.PadstackInstance\n\nrvalue\n\nResistance value\n\n\n\nlvalue\n\nInductance value\n\n\n\ncvalue . Capacitance value.\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_passivity",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_passivity.html#enforce_passivity",
        "title": "enforce_passivity",
        "section": "enforce_passivity",
        "text": "Retrieve boolean to enforce passivity for the frequency sweep.\nenforce_passivity\nTrue\nwhen\npassivity\nis\nenforced\nFalse\nif"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_passivity",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_passivity.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.enforce_passivity",
        "title": "enforce_passivity > enforce_passivity > enforce_passivity",
        "section": "enforce_passivity > enforce_passivity",
        "text": "property SimulationConfigurationAc.enforce_passivity\n\nRetrieve boolean to enforce passivity for the frequency sweep.\n\nReturns\n\nbool\n\n\n\nTrue when passivity is enforced False if not.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileLayer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileLayer.html#controlfilelayer",
        "title": "ControlFileLayer",
        "section": "ControlFileLayer",
        "text": "ControlFileLayer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileLayer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileLayer.html#pyedb.dotnet.database.edb_data.control_file.ControlFileLayer",
        "title": "ControlFileLayer > ControlFileLayer > ControlFileLayer",
        "section": "ControlFileLayer > ControlFileLayer",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileLayer(name, properties)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pingroups",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pingroups.html#pingroups",
        "title": "pingroups",
        "section": "pingroups",
        "text": "Pin groups that the pin belongs to.\nList of pin groups that the pin belongs to.\npingroups\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pingroups",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pingroups.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.pingroups",
        "title": "pingroups > pingroups > pingroups",
        "section": "pingroups > pingroups",
        "text": "property EDBPadstackInstance.pingroups\n\nPin groups that the pin belongs to.\n\nReturns\n\npython:list\n\nList of pin groups that the pin belongs to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.component.html#component",
        "title": "component",
        "section": "component",
        "text": "Component connected to this object.\ncomponent\ndotnet.database.edb_data.nets_data.EDBComponent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.component.html#pyedb.dotnet.database.edb_data.ports.GapPort.component",
        "title": "component > component > component",
        "section": "component > component",
        "text": "property GapPort.component\n\nComponent connected to this object.\n\nReturns\n\ndotnet.database.edb_data.nets_data.EDBComponent\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_converged_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_converged_passes.html#min_converged_passes",
        "title": "min_converged_passes",
        "section": "min_converged_passes",
        "text": "Minimum number of converged passes.\nmin_converged_passes\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_converged_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_converged_passes.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.min_converged_passes",
        "title": "min_converged_passes > min_converged_passes > min_converged_passes",
        "section": "min_converged_passes > min_converged_passes",
        "text": "property AdaptiveSettings.min_converged_passes\n\nMinimum number of converged passes.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_hfss_ports_on_padstack",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_hfss_ports_on_padstack.html#create_hfss_ports_on_padstack",
        "title": "create_hfss_ports_on_padstack",
        "section": "create_hfss_ports_on_padstack",
        "text": "Create an HFSS port on a padstack.\nPosition of the pin.\nName of the port. The default is None.\nTrue when successful, False when failed.\ncreate_hfss_ports_on_padstack\npython:str\noptional\nNone\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_hfss_ports_on_padstack",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_hfss_ports_on_padstack.html#pyedb.dotnet.database.hfss.EdbHfss.create_hfss_ports_on_padstack",
        "title": "create_hfss_ports_on_padstack > create_hfss_ports_on_padstack > create_hfss_ports_on_padstack",
        "section": "create_hfss_ports_on_padstack > create_hfss_ports_on_padstack",
        "text": "EdbHfss.create_hfss_ports_on_padstack(pinpos, portname=None)\n\nCreate an HFSS port on a padstack.\n\nParameters\n\npinpos\n\nPosition of the pin.\n\nportname\n\npython:str, optional\n\nName of the port. The default is None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/excitations/create_circuit_ports_on_component",
        "href": "user_guide/excitations/create_circuit_ports_on_component.html#create-a-circuit-port",
        "title": "Create a circuit port",
        "section": "Create a circuit port",
        "text": "This page shows how to retrieve pins and create a circuit port on a component.\nCreate a circuit port"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_voids.html#in_voids",
        "title": "in_voids",
        "section": "in_voids",
        "text": "Check if this padstack instance is in any void.\nNet name of the voids to be checked. Default is None.\nLayer name of the voids to be checked. Default is None.\nList of the voids that include this padstack instance.\nin_voids\npython:str\nNone\npython:str\nNone\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_voids.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.in_voids",
        "title": "in_voids > in_voids > in_voids",
        "section": "in_voids > in_voids",
        "text": "EDBPadstackInstance.in_voids(net_name=None, layer_name=None)\n\nCheck if this padstack instance is in any void.\n\nParameters\n\nnet_name\n\npython:str\n\nNet name of the voids to be checked. Default is None.\n\nlayer_name\n\npython:str\n\nLayer name of the voids to be checked. Default is None.\n\nReturns\n\npython:list\n\nList of the voids that include this padstack instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup.to_dict.html#to_dict",
        "title": "to_dict",
        "section": "to_dict",
        "text": "to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgHFSSSetup.to_dict.html#pyedb.configuration.cfg_setup.CfgHFSSSetup.to_dict",
        "title": "to_dict > to_dict > to_dict",
        "section": "to_dict > to_dict",
        "text": "CfgHFSSSetup.to_dict()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.remove_floating_geometry",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.remove_floating_geometry.html#remove_floating_geometry",
        "title": "remove_floating_geometry",
        "section": "remove_floating_geometry",
        "text": "Whether to remove floating geometries.\nTrue if floating geometry removal is used, False otherwise.\nremove_floating_geometry\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.remove_floating_geometry",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.remove_floating_geometry.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.remove_floating_geometry",
        "title": "remove_floating_geometry > remove_floating_geometry > remove_floating_geometry",
        "section": "remove_floating_geometry > remove_floating_geometry",
        "text": "property DefeatureSettings.remove_floating_geometry\n\nWhether to remove floating geometries.\n\nReturns\n\nbool\n\nTrue if floating geometry removal is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.export",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.export.html#export",
        "title": "export",
        "section": "export",
        "text": "Export stackup definition to a CSV or JSON file.\nFile path to csv or json file.\nFormat of the file to export. The default is \"csv\". Options are \"csv\", \"xlsx\",\n\"json\".\nWhether to include the material definition inside layer ones. This parameter is only used\nwhen a JSON file is exported. The default is False, which keeps the material definition\nsection in the JSON file. If True, the material definition is included inside the layer ones.\nexport\npython:str\npython:str\noptional\n\"csv\"\n\"csv\"\n\"xlsx\"\n\"json\"\nFalse\nTrue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.export",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.export.html#pyedb.dotnet.database.stackup.Stackup.export",
        "title": "export > export > export",
        "section": "export > export",
        "text": "Stackup.export(fpath, file_format='xml', include_material_with_layer=False)\n\nExport stackup definition to a CSV or JSON file.\n\nParameters\n\nfpath\n\npython:str\n\nFile path to csv or json file.\n\nfile_format\n\npython:str, optional\n\nFormat of the file to export. The default is \"csv\". Options are \"csv\", \"xlsx\",\n\"json\".\n\ninclude_material_with_layer\n\nbool, optional.\n\nWhether to include the material definition inside layer ones. This parameter is only used\nwhen a JSON file is exported. The default is False, which keeps the material definition\nsection in the JSON file. If True, the material definition is included inside the layer ones.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb()\n>>> edb.stackup.export(\"stackup.xml\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_solder_balls",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_solder_balls.html#generate_solder_balls",
        "title": "generate_solder_balls",
        "section": "generate_solder_balls",
        "text": "Retrieve the boolean for applying solder balls.\nTrue when applied False if not.\ngenerate_solder_balls\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_solder_balls",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_solder_balls.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.generate_solder_balls",
        "title": "generate_solder_balls > generate_solder_balls > generate_solder_balls",
        "section": "generate_solder_balls > generate_solder_balls",
        "text": "property SimulationConfigurationBatch.generate_solder_balls\n\nRetrieve the boolean for applying solder balls.\n\nReturns\n\nbool\n\nTrue when applied False if not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.position.html#position",
        "title": "position",
        "section": "position",
        "text": "Position in the setup list.\nposition"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.position.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property SimulationSetup.position\n\nPosition in the setup list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.delete",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete a component.\nName of the component.\nTrue when successful, False when failed.\ndelete\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.delete",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.delete.html#pyedb.dotnet.database.components.Components.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "Components.delete(component_name)\n\nDelete a component.\n\nParameters\n\ncomponent_name\n\npython:str\n\nName of the component.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.delete(\"A1\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent.html#air_box_positive_vertical_extent",
        "title": "air_box_positive_vertical_extent",
        "section": "air_box_positive_vertical_extent",
        "text": "Negative vertical extent for the air box.\nair_box_positive_vertical_extent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_positive_vertical_extent",
        "title": "air_box_positive_vertical_extent > air_box_positive_vertical_extent > air_box_positive_vertical_extent",
        "section": "air_box_positive_vertical_extent > air_box_positive_vertical_extent",
        "text": "property HfssExtentInfo.air_box_positive_vertical_extent\n\nNegative vertical extent for the air box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.ICs",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.ICs.html#ics",
        "title": "ICs",
        "section": "ICs",
        "text": "Integrated circuits.\nDictionary of integrated circuits.\nICs\npython:dict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.ICs",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.ICs.html#pyedb.dotnet.database.components.Components.ICs",
        "title": "ICs > ICs > ICs",
        "section": "ICs > ICs",
        "text": "property Components.ICs\n\nIntegrated circuits.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\nDictionary of integrated circuits.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.ICs\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_exec_file",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_exec_file.html#create_exec_file",
        "title": "create_exec_file",
        "section": "create_exec_file",
        "text": "Create an executable file.\nWhether to add the DC option in the EXE file. The default is False.\nWhether to add the AC option in the EXE file. The default is\nFalse.\nWhether to add the SYZ option in the EXE file\nAdd the Touchstone file export option in the EXE file.\nThe default is False.\nFile path for the Touchstone file. The default is \"\".  When no path is\nspecified and export_touchstone=True, the path for the project is\nused.\ncreate_exec_file\noptional\nFalse\noptional\nFalse\noptional\noptional\nFalse\npython:str\noptional\n\"\"\nexport_touchstone=True"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_exec_file",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_exec_file.html#pyedb.dotnet.database.siwave.EdbSiwave.create_exec_file",
        "title": "create_exec_file > create_exec_file > create_exec_file",
        "section": "create_exec_file > create_exec_file",
        "text": "EdbSiwave.create_exec_file(add_dc=False, add_ac=False, add_syz=False, export_touchstone=False, touchstone_file_path='')\n\nCreate an executable file.\n\nParameters\n\nadd_dc\n\nbool, optional\n\nWhether to add the DC option in the EXE file. The default is False.\n\nadd_ac\n\nbool, optional\n\nWhether to add the AC option in the EXE file. The default is\nFalse.\n\nadd_syz\n\nbool, optional\n\nWhether to add the SYZ option in the EXE file\n\nexport_touchstone\n\nbool, optional\n\nAdd the Touchstone file export option in the EXE file.\nThe default is False.\n\ntouchstone_file_path\n\npython:str, optional\n\nFile path for the Touchstone file. The default is \"\".  When no path is\nspecified and export_touchstone=True, the path for the project is\nused.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete_frequency_sweep.html#delete_frequency_sweep",
        "title": "delete_frequency_sweep",
        "section": "delete_frequency_sweep",
        "text": "Delete a frequency sweep.\ndelete_frequency_sweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete_frequency_sweep.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.delete_frequency_sweep",
        "title": "delete_frequency_sweep > delete_frequency_sweep > delete_frequency_sweep",
        "section": "delete_frequency_sweep > delete_frequency_sweep",
        "text": "SiwaveDCSimulationSetup.delete_frequency_sweep(sweep_data)\n\nDelete a frequency sweep.\n\nParameters\n\nsweep_data\n\nEdbFrequencySweep.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_length_mesh_operation",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_length_mesh_operation.html#add_length_mesh_operation",
        "title": "add_length_mesh_operation",
        "section": "add_length_mesh_operation",
        "text": "Add a mesh operation to the setup.\nDictionary containing nets and layers on which enable Mesh operation. Example {\"A0_N\": [\"TOP\", \"PWR\"]}.\nMesh operation name.\nMaximum number of elements. Default is 1000.\nMaximum length of elements. Default is 1mm.\nWhether to restrict number of elements. Default is True.\nWhether to restrict length of elements. Default is True.\nMesh region name.\nWhether to refine inside or not.  Default is False.\nadd_length_mesh_operation\npython:dict\n{\"A0_N\": [\"TOP\", \"PWR\"]}\npython:str\noptional\npython:int\noptional\n1000\npython:str\noptional\n1mm\noptional\nTrue\noptional\nTrue\npython:str\noptional\noptional\nFalse\ndotnet.database.edb_data.hfss_simulation_setup_data.LengthMeshOperation"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_length_mesh_operation",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_length_mesh_operation.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_length_mesh_operation",
        "title": "add_length_mesh_operation > add_length_mesh_operation > add_length_mesh_operation",
        "section": "add_length_mesh_operation > add_length_mesh_operation",
        "text": "HfssSimulationSetup.add_length_mesh_operation(net_layer_list, name=None, max_elements=1000, max_length='1mm', restrict_elements=True, restrict_length=True, refine_inside=False, mesh_region=None)\n\nAdd a mesh operation to the setup.\n\nParameters\n\nnet_layer_list\n\npython:dict\n\nDictionary containing nets and layers on which enable Mesh operation. Example {\"A0_N\": [\"TOP\", \"PWR\"]}.\n\nname\n\npython:str, optional\n\nMesh operation name.\n\nmax_elements\n\npython:int, optional\n\nMaximum number of elements. Default is 1000.\n\nmax_length\n\npython:str, optional\n\nMaximum length of elements. Default is 1mm.\n\nrestrict_elements\n\nbool, optional\n\nWhether to restrict number of elements. Default is True.\n\nrestrict_length\n\nbool, optional\n\nWhether to restrict length of elements. Default is True.\n\nmesh_region\n\npython:str, optional\n\nMesh region name.\n\nrefine_inside\n\nbool, optional\n\nWhether to refine inside or not.  Default is False.\n\nReturns\n\ndotnet.database.edb_data.hfss_simulation_setup_data.LengthMeshOperation\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.refine_inside",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.refine_inside.html#refine_inside",
        "title": "refine_inside",
        "section": "refine_inside",
        "text": "Whether to turn on refine inside objects.\nTrue if refine inside objects is used, False otherwise.\nrefine_inside\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.refine_inside",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.refine_inside.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.refine_inside",
        "title": "refine_inside > refine_inside > refine_inside",
        "section": "refine_inside > refine_inside",
        "text": "property SkinDepthMeshOperation.refine_inside\n\nWhether to turn on refine inside objects.\n\nReturns\n\nbool\n\nTrue if refine inside objects is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "Get configuration data from layout.\nget_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.get_data_from_db.html#pyedb.configuration.configuration.Configuration.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "Configuration.get_data_from_db(**kwargs)\n\nGet configuration data from layout.\n\nParameters\n\nstackup\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/PadstackData",
        "href": "api/edb_data/PadstackData.html#vias-and-padstacks",
        "title": "vias and padstacks",
        "section": "vias and padstacks",
        "text": "vias and padstacks"
    },
    {
        "objectID": "api/edb_data/PadstackData",
        "href": "api/edb_data/PadstackData.html#instances-and-definitions",
        "title": "vias and padstacks > Instances and definitions",
        "section": "Instances and definitions",
        "text": "These classes are the containers of data management for padstacks instances and padstack definitions.\nEDBPadProperties\nManages EDB functionalities for pad properties.\nEDBPadstack\nManages EDB functionalities for a padstack.\nEDBPadstackInstance\nManages EDB functionalities for a padstack.\nInstances and definitions\nEDBPadProperties\nEDBPadstack\nEDBPadstackInstance"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.html#dcsettings",
        "title": "DCSettings",
        "section": "DCSettings",
        "text": "DCSettings.get_configurations()\nGet all attributes.\nDCSettings.restore_default()\n\nDCSettings.compute_inductance\nWhether to compute Inductance.\nDCSettings.contact_radius\nCircuit element contact radius.\nDCSettings.dc_slider_position\nDC simulation accuracy level slider position.\nDCSettings.plot_jv\nPlot current and voltage distributions.\nDCSettings.sim_setup_info\nEDB internal simulation setup object.\nDCSettings.use_dc_custom_settings\nWhether to use DC custom settings.\nDCSettings\nDCSettings.get_configurations\nDCSettings.restore_default\nDCSettings.compute_inductance\nDCSettings.contact_radius\nDCSettings.dc_slider_position\nDCSettings.plot_jv\nDCSettings.sim_setup_info\nDCSettings.use_dc_custom_settings"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings",
        "title": "DCSettings > DCSettings > DCSettings",
        "section": "DCSettings > DCSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings(parent)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nDCSettings.get_configurations()\n\nGet all attributes.\n\nDCSettings.restore_default()\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nDCSettings.compute_inductance\n\nWhether to compute Inductance.\n\nDCSettings.contact_radius\n\nCircuit element contact radius.\n\nDCSettings.dc_slider_position\n\nDC simulation accuracy level slider position.\n\nDCSettings.plot_jv\n\nPlot current and voltage distributions.\n\nDCSettings.sim_setup_info\n\nEDB internal simulation setup object.\n\nDCSettings.use_dc_custom_settings\n\nWhether to use DC custom settings.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_plane_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_plane_area_to_mesh.html#min_plane_area_to_mesh",
        "title": "min_plane_area_to_mesh",
        "section": "min_plane_area_to_mesh",
        "text": "Minimum plane area to mesh to include.\nmin_plane_area_to_mesh"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_plane_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_plane_area_to_mesh.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_plane_area_to_mesh",
        "title": "min_plane_area_to_mesh > min_plane_area_to_mesh > min_plane_area_to_mesh",
        "section": "min_plane_area_to_mesh > min_plane_area_to_mesh",
        "text": "property AdvancedSettings.min_plane_area_to_mesh\n\nMinimum plane area to mesh to include.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_circuit_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_circuit_port.html#is_circuit_port",
        "title": "is_circuit_port",
        "section": "is_circuit_port",
        "text": "Whether it is a circuit port.\nis_circuit_port"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_circuit_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_circuit_port.html#pyedb.dotnet.database.edb_data.ports.WavePort.is_circuit_port",
        "title": "is_circuit_port > is_circuit_port > is_circuit_port",
        "section": "is_circuit_port > is_circuit_port",
        "text": "property WavePort.is_circuit_port\n\nWhether it is a circuit port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Whether if mesh operation is enabled.\nTrue if mesh operation is used, False otherwise.\nenabled\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.enabled.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property LengthMeshOperation.enabled\n\nWhether if mesh operation is enabled.\n\nReturns\n\nbool\n\nTrue if mesh operation is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.open_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.open_project.html#open_project",
        "title": "open_project",
        "section": "open_project",
        "text": "Open a project.\nFull path to the project. The default is None.\nTrue when successful, False when failed.\nopen_project\npython:str\noptional\nNone\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.open_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.open_project.html#pyedb.siwave.Siwave.open_project",
        "title": "open_project > open_project > open_project",
        "section": "open_project > open_project",
        "text": "Siwave.open_project(proj_path=None)\n\nOpen a project.\n\nParameters\n\nproj_path\n\npython:str, optional\n\nFull path to the project. The default is None.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "Understand what PyEDB is and why you would use it.\nLearn how to install PyEDB from PyPI or Conda.\nSee some brief code examples of how to use PyEDB.\nDiscover the compatibility between PyEDB and AEDT versions.\nAny questions or issues? See the information on this page before creating an issue.\nGetting started"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating.html#use_extract_floating_metals_floating",
        "title": "use_extract_floating_metals_floating",
        "section": "use_extract_floating_metals_floating",
        "text": "Enables modeling of floating metals as floating nets. Floating metal are grouped into a single entity\nand treated as an independent net. This setting cannot be used with UseExtractFloatingMetalsDummy.\nuse_extract_floating_metals_floating"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating",
        "title": "use_extract_floating_metals_floating > use_extract_floating_metals_floating > use_extract_floating_metals_floating",
        "section": "use_extract_floating_metals_floating > use_extract_floating_metals_floating",
        "text": "property RaptorXSimulationAdvancedSettings.use_extract_floating_metals_floating\n\nEnables modeling of floating metals as floating nets. Floating metal are grouped into a single entity\nand treated as an independent net. This setting cannot be used with UseExtractFloatingMetalsDummy.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.residual_copper_area_per_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.residual_copper_area_per_layer.html#residual_copper_area_per_layer",
        "title": "residual_copper_area_per_layer",
        "section": "residual_copper_area_per_layer",
        "text": "Report residual copper area per layer in percentage.\nCopper area per layer.\nresidual_copper_area_per_layer\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.residual_copper_area_per_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.residual_copper_area_per_layer.html#pyedb.dotnet.database.stackup.Stackup.residual_copper_area_per_layer",
        "title": "residual_copper_area_per_layer > residual_copper_area_per_layer > residual_copper_area_per_layer",
        "section": "residual_copper_area_per_layer > residual_copper_area_per_layer",
        "text": "Stackup.residual_copper_area_per_layer()\n\nReport residual copper area per layer in percentage.\n\nReturns\n\npython:dict\n\nCopper area per layer.\n\nExamples\n\n>>> edb = Edb(edbpath=targetfile1,  edbversion=\"2021.2\")\n>>> edb.stackup.residual_copper_area_per_layer()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_plane_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_plane_area_to_mesh.html#min_plane_area_to_mesh",
        "title": "min_plane_area_to_mesh",
        "section": "min_plane_area_to_mesh",
        "text": "Retrieve the minimum plane area to be meshed by Siwave.\nmin_plane_area_to_mesh\nflot\nValue\nof\nthe\nminimum\nplane"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_plane_area_to_mesh",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_plane_area_to_mesh.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_plane_area_to_mesh",
        "title": "min_plane_area_to_mesh > min_plane_area_to_mesh > min_plane_area_to_mesh",
        "section": "min_plane_area_to_mesh > min_plane_area_to_mesh",
        "text": "property SimulationConfigurationAc.min_plane_area_to_mesh\n\nRetrieve the minimum plane area to be meshed by Siwave.\n\nReturns\n\nflot\n\n\n\nValue of the minimum plane area.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.power",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.power.html#power",
        "title": "power",
        "section": "power",
        "text": "Power nets.\nDictionary of power nets.\npower\npython:dict\npython:str\npyedb.dotnet.database.edb_data.EDBNetsData"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.power",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.power.html#pyedb.dotnet.database.nets.EdbNets.power",
        "title": "power > power > power",
        "section": "power > power",
        "text": "property EdbNets.power\n\nPower nets.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.edb_data.EDBNetsData]\n\nDictionary of power nets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y.html#hole_offset_y",
        "title": "hole_offset_y",
        "section": "hole_offset_y",
        "text": "Hole offset for the Y axis.\nHole offset value for the Y axis.\nhole_offset_y\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y",
        "title": "hole_offset_y > hole_offset_y > hole_offset_y",
        "section": "hole_offset_y > hole_offset_y",
        "text": "property EDBPadstack.hole_offset_y\n\nHole offset for the Y axis.\n\nReturns\n\npython:str\n\nHole offset value for the Y axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.get_attributes.html#pyedb.configuration.cfg_stackup.CfgMaterial.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgMaterial.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.batch_solve_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.batch_solve_settings.html#batch_solve_settings",
        "title": "batch_solve_settings",
        "section": "batch_solve_settings",
        "text": "Cutout and Batch Settings class.\nbatch_solve_settings\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.batch_solve_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.batch_solve_settings.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.batch_solve_settings",
        "title": "batch_solve_settings > batch_solve_settings > batch_solve_settings",
        "section": "batch_solve_settings > batch_solve_settings",
        "text": "property SimulationConfiguration.batch_solve_settings: SimulationConfigurationBatch\n\nCutout and Batch Settings class.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.padstack_instances",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.padstack_instances.html#padstack_instances",
        "title": "padstack_instances",
        "section": "padstack_instances",
        "text": "Return the list of primitives that belongs to the net.\npadstack_instances\npython:list\nof\npyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.padstack_instances",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.padstack_instances.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.padstack_instances",
        "title": "padstack_instances > padstack_instances > padstack_instances",
        "section": "padstack_instances > padstack_instances",
        "text": "property EDBNetsData.padstack_instances\n\nReturn the list of primitives that belongs to the net.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.html#defeaturesettings",
        "title": "DefeatureSettings",
        "section": "DefeatureSettings",
        "text": "Manages EDB methods for defeature settings.\nDefeatureSettings.defeature_abs_length\nAbsolute length for polygon defeaturing.\nDefeatureSettings.defeature_ratio\nDefeature ratio.\nDefeatureSettings.healing_option\nWhether to turn on healing of mis-aligned points and edges.\nDefeatureSettings.model_type\nModel type.\nDefeatureSettings.remove_floating_geometry\nWhether to remove floating geometries.\nDefeatureSettings.small_void_area\nSmall voids to remove area.\nDefeatureSettings.union_polygons\nWhether to turn on the union of polygons before meshing.\nDefeatureSettings.use_defeature\nWhether to turn on the defeature.\nDefeatureSettings.use_defeature_abs_length\nWhether to turn on the defeature absolute length.\nDefeatureSettings\nDefeatureSettings.defeature_abs_length\nDefeatureSettings.defeature_ratio\nDefeatureSettings.healing_option\nDefeatureSettings.model_type\nDefeatureSettings.remove_floating_geometry\nDefeatureSettings.small_void_area\nDefeatureSettings.union_polygons\nDefeatureSettings.use_defeature\nDefeatureSettings.use_defeature_abs_length"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings",
        "title": "DefeatureSettings > DefeatureSettings > DefeatureSettings",
        "section": "DefeatureSettings > DefeatureSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings(parent)\n\nManages EDB methods for defeature settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nDefeatureSettings.defeature_abs_length\n\nAbsolute length for polygon defeaturing.\n\nDefeatureSettings.defeature_ratio\n\nDefeature ratio.\n\nDefeatureSettings.healing_option\n\nWhether to turn on healing of mis-aligned points and edges.\n\nDefeatureSettings.model_type\n\nModel type.\n\nDefeatureSettings.remove_floating_geometry\n\nWhether to remove floating geometries.\n\nDefeatureSettings.small_void_area\n\nSmall voids to remove area.\n\nDefeatureSettings.union_polygons\n\nWhether to turn on the union of polygons before meshing.\n\nDefeatureSettings.use_defeature\n\nWhether to turn on the defeature.\n\nDefeatureSettings.use_defeature_abs_length\n\nWhether to turn on the defeature absolute length.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_back_drill_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_back_drill_by_layer.html#get_back_drill_by_layer",
        "title": "get_back_drill_by_layer",
        "section": "get_back_drill_by_layer",
        "text": "get_back_drill_by_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_back_drill_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_back_drill_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_back_drill_by_layer",
        "title": "get_back_drill_by_layer > get_back_drill_by_layer > get_back_drill_by_layer",
        "section": "get_back_drill_by_layer > get_back_drill_by_layer",
        "text": "EDBPadstackInstance.get_back_drill_by_layer()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.terminals",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.terminals.html#terminals",
        "title": "terminals",
        "section": "terminals",
        "text": "Get terminals belonging to active layout.\nterminals\nDict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.terminals",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.terminals.html#pyedb.dotnet.edb.Edb.terminals",
        "title": "terminals > terminals > terminals",
        "section": "terminals > terminals",
        "text": "property Edb.terminals\n\nGet terminals belonging to active layout.\n\nReturns\n\nDict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_materials_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_materials_from_db.html#get_materials_from_db",
        "title": "get_materials_from_db",
        "section": "get_materials_from_db",
        "text": "get_materials_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_materials_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgStackup.get_materials_from_db.html#pyedb.configuration.cfg_stackup.CfgStackup.get_materials_from_db",
        "title": "get_materials_from_db > get_materials_from_db > get_materials_from_db",
        "section": "get_materials_from_db > get_materials_from_db",
        "text": "CfgStackup.get_materials_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.get_attributes.html#pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgTerminalInfo.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.setup_name",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.setup_name.html#setup_name",
        "title": "setup_name",
        "section": "setup_name",
        "text": "Retrieve setup name for the simulation.\nSetup name.\nsetup_name\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.setup_name",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.setup_name.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.setup_name",
        "title": "setup_name > setup_name > setup_name",
        "section": "setup_name > setup_name",
        "text": "property SimulationConfiguration.setup_name\n\nRetrieve setup name for the simulation.\n\nReturns\n\npython:str\n\nSetup name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.pi_slider_pos",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.pi_slider_pos.html#pi_slider_pos",
        "title": "pi_slider_pos",
        "section": "pi_slider_pos",
        "text": "The Simulation Preference Slider setting\nModel type: ``0``= balanced, ``1``=Accuracy.\nReturns\n——-\nint\npi_slider_pos"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.pi_slider_pos",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.pi_slider_pos.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.pi_slider_pos",
        "title": "pi_slider_pos > pi_slider_pos > pi_slider_pos",
        "section": "pi_slider_pos > pi_slider_pos",
        "text": "property HFSSPISimulationSettings.pi_slider_pos\n\nThe Simulation Preference Slider setting\nModel type: ``0``= balanced, ``1``=Accuracy.\nReturns\n——-\n\nint\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances.html#padstack_instances",
        "title": "padstack_instances",
        "section": "padstack_instances",
        "text": "Get all the vias that belongs to active Padstack definition.\npadstack_instances\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.padstack_instances",
        "title": "padstack_instances > padstack_instances > padstack_instances",
        "section": "padstack_instances > padstack_instances",
        "text": "property EDBPadstack.padstack_instances\n\nGet all the vias that belongs to active Padstack definition.\n\nReturns\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_terminal.html#get_terminal",
        "title": "get_terminal",
        "section": "get_terminal",
        "text": "Get PadstackInstanceTerminal object.\nName of the terminal. Only applicable when create_new_terminal is True.\nWhether to create a new terminal.\nget_terminal\npython:str\noptional\noptional\npyedb.dotnet.database.edb_data.terminals"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_terminal.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_terminal",
        "title": "get_terminal > get_terminal > get_terminal",
        "section": "get_terminal > get_terminal",
        "text": "EDBPadstackInstance.get_terminal(name=None, create_new_terminal=False)\n\nGet PadstackInstanceTerminal object.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the terminal. Only applicable when create_new_terminal is True.\n\ncreate_new_terminal\n\nbool, optional\n\nWhether to create a new terminal.\n\nReturns\n\npyedb.dotnet.database.edb_data.terminals\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_pin.html#create_circuit_port_on_pin",
        "title": "create_circuit_port_on_pin",
        "section": "create_circuit_port_on_pin",
        "text": "Create Circuit Port on Pin.\nEdb Pin\nEdb Pin\nPort Impedance\nPort Name\nPort Name.\ncreate_circuit_port_on_pin\nObject\nObject\npython:float\npython:str\noptional\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_pin.html#pyedb.dotnet.database.hfss.EdbHfss.create_circuit_port_on_pin",
        "title": "create_circuit_port_on_pin > create_circuit_port_on_pin > create_circuit_port_on_pin",
        "section": "create_circuit_port_on_pin > create_circuit_port_on_pin",
        "text": "EdbHfss.create_circuit_port_on_pin(pos_pin, neg_pin, impedance=50, port_name=None)\n\nCreate Circuit Port on Pin.\n\nParameters\n\npos_pin\n\nObject\n\nEdb Pin\n\nneg_pin\n\nObject\n\nEdb Pin\n\nimpedance\n\npython:float\n\nPort Impedance\n\nport_name\n\npython:str, optional\n\nPort Name\n\n>>> from pyedb import Edb\n\n\n\n>>> edbapp = Edb(“myaedbfolder”, “project name”, “release version”)\n\n\n\n>>> pins =edbapp.components.get_pin_from_component(“U2A5”)\n\n\n\n>>> edbapp.hfss.create_circuit_port_on_pin(pins[0], pins[1],50,”port_name”)\n\n\n\nReturns\n\npython:str\n\nPort Name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_dc_ground_source_term",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_dc_ground_source_term.html#add_dc_ground_source_term",
        "title": "add_dc_ground_source_term",
        "section": "add_dc_ground_source_term",
        "text": "Add a dc ground source terminal for Siwave.\nThe source name to assign the reference node to.\nDefault value is None.\nValue must be 0: unspecified, 1: negative node, 2: positive node.\nDefault value is 1.\nadd_dc_ground_source_term\npython:str\noptional\nNone\npython:int\noptional\n0\n1\n2\n1"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_dc_ground_source_term",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_dc_ground_source_term.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.add_dc_ground_source_term",
        "title": "add_dc_ground_source_term > add_dc_ground_source_term > add_dc_ground_source_term",
        "section": "add_dc_ground_source_term > add_dc_ground_source_term",
        "text": "SimulationConfiguration.add_dc_ground_source_term(source_name=None, node_to_ground=1)\n\nAdd a dc ground source terminal for Siwave.\n\nParameters\n\nsource_name\n\npython:str, optional\n\nThe source name to assign the reference node to.\nDefault value is None.\n\nnode_to_ground\n\npython:int, optional\n\nValue must be 0: unspecified, 1: negative node, 2: positive node.\nDefault value is 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_frequency_sweep.html#add_frequency_sweep",
        "title": "add_frequency_sweep",
        "section": "add_frequency_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nList of frequency points. The default is None.\nadd_frequency_sweep\npython:str\noptional\nNone\npython:list\noptional\nNone\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_frequency_sweep.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.add_frequency_sweep",
        "title": "add_frequency_sweep > add_frequency_sweep > add_frequency_sweep",
        "section": "add_frequency_sweep > add_frequency_sweep",
        "text": "SimulationSetup.add_frequency_sweep(name=None, frequency_sweep=None)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\nfrequency_sweep\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_setup_data.EdbFrequencySweep\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_frequency_sweep(frequency_sweep=[\n...     [\"linear count\", \"0\", \"1kHz\", 1],\n...     [\"log scale\", \"1kHz\", \"0.1GHz\", 10],\n...     [\"linear scale\", \"0.1GHz\", \"10GHz\", \"0.1GHz\"],\n...     ])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/edb_information_queries/get_layout_bounding_box",
        "href": "user_guide/edb_information_queries/get_layout_bounding_box.html#get-layout-size",
        "title": "Get layout size",
        "section": "Get layout size",
        "text": "This tutorial shows how to retrieve the layout size by getting the bounding box.\nGet layout size"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.xtalk_threshold",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.xtalk_threshold.html#xtalk_threshold",
        "title": "xtalk_threshold",
        "section": "xtalk_threshold",
        "text": "XTalk threshold.\nThe setter enables custom settings.\nxtalk_threshold\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.xtalk_threshold",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.xtalk_threshold.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.xtalk_threshold",
        "title": "xtalk_threshold > xtalk_threshold > xtalk_threshold",
        "section": "xtalk_threshold > xtalk_threshold",
        "text": "property AdvancedSettings.xtalk_threshold\n\nXTalk threshold.\nThe setter enables custom settings.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersect",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersect.html#intersect",
        "title": "intersect",
        "section": "intersect",
        "text": "Intersect active primitive with one or more primitives.\nintersect\ndotnet.database.edb_data.EDBPrimitives\nEDB\nPolygonData\nEDB\nPrimitive\npython:list\nList\nof\ndotnet.database.edb_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersect",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersect.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.intersect",
        "title": "intersect > intersect > intersect",
        "section": "intersect > intersect",
        "text": "EdbPolygon.intersect(primitives)\n\nIntersect active primitive with one or more primitives.\n\nParameters\n\nprimitives\n\ndotnet.database.edb_data.EDBPrimitives or EDB PolygonData or EDB Primitive or python:list\n\n\n\nReturns\n\nList of dotnet.database.edb_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_num_sides",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_num_sides.html#via_num_sides",
        "title": "via_num_sides",
        "section": "via_num_sides",
        "text": "Via number of sides.\nvia_num_sides\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_num_sides",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_num_sides.html#pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_num_sides",
        "title": "via_num_sides > via_num_sides > via_num_sides",
        "section": "via_num_sides > via_num_sides",
        "text": "property ViaSettings.via_num_sides\n\nVia number of sides.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple.html#use_airbox_negative_vertical_extent_multiple",
        "title": "use_airbox_negative_vertical_extent_multiple",
        "section": "use_airbox_negative_vertical_extent_multiple",
        "text": "Multiple value for the negative extent of the airbox.\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\nuse_airbox_negative_vertical_extent_multiple\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple",
        "title": "use_airbox_negative_vertical_extent_multiple > use_airbox_negative_vertical_extent_multiple > use_airbox_negative_vertical_extent_multiple",
        "section": "use_airbox_negative_vertical_extent_multiple > use_airbox_negative_vertical_extent_multiple",
        "text": "property SimulationConfigurationBatch.use_airbox_negative_vertical_extent_multiple\n\nMultiple value for the negative extent of the airbox.\n\nReturns\n\nbool\n\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.html#siwavesimulationsetup",
        "title": "SiwaveSimulationSetup",
        "section": "SiwaveSimulationSetup",
        "text": "Manages EDB methods for SIwave simulation setup.\nSiwaveSimulationSetup.add_frequency_sweep([...])\nAdd frequency sweep.\nSiwaveSimulationSetup.add_sweep([name, ...])\nAdd frequency sweep.\nSiwaveSimulationSetup.create([name])\nCreate a SIwave SYZ setup.\nSiwaveSimulationSetup.delete()\nDelete current simulation setup.\nSiwaveSimulationSetup.delete_frequency_sweep(...)\nDelete a frequency sweep.\nSiwaveSimulationSetup.get_configurations()\nGet SIwave SYZ simulation settings.\nSiwaveSimulationSetup.get_simulation_settings()\n\nSiwaveSimulationSetup.set_si_slider(value)\nSet SIwave SI simulation accuracy level.\nSiwaveSimulationSetup.set_sim_setup_info(...)\n\nSiwaveSimulationSetup.set_simulation_settings(...)\n\nSiwaveSimulationSetup.advanced_settings\nSIwave advanced settings.\nSiwaveSimulationSetup.enabled\nFlag indicating if the setup is enabled.\nSiwaveSimulationSetup.frequency_sweeps\n\nSiwaveSimulationSetup.get_sim_setup_info\nGet simulation information from the setup.\nSiwaveSimulationSetup.is_null\nAdding this property for compatibility with grpc.\nSiwaveSimulationSetup.mesh_operations\n\nSiwaveSimulationSetup.name\nName of the setup.\nSiwaveSimulationSetup.pi_slider_position\nPI solider position.\nSiwaveSimulationSetup.position\nPosition in the setup list.\nSiwaveSimulationSetup.setup_type\nType of the setup.\nSiwaveSimulationSetup.si_slider_position\nSI slider position.\nSiwaveSimulationSetup.sim_setup_info\nOverrides the default sim_setup_info object.\nSiwaveSimulationSetup.sweep_data\nAdding property for compatibility with grpc.\nSiwaveSimulationSetup.sweeps\nList of frequency sweeps.\nSiwaveSimulationSetup.type\n\nSiwaveSimulationSetup.use_custom_settings\nCustom settings to use.\nSiwaveSimulationSetup.use_si_settings\nWhether to use SI Settings.\nSiwaveSimulationSetup\nSiwaveSimulationSetup.add_frequency_sweep\nSiwaveSimulationSetup.add_sweep\nSiwaveSimulationSetup.create\nSiwaveSimulationSetup.delete\nSiwaveSimulationSetup.delete_frequency_sweep\nSiwaveSimulationSetup.get_configurations\nSiwaveSimulationSetup.get_simulation_settings\nSiwaveSimulationSetup.set_si_slider\nSiwaveSimulationSetup.set_sim_setup_info\nSiwaveSimulationSetup.set_simulation_settings\nSiwaveSimulationSetup.advanced_settings\nSiwaveSimulationSetup.enabled\nSiwaveSimulationSetup.frequency_sweeps\nSiwaveSimulationSetup.get_sim_setup_info\nSiwaveSimulationSetup.is_null\nSiwaveSimulationSetup.mesh_operations\nSiwaveSimulationSetup.name\nSiwaveSimulationSetup.pi_slider_position\nSiwaveSimulationSetup.position\nSiwaveSimulationSetup.setup_type\nSiwaveSimulationSetup.si_slider_position\nSiwaveSimulationSetup.sim_setup_info\nSiwaveSimulationSetup.sweep_data\nSiwaveSimulationSetup.sweeps\nSiwaveSimulationSetup.type\nSiwaveSimulationSetup.use_custom_settings\nSiwaveSimulationSetup.use_si_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup",
        "title": "SiwaveSimulationSetup > SiwaveSimulationSetup > SiwaveSimulationSetup",
        "section": "SiwaveSimulationSetup > SiwaveSimulationSetup",
        "text": "class pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup(pedb, edb_object=None, name: str | None = None)\n\nManages EDB methods for SIwave simulation setup.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSiwaveSimulationSetup.add_frequency_sweep([...])\n\nAdd frequency sweep.\n\nSiwaveSimulationSetup.add_sweep([name, ...])\n\nAdd frequency sweep.\n\nSiwaveSimulationSetup.create([name])\n\nCreate a SIwave SYZ setup.\n\nSiwaveSimulationSetup.delete()\n\nDelete current simulation setup.\n\nSiwaveSimulationSetup.delete_frequency_sweep(...)\n\nDelete a frequency sweep.\n\nSiwaveSimulationSetup.get_configurations()\n\nGet SIwave SYZ simulation settings.\n\nSiwaveSimulationSetup.get_simulation_settings()\n\n\n\nSiwaveSimulationSetup.set_si_slider(value)\n\nSet SIwave SI simulation accuracy level.\n\nSiwaveSimulationSetup.set_sim_setup_info(...)\n\n\n\nSiwaveSimulationSetup.set_simulation_settings(...)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nSiwaveSimulationSetup.advanced_settings\n\nSIwave advanced settings.\n\nSiwaveSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\nSiwaveSimulationSetup.frequency_sweeps\n\n\n\nSiwaveSimulationSetup.get_sim_setup_info\n\nGet simulation information from the setup.\n\nSiwaveSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\nSiwaveSimulationSetup.mesh_operations\n\n\n\nSiwaveSimulationSetup.name\n\nName of the setup.\n\nSiwaveSimulationSetup.pi_slider_position\n\nPI solider position.\n\nSiwaveSimulationSetup.position\n\nPosition in the setup list.\n\nSiwaveSimulationSetup.setup_type\n\nType of the setup.\n\nSiwaveSimulationSetup.si_slider_position\n\nSI slider position.\n\nSiwaveSimulationSetup.sim_setup_info\n\nOverrides the default sim_setup_info object.\n\nSiwaveSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\nSiwaveSimulationSetup.sweeps\n\nList of frequency sweeps.\n\nSiwaveSimulationSetup.type\n\n\n\nSiwaveSimulationSetup.use_custom_settings\n\nCustom settings to use.\n\nSiwaveSimulationSetup.use_si_settings\n\nWhether to use SI Settings.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_frequency_sweep",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_frequency_sweep.html#add_frequency_sweep",
        "title": "add_frequency_sweep",
        "section": "add_frequency_sweep",
        "text": "Activate the frequency sweep creation when build project with the class.\nTrue frequency sweep is created, False skip sweep adding. Default value is True.\nadd_frequency_sweep\nTrue\nFalse\nTrue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_frequency_sweep",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_frequency_sweep.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.add_frequency_sweep",
        "title": "add_frequency_sweep > add_frequency_sweep > add_frequency_sweep",
        "section": "add_frequency_sweep > add_frequency_sweep",
        "text": "property SimulationConfigurationBatch.add_frequency_sweep\n\nActivate the frequency sweep creation when build project with the class.\n\nReturns\n\nbool\n\nTrue frequency sweep is created, False skip sweep adding. Default value is True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.negative_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.negative_net.html#negative_net",
        "title": "negative_net",
        "section": "negative_net",
        "text": "Negative Net.\nnegative_net"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.negative_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.negative_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.negative_net",
        "title": "negative_net > negative_net > negative_net",
        "section": "negative_net > negative_net",
        "text": "property EDBDifferentialPairData.negative_net: EDBNetsData\n\nNegative Net.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_polygon.html#create_polygon",
        "title": "create_polygon",
        "section": "create_polygon",
        "text": "Create a polygon based on a list of points and voids.\nShape or point lists of the main object. Point list can be in the format of [[x1,y1], [x2,y2],..,[xn,yn]].\nEach point can be:\n- [x, y] coordinate\n- [x, y, height] for an arc with specific height (between previous point and actual point)\n- [x, y, rotation, xc, yc] for an arc given a point, rotation and center.\nName of the layer on which to create the polygon.\nList of shape objects for voids or points that creates the shapes. The default is``[]``.\nName of the net. The default is \"\".\nPolygon when successful, False when failed.\ncreate_polygon\npython:list\nof\npoints\nPolygonData\nmodeler.Shape\npython:str\npython:list\noptional\npython:str\noptional\n\"\"\ndotnet.database.edb_data.primitives.Primitive\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_polygon.html#pyedb.dotnet.database.modeler.Modeler.create_polygon",
        "title": "create_polygon > create_polygon > create_polygon",
        "section": "create_polygon > create_polygon",
        "text": "Modeler.create_polygon(main_shape, layer_name, voids=[], net_name='')\n\nCreate a polygon based on a list of points and voids.\n\nParameters\n\nmain_shape\n\npython:list of points or PolygonData or modeler.Shape\n\nShape or point lists of the main object. Point list can be in the format of [[x1,y1], [x2,y2],..,[xn,yn]].\nEach point can be:\n- [x, y] coordinate\n- [x, y, height] for an arc with specific height (between previous point and actual point)\n- [x, y, rotation, xc, yc] for an arc given a point, rotation and center.\n\nlayer_name\n\npython:str\n\nName of the layer on which to create the polygon.\n\nvoids\n\npython:list, optional\n\nList of shape objects for voids or points that creates the shapes. The default is``[]``.\n\nnet_name\n\npython:str, optional\n\nName of the net. The default is \"\".\n\nReturns\n\nbool, dotnet.database.edb_data.primitives.Primitive\n\nPolygon when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_polygons",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_polygons.html#num_polygons",
        "title": "num_polygons",
        "section": "num_polygons",
        "text": "num_polygons"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_polygons",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_polygons.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_polygons",
        "title": "num_polygons > num_polygons > num_polygons",
        "section": "num_polygons > num_polygons",
        "text": "property EDBStatistics.num_polygons\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.add_setup",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.add_setup.html#add_setup",
        "title": "add_setup",
        "section": "add_setup",
        "text": "Adding method for grpc compatibility\nadd_setup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.add_setup",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.add_setup.html#pyedb.dotnet.database.hfss.EdbHfss.add_setup",
        "title": "add_setup > add_setup > add_setup",
        "section": "add_setup > add_setup",
        "text": "EdbHfss.add_setup(name=None)\n\nAdding method for grpc compatibility\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/RaptorXSimulationSetup",
        "href": "api/edb_data/RaptorXSimulationSetup.html#raptorx-simulation-setup",
        "title": "RaptorX simulation setup",
        "section": "RaptorX simulation setup",
        "text": "These classes are the containers of RaptorX simulation setup.\nRaptorXSimulationSetup\nManages EDB methods for RaptorX simulation setup.\nRaptorXSimulationSettings\n\nRaptorXGeneralSettings\n\nRaptorXSimulationAdvancedSettings\n\nRaptorX simulation setup\nRaptorXSimulationSetup\nRaptorXSimulationSettings\nRaptorXGeneralSettings\nRaptorXSimulationAdvancedSettings"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.max_solutions",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.max_solutions.html#max_solutions",
        "title": "max_solutions",
        "section": "max_solutions",
        "text": "Number of maximum solutions.\nmax_solutions\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.max_solutions",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.max_solutions.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.max_solutions",
        "title": "max_solutions > max_solutions > max_solutions",
        "section": "max_solutions > max_solutions",
        "text": "property SweepData.max_solutions\n\nNumber of maximum solutions.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.setup_type.html#setup_type",
        "title": "setup_type",
        "section": "setup_type",
        "text": "Type of the setup.\nsetup_type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.setup_type.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.setup_type",
        "title": "setup_type > setup_type > setup_type",
        "section": "setup_type > setup_type",
        "text": "property SiwaveSimulationSetup.setup_type\n\nType of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_region",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_region.html#mesh_region",
        "title": "mesh_region",
        "section": "mesh_region",
        "text": "Mesh region name.\nName of the mesh region.\nmesh_region\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_region",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_region.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.mesh_region",
        "title": "mesh_region > mesh_region > mesh_region",
        "section": "mesh_region > mesh_region",
        "text": "property MeshOperation.mesh_region\n\nMesh region name.\n\nReturns\n\npython:str\n\nName of the mesh region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_simulation_settings.html#get_simulation_settings",
        "title": "get_simulation_settings",
        "section": "get_simulation_settings",
        "text": "get_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_simulation_settings.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.get_simulation_settings",
        "title": "get_simulation_settings > get_simulation_settings > get_simulation_settings",
        "section": "get_simulation_settings > get_simulation_settings",
        "text": "SimulationSetup.get_simulation_settings()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer.html#thermalpad_by_layer",
        "title": "thermalpad_by_layer",
        "section": "thermalpad_by_layer",
        "text": "Thermal pad property.\nthermalpad_by_layer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.thermalpad_by_layer",
        "title": "thermalpad_by_layer > thermalpad_by_layer > thermalpad_by_layer",
        "section": "thermalpad_by_layer > thermalpad_by_layer",
        "text": "property EDBPadstack.thermalpad_by_layer\n\nThermal pad property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.execute",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.execute.html#execute",
        "title": "execute",
        "section": "execute",
        "text": "Execute a function.\nFunction to execute.\nTrue when successful, False when failed.\nexecute\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.execute",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.execute.html#pyedb.dotnet.edb.Edb.execute",
        "title": "execute > execute > execute",
        "section": "execute > execute",
        "text": "Edb.execute(func)\n\nExecute a function.\n\nParameters\n\nfunc\n\npython:str\n\nFunction to execute.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.get_attributes.html#pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgNearestPinTerminalInfo.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_parameters_to_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_parameters_to_edb.html#set_parameters_to_edb",
        "title": "set_parameters_to_edb",
        "section": "set_parameters_to_edb",
        "text": "Create port.\nset_parameters_to_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_parameters_to_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.set_parameters_to_edb.html#pyedb.configuration.cfg_ports_sources.CfgPort.set_parameters_to_edb",
        "title": "set_parameters_to_edb > set_parameters_to_edb > set_parameters_to_edb",
        "section": "set_parameters_to_edb > set_parameters_to_edb",
        "text": "CfgPort.set_parameters_to_edb()\n\nCreate port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the setup.\nname"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.name.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property SimulationSetup.name\n\nName of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_horizontal_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_horizontal_extent_multiple.html#use_airbox_horizontal_extent_multiple",
        "title": "use_airbox_horizontal_extent_multiple",
        "section": "use_airbox_horizontal_extent_multiple",
        "text": "Whether the multiple value is used for the horizontal extent of the air box.\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\nuse_airbox_horizontal_extent_multiple\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_horizontal_extent_multiple",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_horizontal_extent_multiple.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_airbox_horizontal_extent_multiple",
        "title": "use_airbox_horizontal_extent_multiple > use_airbox_horizontal_extent_multiple > use_airbox_horizontal_extent_multiple",
        "section": "use_airbox_horizontal_extent_multiple > use_airbox_horizontal_extent_multiple",
        "text": "property SimulationConfigurationBatch.use_airbox_horizontal_extent_multiple\n\nWhether the multiple value is used for the horizontal extent of the air box.\n\nReturns\n\nbool\n\nTrue when the multiple value (extent factor) is used. False when\nabsolute dimensions are used.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Flag indicating if the setup is enabled.\nenabled"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.enabled.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property SiwaveSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.filename",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.filename.html#filename",
        "title": "filename",
        "section": "filename",
        "text": "Retrieve the file name loaded for mapping properties value.\nthe absolute path for the filename.\nfilename\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.filename",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.filename.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.filename",
        "title": "filename > filename > filename",
        "section": "filename > filename",
        "text": "property SimulationConfiguration.filename\n\nRetrieve the file name loaded for mapping properties value.\n\nReturns\n\npython:str\n\nthe absolute path for the filename.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_type.html#dielectric_extent_type",
        "title": "dielectric_extent_type",
        "section": "dielectric_extent_type",
        "text": "Dielectric extent type.\ndielectric_extent_type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_type.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.dielectric_extent_type",
        "title": "dielectric_extent_type > dielectric_extent_type > dielectric_extent_type",
        "section": "dielectric_extent_type > dielectric_extent_type",
        "text": "property HfssExtentInfo.dielectric_extent_type\n\nDielectric extent type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_dcconnected_net_list",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_dcconnected_net_list.html#get_dcconnected_net_list",
        "title": "get_dcconnected_net_list",
        "section": "get_dcconnected_net_list",
        "text": "Get the nets connected to the direct current through inductors.\nOnly inductors are considered.\nList of ground nets. The default is [\"GND\"].\nList of nets connected to DC through inductors.\nget_dcconnected_net_list\npython:list\noptional\n[\"GND\"]\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_dcconnected_net_list",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_dcconnected_net_list.html#pyedb.dotnet.database.nets.EdbNets.get_dcconnected_net_list",
        "title": "get_dcconnected_net_list > get_dcconnected_net_list > get_dcconnected_net_list",
        "section": "get_dcconnected_net_list > get_dcconnected_net_list",
        "text": "EdbNets.get_dcconnected_net_list(ground_nets=['GND'], res_value=0.001)\n\nGet the nets connected to the direct current through inductors.\n\nOnly inductors are considered.\n\nParameters\n\nground_nets\n\npython:list, optional\n\nList of ground nets. The default is [\"GND\"].\n\nReturns\n\npython:list\n\nList of nets connected to DC through inductors.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.apply.html#pyedb.configuration.cfg_general.CfgGeneral.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgGeneral.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.variable_exists",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.variable_exists.html#variable_exists",
        "title": "variable_exists",
        "section": "variable_exists",
        "text": "Check if a variable exists or not.\nIt returns a booleand to check if the variable exists and the variable\nserver that should contain the variable.\nvariable_exists\npython:tuple\nof\nand\nVariableServer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.variable_exists",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.variable_exists.html#pyedb.dotnet.edb.Edb.variable_exists",
        "title": "variable_exists > variable_exists > variable_exists",
        "section": "variable_exists > variable_exists",
        "text": "Edb.variable_exists(variable_name)\n\nCheck if a variable exists or not.\n\nReturns\n\npython:tuple of bool and VariableServer\n\nIt returns a booleand to check if the variable exists and the variable\nserver that should contain the variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.html#edbnetsdata",
        "title": "EDBNetsData",
        "section": "EDBNetsData",
        "text": "Manages EDB functionalities for a primitives.\nIt Inherits EDB Object properties.\nEDBNetsData.create(layout, name)\nEdb Dotnet Api Database Edb.Net.Create.\nEDBNetsData.delete()\nEdb Dotnet Api Database Edb.Net.Delete.\nEDBNetsData.find_by_name(layout, net)\nEdb Dotnet Api Database Edb.Net.FindByName.\nEDBNetsData.find_dc_short([fix])\nFind DC-shorted nets.\nEDBNetsData.get_smallest_trace_width()\nRetrieve the smallest trace width from paths.\nEDBNetsData.plot([layers, show_legend, ...])\nPlot a net to Matplotlib 2D chart.\nEDBNetsData.api_class\nReturn Ansys.Ansoft.Edb class object.\nEDBNetsData.api_object\nReturn Ansys.Ansoft.Edb object.\nEDBNetsData.components\nReturn the list of components that touch the net.\nEDBNetsData.extended_net\nGet extended net and associated components.\nEDBNetsData.is_null\nEdb Dotnet Api Database Net.IsNull().\nEDBNetsData.is_power_ground\nEdb Dotnet Api Database Net.IsPowerGround() and  Net.SetIsPowerGround().\nEDBNetsData.name\nEdb Dotnet Api Database net.name and  Net.SetName().\nEDBNetsData.padstack_instances\nReturn the list of primitives that belongs to the net.\nEDBNetsData.primitives\nReturn the list of primitives that belongs to the net.\nEDBNetsData\nEDBNetsData.create\nEDBNetsData.delete\nEDBNetsData.find_by_name\nEDBNetsData.find_dc_short\nEDBNetsData.get_smallest_trace_width\nEDBNetsData.plot\nEDBNetsData.api_class\nEDBNetsData.api_object\nEDBNetsData.components\nEDBNetsData.extended_net\nEDBNetsData.is_null\nEDBNetsData.is_power_ground\nEDBNetsData.name\nEDBNetsData.padstack_instances\nEDBNetsData.primitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData",
        "title": "EDBNetsData > EDBNetsData > EDBNetsData",
        "section": "EDBNetsData > EDBNetsData",
        "text": "class pyedb.dotnet.database.edb_data.nets_data.EDBNetsData(raw_net, core_app)\n\nManages EDB functionalities for a primitives.\nIt Inherits EDB Object properties.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> edb_net = edb.nets.nets[\"GND\"]\n>>> edb_net.name # Class Property\n>>> edb_net.name # EDB Object Property\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBNetsData.create(layout, name)\n\nEdb Dotnet Api Database Edb.Net.Create.\n\nEDBNetsData.delete()\n\nEdb Dotnet Api Database Edb.Net.Delete.\n\nEDBNetsData.find_by_name(layout, net)\n\nEdb Dotnet Api Database Edb.Net.FindByName.\n\nEDBNetsData.find_dc_short([fix])\n\nFind DC-shorted nets.\n\nEDBNetsData.get_smallest_trace_width()\n\nRetrieve the smallest trace width from paths.\n\nEDBNetsData.plot([layers, show_legend, ...])\n\nPlot a net to Matplotlib 2D chart.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBNetsData.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\nEDBNetsData.api_object\n\nReturn Ansys.Ansoft.Edb object.\n\nEDBNetsData.components\n\nReturn the list of components that touch the net.\n\nEDBNetsData.extended_net\n\nGet extended net and associated components.\n\nEDBNetsData.is_null\n\nEdb Dotnet Api Database Net.IsNull().\n\nEDBNetsData.is_power_ground\n\nEdb Dotnet Api Database Net.IsPowerGround() and  Net.SetIsPowerGround().\n\nEDBNetsData.name\n\nEdb Dotnet Api Database net.name and  Net.SetName().\n\nEDBNetsData.padstack_instances\n\nReturn the list of primitives that belongs to the net.\n\nEDBNetsData.primitives\n\nReturn the list of primitives that belongs to the net.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_nets.html#api_nets",
        "title": "api_nets",
        "section": "api_nets",
        "text": "Return Edb Nets object dictionary.\napi_nets"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_nets.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_nets",
        "title": "api_nets > api_nets > api_nets",
        "section": "api_nets > api_nets",
        "text": "property EDBExtendedNetData.api_nets\n\nReturn Edb Nets object dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.max_elements.html#max_elements",
        "title": "max_elements",
        "section": "max_elements",
        "text": "Maximum number of elements.\nmax_elements\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.max_elements.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.max_elements",
        "title": "max_elements > max_elements > max_elements",
        "section": "max_elements > max_elements",
        "text": "property MeshOperation.max_elements\n\nMaximum number of elements.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.use_loop_res_for_per_pin",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.use_loop_res_for_per_pin.html#use_loop_res_for_per_pin",
        "title": "use_loop_res_for_per_pin",
        "section": "use_loop_res_for_per_pin",
        "text": "Use loop Res Per Pin.\nuse_loop_res_for_per_pin\nTrue\nwhen\nactivated\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.use_loop_res_for_per_pin",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.use_loop_res_for_per_pin.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.use_loop_res_for_per_pin",
        "title": "use_loop_res_for_per_pin > use_loop_res_for_per_pin > use_loop_res_for_per_pin",
        "section": "use_loop_res_for_per_pin > use_loop_res_for_per_pin",
        "text": "property SiwaveDCIRSettings.use_loop_res_for_per_pin\n\nUse loop Res Per Pin.\n\nReturns\n\nbool\n\n\n\nTrue when activated, False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_operation_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_operation_type.html#mesh_operation_type",
        "title": "mesh_operation_type",
        "section": "mesh_operation_type",
        "text": "Mesh operation type.\nOptions:\n0- kMeshSetupBase\n1- kMeshSetupLength\n2- kMeshSetupSkinDepth\n3- kNumMeshOpTypes.\nmesh_operation_type\nkMeshSetupBase\nkMeshSetupLength\nkMeshSetupSkinDepth\nkNumMeshOpTypes\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_operation_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_operation_type.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_operation_type",
        "title": "mesh_operation_type > mesh_operation_type > mesh_operation_type",
        "section": "mesh_operation_type > mesh_operation_type",
        "text": "property SkinDepthMeshOperation.mesh_operation_type\n\nMesh operation type.\nOptions:\n0- kMeshSetupBase\n1- kMeshSetupLength\n2- kMeshSetupSkinDepth\n3- kNumMeshOpTypes.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.html#meshoptype",
        "title": "MeshOpType",
        "section": "MeshOpType",
        "text": "An enumeration.\nMeshOpType.kMeshSetupBase\n\nMeshOpType.kMeshSetupLength\n\nMeshOpType.kMeshSetupSkinDepth\n\nMeshOpType.kNumMeshOpTypes\n\nMeshOpType\nMeshOpType.kMeshSetupBase\nMeshOpType.kMeshSetupLength\nMeshOpType.kMeshSetupSkinDepth\nMeshOpType.kNumMeshOpTypes"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType",
        "title": "MeshOpType > MeshOpType > MeshOpType",
        "section": "MeshOpType > MeshOpType",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType(value)\n\nAn enumeration.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nMeshOpType.kMeshSetupBase\n\n\n\nMeshOpType.kMeshSetupLength\n\n\n\nMeshOpType.kMeshSetupSkinDepth\n\n\n\nMeshOpType.kNumMeshOpTypes\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.extent_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.extent_type.html#extent_type",
        "title": "extent_type",
        "section": "extent_type",
        "text": "Extent type.\nextent_type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.extent_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.extent_type.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.extent_type",
        "title": "extent_type > extent_type > extent_type",
        "section": "extent_type > extent_type",
        "text": "property HfssExtentInfo.extent_type\n\nExtent type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.pec_launch_width",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.pec_launch_width.html#pec_launch_width",
        "title": "pec_launch_width",
        "section": "pec_launch_width",
        "text": "Launch width for the printed electronic component (PEC).\npec_launch_width"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.pec_launch_width",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.pec_launch_width.html#pyedb.dotnet.database.edb_data.ports.WavePort.pec_launch_width",
        "title": "pec_launch_width > pec_launch_width > pec_launch_width",
        "section": "pec_launch_width > pec_launch_width",
        "text": "property WavePort.pec_launch_width\n\nLaunch width for the printed electronic component (PEC).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_edge_mesh",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_edge_mesh.html#use_edge_mesh",
        "title": "use_edge_mesh",
        "section": "use_edge_mesh",
        "text": "This option controls both, the thickness and the width of the exterior conductor filament.\nWhen checked, it prevails over the Mesh Frequency or Max Frequency during mesh calculation.\nuse_edge_mesh"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_edge_mesh",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_edge_mesh.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_edge_mesh",
        "title": "use_edge_mesh > use_edge_mesh > use_edge_mesh",
        "section": "use_edge_mesh > use_edge_mesh",
        "text": "property RaptorXSimulationAdvancedSettings.use_edge_mesh\n\nThis option controls both, the thickness and the width of the exterior conductor filament.\nWhen checked, it prevails over the Mesh Frequency or Max Frequency during mesh calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_vias",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_vias.html#mesh_vias",
        "title": "mesh_vias",
        "section": "mesh_vias",
        "text": "Mesh vias.\nmesh_vias"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_vias",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_vias.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.mesh_vias",
        "title": "mesh_vias > mesh_vias > mesh_vias",
        "section": "mesh_vias > mesh_vias",
        "text": "property DCAdvancedSettings.mesh_vias\n\nMesh vias.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_coax_port_on_component",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_coax_port_on_component.html#create_coax_port_on_component",
        "title": "create_coax_port_on_component",
        "section": "create_coax_port_on_component",
        "text": "The name of the new coaxial port is automatically assigned.\nList of one or more reference designators.\nList of one or more nets.\nOnly active with grpc version. This argument is added only to ensure compatibility between DotNet and grpc.\nTrue when successful, False when failed.\ncreate_coax_port_on_component\npython:list\npython:str\npython:list\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_coax_port_on_component",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_coax_port_on_component.html#pyedb.dotnet.database.hfss.EdbHfss.create_coax_port_on_component",
        "title": "create_coax_port_on_component > create_coax_port_on_component > create_coax_port_on_component",
        "section": "create_coax_port_on_component > create_coax_port_on_component",
        "text": "EdbHfss.create_coax_port_on_component(ref_des_list, net_list, delete_existing_terminal=False)\n\nCreate a coaxial port on a component or component list on a net or net list.\n\nThe name of the new coaxial port is automatically assigned.\n\nParameters\n\nref_des_list\n\npython:list, python:str\n\nList of one or more reference designators.\n\nnet_list\n\npython:list, python:str\n\nList of one or more nets.\n\ndelete_existing_terminal\n\nbool\n\nOnly active with grpc version. This argument is added only to ensure compatibility between DotNet and grpc.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete current simulation setup.\ndelete"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "SiwaveSimulationSetup.delete()\n\nDelete current simulation setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.voids.html#voids",
        "title": "voids",
        "section": "voids",
        "text": "list of Primitive: List of void        primitive objects inside the primitive.\nRead-Only.\nvoids\nlist\nPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.voids.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.voids",
        "title": "voids > voids > voids",
        "section": "voids > voids",
        "text": "property EdbPolygon.voids\n\nlist of Primitive: List of void        primitive objects inside the primitive.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets_by_components",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets_by_components.html#nets_by_components",
        "title": "nets_by_components",
        "section": "nets_by_components",
        "text": "Get all nets for each component instance.\nnets_by_components"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets_by_components",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets_by_components.html#pyedb.dotnet.database.nets.EdbNets.nets_by_components",
        "title": "nets_by_components > nets_by_components > nets_by_components",
        "section": "nets_by_components > nets_by_components",
        "text": "property EdbNets.nets_by_components: dict\n\nGet all nets for each component instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_rlc_component.html#create_rlc_component",
        "title": "create_rlc_component",
        "section": "create_rlc_component",
        "text": "Create physical Rlc component.\nList of EDB pins.\nComponent name.\nResistor value.\nCapacitance value.\nInductor value.\nUsing parallel model when True, series when False.\nCreated EDB component.\ncreate_rlc_component\npython:list\nEdb.Cell.Primitive.PadstackInstance\npython:str\npython:float\npython:float\npython:float\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_rlc_component.html#pyedb.dotnet.database.siwave.EdbSiwave.create_rlc_component",
        "title": "create_rlc_component > create_rlc_component > create_rlc_component",
        "section": "create_rlc_component > create_rlc_component",
        "text": "EdbSiwave.create_rlc_component(pins, component_name='', r_value=1.0, c_value=1e-09, l_value=1e-09, is_parallel=False)\n\nCreate physical Rlc component.\n\nParameters\n\npins\n\npython:list[Edb.Cell.Primitive.PadstackInstance]\n\nList of EDB pins.\n\ncomponent_name\n\npython:str\n\nComponent name.\n\nr_value\n\npython:float\n\nResistor value.\n\nc_value\n\npython:float\n\nCapacitance value.\n\nl_value\n\npython:float\n\nInductor value.\n\nis_parallel\n\nbool\n\nUsing parallel model when True, series when False.\n\nReturns\n\nclass:pyedb.dotnet.database.components.Components\n\nCreated EDB component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy.html#use_extract_floating_metals_dummy",
        "title": "use_extract_floating_metals_dummy",
        "section": "use_extract_floating_metals_dummy",
        "text": "Enables modeling of floating metals as dummy fills. Captures the effect of dummy fill by extracting\nthe effective capacitance between any pairs of metal segments in the design, in the presence of each\nindividual dummy metal islands. This setting cannot be used with UseExtractFloatingMetalsFloating.\nuse_extract_floating_metals_dummy"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy",
        "title": "use_extract_floating_metals_dummy > use_extract_floating_metals_dummy > use_extract_floating_metals_dummy",
        "section": "use_extract_floating_metals_dummy > use_extract_floating_metals_dummy",
        "text": "property RaptorXSimulationAdvancedSettings.use_extract_floating_metals_dummy\n\nEnables modeling of floating metals as dummy fills. Captures the effect of dummy fill by extracting\nthe effective capacitance between any pairs of metal segments in the design, in the presence of each\nindividual dummy metal islands. This setting cannot be used with UseExtractFloatingMetalsFloating.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_sim_setup_info.html#set_sim_setup_info",
        "title": "set_sim_setup_info",
        "section": "set_sim_setup_info",
        "text": "set_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_sim_setup_info.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_sim_setup_info",
        "title": "set_sim_setup_info > set_sim_setup_info > set_sim_setup_info",
        "section": "set_sim_setup_info > set_sim_setup_info",
        "text": "HfssSimulationSetup.set_sim_setup_info(sim_setup_info)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.small_void_area",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.small_void_area.html#small_void_area",
        "title": "small_void_area",
        "section": "small_void_area",
        "text": "Small voids to remove area.\nsmall_void_area\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.small_void_area",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.small_void_area.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.small_void_area",
        "title": "small_void_area > small_void_area > small_void_area",
        "section": "small_void_area > small_void_area",
        "text": "property DefeatureSettings.small_void_area\n\nSmall voids to remove area.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.transparency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.transparency.html#transparency",
        "title": "transparency",
        "section": "transparency",
        "text": "Retrieve transparency of the layer.\nAn integer between 0 and 100 with 0 being fully opaque and 100 being fully transparent.\ntransparency\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.transparency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.transparency.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.transparency",
        "title": "transparency > transparency > transparency",
        "section": "transparency > transparency",
        "text": "property LayerEdbClass.transparency\n\nRetrieve transparency of the layer.\n\nReturns\n\npython:int\n\nAn integer between 0 and 100 with 0 being fully opaque and 100 being fully transparent.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_pin.html#add_pin",
        "title": "add_pin",
        "section": "add_pin",
        "text": "add_pin"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_pin.html#pyedb.dotnet.database.edb_data.control_file.ControlFileComponent.add_pin",
        "title": "add_pin > add_pin > add_pin",
        "section": "add_pin > add_pin",
        "text": "ControlFileComponent.add_pin(name, x, y, layer)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_freq.html#start_freq",
        "title": "start_freq",
        "section": "start_freq",
        "text": "Starting frequency for the frequency sweep.\nValue of the frequency point.\nstart_freq\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_freq.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_freq",
        "title": "start_freq > start_freq > start_freq",
        "section": "start_freq > start_freq",
        "text": "property SimulationConfigurationAc.start_freq\n\nStarting frequency for the frequency sweep.\n\nReturns\n\npython:float\n\nValue of the frequency point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/build_simulation_project/build_signal_integrity_project",
        "href": "user_guide/build_simulation_project/build_signal_integrity_project.html#build-a-signal-integrity-project",
        "title": "Build a signal integrity project",
        "section": "Build a signal integrity project",
        "text": "This page shows how to build an signal integrity project.\nBuild a signal integrity project"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.hfss_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.hfss_type.html#hfss_type",
        "title": "hfss_type",
        "section": "hfss_type",
        "text": "HFSS port type.\nhfss_type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.hfss_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.hfss_type.html#pyedb.dotnet.database.edb_data.ports.GapPort.hfss_type",
        "title": "hfss_type > hfss_type > hfss_type",
        "section": "hfss_type > hfss_type",
        "text": "property GapPort.hfss_type\n\nHFSS port type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.import_layout_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.import_layout_file.html#import_layout_file",
        "title": "import_layout_file",
        "section": "import_layout_file",
        "text": "Import a board file and generate an edb.def file in the working directory.\nThis function supports all AEDT formats, including DXF, GDS, SML (IPC2581), BRD, MCM, SIP, ZIP and TGZ.\nFull path to the board file.\nDirectory in which to create the aedb folder. The name given to the AEDB file\nis the same as the name of the board file.\nFull path to the Ansys translator. The default is \"\".\nWhether to use the PPE License. The default is False.\nPath to the XML file. The default is None, in which case an attempt is made to find\nthe XML file in the same directory as the board file. To succeed, the XML file and board file\nmust have the same name. Only the extension differs.\nTechnology file. The file can be *.ircx, *.vlc.tech, or *.itf\nLayer map .map file.\nLayer filter .txt file.\nimport_layout_file\nedb.def\npython:str\npython:str\noptional\naedb\npython:str\noptional\n\"\"\nFalse\npython:str\noptional\nNone\npython:str\noptional\npython:str\noptional\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.import_layout_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.import_layout_file.html#pyedb.dotnet.edb.Edb.import_layout_file",
        "title": "import_layout_file > import_layout_file > import_layout_file",
        "section": "import_layout_file > import_layout_file",
        "text": "Edb.import_layout_file(input_file, working_dir='', anstranslator_full_path='', use_ppe=False, control_file=None, map_file=None, tech_file=None, layer_filter=None)\n\nImport a board file and generate an edb.def file in the working directory.\n\nThis function supports all AEDT formats, including DXF, GDS, SML (IPC2581), BRD, MCM, SIP, ZIP and TGZ.\n\nParameters\n\ninput_file\n\npython:str\n\nFull path to the board file.\n\nworking_dir\n\npython:str, optional\n\nDirectory in which to create the aedb folder. The name given to the AEDB file\nis the same as the name of the board file.\n\nanstranslator_full_path\n\npython:str, optional\n\nFull path to the Ansys translator. The default is \"\".\n\nuse_ppe\n\nbool\n\nWhether to use the PPE License. The default is False.\n\ncontrol_file\n\npython:str, optional\n\nPath to the XML file. The default is None, in which case an attempt is made to find\nthe XML file in the same directory as the board file. To succeed, the XML file and board file\nmust have the same name. Only the extension differs.\n\ntech_file\n\npython:str, optional\n\nTechnology file. The file can be *.ircx, *.vlc.tech, or *.itf\n\nmap_file\n\npython:str, optional\n\nLayer map .map file.\n\nlayer_filter:str,optional\n\nLayer filter .txt file.\n\nReturns\n\nFull path to the AEDB file\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.api_object",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.api_object.html#api_object",
        "title": "api_object",
        "section": "api_object",
        "text": "Return Ansys.Ansoft.Edb object.\napi_object"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.api_object",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.api_object.html#pyedb.dotnet.edb.Edb.api_object",
        "title": "api_object > api_object > api_object",
        "section": "api_object > api_object",
        "text": "property Edb.api_object\n\nReturn Ansys.Ansoft.Edb object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_enhanced_bond_wire_modeling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_enhanced_bond_wire_modeling.html#include_enhanced_bond_wire_modeling",
        "title": "include_enhanced_bond_wire_modeling",
        "section": "include_enhanced_bond_wire_modeling",
        "text": "Enhance Bond wire modeling.\ninclude_enhanced_bond_wire_modeling"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_enhanced_bond_wire_modeling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_enhanced_bond_wire_modeling.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.include_enhanced_bond_wire_modeling",
        "title": "include_enhanced_bond_wire_modeling > include_enhanced_bond_wire_modeling > include_enhanced_bond_wire_modeling",
        "section": "include_enhanced_bond_wire_modeling > include_enhanced_bond_wire_modeling",
        "text": "property HFSSPISimulationSettings.include_enhanced_bond_wire_modeling\n\nEnhance Bond wire modeling.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.html#cfgoperations",
        "title": "CfgOperations",
        "section": "CfgOperations",
        "text": "CfgOperations.apply()\nImports operation information from JSON.\nCfgOperations.get_attributes([exclude])\n\nCfgOperations.get_data_from_db()\n\nCfgOperations.set_attributes(pedb_object)\n\nCfgOperations.protected_attributes\n\nCfgOperations\nCfgOperations.apply\nCfgOperations.get_attributes\nCfgOperations.get_data_from_db\nCfgOperations.set_attributes\nCfgOperations.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.html#pyedb.configuration.cfg_operations.CfgOperations",
        "title": "CfgOperations > CfgOperations > CfgOperations",
        "section": "CfgOperations > CfgOperations",
        "text": "class pyedb.configuration.cfg_operations.CfgOperations(pedb, data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgOperations.apply()\n\nImports operation information from JSON.\n\nCfgOperations.get_attributes([exclude])\n\n\n\nCfgOperations.get_data_from_db()\n\n\n\nCfgOperations.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgOperations.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size.html#hole_finished_size",
        "title": "hole_finished_size",
        "section": "hole_finished_size",
        "text": "Finished hole size.\nFinished size of the hole (Total Size + PlatingThickess*2).\nhole_finished_size\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size",
        "title": "hole_finished_size > hole_finished_size > hole_finished_size",
        "section": "hole_finished_size > hole_finished_size",
        "text": "property EDBPadstack.hole_finished_size\n\nFinished hole size.\n\nReturns\n\npython:float\n\nFinished size of the hole (Total Size + PlatingThickess*2).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter.html#hole_diameter",
        "title": "hole_diameter",
        "section": "hole_diameter",
        "text": "Hole diameter.\nhole_diameter"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter",
        "title": "hole_diameter > hole_diameter > hole_diameter",
        "section": "hole_diameter > hole_diameter",
        "text": "property EDBPadstack.hole_diameter\n\nHole diameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents.html#controlfilecomponents",
        "title": "ControlFileComponents",
        "section": "ControlFileComponents",
        "text": "Class for component management.\nControlFileComponents.add_component(ref_des, ...)\nCreate a new component.\nControlFileComponents\nControlFileComponents.add_component"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileComponents.html#pyedb.dotnet.database.edb_data.control_file.ControlFileComponents",
        "title": "ControlFileComponents > ControlFileComponents > ControlFileComponents",
        "section": "ControlFileComponents > ControlFileComponents",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileComponents\n\nClass for component management.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nControlFileComponents.add_component(ref_des, ...)\n\nCreate a new component.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweeps.html#sweeps",
        "title": "sweeps",
        "section": "sweeps",
        "text": "List of frequency sweeps.\nsweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweeps.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sweeps",
        "title": "sweeps > sweeps > sweeps",
        "section": "sweeps > sweeps",
        "text": "property HfssSimulationSetup.sweeps\n\nList of frequency sweeps.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.primitive_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.primitive_type.html#primitive_type",
        "title": "primitive_type",
        "section": "primitive_type",
        "text": "Return the type of the primitive.\nExpected output is among \"circle\", \"rectangle\",``”polygon”,”path”`` or \"bondwire\".\nprimitive_type\n\"circle\"\n\"rectangle\"\n,\n\"bondwire\"\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.primitive_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.primitive_type.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.primitive_type",
        "title": "primitive_type > primitive_type > primitive_type",
        "section": "primitive_type > primitive_type",
        "text": "property EdbPolygon.primitive_type\n\nReturn the type of the primitive.\n\nExpected output is among \"circle\", \"rectangle\",``”polygon”,”path”`` or \"bondwire\".\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.stackup_thickness",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.stackup_thickness.html#stackup_thickness",
        "title": "stackup_thickness",
        "section": "stackup_thickness",
        "text": "stackup_thickness"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.stackup_thickness",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.stackup_thickness.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.stackup_thickness",
        "title": "stackup_thickness > stackup_thickness > stackup_thickness",
        "section": "stackup_thickness > stackup_thickness",
        "text": "property EDBStatistics.stackup_thickness\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_abs_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_abs_length.html#defeature_abs_length",
        "title": "defeature_abs_length",
        "section": "defeature_abs_length",
        "text": "Absolute length for polygon defeaturing.\ndefeature_abs_length\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_abs_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_abs_length.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.defeature_abs_length",
        "title": "defeature_abs_length > defeature_abs_length > defeature_abs_length",
        "section": "defeature_abs_length > defeature_abs_length",
        "text": "property DefeatureSettings.defeature_abs_length\n\nAbsolute length for polygon defeaturing.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.stackup_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.stackup_layers.html#stackup_layers",
        "title": "stackup_layers",
        "section": "stackup_layers",
        "text": "Retrieve the dictionary of signal and dielectric layers.\nstackup_layers"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.stackup_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.stackup_layers.html#pyedb.dotnet.database.stackup.Stackup.stackup_layers",
        "title": "stackup_layers > stackup_layers > stackup_layers",
        "section": "stackup_layers > stackup_layers",
        "text": "property Stackup.stackup_layers\n\nRetrieve the dictionary of signal and dielectric layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size.html#hole_finished_size",
        "title": "hole_finished_size",
        "section": "hole_finished_size",
        "text": "Finished hole size.\nFinished size of the hole (Total Size + PlatingThickess*2).\nhole_finished_size\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_finished_size",
        "title": "hole_finished_size > hole_finished_size > hole_finished_size",
        "section": "hole_finished_size > hole_finished_size",
        "text": "property EDBPadstack.hole_finished_size\n\nFinished hole size.\n\nReturns\n\npython:float\n\nFinished size of the hole (Total Size + PlatingThickess*2).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.aedt_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.aedt_name.html#aedt_name",
        "title": "aedt_name",
        "section": "aedt_name",
        "text": "Name to be visualized in AEDT.\nName.\naedt_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.aedt_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.aedt_name.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.aedt_name",
        "title": "aedt_name > aedt_name > aedt_name",
        "section": "aedt_name > aedt_name",
        "text": "property EdbPolygon.aedt_name\n\nName to be visualized in AEDT.\n\nReturns\n\npython:str\n\nName.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_arc.html#is_arc",
        "title": "is_arc",
        "section": "is_arc",
        "text": "Either if a point is an arc or not.\nis_arc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_arc.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_arc",
        "title": "is_arc > is_arc > is_arc",
        "section": "is_arc > is_arc",
        "text": "EDBPadstackInstance.is_arc(point)\n\nEither if a point is an arc or not.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_syz_analysis",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_syz_analysis.html#add_siwave_syz_analysis",
        "title": "add_siwave_syz_analysis",
        "section": "add_siwave_syz_analysis",
        "text": "Add a SIwave AC analysis to EDB.\nSetup name.\nLevel of accuracy of SI slider. The default is 1.\nThe default is 10. The value for this parameter is used for these sweep types:\nlinear count and decade count.\nThis parameter is alternative to step_freq, which is used for a linear scale sweep.\nType of the sweep. The default is 1. Options are:\n0: linear count\n1: linear scale\n2: loc scale\nStarting frequency. The default is 1.\nStopping frequency. The default is 1e9.\nFrequency size of the step. The default is 1e6.\nWhether the sweep is discrete. The default is False.\nSetup object class.\nadd_siwave_syz_analysis\npython:str\noptional\npython:int\noptional\n1\npython:int\n10\nstep_freq\npython:int\noptional\n1\n0\n1\n2\npython:float\noptional\n1\npython:float\noptional\n1e9\npython:float\noptional\n1e6\noptional\nFalse\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_syz_analysis",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_syz_analysis.html#pyedb.dotnet.database.siwave.EdbSiwave.add_siwave_syz_analysis",
        "title": "add_siwave_syz_analysis > add_siwave_syz_analysis > add_siwave_syz_analysis",
        "section": "add_siwave_syz_analysis > add_siwave_syz_analysis",
        "text": "EdbSiwave.add_siwave_syz_analysis(name=None, accuracy_level=1, decade_count=10, sweeptype=1, start_freq=1, stop_freq=1000000000.0, step_freq=1000000.0, discrete_sweep=False)\n\nAdd a SIwave AC analysis to EDB.\n\nParameters\n\nname\n\npython:str optional\n\nSetup name.\n\naccuracy_level\n\npython:int, optional\n\nLevel of accuracy of SI slider. The default is 1.\n\ndecade_count\n\npython:int\n\nThe default is 10. The value for this parameter is used for these sweep types:\nlinear count and decade count.\nThis parameter is alternative to step_freq, which is used for a linear scale sweep.\n\nsweeptype\n\npython:int, optional\n\nType of the sweep. The default is 1. Options are:\n\n0: linear count\n\n1: linear scale\n\n2: loc scale\n\nstart_freq\n\npython:float, optional\n\nStarting frequency. The default is 1.\n\nstop_freq\n\npython:float, optional\n\nStopping frequency. The default is 1e9.\n\nstep_freq\n\npython:float, optional\n\nFrequency size of the step. The default is 1e6.\n\ndiscrete_sweep\n\nbool, optional\n\nWhether the sweep is discrete. The default is False.\n\nReturns\n\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup\n\nSetup object class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.ports",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.ports.html#ports",
        "title": "ports",
        "section": "ports",
        "text": "Get all ports.\npyedb.dotnet.database.edb_data.ports.WavePort,]]\nports\nDict\npython:str\npyedb.dotnet.database.edb_data.ports.GapPort\npyedb.dotnet.database.edb_data.ports.WavePort"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.ports",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.ports.html#pyedb.dotnet.edb.Edb.ports",
        "title": "ports > ports > ports",
        "section": "ports > ports",
        "text": "property Edb.ports\n\nGet all ports.\n\nReturns\n\nport dictionary\n\nDict[python:str, [pyedb.dotnet.database.edb_data.ports.GapPort,\n\npyedb.dotnet.database.edb_data.ports.WavePort,]]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.snap_length_threshold",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.snap_length_threshold.html#snap_length_threshold",
        "title": "snap_length_threshold",
        "section": "snap_length_threshold",
        "text": "snap_length_threshold"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.snap_length_threshold",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.snap_length_threshold.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.snap_length_threshold",
        "title": "snap_length_threshold > snap_length_threshold > snap_length_threshold",
        "section": "snap_length_threshold > snap_length_threshold",
        "text": "property HFSSPISimulationSettings.snap_length_threshold\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.layer.html#layer",
        "title": "layer",
        "section": "layer",
        "text": "Get layer of the terminal.\nlayer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.layer.html#pyedb.dotnet.database.edb_data.ports.GapPort.layer",
        "title": "layer > layer > layer",
        "section": "layer > layer",
        "text": "property GapPort.layer\n\nGet layer of the terminal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_syslib_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_syslib_material.html#read_syslib_material",
        "title": "read_syslib_material",
        "section": "read_syslib_material",
        "text": "Read a specific material from syslib AMAT file.\nName of the material.\n{material name: dict of material properties}.\nread_syslib_material\npython:str\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_syslib_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_syslib_material.html#pyedb.dotnet.database.materials.Materials.read_syslib_material",
        "title": "read_syslib_material > read_syslib_material > read_syslib_material",
        "section": "read_syslib_material > read_syslib_material",
        "text": "Materials.read_syslib_material(material_name)\n\nRead a specific material from syslib AMAT file.\n\nParameters\n\nmaterial_name\n\npython:str\n\nName of the material.\n\nReturns\n\npython:dict\n\n{material name: dict of material properties}.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_solved_freq",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_solved_freq.html#min_solved_freq",
        "title": "min_solved_freq",
        "section": "min_solved_freq",
        "text": "Minimum solved frequency with units.\nFrequency with units.\nmin_solved_freq\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_solved_freq",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_solved_freq.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.min_solved_freq",
        "title": "min_solved_freq > min_solved_freq > min_solved_freq",
        "section": "min_solved_freq > min_solved_freq",
        "text": "property SweepData.min_solved_freq\n\nMinimum solved frequency with units.\n\nReturns\n\npython:str\n\nFrequency with units.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_conformal_polygon_from_netlist",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_conformal_polygon_from_netlist.html#get_conformal_polygon_from_netlist",
        "title": "get_conformal_polygon_from_netlist",
        "section": "get_conformal_polygon_from_netlist",
        "text": "Return an EDB conformal polygon based on a netlist.\nlist[str]\nEdb polygon object.\nget_conformal_polygon_from_netlist\nList\nof\nnet\nEdb.Cell.Primitive.Polygon"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_conformal_polygon_from_netlist",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_conformal_polygon_from_netlist.html#pyedb.dotnet.edb.Edb.get_conformal_polygon_from_netlist",
        "title": "get_conformal_polygon_from_netlist > get_conformal_polygon_from_netlist > get_conformal_polygon_from_netlist",
        "section": "get_conformal_polygon_from_netlist > get_conformal_polygon_from_netlist",
        "text": "Edb.get_conformal_polygon_from_netlist(netlist=None)\n\nReturn an EDB conformal polygon based on a netlist.\n\nParameters\n\nnetlist\n\nList of net names.\n\nlist[str]\n\nReturns\n\nEdb.Cell.Primitive.Polygon\n\nEdb polygon object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_export_thermal_data",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_export_thermal_data.html#dc_export_thermal_data",
        "title": "dc_export_thermal_data",
        "section": "dc_export_thermal_data",
        "text": "Retrieve the value for using external data.\ndc_export_thermal_data\nTrue\nwhen\nactivated\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_export_thermal_data",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_export_thermal_data.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_export_thermal_data",
        "title": "dc_export_thermal_data > dc_export_thermal_data > dc_export_thermal_data",
        "section": "dc_export_thermal_data > dc_export_thermal_data",
        "text": "property SimulationConfigurationDc.dc_export_thermal_data\n\nRetrieve the value for using external data.\n\nReturns\n\nbool\n\n\n\nTrue when activated, False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_sweep",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_sweep.html#add_sweep",
        "title": "add_sweep",
        "section": "add_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nAdded for grpc compatibility.\nAdded for rpc compatibility.\nAdded for grpc compatibility.\nAdded for grpc compatibility.\nList of frequency points. The default is None.\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\nadd_sweep\npython:str\noptional\nNone\npython:str\noptional\npython:str\noptional\npython:str\noptional\noptional\npython:list\noptional\nNone\npython:str\noptional\n\"interpolation\"\n\"discrete\""
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_sweep",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_sweep.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_sweep",
        "title": "add_sweep > add_sweep > add_sweep",
        "section": "add_sweep > add_sweep",
        "text": "RaptorXSimulationSetup.add_sweep(name: str | None = None, distribution: str | None = None, start_freq: str | None = None, stop_freq: str | None = None, step=None, frequency_set: list | None = None, sweep_type: str = 'interpolation', **kwargs)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\ndistribution\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstart_freq\n\npython:str, optional\n\nAdded for rpc compatibility.\n\nstop_freq\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstep\n\noptional\n\nAdded for grpc compatibility.\n\nfrequency_set\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nsweep_type\n\npython:str, optional\n\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\n\nReturns\n\n\n\n——-\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_sweep(name=\"sw1\", frequency_set=[\"linear count\", \"1MHz\", \"100MHz\", 10])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_broadband",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_broadband.html#set_solution_broadband",
        "title": "set_solution_broadband",
        "section": "set_solution_broadband",
        "text": "Set broadband solution.\nLow frequency. The default is 5GHz.\nHigh frequency. The default is 10GHz.\nMaximum number of passes. The default is 10.\nMaximum Delta S. Default is 0.02.\nset_solution_broadband\npython:str\npython:float\noptional\n5GHz\npython:str\npython:float\noptional\n10GHz\npython:int\noptional\n10\npython:float\noptional\n0.02"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_broadband",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_broadband.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_broadband",
        "title": "set_solution_broadband > set_solution_broadband > set_solution_broadband",
        "section": "set_solution_broadband > set_solution_broadband",
        "text": "HfssSimulationSetup.set_solution_broadband(low_frequency='5GHz', high_frequency='10GHz', max_num_passes=10, max_delta_s='0.02')\n\nSet broadband solution.\n\nParameters\n\nlow_frequency\n\npython:str, python:float, optional\n\nLow frequency. The default is 5GHz.\n\nhigh_frequency\n\npython:str, python:float, optional\n\nHigh frequency. The default is 10GHz.\n\nmax_num_passes\n\npython:int, optional\n\nMaximum number of passes. The default is 10.\n\nmax_delta_s\n\npython:float, optional\n\nMaximum Delta S. Default is 0.02.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequency_string",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequency_string.html#frequency_string",
        "title": "frequency_string",
        "section": "frequency_string",
        "text": "A string describing the frequency sweep. Below is an example.\n[‘LIN 0GHz 20GHz 0.05GHz’, ‘LINC 20GHz 30GHz 10’, ‘DEC 40GHz 50GHz 10’]\nfrequency_string"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequency_string",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequency_string.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequency_string",
        "title": "frequency_string > frequency_string > frequency_string",
        "section": "frequency_string > frequency_string",
        "text": "property SweepData.frequency_string\n\nA string describing the frequency sweep. Below is an example.\n[‘LIN 0GHz 20GHz 0.05GHz’, ‘LINC 20GHz 30GHz 10’, ‘DEC 40GHz 50GHz 10’]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_arc_midpoint",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_arc_midpoint.html#get_closest_arc_midpoint",
        "title": "get_closest_arc_midpoint",
        "section": "get_closest_arc_midpoint",
        "text": "Get the closest arc midpoint of the primitive to the input data.\nget_closest_arc_midpoint\npython:list\nof\npython:float\nPointData\npython:list\nof\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_arc_midpoint",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_arc_midpoint.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.get_closest_arc_midpoint",
        "title": "get_closest_arc_midpoint > get_closest_arc_midpoint > get_closest_arc_midpoint",
        "section": "get_closest_arc_midpoint > get_closest_arc_midpoint",
        "text": "EDBPadstackInstance.get_closest_arc_midpoint(point)\n\nGet the closest arc midpoint of the primitive to the input data.\n\nParameters\n\npoint\n\npython:list of python:float or PointData\n\n\n\nReturns\n\npython:list of python:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.rotation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.rotation.html#rotation",
        "title": "rotation",
        "section": "rotation",
        "text": "Padstack instance rotation.\nRotatation value for the padstack instance.\nrotation\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.rotation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.rotation.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.rotation",
        "title": "rotation > rotation > rotation",
        "section": "rotation > rotation",
        "text": "property EDBPadstackInstance.rotation\n\nPadstack instance rotation.\n\nReturns\n\npython:float\n\nRotatation value for the padstack instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_by_name",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_by_name.html#get_component_by_name",
        "title": "get_component_by_name",
        "section": "get_component_by_name",
        "text": "Retrieve a component by name.\nName of the component.\nTrue when successful, False when failed.\nget_component_by_name\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_by_name",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_component_by_name.html#pyedb.dotnet.database.components.Components.get_component_by_name",
        "title": "get_component_by_name > get_component_by_name > get_component_by_name",
        "section": "get_component_by_name > get_component_by_name",
        "text": "Components.get_component_by_name(name)\n\nRetrieve a component by name.\n\nParameters\n\nname\n\npython:str\n\nName of the component.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.get_attributes.html#pyedb.configuration.cfg_ports_sources.CfgPort.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgPort.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.set_attributes.html#pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgNearestPinTerminalInfo.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/troubleshooting",
        "href": "getting_started/troubleshooting.html#troubleshooting",
        "title": "Troubleshooting",
        "section": "Troubleshooting",
        "text": "This section first explains how to create PyEDB issues and post EDB discussions. It then\ndescribes  how to troubleshoot some common issues related to installing and using PyEDB.\nTroubleshooting"
    },
    {
        "objectID": "getting_started/troubleshooting",
        "href": "getting_started/troubleshooting.html#issues-and-discussions",
        "title": "Troubleshooting > Issues and discussions",
        "section": "Issues and discussions",
        "text": "On the PyEDB Issues page, you can\ncreate issues to report bugs and request new features.\nOn the PyEDB Discussions page or\nthe Discussions page on the Ansys Developer portal, you\ncan post questions, share ideas, and get community feedback.\nTo reach the project support team, email pyansys.core@ansys.com.\nIssues and discussions"
    },
    {
        "objectID": "getting_started/troubleshooting",
        "href": "getting_started/troubleshooting.html#installation-troubleshooting",
        "title": "Troubleshooting > Installation troubleshooting",
        "section": "Installation troubleshooting",
        "text": "Installation troubleshooting"
    },
    {
        "objectID": "getting_started/troubleshooting",
        "href": "getting_started/troubleshooting.html#error-installing-python-or-conda",
        "title": "Troubleshooting > Error installing Python or Conda",
        "section": "Error installing Python or Conda",
        "text": "Some companies do not allow installation of a Python interpreter. In this case, you can\nuse the Python interpreter available in the AEDT installation.\nPython 3.10 is available in AEDT 2023 R2 and later.\nHere is the path to the Python 3.10 interpreter for the 2023 R1 installation:\nError installing Python or Conda"
    },
    {
        "objectID": "getting_started/troubleshooting",
        "href": "getting_started/troubleshooting.html#error-installing-pyedb-using-pip",
        "title": "Troubleshooting > Error installing PyEDB using pip",
        "section": "Error installing PyEDB using pip",
        "text": "According to Installing Python modules\nin the official Python documentation, pip, the preferred\ninstaller program, is included by default with Python binary installers. If you have issues\nusing pip, check these areas for possible issues:\nProxy server: If your company uses a proxy server, you may have to update proxy\nsettings at the command line. For more information, see the Using a Proxy\nServer in the pip\ndocumentation.\nInstallation permission: Make sure that you have write access to the directory where the\nPython interpreter is installed. The use of a virtual environment\nhelps mitigate this issue by placing the Python interpreter and dependencies in a location that is owned\nby the user.\nFirewall: Some corporate firewalls may block pip. In this case, you must work with your IT\nadministrator to enable it. The proxy server settings (described earlier) allow you to explicitly define\nthe ports that pip is to use.\nIf downloads from PyPI, the Python Package Index, are not allowed, you can use a\nwheelhouse to install PyEDB. For more information, see install_pyedb_from_wheelhouse.\nError installing PyEDB using pip\npip\npip\npip\npip\npip"
    },
    {
        "objectID": "getting_started/troubleshooting",
        "href": "getting_started/troubleshooting.html#run-pyedb-with-grpc",
        "title": "Troubleshooting > Run PyEDB with gRPC",
        "section": "Run PyEDB with gRPC",
        "text": "gRPC is a modern open source, high-performance RPC (remote procedure call)\nframework that can run in any environment and supports client/server remote calls.\nStarting from 2024 R1, the EDB-Core API with a gRPC interface is available as Beta.\nDuring the Beta phase, both .NET and gRPC interfaces are set to be maintained.\nOnce gRPC is officially released, it is planned for gRPC to become the default usage in PyEDB, with .NET being set up as an legacy.\n< 2022 R2\n2024 R1\n> 2024 R1\nOnly Python.NET\nRun PyEDB with gRPC\ngRPC compatibility:\nPython.NET\nPython.NET"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.grpc",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.grpc.html#grpc",
        "title": "grpc",
        "section": "grpc",
        "text": "grpc flag.\ngrpc"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.grpc",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.grpc.html#pyedb.dotnet.edb.Edb.grpc",
        "title": "grpc > grpc > grpc",
        "section": "grpc > grpc",
        "text": "property Edb.grpc\n\ngrpc flag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_full_report_path",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_full_report_path.html#dc_full_report_path",
        "title": "dc_full_report_path",
        "section": "dc_full_report_path",
        "text": "Retrieve the path for the report.\ndc_full_report_path\npython:str\nFile"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_full_report_path",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_full_report_path.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_full_report_path",
        "title": "dc_full_report_path > dc_full_report_path > dc_full_report_path",
        "section": "dc_full_report_path > dc_full_report_path",
        "text": "property SimulationConfigurationDc.dc_full_report_path\n\nRetrieve the path for the report.\n\nReturns\n\npython:str\n\n\n\nFile path.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_positive_vertical_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_positive_vertical_extent.html#airbox_positive_vertical_extent",
        "title": "airbox_positive_vertical_extent",
        "section": "airbox_positive_vertical_extent",
        "text": "Positive vertical extent of the airbox for HFSS. When absolute dimensions are\nused, the values are in meters.\nairbox_positive_vertical_extent\npython:float\nValue\nof\nthe\nair\nbox\npositive\nvertical"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_positive_vertical_extent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_positive_vertical_extent.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.airbox_positive_vertical_extent",
        "title": "airbox_positive_vertical_extent > airbox_positive_vertical_extent > airbox_positive_vertical_extent",
        "section": "airbox_positive_vertical_extent > airbox_positive_vertical_extent",
        "text": "property SimulationConfigurationBatch.airbox_positive_vertical_extent\n\nPositive vertical extent of the airbox for HFSS. When absolute dimensions are\nused, the values are in meters.\n\nReturns\n\npython:float\n\n\n\nValue of the air box positive vertical extent.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_to_ipc2581",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_to_ipc2581.html#export_to_ipc2581",
        "title": "export_to_ipc2581",
        "section": "export_to_ipc2581",
        "text": "Create an XML IPC2581 file from the active EDB.\nThe method works only in CPython because of some limitations on Ironpython in XML parsing and\nbecause it’s time-consuming.\nThis method is still being tested and may need further debugging.\nAny feedback is welcome. Back drills and custom pads are not supported yet.\nPath to the XML IPC2581 file. The default is None, in which case\nan attempt is made to find the XML IPC2581 file in the same directory\nas the active EDB. To succeed, the XML IPC2581 file and the active\nEDT must have the same name. Only the extension differs.\nUnits of the XML IPC2581 file. Options are \"millimeter\",\n\"inch\", and \"micron\". The default is \"millimeter\".\nexport_to_ipc2581\npython:str\noptional\nNone\npython:str\noptional\n\"millimeter\"\n\"inch\"\n\"micron\"\n\"millimeter\""
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_to_ipc2581",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_to_ipc2581.html#pyedb.dotnet.edb.Edb.export_to_ipc2581",
        "title": "export_to_ipc2581 > export_to_ipc2581 > export_to_ipc2581",
        "section": "export_to_ipc2581 > export_to_ipc2581",
        "text": "Edb.export_to_ipc2581(ipc_path=None, units='MILLIMETER')\n\nCreate an XML IPC2581 file from the active EDB.\n\nThe method works only in CPython because of some limitations on Ironpython in XML parsing and\nbecause it’s time-consuming.\nThis method is still being tested and may need further debugging.\nAny feedback is welcome. Back drills and custom pads are not supported yet.\n\nParameters\n\nipc_path\n\npython:str, optional\n\nPath to the XML IPC2581 file. The default is None, in which case\nan attempt is made to find the XML IPC2581 file in the same directory\nas the active EDB. To succeed, the XML IPC2581 file and the active\nEDT must have the same name. Only the extension differs.\n\nunits\n\npython:str, optional\n\nUnits of the XML IPC2581 file. Options are \"millimeter\",\n\"inch\", and \"micron\". The default is \"millimeter\".\n\nReturns\n\n``True`` if successful, ``False`` if failed\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_icepak_temp_file",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_icepak_temp_file.html#dc_icepak_temp_file",
        "title": "dc_icepak_temp_file",
        "section": "dc_icepak_temp_file",
        "text": "Retrieve the icepak temp file path.\ndc_icepak_temp_file\npython:str\nFile"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_icepak_temp_file",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_icepak_temp_file.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_icepak_temp_file",
        "title": "dc_icepak_temp_file > dc_icepak_temp_file > dc_icepak_temp_file",
        "section": "dc_icepak_temp_file > dc_icepak_temp_file",
        "text": "property SimulationConfigurationDc.dc_icepak_temp_file\n\nRetrieve the icepak temp file path.\n\nReturns\n\npython:str\n\n\n\nFile path.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.export_properties.html#pyedb.configuration.cfg_ports_sources.CfgPorts.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgPorts.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/simulation_setup/add_siwave_analysis",
        "href": "user_guide/simulation_setup/add_siwave_analysis.html#set-up-a-siwave-analysis",
        "title": "Set up a SIwave analysis",
        "section": "Set up a SIwave analysis",
        "text": "This page shows how to create and set up a SIwave SYZ analysis.\nSet up a SIwave analysis"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Adding this property for compatibility with grpc.\nis_null"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.is_null",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.is_null.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property HFSSPISimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.run_icepak_simulation",
        "href": "api/_autosummary/pyedb.siwave.Siwave.run_icepak_simulation.html#run_icepak_simulation",
        "title": "run_icepak_simulation",
        "section": "run_icepak_simulation",
        "text": "Runs an Icepak simulation.\nName of the Icepak simulation.\nName of the DC simulation.\nTrue when successful, False when failed.\nrun_icepak_simulation\npython:str\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.run_icepak_simulation",
        "href": "api/_autosummary/pyedb.siwave.Siwave.run_icepak_simulation.html#pyedb.siwave.Siwave.run_icepak_simulation",
        "title": "run_icepak_simulation > run_icepak_simulation > run_icepak_simulation",
        "section": "run_icepak_simulation > run_icepak_simulation",
        "text": "Siwave.run_icepak_simulation(icepak_simulation_name, dc_simulation_name)\n\nRuns an Icepak simulation.\n\nParameters\n\nicepak_simulation_name\n\npython:str\n\nName of the Icepak simulation.\n\ndc_simulation_name\n\npython:str\n\nName of the DC simulation.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_dc_and_causality",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_dc_and_causality.html#enforce_dc_and_causality",
        "title": "enforce_dc_and_causality",
        "section": "enforce_dc_and_causality",
        "text": "Flag indicating if DC point and causality are enforced.\nTrue if enforce dc point and causality is used, False otherwise.\nenforce_dc_and_causality\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_dc_and_causality",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_dc_and_causality.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_dc_and_causality",
        "title": "enforce_dc_and_causality > enforce_dc_and_causality > enforce_dc_and_causality",
        "section": "enforce_dc_and_causality > enforce_dc_and_causality",
        "text": "property SweepData.enforce_dc_and_causality\n\nFlag indicating if DC point and causality are enforced.\n\nReturns\n\nbool\n\nTrue if enforce dc point and causality is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.auto_s_mat_only_solve",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.auto_s_mat_only_solve.html#auto_s_mat_only_solve",
        "title": "auto_s_mat_only_solve",
        "section": "auto_s_mat_only_solve",
        "text": "Flag indicating if Auto SMatrix only solve is turned on.\nauto_s_mat_only_solve"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.auto_s_mat_only_solve",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.auto_s_mat_only_solve.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.auto_s_mat_only_solve",
        "title": "auto_s_mat_only_solve > auto_s_mat_only_solve > auto_s_mat_only_solve",
        "section": "auto_s_mat_only_solve > auto_s_mat_only_solve",
        "text": "property SweepData.auto_s_mat_only_solve\n\nFlag indicating if Auto SMatrix only solve is turned on.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.center",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.center.html#center",
        "title": "center",
        "section": "center",
        "text": "Arc center.\ncenter\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.center",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.center.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.center",
        "title": "center > center > center",
        "section": "center > center",
        "text": "property EDBArcs.center\n\nArc center.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.properties",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.properties.html#properties",
        "title": "properties",
        "section": "properties",
        "text": "properties"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.properties",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.properties.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.properties",
        "title": "properties > properties > properties",
        "section": "properties > properties",
        "text": "property LayerEdbClass.properties\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.add_sweep_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.add_sweep_data.html#add_sweep_data",
        "title": "add_sweep_data",
        "section": "add_sweep_data",
        "text": "add_sweep_data"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.add_sweep_data",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.add_sweep_data.html#pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.add_sweep_data",
        "title": "add_sweep_data > add_sweep_data > add_sweep_data",
        "section": "add_sweep_data > add_sweep_data",
        "text": "SimSetupInfo.add_sweep_data(sweep_data)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_num_passes",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_num_passes.html#min_num_passes",
        "title": "min_num_passes",
        "section": "min_num_passes",
        "text": "Retrieve the minimum number of adaptive passes for HFSS convergence.\nmin_num_passes\npython:int\nThe\nvalue\nof\nminimum\nnumber\nof\nadaptive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_num_passes",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_num_passes.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.min_num_passes",
        "title": "min_num_passes > min_num_passes > min_num_passes",
        "section": "min_num_passes > min_num_passes",
        "text": "property SimulationConfigurationAc.min_num_passes\n\nRetrieve the minimum number of adaptive passes for HFSS convergence.\n\nReturns\n\npython:int\n\n\n\nThe value of minimum number of adaptive passes.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_value",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_value.html#edb_value",
        "title": "edb_value",
        "section": "edb_value",
        "text": "Convert a value to an EDB value. Value can be a string, float or integer. Mainly used in internal calls.\nedb_value\npython:str\npython:float\npython:int\nInstance\nof"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_value",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.edb_value.html#pyedb.dotnet.edb.Edb.edb_value",
        "title": "edb_value > edb_value > edb_value",
        "section": "edb_value > edb_value",
        "text": "Edb.edb_value(val)\n\nConvert a value to an EDB value. Value can be a string, float or integer. Mainly used in internal calls.\n\nParameters\n\nval\n\npython:str, python:float, python:int\n\n\n\nReturns\n\nInstance of Edb.Utility.Value\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_plane_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_plane_area_to_mesh.html#dc_min_plane_area_to_mesh",
        "title": "dc_min_plane_area_to_mesh",
        "section": "dc_min_plane_area_to_mesh",
        "text": "Minimum area below which geometry is ignored.\ndc_min_plane_area_to_mesh\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_plane_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_plane_area_to_mesh.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_plane_area_to_mesh",
        "title": "dc_min_plane_area_to_mesh > dc_min_plane_area_to_mesh > dc_min_plane_area_to_mesh",
        "section": "dc_min_plane_area_to_mesh > dc_min_plane_area_to_mesh",
        "text": "property DCAdvancedSettings.dc_min_plane_area_to_mesh\n\nMinimum area below which geometry is ignored.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.in_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.in_polygon.html#in_polygon",
        "title": "in_polygon",
        "section": "in_polygon",
        "text": "Check if padstack Instance is in given polygon data.\nWhether to include partial intersecting instances. The default is True.\nTrue when successful, False when failed.\nin_polygon\nPointData\nObject\npython:list\nof\npython:float\noptional\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.in_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.in_polygon.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.in_polygon",
        "title": "in_polygon > in_polygon > in_polygon",
        "section": "in_polygon > in_polygon",
        "text": "EdbPolygon.in_polygon(point_data, include_partial=True)\n\nCheck if padstack Instance is in given polygon data.\n\nParameters\n\npoint_data\n\nPointData Object or python:list of python:float\n\n\n\ninclude_partial\n\nbool, optional\n\nWhether to include partial intersecting instances. The default is True.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_net_name.html#reference_net_name",
        "title": "reference_net_name",
        "section": "reference_net_name",
        "text": "Net name to which reference_object belongs.\nreference_net_name"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_net_name.html#pyedb.dotnet.database.edb_data.ports.WavePort.reference_net_name",
        "title": "reference_net_name > reference_net_name > reference_net_name",
        "section": "reference_net_name > reference_net_name",
        "text": "property WavePort.reference_net_name\n\nNet name to which reference_object belongs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.refresh_layer_collection",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.refresh_layer_collection.html#refresh_layer_collection",
        "title": "refresh_layer_collection",
        "section": "refresh_layer_collection",
        "text": "Refresh layer collection from Edb. This method is run on demand after all edit operations on stackup.\nrefresh_layer_collection"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.refresh_layer_collection",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.refresh_layer_collection.html#pyedb.dotnet.database.stackup.Stackup.refresh_layer_collection",
        "title": "refresh_layer_collection > refresh_layer_collection > refresh_layer_collection",
        "section": "refresh_layer_collection > refresh_layer_collection",
        "text": "Stackup.refresh_layer_collection()\n\nRefresh layer collection from Edb. This method is run on demand after all edit operations on stackup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveEMI",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveEMI.html#ksiwaveemi",
        "title": "kSIwaveEMI",
        "section": "kSIwaveEMI",
        "text": "kSIwaveEMI"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveEMI",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveEMI.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveEMI",
        "title": "kSIwaveEMI > kSIwaveEMI > kSIwaveEMI",
        "section": "kSIwaveEMI > kSIwaveEMI",
        "text": "SimulationSetupType.kSIwaveEMI = 'siwave_emi'\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/sim_setup_info",
        "href": "api/sim_setup_data/data/sim_setup_info.html#simulation-setup-info",
        "title": "Simulation setup info",
        "section": "Simulation setup info",
        "text": "This class is the container of simulation setup info.\nSimSetupInfo\n\nSimulation setup info\nSimSetupInfo"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.vertical_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.vertical_extent_factor.html#vertical_extent_factor",
        "title": "vertical_extent_factor",
        "section": "vertical_extent_factor",
        "text": "Vertical extent factor.\nvertical_extent_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.vertical_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.vertical_extent_factor.html#pyedb.dotnet.database.edb_data.ports.WavePort.vertical_extent_factor",
        "title": "vertical_extent_factor > vertical_extent_factor > vertical_extent_factor",
        "section": "vertical_extent_factor > vertical_extent_factor",
        "text": "property WavePort.vertical_extent_factor\n\nVertical extent factor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_circle",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_circle.html#create_circle",
        "title": "create_circle",
        "section": "create_circle",
        "text": "Create a circle on a specified layer.\nName of the layer.\nPosition on the X axis.\nPosition on the Y axis.\nRadius of the circle.\nName of the net. The default is None, in which case the\ndefault name is assigned.\nObjects of the circle created when successful.\ncreate_circle\npython:str\npython:float\npython:float\npython:float\npython:str\noptional\nNone\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_circle",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.create_circle.html#pyedb.dotnet.database.modeler.Modeler.create_circle",
        "title": "create_circle > create_circle > create_circle",
        "section": "create_circle > create_circle",
        "text": "Modeler.create_circle(layer_name, x, y, radius, net_name='')\n\nCreate a circle on a specified layer.\n\nParameters\n\nlayer_name\n\npython:str\n\nName of the layer.\n\nx\n\npython:float\n\nPosition on the X axis.\n\ny\n\npython:float\n\nPosition on the Y axis.\n\nradius\n\npython:float\n\nRadius of the circle.\n\nnet_name\n\npython:str, optional\n\nName of the net. The default is None, in which case the\ndefault name is assigned.\n\nReturns\n\npyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nObjects of the circle created when successful.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_configurations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_configurations.html#get_configurations",
        "title": "get_configurations",
        "section": "get_configurations",
        "text": "Get SIwave DC simulation settings.\nDictionary of SIwave DC simulation settings.\nget_configurations\npython:dict"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_configurations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_configurations.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_configurations",
        "title": "get_configurations > get_configurations > get_configurations",
        "section": "get_configurations > get_configurations",
        "text": "SiwaveDCSimulationSetup.get_configurations()\n\nGet SIwave DC simulation settings.\n\nReturns\n\npython:dict\n\nDictionary of SIwave DC simulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.delete",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete one or more nets from EDB.\nOne or more nets to delete.\nList of nets that were deleted.\ndelete\npython:str\npython:list\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.delete",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.delete.html#pyedb.dotnet.database.nets.EdbNets.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "EdbNets.delete(netlist)\n\nDelete one or more nets from EDB.\n\nParameters\n\nnetlist\n\npython:str or python:list\n\nOne or more nets to delete.\n\nReturns\n\npython:list\n\nList of nets that were deleted.\n\nExamples\n\n>>> deleted_nets = database.nets.delete([\"Net1\",\"Net2\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQ3D",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQ3D.html#kq3d",
        "title": "kQ3D",
        "section": "kQ3D",
        "text": "kQ3D"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQ3D",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQ3D.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kQ3D",
        "title": "kQ3D > kQ3D > kQ3D",
        "section": "kQ3D > kQ3D",
        "text": "SimulationSetupType.kQ3D = 'q3d'\n\n"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.perform_adaptive_refinement",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.perform_adaptive_refinement.html#perform_adaptive_refinement",
        "title": "perform_adaptive_refinement",
        "section": "perform_adaptive_refinement",
        "text": "Whether to perform adaptive mesh refinement.\nTrue if adaptive refinement is used, False otherwise.\nperform_adaptive_refinement\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.perform_adaptive_refinement",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.perform_adaptive_refinement.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.perform_adaptive_refinement",
        "title": "perform_adaptive_refinement > perform_adaptive_refinement > perform_adaptive_refinement",
        "section": "perform_adaptive_refinement > perform_adaptive_refinement",
        "text": "property DCAdvancedSettings.perform_adaptive_refinement\n\nWhether to perform adaptive mesh refinement.\n\nReturns\n\nbool\n\nTrue if adaptive refinement is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement.html#signal_nets_include_improved_dielectric_fill_refinement",
        "title": "signal_nets_include_improved_dielectric_fill_refinement",
        "section": "signal_nets_include_improved_dielectric_fill_refinement",
        "text": "signal_nets_include_improved_dielectric_fill_refinement"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement",
        "title": "signal_nets_include_improved_dielectric_fill_refinement > signal_nets_include_improved_dielectric_fill_refinement > signal_nets_include_improved_dielectric_fill_refinement",
        "section": "signal_nets_include_improved_dielectric_fill_refinement > signal_nets_include_improved_dielectric_fill_refinement",
        "text": "property HFSSPISimulationSettings.signal_nets_include_improved_dielectric_fill_refinement\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.dc_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.dc_settings.html#dc_settings",
        "title": "dc_settings",
        "section": "dc_settings",
        "text": "DC Settings class.\ndc_settings\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.dc_settings",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.dc_settings.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfiguration.dc_settings",
        "title": "dc_settings > dc_settings > dc_settings",
        "section": "dc_settings > dc_settings",
        "text": "property SimulationConfiguration.dc_settings: SimulationConfigurationDc\n\nDC Settings class.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.ignore_non_functional_pads",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.ignore_non_functional_pads.html#ignore_non_functional_pads",
        "title": "ignore_non_functional_pads",
        "section": "ignore_non_functional_pads",
        "text": "Boolean to ignore nonfunctional pads with Siwave.\nignore_non_functional_pads\nflot\nValue\nof\nthe\narc\nto\nchord"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.ignore_non_functional_pads",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.ignore_non_functional_pads.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.ignore_non_functional_pads",
        "title": "ignore_non_functional_pads > ignore_non_functional_pads > ignore_non_functional_pads",
        "section": "ignore_non_functional_pads > ignore_non_functional_pads",
        "text": "property SimulationConfigurationAc.ignore_non_functional_pads\n\nBoolean to ignore nonfunctional pads with Siwave.\n\nReturns\n\nflot\n\n\n\nValue of the arc to chord error.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable_value",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable_value.html#get_variable_value",
        "title": "get_variable_value",
        "section": "get_variable_value",
        "text": "Added to get closer architecture as for grpc.\nget_variable_value"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable_value",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable_value.html#pyedb.dotnet.edb.Edb.get_variable_value",
        "title": "get_variable_value > get_variable_value > get_variable_value",
        "section": "get_variable_value > get_variable_value",
        "text": "Edb.get_variable_value(variable_name)\n\nAdded to get closer architecture as for grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_use_pin_format",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_use_pin_format.html#dc_per_pin_use_pin_format",
        "title": "dc_per_pin_use_pin_format",
        "section": "dc_per_pin_use_pin_format",
        "text": "Retrieve the value for using pin format.\ndc_per_pin_use_pin_format"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_use_pin_format",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_use_pin_format.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_per_pin_use_pin_format",
        "title": "dc_per_pin_use_pin_format > dc_per_pin_use_pin_format > dc_per_pin_use_pin_format",
        "section": "dc_per_pin_use_pin_format > dc_per_pin_use_pin_format",
        "text": "property SimulationConfigurationDc.dc_per_pin_use_pin_format\n\nRetrieve the value for using pin format.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_ports_number",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_ports_number.html#get_ports_number",
        "title": "get_ports_number",
        "section": "get_ports_number",
        "text": "Return the total number of excitation ports in a layout.\nNumber of ports.\nget_ports_number\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_ports_number",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.get_ports_number.html#pyedb.dotnet.database.hfss.EdbHfss.get_ports_number",
        "title": "get_ports_number > get_ports_number > get_ports_number",
        "section": "get_ports_number > get_ports_number",
        "text": "EdbHfss.get_ports_number()\n\nReturn the total number of excitation ports in a layout.\n\nParameters\n\nNone\n\n\n\nReturns\n\npython:int\n\nNumber of ports.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coax_solder_ball_diameter",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coax_solder_ball_diameter.html#coax_solder_ball_diameter",
        "title": "coax_solder_ball_diameter",
        "section": "coax_solder_ball_diameter",
        "text": "Retrieve the list of solder balls diameter values when the auto evaluated one is overwritten.\nList of the solder balls diameter.\ncoax_solder_ball_diameter\npython:list\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coax_solder_ball_diameter",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coax_solder_ball_diameter.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.coax_solder_ball_diameter",
        "title": "coax_solder_ball_diameter > coax_solder_ball_diameter > coax_solder_ball_diameter",
        "section": "coax_solder_ball_diameter > coax_solder_ball_diameter",
        "text": "property SimulationConfigurationBatch.coax_solder_ball_diameter\n\nRetrieve the list of solder balls diameter values when the auto evaluated one is overwritten.\n\nReturns\n\npython:list[python:float]\n\nList of the solder balls diameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.iterate_materials_in_amat",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.iterate_materials_in_amat.html#iterate_materials_in_amat",
        "title": "iterate_materials_in_amat",
        "section": "iterate_materials_in_amat",
        "text": "Iterate over material description in an AMAT file.\nFull path to the AMAT file to read.\niterate_materials_in_amat\npython:str\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.iterate_materials_in_amat",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.iterate_materials_in_amat.html#pyedb.dotnet.database.materials.Materials.iterate_materials_in_amat",
        "title": "iterate_materials_in_amat > iterate_materials_in_amat > iterate_materials_in_amat",
        "section": "iterate_materials_in_amat > iterate_materials_in_amat",
        "text": "Materials.iterate_materials_in_amat(amat_file=None)\n\nIterate over material description in an AMAT file.\n\nParameters\n\namat_file\n\npython:str\n\nFull path to the AMAT file to read.\n\nYields\n\npython:dict\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.hfss_extent_info",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.hfss_extent_info.html#hfss_extent_info",
        "title": "hfss_extent_info",
        "section": "hfss_extent_info",
        "text": "HFSS extent information.\nhfss_extent_info"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.hfss_extent_info",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.hfss_extent_info.html#pyedb.dotnet.database.hfss.EdbHfss.hfss_extent_info",
        "title": "hfss_extent_info > hfss_extent_info > hfss_extent_info",
        "section": "hfss_extent_info > hfss_extent_info",
        "text": "property EdbHfss.hfss_extent_info\n\nHFSS extent information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.restrict_max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.restrict_max_elements.html#restrict_max_elements",
        "title": "restrict_max_elements",
        "section": "restrict_max_elements",
        "text": "Whether to restrict maximum number  of elements.\nrestrict_max_elements"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.restrict_max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.restrict_max_elements.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.restrict_max_elements",
        "title": "restrict_max_elements > restrict_max_elements > restrict_max_elements",
        "section": "restrict_max_elements > restrict_max_elements",
        "text": "property SkinDepthMeshOperation.restrict_max_elements\n\nWhether to restrict maximum number  of elements.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.freq_sweep_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.freq_sweep_type.html#freq_sweep_type",
        "title": "freq_sweep_type",
        "section": "freq_sweep_type",
        "text": "Sweep type.\nOptions are:\n- \"kInterpolatingSweep\"\n- \"kDiscreteSweep\"\n- \"kBroadbandFastSweep\"\nSweep type.\nfreq_sweep_type\n\"kInterpolatingSweep\"\n\"kDiscreteSweep\"\n\"kBroadbandFastSweep\"\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.freq_sweep_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.freq_sweep_type.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.freq_sweep_type",
        "title": "freq_sweep_type > freq_sweep_type > freq_sweep_type",
        "section": "freq_sweep_type > freq_sweep_type",
        "text": "property SweepData.freq_sweep_type\n\nSweep type.\n\nOptions are:\n- \"kInterpolatingSweep\"\n- \"kDiscreteSweep\"\n- \"kBroadbandFastSweep\"\n\nReturns\n\npython:str\n\nSweep type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kDDRwizard",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kDDRwizard.html#kddrwizard",
        "title": "kDDRwizard",
        "section": "kDDRwizard",
        "text": "kDDRwizard"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kDDRwizard",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kDDRwizard.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kDDRwizard",
        "title": "kDDRwizard > kDDRwizard > kDDRwizard",
        "section": "kDDRwizard > kDDRwizard",
        "text": "SimulationSetupType.kDDRwizard = 'ddrwizard'\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer.html#add_layer",
        "title": "add_layer",
        "section": "add_layer",
        "text": "Insert a layer into stackup.\nName of the layer.\nName of the base layer.\nWhere to insert the new layer. The default is \"add_on_top\". Options are \"add_on_top\",\n\"add_on_bottom\", \"insert_above\", \"insert_below\", \"add_at_elevation\",.\n\"air_lines\", \"error\", \"symbol\", \"measure\", \"assembly\", \"silkscreen\",\n\"solder_mask\", \"solder_paste\", \"glue\", \"wirebond\", \"hfss_region\", \"user\".\nMaterial of the layer.\nFill material of the layer.\nThickness of the layer.\nEtch factor of the layer.\nWhether the layer is negative.\nWhether roughness is enabled.\nElevation of new layer. Only valid for Overlapping Stackup.\nadd_layer\npython:str\npython:str\noptional\npython:str\noptional\n\"add_on_top\"\n\"add_on_top\"\n\"add_on_bottom\"\n\"insert_above\"\n\"insert_below\"\n\"add_at_elevation\"\npython:str\noptional\n\"signal\"\n\"signal\"\n\"dielectric\"\n\"conducting\"\n\"air_lines\"\n\"error\"\n\"symbol\"\n\"measure\"\n\"assembly\"\n\"silkscreen\"\n\"solder_mask\"\n\"solder_paste\"\n\"glue\"\n\"wirebond\"\n\"hfss_region\"\n\"user\"\npython:str\noptional\npython:str\noptional\npython:str\npython:float\noptional\npython:int\npython:float\noptional\noptional\noptional\npython:float\noptional\npyedb.dotnet.database.edb_data.layer_data.LayerEdbClass"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.add_layer.html#pyedb.dotnet.database.stackup.Stackup.add_layer",
        "title": "add_layer > add_layer > add_layer",
        "section": "add_layer > add_layer",
        "text": "Stackup.add_layer(layer_name, base_layer=None, method='add_on_top', layer_type='signal', material='copper', fillMaterial='FR4_epoxy', thickness='35um', etch_factor=None, is_negative=False, enable_roughness=False, elevation=None)\n\nInsert a layer into stackup.\n\nParameters\n\nlayer_name\n\npython:str\n\nName of the layer.\n\nbase_layer\n\npython:str, optional\n\nName of the base layer.\n\nmethod\n\npython:str, optional\n\nWhere to insert the new layer. The default is \"add_on_top\". Options are \"add_on_top\",\n\"add_on_bottom\", \"insert_above\", \"insert_below\", \"add_at_elevation\",.\n\nlayer_type\n\npython:str, optional\n\nType of layer. The default is \"signal\". Options are \"signal\", \"dielectric\", \"conducting\",\n\n\"air_lines\", \"error\", \"symbol\", \"measure\", \"assembly\", \"silkscreen\",\n\"solder_mask\", \"solder_paste\", \"glue\", \"wirebond\", \"hfss_region\", \"user\".\n\nmaterial\n\npython:str, optional\n\nMaterial of the layer.\n\nfillMaterial\n\npython:str, optional\n\nFill material of the layer.\n\nthickness\n\npython:str, python:float, optional\n\nThickness of the layer.\n\netch_factor\n\npython:int, python:float, optional\n\nEtch factor of the layer.\n\nis_negative\n\nbool, optional\n\nWhether the layer is negative.\n\nenable_roughness\n\nbool, optional\n\nWhether roughness is enabled.\n\nelevation\n\npython:float, optional\n\nElevation of new layer. Only valid for Overlapping Stackup.\n\nReturns\n\npyedb.dotnet.database.edb_data.layer_data.LayerEdbClass\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.type.html#type",
        "title": "type",
        "section": "type",
        "text": "Retrieve type of the layer.\ntype"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.type.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property LayerEdbClass.type\n\nRetrieve type of the layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.voltage_regulator_modules",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.voltage_regulator_modules.html#voltage_regulator_modules",
        "title": "voltage_regulator_modules",
        "section": "voltage_regulator_modules",
        "text": "Get all voltage regulator modules\nvoltage_regulator_modules"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.voltage_regulator_modules",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.voltage_regulator_modules.html#pyedb.dotnet.edb.Edb.voltage_regulator_modules",
        "title": "voltage_regulator_modules > voltage_regulator_modules > voltage_regulator_modules",
        "section": "voltage_regulator_modules > voltage_regulator_modules",
        "text": "property Edb.voltage_regulator_modules\n\nGet all voltage regulator modules\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_prop_const",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_prop_const.html#interpolation_use_prop_const",
        "title": "interpolation_use_prop_const",
        "section": "interpolation_use_prop_const",
        "text": "Flag indicating if propagation constants are used.\nTrue if propagation constants are used, False otherwise.\ninterpolation_use_prop_const\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_prop_const",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_prop_const.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_prop_const",
        "title": "interpolation_use_prop_const > interpolation_use_prop_const > interpolation_use_prop_const",
        "section": "interpolation_use_prop_const > interpolation_use_prop_const",
        "text": "property SweepData.interpolation_use_prop_const\n\nFlag indicating if propagation constants are used.\n\nReturns\n\nbool\n\nTrue if propagation constants are used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys repository appears in\nContribute\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide, paying particular attention to Guidelines and Best Practices, before attempting\nto contribute to PyEDB.\nThe following contribution information is specific to PyEDB.\nContribute"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest version of PyEDB in\ndevelopment mode, run:\nClone the repository"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyEDB Issues\npage to submit questions, report bugs, and request new features.\nTo reach the product support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#view-pyedb-documentation",
        "title": "Contribute > View PyEDB documentation",
        "section": "View PyEDB documentation",
        "text": "Documentation for the latest stable release of PyEDB is hosted at\nPyEDB Documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView PyEDB documentation"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyEDB is compliant with PyAnsys code style. It uses the tool\npre-commit to check the code style. You can install\nand activate this tool with:\nYou can also install this as a pre-commit hook with:\nThis way, it’s not possible for you to push code that fails the style checks.\nFor example:\nAdhere to code style"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#log-errors",
        "title": "Contribute > Log errors",
        "section": "Log errors",
        "text": "PyEDB has an internal logging tool named Messenger\nand a log file that is automatically generated in the project\nfolder.\nThe following examples demonstrate how Messenger is used to\nwrite both to the internal AEDT message windows and the log file:\nThese examples demonstrate how to write messages only to the log file:\nLog errors\nMessenger\nMessenger"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#hard-coded-values",
        "title": "Contribute > Hard-coded values",
        "section": "Hard-coded values",
        "text": "Do not write hard-coded values to the registry. Instead, use the Configuration service.\nHard-coded values"
    },
    {
        "objectID": "getting_started/contributing",
        "href": "getting_started/contributing.html#maximum-line-length",
        "title": "Contribute > Maximum line length",
        "section": "Maximum line length",
        "text": "Best practice is to keep the length at or below 120 characters for code,\nand comments. Lines longer than this might not display properly on some terminals\nand tools or might be difficult to follow.\nMaximum line length"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.pyaedt_dir",
        "href": "api/_autosummary/pyedb.siwave.Siwave.pyaedt_dir.html#pyaedt_dir",
        "title": "pyaedt_dir",
        "section": "pyaedt_dir",
        "text": "PyAEDT directory.\nFull absolute path to the pyaedt directory.\npyaedt_dir\npython:str\npyaedt"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.pyaedt_dir",
        "href": "api/_autosummary/pyedb.siwave.Siwave.pyaedt_dir.html#pyedb.siwave.Siwave.pyaedt_dir",
        "title": "pyaedt_dir > pyaedt_dir > pyaedt_dir",
        "section": "pyaedt_dir > pyaedt_dir",
        "text": "property Siwave.pyaedt_dir\n\nPyAEDT directory.\n\nReturns\n\npython:str\n\nFull absolute path to the pyaedt directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_voids.html#has_voids",
        "title": "has_voids",
        "section": "has_voids",
        "text": "bool: If a primitive has voids inside.\nRead-Only.\nhas_voids\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_voids",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_voids.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.has_voids",
        "title": "has_voids > has_voids > has_voids",
        "section": "has_voids > has_voids",
        "text": "property EdbPolygon.has_voids\n\nbool: If a primitive has voids inside.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_percent_local_refinement",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_percent_local_refinement.html#dc_percent_local_refinement",
        "title": "dc_percent_local_refinement",
        "section": "dc_percent_local_refinement",
        "text": "Retrieve the value for local mesh refinement.\nThe refinement value, 0.2 (20%) as default.\ndc_percent_local_refinement\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_percent_local_refinement",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_percent_local_refinement.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_percent_local_refinement",
        "title": "dc_percent_local_refinement > dc_percent_local_refinement > dc_percent_local_refinement",
        "section": "dc_percent_local_refinement > dc_percent_local_refinement",
        "text": "property SimulationConfigurationDc.dc_percent_local_refinement\n\nRetrieve the value for local mesh refinement.\n\nReturns\n\npython:float\n\nThe refinement value, 0.2 (20%) as default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kVEye",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kVEye.html#kveye",
        "title": "kVEye",
        "section": "kVEye",
        "text": "kVEye"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kVEye",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kVEye.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kVEye",
        "title": "kVEye > kVEye > kVEye",
        "section": "kVEye > kVEye",
        "text": "SimulationSetupType.kVEye = 'verif_eye'\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.cell_per_wave_length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.cell_per_wave_length.html#cell_per_wave_length",
        "title": "cell_per_wave_length",
        "section": "cell_per_wave_length",
        "text": "This setting describes the number of cells that fit under each wavelength. The wavelength is\ncalculated according to the Max Frequency or the Mesh Frequency, unless specified by user through\nthis setting. E.g. Setting Cells/Wavelength to 20 means that an object will be divided into 10 cells\nif its width or length is 1/2 wavelengths.\nUnits: unitless.\ncell_per_wave_length"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.cell_per_wave_length",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.cell_per_wave_length.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.cell_per_wave_length",
        "title": "cell_per_wave_length > cell_per_wave_length > cell_per_wave_length",
        "section": "cell_per_wave_length > cell_per_wave_length",
        "text": "property RaptorXSimulationAdvancedSettings.cell_per_wave_length\n\nThis setting describes the number of cells that fit under each wavelength. The wavelength is\ncalculated according to the Max Frequency or the Mesh Frequency, unless specified by user through\nthis setting. E.g. Setting Cells/Wavelength to 20 means that an object will be divided into 10 cells\nif its width or length is 1/2 wavelengths.\nUnits: unitless.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.protected_attributes.html#pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgTerminalInfo.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_reference_terminal.html#is_reference_terminal",
        "title": "is_reference_terminal",
        "section": "is_reference_terminal",
        "text": "Whether it is a reference terminal.\nis_reference_terminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_reference_terminal.html#pyedb.dotnet.database.edb_data.ports.WavePort.is_reference_terminal",
        "title": "is_reference_terminal > is_reference_terminal > is_reference_terminal",
        "section": "is_reference_terminal > is_reference_terminal",
        "text": "property WavePort.is_reference_terminal\n\nWhether it is a reference terminal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_component.html#create_port_on_component",
        "title": "create_port_on_component",
        "section": "create_port_on_component",
        "text": "Create ports on a component.\nEDB component or str component name.\nList of nets where ports must be created on the component.\nIf the net is not part of the component, this parameter is skipped.\nType of port to create. CoaxPort generates solder balls.\nCircuitPort generates circuit ports on pins belonging to the net list.\nTrue activate pingroup during port creation (only used with combination of CircPort),\nFalse will take the closest reference pin and generate one port per signal pin.\nlist of the reference net.\nPort name for overwriting the default port-naming convention,\nwhich is [component][net][pin]. The port name must be unique.\nIf a port with the specified name already exists, the\ndefault naming convention is used so that port creation does\nnot fail.\nSolder balls height used for the component. When provided default value is overwritten and must be\nprovided in meter.\nSolder balls diameter. When provided auto evaluation based on padstack size will be disabled.\nSolder balls mid-diameter. When provided if value is different than solder balls size, spheroid shape will\nbe switched.\nWhen no reference pins are found on the component extend the pins search with taking the closest one. If\ndo_pingroup is True will be set to False. Default value is False.\nSalder ball height vale, False when failed.\ncreate_port_on_component\npython:str\nself._pedb.component\npython:str\npython:list\nof\nSourceType\nenumerator\nCoaxPort\nCircuitPort\nCoaxPort\nCircuitPort\npython:str\npython:list\nof\npython:str\n[component][net][pin]\npython:float\noptional\npython:float\noptional\npython:float\noptional\ndouble\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_port_on_component.html#pyedb.dotnet.database.components.Components.create_port_on_component",
        "title": "create_port_on_component > create_port_on_component > create_port_on_component",
        "section": "create_port_on_component > create_port_on_component",
        "text": "Components.create_port_on_component(component, net_list, port_type=0, do_pingroup=True, reference_net='gnd', port_name=None, solder_balls_height=None, solder_balls_size=None, solder_balls_mid_size=None, extend_reference_pins_outside_component=False)\n\nCreate ports on a component.\n\nParameters\n\ncomponent\n\npython:str or  self._pedb.component\n\nEDB component or str component name.\n\nnet_list\n\npython:str or python:list of string.\n\nList of nets where ports must be created on the component.\nIf the net is not part of the component, this parameter is skipped.\n\nport_type\n\nSourceType enumerator, CoaxPort or CircuitPort\n\nType of port to create. CoaxPort generates solder balls.\nCircuitPort generates circuit ports on pins belonging to the net list.\n\ndo_pingroup\n\nbool\n\nTrue activate pingroup during port creation (only used with combination of CircPort),\nFalse will take the closest reference pin and generate one port per signal pin.\n\nrefnet\n\npython:str or python:list of string.\n\nlist of the reference net.\n\nport_name\n\npython:str\n\nPort name for overwriting the default port-naming convention,\nwhich is [component][net][pin]. The port name must be unique.\nIf a port with the specified name already exists, the\ndefault naming convention is used so that port creation does\nnot fail.\n\nsolder_balls_height\n\npython:float, optional\n\nSolder balls height used for the component. When provided default value is overwritten and must be\nprovided in meter.\n\nsolder_balls_size\n\npython:float, optional\n\nSolder balls diameter. When provided auto evaluation based on padstack size will be disabled.\n\nsolder_balls_mid_size\n\npython:float, optional\n\nSolder balls mid-diameter. When provided if value is different than solder balls size, spheroid shape will\nbe switched.\n\nextend_reference_pins_outside_component\n\nbool\n\nWhen no reference pins are found on the component extend the pins search with taking the closest one. If\ndo_pingroup is True will be set to False. Default value is False.\n\nReturns\n\ndouble, bool\n\nSalder ball height vale, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> net_list = [\"M_DQ<1>\", \"M_DQ<2>\", \"M_DQ<3>\", \"M_DQ<4>\", \"M_DQ<5>\"]\n>>> edbapp.components.create_port_on_component(cmp=\"U2A5\", net_list=net_list,\n>>> port_type=SourceType.CoaxPort, do_pingroup=False, refnet=\"GND\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_bondwires",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_bondwires.html#dc_mesh_bondwires",
        "title": "dc_mesh_bondwires",
        "section": "dc_mesh_bondwires",
        "text": "Retrieve the value for meshing bondwires.\nTrue when activated, False deactivated.\ndc_mesh_bondwires\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_bondwires",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_bondwires.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_bondwires",
        "title": "dc_mesh_bondwires > dc_mesh_bondwires > dc_mesh_bondwires",
        "section": "dc_mesh_bondwires > dc_mesh_bondwires",
        "text": "property SimulationConfigurationDc.dc_mesh_bondwires\n\nRetrieve the value for meshing bondwires.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_model_for_arbitrary_wave_ports",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_model_for_arbitrary_wave_ports.html#create_model_for_arbitrary_wave_ports",
        "title": "create_model_for_arbitrary_wave_ports",
        "section": "create_model_for_arbitrary_wave_ports",
        "text": "Generate EDB design to be consumed by PyAEDT to generate arbitrary wave ports shapes.\nThis model has to be considered as merged onto another one. The current opened design must have voids\nsurrounding the pad-stacks where wave ports terminal will be created. THe open design won’t be edited, only\nprimitives like voids and pads-stack definition included in the voids are collected to generate a new design.\nTemporary directory used during the method execution.\nGives the orientation to be considered for the current design. 2 options are available \"top\" and\n\"bottom\". Default value is ``\"top\". If \"top\" is selected the method will voids at the top signal\nlayer, and the bottom layer if \"bottom\" is used.\nProvides the nets to be included for the model creation. Default value is None. If None is provided,\nall nets will be included.\nWhen None, the terminal diameter is evaluated at each pads-tack instance found inside the voids. The top\nor bottom layer pad diameter will be taken, depending on mounting_side selected. If value is provided,\nit will overwrite the evaluated diameter.\nThe output EDB absolute. If None the edb is created in the temp_directory as default name\n“waveport_model.aedb”`\nLaunching box thickness  used for wave ports. Default value is \"100um\".\nTrue when succeeded, False if failed.\ncreate_model_for_arbitrary_wave_ports\npython:str\npython:str\n\"top\"\n\"bottom\". Default value is ``\"top\"\n\"top\"\n\"bottom\"\nList\npython:str\noptional\nNone\npython:float\npython:str\noptional\nNone\nmounting_side\npython:str\noptional\nNone\ntemp_directory\npython:float\npython:str\noptional\n\"100um\"\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_model_for_arbitrary_wave_ports",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_model_for_arbitrary_wave_ports.html#pyedb.dotnet.edb.Edb.create_model_for_arbitrary_wave_ports",
        "title": "create_model_for_arbitrary_wave_ports > create_model_for_arbitrary_wave_ports > create_model_for_arbitrary_wave_ports",
        "section": "create_model_for_arbitrary_wave_ports > create_model_for_arbitrary_wave_ports",
        "text": "Edb.create_model_for_arbitrary_wave_ports(temp_directory, mounting_side='top', signal_nets=None, terminal_diameter=None, output_edb=None, launching_box_thickness='100um')\n\nGenerate EDB design to be consumed by PyAEDT to generate arbitrary wave ports shapes.\nThis model has to be considered as merged onto another one. The current opened design must have voids\nsurrounding the pad-stacks where wave ports terminal will be created. THe open design won’t be edited, only\nprimitives like voids and pads-stack definition included in the voids are collected to generate a new design.\n\nParameters\n\ntemp_directory\n\npython:str\n\nTemporary directory used during the method execution.\n\nmounting_side\n\npython:str\n\nGives the orientation to be considered for the current design. 2 options are available \"top\" and\n\"bottom\". Default value is ``\"top\". If \"top\" is selected the method will voids at the top signal\nlayer, and the bottom layer if \"bottom\" is used.\n\nsignal_nets\n\nList[python:str], optional\n\nProvides the nets to be included for the model creation. Default value is None. If None is provided,\nall nets will be included.\n\nterminal_diameter\n\npython:float, python:str, optional\n\nWhen None, the terminal diameter is evaluated at each pads-tack instance found inside the voids. The top\nor bottom layer pad diameter will be taken, depending on mounting_side selected. If value is provided,\nit will overwrite the evaluated diameter.\n\noutput_edb\n\npython:str, optional\n\nThe output EDB absolute. If None the edb is created in the temp_directory as default name\n“waveport_model.aedb”`\n\nlaunching_box_thickness\n\npython:float, python:str, optional\n\nLaunching box thickness  used for wave ports. Default value is \"100um\".\n\nReturns\n\nbool\n\nTrue when succeeded, False if failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the sweep.\nname"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.name",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.name.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property SweepData.name\n\nName of the sweep.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.arcs",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.arcs.html#arcs",
        "title": "arcs",
        "section": "arcs",
        "text": "Get the Primitive Arc Data.\narcs"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.arcs",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.arcs.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.arcs",
        "title": "arcs > arcs > arcs",
        "section": "arcs > arcs",
        "text": "property EdbPolygon.arcs\n\nGet the Primitive Arc Data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets.html#ignore_dummy_nets_for_selected_nets",
        "title": "ignore_dummy_nets_for_selected_nets",
        "section": "ignore_dummy_nets_for_selected_nets",
        "text": "Auto select Nets for simulation\nignore_dummy_nets_for_selected_nets"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets",
        "title": "ignore_dummy_nets_for_selected_nets > ignore_dummy_nets_for_selected_nets > ignore_dummy_nets_for_selected_nets",
        "section": "ignore_dummy_nets_for_selected_nets > ignore_dummy_nets_for_selected_nets",
        "text": "property HFSSPISimulationSettings.ignore_dummy_nets_for_selected_nets\n\nAuto select Nets for simulation\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/siwave_simulation_setup",
        "href": "api/utilities/siwave_simulation_setup.html#siwave-simulation-setup",
        "title": "SIwave simulation setup",
        "section": "SIwave simulation setup",
        "text": "These classes are the containers of siwave simulation setup.\nSiwaveSimulationSetup\nManages EDB methods for SIwave simulation setup.\nSiwaveDCSimulationSetup\nManages EDB methods for SIwave DC simulation setup.\nSIwave simulation setup\nSiwaveSimulationSetup\nSiwaveDCSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.set_product_property",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.set_product_property.html#set_product_property",
        "title": "set_product_property",
        "section": "set_product_property",
        "text": "Set the product property associated with the given product and attribute ids.\nProduct ID.\nAttribute ID.\nProduct property’s new value\nset_product_property\nProductIdType\npython:int\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.set_product_property",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.set_product_property.html#pyedb.dotnet.edb.Edb.set_product_property",
        "title": "set_product_property > set_product_property > set_product_property",
        "section": "set_product_property > set_product_property",
        "text": "Edb.set_product_property(prod_id, attr_it, prop_value)\n\nSet the product property associated with the given product and attribute ids.\n\nParameters\n\nprod_id\n\nProductIdType\n\nProduct ID.\n\nattr_it\n\npython:int\n\nAttribute ID.\n\nprop_value\n\npython:str\n\nProduct property’s new value\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.placement_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.placement_layer.html#placement_layer",
        "title": "placement_layer",
        "section": "placement_layer",
        "text": "Placement layer.\nName of the placement layer.\nplacement_layer\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.placement_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.placement_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.placement_layer",
        "title": "placement_layer > placement_layer > placement_layer",
        "section": "placement_layer > placement_layer",
        "text": "property EDBPadstackInstance.placement_layer\n\nPlacement layer.\n\nReturns\n\npython:str\n\nName of the placement layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/simulation_setup/define_hfss_simulation_setup",
        "href": "user_guide/simulation_setup/define_hfss_simulation_setup.html#set-up-an-hfss-simulation",
        "title": "Set up an HFSS simulation",
        "section": "Set up an HFSS simulation",
        "text": "This page shows how to set up an HFSS simulation.\nSet up an HFSS simulation"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.lower_elevation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.lower_elevation.html#lower_elevation",
        "title": "lower_elevation",
        "section": "lower_elevation",
        "text": "Lower elevation of the placement layer.\nLower elavation of the placement layer.\nlower_elevation\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.lower_elevation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.lower_elevation.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.lower_elevation",
        "title": "lower_elevation > lower_elevation > lower_elevation",
        "section": "lower_elevation > lower_elevation",
        "text": "property EDBPadstackInstance.lower_elevation\n\nLower elevation of the placement layer.\n\nReturns\n\npython:float\n\nLower elavation of the placement layer.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_segment",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_segment.html#is_segment",
        "title": "is_segment",
        "section": "is_segment",
        "text": "Either if it is a straight segment or not.\nis_segment"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_segment",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_segment.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_segment",
        "title": "is_segment > is_segment > is_segment",
        "section": "is_segment > is_segment",
        "text": "property EDBArcs.is_segment\n\nEither if it is a straight segment or not.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.metal_volume",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.metal_volume.html#metal_volume",
        "title": "metal_volume",
        "section": "metal_volume",
        "text": "Metal volume of the via hole instance in cubic units (m3). Metal plating ratio is accounted.\nMetal volume of the via hole instance.\nmetal_volume\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.metal_volume",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.metal_volume.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.metal_volume",
        "title": "metal_volume > metal_volume > metal_volume",
        "section": "metal_volume > metal_volume",
        "text": "property EDBPadstackInstance.metal_volume\n\nMetal volume of the via hole instance in cubic units (m3). Metal plating ratio is accounted.\n\nReturns\n\npython:float\n\nMetal volume of the via hole instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the definition.\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.name.html#pyedb.dotnet.database.edb_data.ports.WavePort.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property WavePort.name\n\nName of the definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Whether if mesh operation is enabled.\nTrue if mesh operation is used, False otherwise.\nenabled\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.enabled.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property SkinDepthMeshOperation.enabled\n\nWhether if mesh operation is enabled.\n\nReturns\n\nbool\n\nTrue if mesh operation is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/quickcode",
        "href": "getting_started/quickcode.html#quick-code",
        "title": "Quick code",
        "section": "Quick code",
        "text": "To help you begin using PyEDB, you can view or download the PyEDB API cheat sheet. This one-page reference\nprovides syntax rules and commands for using the PyEDB API:\nView the PyEDB API cheat sheet.\nDownload the PyEDB API cheat sheet.\nQuick code"
    },
    {
        "objectID": "getting_started/quickcode",
        "href": "getting_started/quickcode.html#load-an-aedb-file-into-memory",
        "title": "Quick code > Load an AEDB file into memory",
        "section": "Load an AEDB file into memory",
        "text": "This code shows how to use PyEDB to load an existing AEDB file into memory:\nLoad an AEDB file into memory"
    },
    {
        "objectID": "getting_started/quickcode",
        "href": "getting_started/quickcode.html#connect-to-edb-from-a-python-ide",
        "title": "Quick code > Connect to EDB from a Python IDE",
        "section": "Connect to EDB from a Python IDE",
        "text": "PyEDB works both inside AEDT and as a standalone app. PyEDB also provides\nadvanced error management. The following code examples provide a brief\nexample of how PyEDB works.\nConnect to EDB from a Python IDE"
    },
    {
        "objectID": "getting_started/quickcode",
        "href": "getting_started/quickcode.html#explicit-pyedb-declaration-and-error-management",
        "title": "Quick code > Explicit PyEDB declaration and error management",
        "section": "Explicit PyEDB declaration and error management",
        "text": "Explicit PyEDB declaration and error management"
    },
    {
        "objectID": "getting_started/quickcode",
        "href": "getting_started/quickcode.html#variables",
        "title": "Quick code > Variables",
        "section": "Variables",
        "text": "Variables"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the setup.\nname"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.name.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property HfssSimulationSetup.name\n\nName of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.fill_material",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.fill_material.html#fill_material",
        "title": "fill_material",
        "section": "fill_material",
        "text": "The layer’s fill material.\nfill_material"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.fill_material",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.fill_material.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.fill_material",
        "title": "fill_material > fill_material > fill_material",
        "section": "fill_material > fill_material",
        "text": "property LayerEdbClass.fill_material\n\nThe layer’s fill material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_multi_frequencies",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_multi_frequencies.html#set_solution_multi_frequencies",
        "title": "set_solution_multi_frequencies",
        "section": "set_solution_multi_frequencies",
        "text": "Set multi-frequency solution.\nList or tuple of adaptive frequencies. The default is 5GHz.\nMaximum number of passes. Default is 10.\nMaximum delta S. The default is 0.02.\nset_solution_multi_frequencies\npython:list\npython:tuple\noptional\n5GHz\npython:int\noptional\n10\npython:float\noptional\n0.02"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_multi_frequencies",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_multi_frequencies.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.set_solution_multi_frequencies",
        "title": "set_solution_multi_frequencies > set_solution_multi_frequencies > set_solution_multi_frequencies",
        "section": "set_solution_multi_frequencies > set_solution_multi_frequencies",
        "text": "HfssSimulationSetup.set_solution_multi_frequencies(frequencies=('5GHz', '10GHz'), max_num_passes=10, max_delta_s='0.02')\n\nSet multi-frequency solution.\n\nParameters\n\nfrequencies\n\npython:list, python:tuple, optional\n\nList or tuple of adaptive frequencies. The default is 5GHz.\n\nmax_num_passes\n\npython:int, optional\n\nMaximum number of passes. Default is 10.\n\nmax_delta_s\n\npython:float, optional\n\nMaximum delta S. The default is 0.02.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.horizontal_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.horizontal_extent_factor.html#horizontal_extent_factor",
        "title": "horizontal_extent_factor",
        "section": "horizontal_extent_factor",
        "text": "Horizontal extent factor.\nhorizontal_extent_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.horizontal_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.horizontal_extent_factor.html#pyedb.dotnet.database.edb_data.ports.GapPort.horizontal_extent_factor",
        "title": "horizontal_extent_factor > horizontal_extent_factor > horizontal_extent_factor",
        "section": "horizontal_extent_factor > horizontal_extent_factor",
        "text": "property GapPort.horizontal_extent_factor\n\nHorizontal extent factor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.return_current_distribution",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.return_current_distribution.html#return_current_distribution",
        "title": "return_current_distribution",
        "section": "return_current_distribution",
        "text": "Boolean to activate the current distribution return with Siwave.\nreturn_current_distribution\nflot\nValue\nof\nthe\narc\nto\nchord"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.return_current_distribution",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.return_current_distribution.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.return_current_distribution",
        "title": "return_current_distribution > return_current_distribution > return_current_distribution",
        "section": "return_current_distribution > return_current_distribution",
        "text": "property SimulationConfigurationAc.return_current_distribution\n\nBoolean to activate the current distribution return with Siwave.\n\nReturns\n\nflot\n\n\n\nValue of the arc to chord error.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.polygon_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.polygon_data.html#polygon_data",
        "title": "polygon_data",
        "section": "polygon_data",
        "text": "pyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\npolygon_data\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.polygon_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.polygon_data.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.polygon_data",
        "title": "polygon_data > polygon_data > polygon_data",
        "section": "polygon_data > polygon_data",
        "text": "property EDBPadstackInstance.polygon_data\n\npyedb.dotnet.database.dotnet.database.PolygonDataDotNet: Outer contour of the Polygon object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.export_properties.html#pyedb.configuration.cfg_pin_groups.CfgPinGroups.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgPinGroups.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.html#cfgbase",
        "title": "CfgBase",
        "section": "CfgBase",
        "text": "CfgBase.get_attributes([exclude])\n\nCfgBase.set_attributes(pedb_object)\n\nCfgBase.protected_attributes\n\nCfgBase\nCfgBase.get_attributes\nCfgBase.set_attributes\nCfgBase.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.html#pyedb.configuration.cfg_common.CfgBase",
        "title": "CfgBase > CfgBase > CfgBase",
        "section": "CfgBase > CfgBase",
        "text": "class pyedb.configuration.cfg_common.CfgBase\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgBase.get_attributes([exclude])\n\n\n\nCfgBase.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgBase.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_q3d_for_dc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_q3d_for_dc.html#use_q3d_for_dc",
        "title": "use_q3d_for_dc",
        "section": "use_q3d_for_dc",
        "text": "Retrieve boolean to Q3D solver for DC point value computation.\nuse_q3d_for_dc\nTrue\nwhen\nQ3D\nsolver\nis\nused\nFalse\nwhen\ninterpolating\nvalue\nis\nused"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_q3d_for_dc",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_q3d_for_dc.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_q3d_for_dc",
        "title": "use_q3d_for_dc > use_q3d_for_dc > use_q3d_for_dc",
        "section": "use_q3d_for_dc > use_q3d_for_dc",
        "text": "property SimulationConfigurationAc.use_q3d_for_dc\n\nRetrieve boolean to Q3D solver for DC point value computation.\n\nReturns\n\nbool\n\n\n\nTrue when Q3D solver is used False when interpolating value is used instead.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwave",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwave.html#ksiwave",
        "title": "kSIwave",
        "section": "kSIwave",
        "text": "kSIwave"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwave",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwave.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwave",
        "title": "kSIwave > kSIwave > kSIwave",
        "section": "kSIwave > kSIwave",
        "text": "SimulationSetupType.kSIwave = 'siwave_ac'\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_object.html#value_object",
        "title": "value_object",
        "section": "value_object",
        "text": "Get/Set the value of this variable.\nvalue_object\npyedb.dotnet.database.edb_data.edbvalue.EdbValue"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.value_object.html#pyedb.dotnet.database.edb_data.variables.Variable.value_object",
        "title": "value_object > value_object > value_object",
        "section": "value_object > value_object",
        "text": "property Variable.value_object\n\nGet/Set the value of this variable.\n\nReturns\n\npyedb.dotnet.database.edb_data.edbvalue.EdbValue\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileMaterial",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileMaterial.html#controlfilematerial",
        "title": "ControlFileMaterial",
        "section": "ControlFileMaterial",
        "text": "ControlFileMaterial"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileMaterial",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileMaterial.html#pyedb.dotnet.database.edb_data.control_file.ControlFileMaterial",
        "title": "ControlFileMaterial > ControlFileMaterial > ControlFileMaterial",
        "section": "ControlFileMaterial > ControlFileMaterial",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileMaterial(name, properties)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.pec_launch_width",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.pec_launch_width.html#pec_launch_width",
        "title": "pec_launch_width",
        "section": "pec_launch_width",
        "text": "Launch width for the printed electronic component (PEC).\npec_launch_width"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.pec_launch_width",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.pec_launch_width.html#pyedb.dotnet.database.edb_data.ports.GapPort.pec_launch_width",
        "title": "pec_launch_width > pec_launch_width > pec_launch_width",
        "section": "pec_launch_width > pec_launch_width",
        "text": "property GapPort.pec_launch_width\n\nLaunch width for the printed electronic component (PEC).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_refine",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_refine.html#conduction_per_refine",
        "title": "conduction_per_refine",
        "section": "conduction_per_refine",
        "text": "Conduction refinement.\nconduction_per_refine\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_refine",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_refine.html#pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_per_refine",
        "title": "conduction_per_refine > conduction_per_refine > conduction_per_refine",
        "section": "conduction_per_refine > conduction_per_refine",
        "text": "property DcrSettings.conduction_per_refine\n\nConduction refinement.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.html#edbdifferentialpairdata",
        "title": "EDBDifferentialPairData",
        "section": "EDBDifferentialPairData",
        "text": "Manages EDB functionalities for a primitive.\nIt inherits EDB object properties.\nEDBDifferentialPairData.add_net(name)\nAdd a new net.\nEDBDifferentialPairData.api_create(name)\nEdb Dotnet Api Database Edb.DifferentialPair.Create.\nEDBDifferentialPairData.delete()\nEdb Dotnet Api Database Delete.\nEDBDifferentialPairData.find_by_name(layout, net)\nEdb Dotnet Api Database Edb.DifferentialPair.FindByName.\nEDBDifferentialPairData.api_class\nReturn Ansys.Ansoft.Edb class object.\nEDBDifferentialPairData.api_negative_net\nEdb Api Negative net object.\nEDBDifferentialPairData.api_nets\nReturn Edb Nets object dictionary.\nEDBDifferentialPairData.api_positive_net\nEdb Api Positive net object.\nEDBDifferentialPairData.is_null\nEdb Dotnet Api Database NetClass.IsNull().\nEDBDifferentialPairData.name\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\nEDBDifferentialPairData.negative_net\nNegative Net.\nEDBDifferentialPairData.positive_net\nPositive Net.\nEDBDifferentialPairData\nEDBDifferentialPairData.add_net\nEDBDifferentialPairData.api_create\nEDBDifferentialPairData.delete\nEDBDifferentialPairData.find_by_name\nEDBDifferentialPairData.api_class\nEDBDifferentialPairData.api_negative_net\nEDBDifferentialPairData.api_nets\nEDBDifferentialPairData.api_positive_net\nEDBDifferentialPairData.is_null\nEDBDifferentialPairData.name\nEDBDifferentialPairData.negative_net\nEDBDifferentialPairData.positive_net"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData",
        "title": "EDBDifferentialPairData > EDBDifferentialPairData > EDBDifferentialPairData",
        "section": "EDBDifferentialPairData > EDBDifferentialPairData",
        "text": "class pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData(core_app, api_object=None)\n\nManages EDB functionalities for a primitive.\nIt inherits EDB object properties.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> diff_pair = edb.differential_pairs[\"DQ4\"]\n>>> diff_pair.positive_net\n>>> diff_pair.negative_net\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBDifferentialPairData.add_net(name)\n\nAdd a new net.\n\nEDBDifferentialPairData.api_create(name)\n\nEdb Dotnet Api Database Edb.DifferentialPair.Create.\n\nEDBDifferentialPairData.delete()\n\nEdb Dotnet Api Database Delete.\n\nEDBDifferentialPairData.find_by_name(layout, net)\n\nEdb Dotnet Api Database Edb.DifferentialPair.FindByName.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBDifferentialPairData.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\nEDBDifferentialPairData.api_negative_net\n\nEdb Api Negative net object.\n\nEDBDifferentialPairData.api_nets\n\nReturn Edb Nets object dictionary.\n\nEDBDifferentialPairData.api_positive_net\n\nEdb Api Positive net object.\n\nEDBDifferentialPairData.is_null\n\nEdb Dotnet Api Database NetClass.IsNull().\n\nEDBDifferentialPairData.name\n\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\n\nEDBDifferentialPairData.negative_net\n\nNegative Net.\n\nEDBDifferentialPairData.positive_net\n\nPositive Net.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.improved_loss_model",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.improved_loss_model.html#improved_loss_model",
        "title": "improved_loss_model",
        "section": "improved_loss_model",
        "text": "Improved Loss Model on power ground nets option.\n1: Level 1\n2: Level 2\n3: Level 3\nimproved_loss_model"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.improved_loss_model",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.improved_loss_model.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.improved_loss_model",
        "title": "improved_loss_model > improved_loss_model > improved_loss_model",
        "section": "improved_loss_model > improved_loss_model",
        "text": "property HFSSPISimulationSettings.improved_loss_model\n\nImproved Loss Model on power ground nets option.\n1: Level 1\n2: Level 2\n3: Level 3\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_vias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_vias.html#dc_refine_vias",
        "title": "dc_refine_vias",
        "section": "dc_refine_vias",
        "text": "Retrieve the value for performing vias refinement.\nTrue when activated, False deactivated.\ndc_refine_vias\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_vias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_vias.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_refine_vias",
        "title": "dc_refine_vias > dc_refine_vias > dc_refine_vias",
        "section": "dc_refine_vias > dc_refine_vias",
        "text": "property SimulationConfigurationDc.dc_refine_vias\n\nRetrieve the value for performing vias refinement.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.html#edbpadstack",
        "title": "EDBPadstack",
        "section": "EDBPadstack",
        "text": "Manages EDB functionalities for a padstack.\nInherited AEDT object.\nEDBPadstack.convert_to_3d_microvias([...])\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\nEDBPadstack.split_to_microvias()\nConvert actual padstack definition to multiple microvias definitions.\nEDBPadstack.antipad_by_layer\nAnti pad property.\nEDBPadstack.hole_diameter\nHole diameter.\nEDBPadstack.hole_diameter_string\nHole diameter in string format.\nEDBPadstack.hole_finished_size\nFinished hole size.\nEDBPadstack.hole_offset_x\nHole offset for the X axis.\nEDBPadstack.hole_offset_y\nHole offset for the Y axis.\nEDBPadstack.hole_params\nVia Hole parameters values.\nEDBPadstack.hole_plating_ratio\nHole plating ratio.\nEDBPadstack.hole_plating_thickness\nHole plating thickness.\nEDBPadstack.hole_properties\nHole properties.\nEDBPadstack.hole_range\nGet hole range value from padstack definition.\nEDBPadstack.hole_rotation\nHole rotation.\nEDBPadstack.hole_type\nHole type.\nEDBPadstack.instances\nDefinitions Instances.\nEDBPadstack.material\nHole material.\nEDBPadstack.name\nPadstack Definition Name.\nEDBPadstack.pad_by_layer\nRegular pad property.\nEDBPadstack.padstack_instances\nGet all the vias that belongs to active Padstack definition.\nEDBPadstack.thermalpad_by_layer\nThermal pad property.\nEDBPadstack.via_layers\nLayers.\nEDBPadstack.via_start_layer\nStarting layer.\nEDBPadstack.via_stop_layer\nStopping layer.\nEDBPadstack\npython:str\nEDBPadstack.convert_to_3d_microvias\nEDBPadstack.split_to_microvias\nEDBPadstack.antipad_by_layer\nEDBPadstack.hole_diameter\nEDBPadstack.hole_diameter_string\nEDBPadstack.hole_finished_size\nEDBPadstack.hole_offset_x\nEDBPadstack.hole_offset_y\nEDBPadstack.hole_params\nEDBPadstack.hole_plating_ratio\nEDBPadstack.hole_plating_thickness\nEDBPadstack.hole_properties\nEDBPadstack.hole_range\nEDBPadstack.hole_rotation\nEDBPadstack.hole_type\nEDBPadstack.instances\nEDBPadstack.material\nEDBPadstack.name\nEDBPadstack.pad_by_layer\nEDBPadstack.padstack_instances\nEDBPadstack.thermalpad_by_layer\nEDBPadstack.via_layers\nEDBPadstack.via_start_layer\nEDBPadstack.via_stop_layer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack",
        "title": "EDBPadstack > EDBPadstack > EDBPadstack",
        "section": "EDBPadstack > EDBPadstack",
        "text": "class pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack(edb_padstack, ppadstack)\n\nManages EDB functionalities for a padstack.\n\nParameters\n\nedb_padstack\n\n\n\nppadstack\n\npython:str\n\nInherited AEDT object.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> edb_padstack = edb.padstacks.definitions[\"MyPad\"]\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBPadstack.convert_to_3d_microvias([...])\n\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\n\nEDBPadstack.split_to_microvias()\n\nConvert actual padstack definition to multiple microvias definitions.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBPadstack.antipad_by_layer\n\nAnti pad property.\n\nEDBPadstack.hole_diameter\n\nHole diameter.\n\nEDBPadstack.hole_diameter_string\n\nHole diameter in string format.\n\nEDBPadstack.hole_finished_size\n\nFinished hole size.\n\nEDBPadstack.hole_offset_x\n\nHole offset for the X axis.\n\nEDBPadstack.hole_offset_y\n\nHole offset for the Y axis.\n\nEDBPadstack.hole_params\n\nVia Hole parameters values.\n\nEDBPadstack.hole_plating_ratio\n\nHole plating ratio.\n\nEDBPadstack.hole_plating_thickness\n\nHole plating thickness.\n\nEDBPadstack.hole_properties\n\nHole properties.\n\nEDBPadstack.hole_range\n\nGet hole range value from padstack definition.\n\nEDBPadstack.hole_rotation\n\nHole rotation.\n\nEDBPadstack.hole_type\n\nHole type.\n\nEDBPadstack.instances\n\nDefinitions Instances.\n\nEDBPadstack.material\n\nHole material.\n\nEDBPadstack.name\n\nPadstack Definition Name.\n\nEDBPadstack.pad_by_layer\n\nRegular pad property.\n\nEDBPadstack.padstack_instances\n\nGet all the vias that belongs to active Padstack definition.\n\nEDBPadstack.thermalpad_by_layer\n\nThermal pad property.\n\nEDBPadstack.via_layers\n\nLayers.\n\nEDBPadstack.via_start_layer\n\nStarting layer.\n\nEDBPadstack.via_stop_layer\n\nStopping layer.\n\n"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys repository appears in\nContribute\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyEDB.\nThe following contribution information is specific to PyEDB.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest version of PyEDB in\ndevelopment mode, run these commands:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyEDB Issues\npage to submit questions, report bugs, and request new features.\nTo reach the product support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-pyedb-documentation",
        "title": "Contribute > View PyEDB documentation",
        "section": "View PyEDB documentation",
        "text": "Documentation for the latest stable release of PyEDB is hosted at\nPyEDB documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView PyEDB documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyEDB is compliant with PyAnsys code style. It uses the tool\npre-commit to check the code style. You can install\nand activate this tool with these commands:\nYou can also install this as a pre-commit hook with this command:\nThis way, it’s not possible for you to push code that fails the style checks.\nFor example:\nAdhere to code style"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#log-errors",
        "title": "Contribute > Log errors",
        "section": "Log errors",
        "text": "PyEDB has an internal logging tool named Messenger\nand a log file that is automatically generated in the project\nfolder.\nThe following examples show how Messenger is used to\nwrite both to the internal AEDT message windows and the log file:\nThese examples show how to write messages only to the log file:\nLog errors\nMessenger\nMessenger"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#hard-coded-values",
        "title": "Contribute > Hard-coded values",
        "section": "Hard-coded values",
        "text": "Do not write hard-coded values to the registry. Instead, use the Configuration service.\nHard-coded values"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#maximum-line-length",
        "title": "Contribute > Maximum line length",
        "section": "Maximum line length",
        "text": "Best practice is to keep the length at or below 120 characters for code\nand comments. Lines longer than this might not display properly on some terminals\nand tools or might be difficult to follow.\nMaximum line length"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.capacitors",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.capacitors.html#capacitors",
        "title": "capacitors",
        "section": "capacitors",
        "text": "Capacitors.\nDictionary of capacitors.\ncapacitors\npython:dict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.capacitors",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.capacitors.html#pyedb.dotnet.database.components.Components.capacitors",
        "title": "capacitors > capacitors > capacitors",
        "section": "capacitors > capacitors",
        "text": "property Components.capacitors\n\nCapacitors.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\nDictionary of capacitors.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.capacitors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_arc_to_chord_error",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_arc_to_chord_error.html#use_arc_to_chord_error",
        "title": "use_arc_to_chord_error",
        "section": "use_arc_to_chord_error",
        "text": "Retrieve the boolean for activating the arc to chord for HFSS meshing.\nuse_arc_to_chord_error\nActivate\nwhen\nTrue\ndeactivated\nwhen\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_arc_to_chord_error",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_arc_to_chord_error.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_arc_to_chord_error",
        "title": "use_arc_to_chord_error > use_arc_to_chord_error > use_arc_to_chord_error",
        "section": "use_arc_to_chord_error > use_arc_to_chord_error",
        "text": "property SimulationConfigurationAc.use_arc_to_chord_error\n\nRetrieve the boolean for activating the arc to chord for HFSS meshing.\n\nReturns\n\nbool\n\n\n\nActivate when True, deactivated when False.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.solve_siwave",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.solve_siwave.html#solve_siwave",
        "title": "solve_siwave",
        "section": "solve_siwave",
        "text": "Close EDB and solve it with Siwave.\nSiwave project path.\nsolve_siwave\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.solve_siwave",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.solve_siwave.html#pyedb.dotnet.edb.Edb.solve_siwave",
        "title": "solve_siwave > solve_siwave > solve_siwave",
        "section": "solve_siwave > solve_siwave",
        "text": "Edb.solve_siwave()\n\nClose EDB and solve it with Siwave.\n\nReturns\n\npython:str\n\nSiwave project path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net_name.html#net_name",
        "title": "net_name",
        "section": "net_name",
        "text": "Get the primitive layer name.\nnet_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net_name.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.net_name",
        "title": "net_name > net_name > net_name",
        "section": "net_name > net_name",
        "text": "property EDBPadstackInstance.net_name\n\nGet the primitive layer name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.padstacks",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.padstacks.html#padstacks",
        "title": "padstacks",
        "section": "padstacks",
        "text": "Core padstack.\npadstacks\nInstance\nof"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.padstacks",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.padstacks.html#pyedb.dotnet.edb.Edb.padstacks",
        "title": "padstacks > padstacks > padstacks",
        "section": "padstacks > padstacks",
        "text": "property Edb.padstacks\n\nCore padstack.\n\nReturns\n\nInstance of :class: legacy.database.padstack.EdbPadstack\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> p = edbapp.padstacks.create(padstackname=\"myVia_bullet\", antipad_shape=\"Bullet\")\n>>> edbapp.padstacks.get_pad_parameters(\n>>> ... p, \"TOP\", edbapp.padstacks.pad_type.RegularPad\n>>> ... )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_negative",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_negative.html#is_negative",
        "title": "is_negative",
        "section": "is_negative",
        "text": "Determine whether this primitive is negative.\nTrue if it is negative, False otherwise.\nis_negative"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_negative",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_negative.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_negative",
        "title": "is_negative > is_negative > is_negative",
        "section": "is_negative > is_negative",
        "text": "property EDBPadstackInstance.is_negative\n\nDetermine whether this primitive is negative.\n\nReturns\n\nbool\n\nTrue if it is negative, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type.html#hole_type",
        "title": "hole_type",
        "section": "hole_type",
        "text": "Hole type.\nType of the hole.\nhole_type\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type",
        "title": "hole_type > hole_type > hole_type",
        "section": "hole_type > hole_type",
        "text": "property EDBPadstack.hole_type\n\nHole type.\n\nReturns\n\npython:int\n\nType of the hole.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins.html#get_pins",
        "title": "get_pins",
        "section": "get_pins",
        "text": "Get component pins.\nReference designator of the component.\nName of the net.\nName of the pin.\nget_pins\npython:str\npython:str\noptional\npython:str\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins.html#pyedb.dotnet.database.components.Components.get_pins",
        "title": "get_pins > get_pins > get_pins",
        "section": "get_pins > get_pins",
        "text": "Components.get_pins(reference_designator, net_name=None, pin_name=None)\n\nGet component pins.\n\nParameters\n\nreference_designator\n\npython:str\n\nReference designator of the component.\n\nnet_name\n\npython:str, optional\n\nName of the net.\n\npin_name\n\npython:str, optional\n\nName of the pin.\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_auto_setup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_auto_setup.html#is_auto_setup",
        "title": "is_auto_setup",
        "section": "is_auto_setup",
        "text": "Flag indicating if automatic setup is enabled.\nis_auto_setup"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_auto_setup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_auto_setup.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.is_auto_setup",
        "title": "is_auto_setup > is_auto_setup > is_auto_setup",
        "section": "is_auto_setup > is_auto_setup",
        "text": "property HfssSimulationSetup.is_auto_setup\n\nFlag indicating if automatic setup is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.html#waveport",
        "title": "WavePort",
        "section": "WavePort",
        "text": "Manages wave port properties.\nEDB object from the Edblib library.\nEdge terminal instance from EDB.\nThis example shows how to access the WavePort class.\nWavePort.couple_ports(port)\nCreate a bundle wave port.\nWavePort.delete()\nDelete this primitive.\nWavePort.get_edge_terminal_reference_primitive()\nCheck and  return a primitive instance that serves Edge ports, wave ports and coupled edge ports that are directly connedted to primitives.\nWavePort.get_pad_edge_terminal_reference_pin([...])\nGet the closest pin padstack instances and serves any edge terminal connected to a pad.\nWavePort.get_padstack_terminal_reference_pin([...])\nGet a list of pad stacks instances and serves Coax wave ports, pingroup terminals, PadEdge terminals.\nWavePort.get_pin_group_terminal_reference_pin([...])\nReturn a list of pins and serves terminals connected to pingroups.\nWavePort.get_point_terminal_reference_primitive()\nFind and return the primitive reference for the point terminal or the padstack instance.\nWavePort.boundary_type\nBoundary type.\nWavePort.component\nComponent connected to this object.\nWavePort.deembed\nWhether deembed is active.\nWavePort.deembed_length\nDeembed Length.\nWavePort.do_renormalize\nDetermine whether port renormalization is enabled.\nWavePort.hfss_type\nHFSS port type.\nWavePort.horizontal_extent_factor\nHorizontal extent factor.\nWavePort.id\nPrimitive ID.\nWavePort.impedance\nImpedance of the port.\nWavePort.is_circuit_port\nWhether it is a circuit port.\nWavePort.is_current_source\nWhether it is a current source.\nWavePort.is_null\nFlag indicating if this object is null.\nWavePort.is_port\nWhether it is a port.\nWavePort.is_reference_terminal\nWhether it is a reference terminal.\nWavePort.is_voltage_source\nWhether it is a voltage source.\nWavePort.layer\nGet layer of the terminal.\nWavePort.magnitude\nGet the magnitude of the source.\nWavePort.name\nName of the definition.\nWavePort.net\nNet Object.\nWavePort.net_name\nGet the primitive layer name.\nWavePort.pec_launch_width\nLaunch width for the printed electronic component (PEC).\nWavePort.phase\nGet the phase of the source.\nWavePort.ref_terminal\nGet reference terminal.\nWavePort.reference_net_name\nNet name to which reference_object belongs.\nWavePort.reference_object\nThis returns the object assigned as reference.\nWavePort.reference_terminal\nAdding grpc compatibility.\nWavePort.terminal_type\nTerminal Type.\nWavePort.type\nType of the edb object.\nWavePort.vertical_extent_factor\nVertical extent factor.\nWavePort\npyedb.edb.Edb\nEdblib\nAnsys.Ansoft.Edb.Cell.Terminal.EdgeTerminal\nWavePort\nWavePort.couple_ports\nWavePort.delete\nWavePort.get_edge_terminal_reference_primitive\nWavePort.get_pad_edge_terminal_reference_pin\nWavePort.get_padstack_terminal_reference_pin\nWavePort.get_pin_group_terminal_reference_pin\nWavePort.get_point_terminal_reference_primitive\nWavePort.boundary_type\nWavePort.component\nWavePort.deembed\nWavePort.deembed_length\nWavePort.do_renormalize\nWavePort.hfss_type\nWavePort.horizontal_extent_factor\nWavePort.id\nWavePort.impedance\nWavePort.is_circuit_port\nWavePort.is_current_source\nWavePort.is_null\nWavePort.is_port\nWavePort.is_reference_terminal\nWavePort.is_voltage_source\nWavePort.layer\nWavePort.magnitude\nWavePort.name\nWavePort.net\nWavePort.net_name\nWavePort.pec_launch_width\nWavePort.phase\nWavePort.ref_terminal\nWavePort.reference_net_name\nWavePort.reference_object\nWavePort.reference_terminal\nWavePort.terminal_type\nWavePort.type\nWavePort.vertical_extent_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.html#pyedb.dotnet.database.edb_data.ports.WavePort",
        "title": "WavePort > WavePort > WavePort",
        "section": "WavePort > WavePort",
        "text": "class pyedb.dotnet.database.edb_data.ports.WavePort(pedb, edb_terminal)\n\nManages wave port properties.\n\nParameters\n\npedb\n\npyedb.edb.Edb\n\nEDB object from the Edblib library.\n\nedb_object\n\nAnsys.Ansoft.Edb.Cell.Terminal.EdgeTerminal\n\nEdge terminal instance from EDB.\n\nExamples\n\nThis example shows how to access the WavePort class.\n\n>>> from pyedb import Edb\n>>> edb = Edb(\"myaedb.aedb\")\n>>> exc = edb.ports\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nWavePort.couple_ports(port)\n\nCreate a bundle wave port.\n\nWavePort.delete()\n\nDelete this primitive.\n\nWavePort.get_edge_terminal_reference_primitive()\n\nCheck and  return a primitive instance that serves Edge ports, wave ports and coupled edge ports that are directly connedted to primitives.\n\nWavePort.get_pad_edge_terminal_reference_pin([...])\n\nGet the closest pin padstack instances and serves any edge terminal connected to a pad.\n\nWavePort.get_padstack_terminal_reference_pin([...])\n\nGet a list of pad stacks instances and serves Coax wave ports, pingroup terminals, PadEdge terminals.\n\nWavePort.get_pin_group_terminal_reference_pin([...])\n\nReturn a list of pins and serves terminals connected to pingroups.\n\nWavePort.get_point_terminal_reference_primitive()\n\nFind and return the primitive reference for the point terminal or the padstack instance.\n\n\n\nAttributes\n\n\n\n\n\n\n\nWavePort.boundary_type\n\nBoundary type.\n\nWavePort.component\n\nComponent connected to this object.\n\nWavePort.deembed\n\nWhether deembed is active.\n\nWavePort.deembed_length\n\nDeembed Length.\n\nWavePort.do_renormalize\n\nDetermine whether port renormalization is enabled.\n\nWavePort.hfss_type\n\nHFSS port type.\n\nWavePort.horizontal_extent_factor\n\nHorizontal extent factor.\n\nWavePort.id\n\nPrimitive ID.\n\nWavePort.impedance\n\nImpedance of the port.\n\nWavePort.is_circuit_port\n\nWhether it is a circuit port.\n\nWavePort.is_current_source\n\nWhether it is a current source.\n\nWavePort.is_null\n\nFlag indicating if this object is null.\n\nWavePort.is_port\n\nWhether it is a port.\n\nWavePort.is_reference_terminal\n\nWhether it is a reference terminal.\n\nWavePort.is_voltage_source\n\nWhether it is a voltage source.\n\nWavePort.layer\n\nGet layer of the terminal.\n\nWavePort.magnitude\n\nGet the magnitude of the source.\n\nWavePort.name\n\nName of the definition.\n\nWavePort.net\n\nNet Object.\n\nWavePort.net_name\n\nGet the primitive layer name.\n\nWavePort.pec_launch_width\n\nLaunch width for the printed electronic component (PEC).\n\nWavePort.phase\n\nGet the phase of the source.\n\nWavePort.ref_terminal\n\nGet reference terminal.\n\nWavePort.reference_net_name\n\nNet name to which reference_object belongs.\n\nWavePort.reference_object\n\nThis returns the object assigned as reference.\n\nWavePort.reference_terminal\n\nAdding grpc compatibility.\n\nWavePort.terminal_type\n\nTerminal Type.\n\nWavePort.type\n\nType of the edb object.\n\nWavePort.vertical_extent_factor\n\nVertical extent factor.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.adaptive_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.adaptive_settings.html#adaptive_settings",
        "title": "adaptive_settings",
        "section": "adaptive_settings",
        "text": "Adaptive Settings Class.\nadaptive_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdaptiveSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.adaptive_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.adaptive_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.adaptive_settings",
        "title": "adaptive_settings > adaptive_settings > adaptive_settings",
        "section": "adaptive_settings > adaptive_settings",
        "text": "property HfssSimulationSetup.adaptive_settings\n\nAdaptive Settings Class.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdaptiveSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.owner",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.owner.html#owner",
        "title": "owner",
        "section": "owner",
        "text": "Primitive: Owner of the primitive object.\nRead-Only.\nowner\nPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.owner",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.owner.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.owner",
        "title": "owner > owner > owner",
        "section": "owner > owner",
        "text": "property EDBPadstackInstance.owner\n\nPrimitive: Owner of the primitive object.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_mesh_plating",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_mesh_plating.html#via_mesh_plating",
        "title": "via_mesh_plating",
        "section": "via_mesh_plating",
        "text": "Via mesh plating.\nvia_mesh_plating"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_mesh_plating",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_mesh_plating.html#pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_mesh_plating",
        "title": "via_mesh_plating > via_mesh_plating > via_mesh_plating",
        "section": "via_mesh_plating > via_mesh_plating",
        "text": "property ViaSettings.via_mesh_plating\n\nVia mesh plating.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.active_layout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.active_layout.html#active_layout",
        "title": "active_layout",
        "section": "active_layout",
        "text": "Active layout.\nactive_layout\nInstance\nof\nEDB\nAPI\nLayout"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.active_layout",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.active_layout.html#pyedb.dotnet.edb.Edb.active_layout",
        "title": "active_layout > active_layout > active_layout",
        "section": "active_layout > active_layout",
        "text": "property Edb.active_layout\n\nActive layout.\n\nReturns\n\nInstance of EDB API Layout Class.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#installation",
        "title": "Installation",
        "section": "Installation",
        "text": "PyEDB consolidates and extends all existing capital around scripting for EDB,\nallowing reuse of existing code, sharing of best practices, and collaboration.\nPyEDB has been tested on HFSS, Icepak, and SIWave.\nInstallation"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#requirements",
        "title": "Installation > Requirements",
        "section": "Requirements",
        "text": "To use PyEDB, you must have a licensed copy of AEDT 2023 R2 or later.\nPyEDB also supports the AEDT Student version 2023 R2 or later. For more information, see the\nAnsys Electronics Desktop Student  - Free Software Download page on the Ansys website.\nAny additional runtime dependencies are listed in the following installation topics.\nRequirements"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#install-from-a-python-file",
        "title": "Installation > Install from a Python file",
        "section": "Install from a Python file",
        "text": "The AEDT installation already provides a Python interpreter that you can use to run PyEDB. In a virtual environment,\nyou can run PyEDB using CPython 3.9 through 3.11. Note that AEDT 2024 R1 installs CPython 3.10.\nYou can install PyEDB offline using a wheelhouse, which is a ZIP file containing all\nthe needed packages. The Releases\npage of the PyEDB repository provides an Assets ares with the PyEDB wheelhouses for\nvarious Python releases on different operating system.\nAfter downloading the wheelhouse for your Python release and operating system,\nrun the script from the Python terminal, providing the full path to the ZIP file\nas an argument.\nInstall from a Python file"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#install-on-cpython-from-pypi",
        "title": "Installation > Install on CPython from PyPI",
        "section": "Install on CPython from PyPI",
        "text": "You can install PyEDB on CPython 3.8 through 3.11 from PyPI, the Python Package Index,\nwith this command:\nInstall on CPython from PyPI"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#linux-support",
        "title": "Installation > Linux support",
        "section": "Linux support",
        "text": "PyEDB works with CPython 3.8 through 3.10 on Linux in AEDT 2022 R2 and later.\nHowever, you must set up the following environment variables:\nLinux support"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#install-offline-from-a-wheelhouse",
        "title": "Installation > Install offline from a wheelhouse",
        "section": "Install offline from a wheelhouse",
        "text": "Using a wheelhouse can be helpful if you work for a company that restricts access\nto external networks. A wheelhouse is a ZIP file that contains all dependencies\nfor package and allows full installation without a need to download additional files.\nHaving a single file eases the security review of the package content and allows for\neasy sharing with others who need to install it.\nOn the Releases page of the PyEDB repository,\nthe Assets area shows the wheelhouses that are available. After downloading the wheelhouse for your setup,\nextract the files to a folder and run the command for installing PyEDB and all of its dependencies\nfrom your Python terminal, providing the full path to the ZIP file as an argument.\nFor example, on Windows with Python 3.8, install PyEDB and all its dependencies from a\nwheelhouse with code like this:\nInstall offline from a wheelhouse"
    },
    {
        "objectID": "getting_started/installation",
        "href": "getting_started/installation.html#update-pyedb-to-the-latest-version",
        "title": "Installation > Update PyEDB to the latest version",
        "section": "Update PyEDB to the latest version",
        "text": "After installing PyEDB, upgrade it to the latest version with this command:\nUpdate PyEDB to the latest version"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.mesh_operations",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.mesh_operations.html#mesh_operations",
        "title": "mesh_operations",
        "section": "mesh_operations",
        "text": "mesh_operations"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.mesh_operations",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.mesh_operations.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSSimulationSettings.mesh_operations",
        "title": "mesh_operations > mesh_operations > mesh_operations",
        "section": "mesh_operations > mesh_operations",
        "text": "property HFSSSimulationSettings.mesh_operations\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.primitives",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.primitives.html#primitives",
        "title": "primitives",
        "section": "primitives",
        "text": "Return the list of primitives that belongs to the net.\nprimitives\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.primitives",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.primitives.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.primitives",
        "title": "primitives > primitives > primitives",
        "section": "primitives > primitives",
        "text": "property EDBNetsData.primitives\n\nReturn the list of primitives that belongs to the net.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_material",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_material.html#add_material",
        "title": "add_material",
        "section": "add_material",
        "text": "Add a new material with specific properties.\nMaterial name.\nMaterial permittivity. The default is 1.0.\nMaterial tangent losses. The default is 0.0.\nMaterial permeability. The default is 1.0.\nMaterial conductivity. The default is 0.0.\nSpecific material properties. The default is None.\nDictionary with key and material property value.\nadd_material\npython:str\npython:float\noptional\n1.0\npython:float\noptional\n0.0\npython:float\noptional\n1.0\npython:float\noptional\n0.0\npython:dict\noptional\nNone\npyedb.dotnet.database.edb_data.control_file.ControlFileMaterial"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_material",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_material.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_material",
        "title": "add_material > add_material > add_material",
        "section": "add_material > add_material",
        "text": "ControlFileStackup.add_material(material_name, permittivity=1.0, dielectric_loss_tg=0.0, permeability=1.0, conductivity=0.0, properties=None)\n\nAdd a new material with specific properties.\n\nParameters\n\nmaterial_name\n\npython:str\n\nMaterial name.\n\npermittivity\n\npython:float, optional\n\nMaterial permittivity. The default is 1.0.\n\ndielectric_loss_tg\n\npython:float, optional\n\nMaterial tangent losses. The default is 0.0.\n\npermeability\n\npython:float, optional\n\nMaterial permeability. The default is 1.0.\n\nconductivity\n\npython:float, optional\n\nMaterial conductivity. The default is 0.0.\n\nproperties\n\npython:dict, optional\n\nSpecific material properties. The default is None.\nDictionary with key and material property value.\n\nReturns\n\npyedb.dotnet.database.edb_data.control_file.ControlFileMaterial\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.html#materials",
        "title": "Materials",
        "section": "Materials",
        "text": "Manages EDB methods for material management accessible from Edb.materials property.\nMaterials.add_conductor_material(name[, ...])\nAdd a new conductor material.\nMaterials.add_debye_material(name, ...)\nAdd a dielectric with the Debye model.\nMaterials.add_dielectric_material(name, ...)\nAdd a new dielectric material in library.\nMaterials.add_djordjevicsarkar_dielectric(...)\nAdd a dielectric using the Djordjevic-Sarkar model.\nMaterials.add_material(name, **kwargs)\nAdd a new material.\nMaterials.add_multipole_debye_material(name, ...)\nAdd a dielectric with the Multipole Debye model.\nMaterials.delete_material(material_name)\nRemove a material from the database.\nMaterials.duplicate(material_name, ...)\nDuplicate a material from the database.\nMaterials.iterate_materials_in_amat([amat_file])\nIterate over material description in an AMAT file.\nMaterials.load_amat(amat_file)\nLoad materials from an AMAT file.\nMaterials.load_material(material)\nLoad material.\nMaterials.material_property_to_id(property_name)\nConvert a material property name to a material property ID.\nMaterials.read_materials(amat_file)\nRead materials from an AMAT file.\nMaterials.read_syslib_material(material_name)\nRead a specific material from syslib AMAT file.\nMaterials.update_material(material_name, ...)\nUpdate material attributes.\nMaterials.update_materials_from_sys_library([...])\nUpdate material properties from syslib AMAT file.\nMaterials.default_conductor_property_values\n\nMaterials.default_dielectric_property_values\n\nMaterials.materials\nGet materials.\nMaterials.syslib\nGet the project sys library.\nMaterials\nMaterials.add_conductor_material\nMaterials.add_debye_material\nMaterials.add_dielectric_material\nMaterials.add_djordjevicsarkar_dielectric\nMaterials.add_material\nMaterials.add_multipole_debye_material\nMaterials.delete_material\nMaterials.duplicate\nMaterials.iterate_materials_in_amat\nMaterials.load_amat\nMaterials.load_material\nMaterials.material_property_to_id\nMaterials.read_materials\nMaterials.read_syslib_material\nMaterials.update_material\nMaterials.update_materials_from_sys_library\nMaterials.default_conductor_property_values\nMaterials.default_dielectric_property_values\nMaterials.materials\nMaterials.syslib"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.html#pyedb.dotnet.database.materials.Materials",
        "title": "Materials > Materials > Materials",
        "section": "Materials > Materials",
        "text": "class pyedb.dotnet.database.materials.Materials(edb: Edb)\n\nManages EDB methods for material management accessible from Edb.materials property.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nMaterials.add_conductor_material(name[, ...])\n\nAdd a new conductor material.\n\nMaterials.add_debye_material(name, ...)\n\nAdd a dielectric with the Debye model.\n\nMaterials.add_dielectric_material(name, ...)\n\nAdd a new dielectric material in library.\n\nMaterials.add_djordjevicsarkar_dielectric(...)\n\nAdd a dielectric using the Djordjevic-Sarkar model.\n\nMaterials.add_material(name, **kwargs)\n\nAdd a new material.\n\nMaterials.add_multipole_debye_material(name, ...)\n\nAdd a dielectric with the Multipole Debye model.\n\nMaterials.delete_material(material_name)\n\nRemove a material from the database.\n\nMaterials.duplicate(material_name, ...)\n\nDuplicate a material from the database.\n\nMaterials.iterate_materials_in_amat([amat_file])\n\nIterate over material description in an AMAT file.\n\nMaterials.load_amat(amat_file)\n\nLoad materials from an AMAT file.\n\nMaterials.load_material(material)\n\nLoad material.\n\nMaterials.material_property_to_id(property_name)\n\nConvert a material property name to a material property ID.\n\nMaterials.read_materials(amat_file)\n\nRead materials from an AMAT file.\n\nMaterials.read_syslib_material(material_name)\n\nRead a specific material from syslib AMAT file.\n\nMaterials.update_material(material_name, ...)\n\nUpdate material attributes.\n\nMaterials.update_materials_from_sys_library([...])\n\nUpdate material properties from syslib AMAT file.\n\n\n\nAttributes\n\n\n\n\n\n\n\nMaterials.default_conductor_property_values\n\n\n\nMaterials.default_dielectric_property_values\n\n\n\nMaterials.materials\n\nGet materials.\n\nMaterials.syslib\n\nGet the project sys library.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.html#edbnetclassdata",
        "title": "EDBNetClassData",
        "section": "EDBNetClassData",
        "text": "Manages EDB functionalities for a primitives.\nIt inherits EDB Object properties.\nEDBNetClassData.add_net(name)\nAdd a new net.\nEDBNetClassData.api_create(name)\nEdb Dotnet Api Database Edb.NetClass.Create.\nEDBNetClassData.delete()\nEdb Dotnet Api Database Delete.\nEDBNetClassData.api_nets\nReturn Edb Nets object dictionary.\nEDBNetClassData.is_null\nEdb Dotnet Api Database NetClass.IsNull().\nEDBNetClassData.name\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\nEDBNetClassData.nets\nGet nets belong to this net class.\nEDBNetClassData\nEDBNetClassData.add_net\nEDBNetClassData.api_create\nEDBNetClassData.delete\nEDBNetClassData.api_nets\nEDBNetClassData.is_null\nEDBNetClassData.name\nEDBNetClassData.nets"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData",
        "title": "EDBNetClassData > EDBNetClassData > EDBNetClassData",
        "section": "EDBNetClassData > EDBNetClassData",
        "text": "class pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData(core_app, raw_extended_net=None)\n\nManages EDB functionalities for a primitives.\nIt inherits EDB Object properties.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(myedb, edbversion=\"2021.2\")\n>>> edb.net_classes\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEDBNetClassData.add_net(name)\n\nAdd a new net.\n\nEDBNetClassData.api_create(name)\n\nEdb Dotnet Api Database Edb.NetClass.Create.\n\nEDBNetClassData.delete()\n\nEdb Dotnet Api Database Delete.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEDBNetClassData.api_nets\n\nReturn Edb Nets object dictionary.\n\nEDBNetClassData.is_null\n\nEdb Dotnet Api Database NetClass.IsNull().\n\nEDBNetClassData.name\n\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\n\nEDBNetClassData.nets\n\nGet nets belong to this net class.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_sim_setup_info.html#get_sim_setup_info",
        "title": "get_sim_setup_info",
        "section": "get_sim_setup_info",
        "text": "Get simulation information from the setup.\nget_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_sim_setup_info.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_sim_setup_info",
        "title": "get_sim_setup_info > get_sim_setup_info > get_sim_setup_info",
        "section": "get_sim_setup_info > get_sim_setup_info",
        "text": "property SiwaveSimulationSetup.get_sim_setup_info\n\nGet simulation information from the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Flag indicating if this object is null.\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_null.html#pyedb.dotnet.database.edb_data.ports.GapPort.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property GapPort.is_null\n\nFlag indicating if this object is null.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.close_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.close_project.html#close_project",
        "title": "close_project",
        "section": "close_project",
        "text": "Close the project.\nWhether to save the current project before closing it. The default is False.\nTrue when successful, False when failed.\nclose_project\noptional\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.close_project",
        "href": "api/_autosummary/pyedb.siwave.Siwave.close_project.html#pyedb.siwave.Siwave.close_project",
        "title": "close_project > close_project > close_project",
        "section": "close_project > close_project",
        "text": "Siwave.close_project(save_project=False)\n\nClose the project.\n\nParameters\n\nsave_project\n\nbool, optional\n\nWhether to save the current project before closing it. The default is False.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.file_path",
        "href": "api/_autosummary/pyedb.siwave.Siwave.file_path.html#file_path",
        "title": "file_path",
        "section": "file_path",
        "text": "Path of the open project file.\nfile_path"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.file_path",
        "href": "api/_autosummary/pyedb.siwave.Siwave.file_path.html#pyedb.siwave.Siwave.file_path",
        "title": "file_path > file_path > file_path",
        "section": "file_path > file_path",
        "text": "property Siwave.file_path: str\n\nPath of the open project file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_traces",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_traces.html#num_traces",
        "title": "num_traces",
        "section": "num_traces",
        "text": "num_traces"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_traces",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_traces.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_traces",
        "title": "num_traces > num_traces > num_traces",
        "section": "num_traces > num_traces",
        "text": "property EDBStatistics.num_traces\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_materials",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_materials.html#read_materials",
        "title": "read_materials",
        "section": "read_materials",
        "text": "Read materials from an AMAT file.\nFull path to the AMAT file to read.\n{material name: dict of material properties}.\nread_materials\npython:str\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_materials",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.read_materials.html#pyedb.dotnet.database.materials.Materials.read_materials",
        "title": "read_materials > read_materials > read_materials",
        "section": "read_materials > read_materials",
        "text": "Materials.read_materials(amat_file)\n\nRead materials from an AMAT file.\n\nParameters\n\namat_file\n\npython:str\n\nFull path to the AMAT file to read.\n\nReturns\n\npython:dict\n\n{material name: dict of material properties}.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.defeature_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.defeature_polygon.html#defeature_polygon",
        "title": "defeature_polygon",
        "section": "defeature_polygon",
        "text": "Defeature the polygon based on the maximum surface deviation criteria.\nPolygon to defeature.\nMaximum tolerance criteria. The default is 0.001.\nTrue when successful, False when failed.\ndefeature_polygon\npython:float\nEdb\nPolygon\nprimitive\npython:float\noptional\n0.001\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.defeature_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.defeature_polygon.html#pyedb.dotnet.database.modeler.Modeler.defeature_polygon",
        "title": "defeature_polygon > defeature_polygon > defeature_polygon",
        "section": "defeature_polygon > defeature_polygon",
        "text": "Modeler.defeature_polygon(poly, tolerance=0.001)\n\nDefeature the polygon based on the maximum surface deviation criteria.\n\nParameters\n\nmaximum_surface_deviation\n\npython:float\n\n\n\npoly\n\nEdb Polygon primitive\n\nPolygon to defeature.\n\ntolerance\n\npython:float, optional\n\nMaximum tolerance criteria. The default is 0.001.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_to_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_to_polygon.html#convert_to_polygon",
        "title": "convert_to_polygon",
        "section": "convert_to_polygon",
        "text": "Convert path to polygon.\nPolygon when successful, False when failed.\nconvert_to_polygon\ndotnet.database.edb_data.primitives.EDBPrimitives\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_to_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_to_polygon.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_to_polygon",
        "title": "convert_to_polygon > convert_to_polygon > convert_to_polygon",
        "section": "convert_to_polygon > convert_to_polygon",
        "text": "EDBPadstackInstance.convert_to_polygon()\n\nConvert path to polygon.\n\nReturns\n\nbool, dotnet.database.edb_data.primitives.EDBPrimitives\n\nPolygon when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.id.html#id",
        "title": "id",
        "section": "id",
        "text": "Primitive ID.\nid\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.id.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.id",
        "title": "id > id > id",
        "section": "id > id",
        "text": "property EDBPadstackInstance.id\n\nPrimitive ID.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalization_impedance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalization_impedance.html#renormalization_impedance",
        "title": "renormalization_impedance",
        "section": "renormalization_impedance",
        "text": "renormalization_impedance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalization_impedance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalization_impedance.html#pyedb.dotnet.database.edb_data.ports.GapPort.renormalization_impedance",
        "title": "renormalization_impedance > renormalization_impedance > renormalization_impedance",
        "section": "renormalization_impedance > renormalization_impedance",
        "text": "property GapPort.renormalization_impedance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "Apply Spice model on layout.\napply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_spice_models.CfgSpiceModel.apply.html#pyedb.configuration.cfg_spice_models.CfgSpiceModel.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgSpiceModel.apply()\n\nApply Spice model on layout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins_name_from_net",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins_name_from_net.html#get_pins_name_from_net",
        "title": "get_pins_name_from_net",
        "section": "get_pins_name_from_net",
        "text": "Retrieve pins belonging to a net.\nList of pins to check. The default is None, in which case all pins are checked\nName of the net.\nPins belonging to the net.\nget_pins_name_from_net\npython:list\nof\nEDBPadstackInstance\noptional\nNone\npython:str\npython:list\nof\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins_name_from_net",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_pins_name_from_net.html#pyedb.dotnet.database.components.Components.get_pins_name_from_net",
        "title": "get_pins_name_from_net > get_pins_name_from_net > get_pins_name_from_net",
        "section": "get_pins_name_from_net > get_pins_name_from_net",
        "text": "Components.get_pins_name_from_net(net_name, pin_list=None)\n\nRetrieve pins belonging to a net.\n\nParameters\n\npin_list\n\npython:list of EDBPadstackInstance, optional\n\nList of pins to check. The default is None, in which case all pins are checked\n\nnet_name\n\npython:str\n\nName of the net.\n\nReturns\n\npython:list of python:str names:\n\nPins belonging to the net.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_pins_name_from_net(pin_list, net_name)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.replace_3d_triangles",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.replace_3d_triangles.html#replace_3d_triangles",
        "title": "replace_3d_triangles",
        "section": "replace_3d_triangles",
        "text": "Whether to turn on replace 3D triangles.\nTrue if replace 3D triangles is used, False otherwise.\nreplace_3d_triangles\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.replace_3d_triangles",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.replace_3d_triangles.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.replace_3d_triangles",
        "title": "replace_3d_triangles > replace_3d_triangles > replace_3d_triangles",
        "section": "replace_3d_triangles > replace_3d_triangles",
        "text": "property AdvancedMeshSettings.replace_3d_triangles\n\nWhether to turn on replace 3D triangles.\n\nReturns\n\nbool\n\nTrue if replace 3D triangles is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.all_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.all_layers.html#all_layers",
        "title": "all_layers",
        "section": "all_layers",
        "text": "all_layers"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.all_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.all_layers.html#pyedb.dotnet.database.stackup.Stackup.all_layers",
        "title": "all_layers > all_layers > all_layers",
        "section": "all_layers > all_layers",
        "text": "property Stackup.all_layers\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.dielectric_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.dielectric_layers.html#dielectric_layers",
        "title": "dielectric_layers",
        "section": "dielectric_layers",
        "text": "Dielectric layers.\nDictionary of dielectric layers.\ndielectric_layers\npython:dict\npython:str\ndotnet.database.edb_data.layer_data.EDBLayer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.dielectric_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.dielectric_layers.html#pyedb.dotnet.database.stackup.Stackup.dielectric_layers",
        "title": "dielectric_layers > dielectric_layers > dielectric_layers",
        "section": "dielectric_layers > dielectric_layers",
        "text": "property Stackup.dielectric_layers\n\nDielectric layers.\n\nReturns\n\npython:dict[python:str, dotnet.database.edb_data.layer_data.EDBLayer]\n\nDictionary of dielectric layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_objects",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_objects.html#get_connected_objects",
        "title": "get_connected_objects",
        "section": "get_connected_objects",
        "text": "Get connected objects.\nget_connected_objects\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_objects",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_objects.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_connected_objects",
        "title": "get_connected_objects > get_connected_objects > get_connected_objects",
        "section": "get_connected_objects > get_connected_objects",
        "text": "EdbPolygon.get_connected_objects()\n\nGet connected objects.\n\nReturns\n\npython:list\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.subtract",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.subtract.html#subtract",
        "title": "subtract",
        "section": "subtract",
        "text": "Subtract active primitive with one or more primitives.\nsubtract\ndotnet.database.edb_data.EDBPrimitives\nEDB\nPolygonData\nEDB\nPrimitive\npython:list\nList\nof\ndotnet.database.edb_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.subtract",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.subtract.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.subtract",
        "title": "subtract > subtract > subtract",
        "section": "subtract > subtract",
        "text": "EDBPadstackInstance.subtract(primitives)\n\nSubtract active primitive with one or more primitives.\n\nParameters\n\nprimitives\n\ndotnet.database.edb_data.EDBPrimitives or EDB PolygonData or EDB Primitive or python:list\n\n\n\nReturns\n\nList of dotnet.database.edb_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.html#components",
        "title": "Components",
        "section": "Components",
        "text": "Manages EDB components and related method accessible from Edb.components property.\nComponents.add_port_on_rlc_component([...])\nDeactivate RLC component and replace it with a circuit port.\nComponents.add_rlc_boundary([component, ...])\nAdd RLC gap boundary on component and replace it with a circuit port.\nComponents.create(pins[, component_name, ...])\nCreate a component from pins.\nComponents.create_pingroup_from_pins(pins[, ...])\nCreate a pin group on a component.\nComponents.create_port_on_component(...[, ...])\nCreate ports on a component.\nComponents.create_port_on_pins(refdes, pins, ...)\nCreate circuit port between pins and reference ones.\nComponents.create_rlc_component(pins[, ...])\nCreate physical Rlc component.\nComponents.create_source_on_component([sources])\nCreate voltage, current source, or resistor on component.\nComponents.deactivate_rlc_component([...])\nDeactivate RLC component with a possibility to convert it to a circuit port.\nComponents.delete(component_name)\nDelete a component.\nComponents.delete_single_pin_rlc([...])\nDelete all RLC components with a single pin.\nComponents.disable_rlc_component(component_name)\nDisable a RLC component.\nComponents.export_bom(bom_file[, delimiter])\nExport Bom file from layout.\nComponents.export_definition(file_path)\nExport component definitions to json file.\nComponents.find_by_reference_designator(...)\nFind a component.\nComponents.get_aedt_pin_name(pin)\nRetrieve the pin name that is shown in AEDT.\nComponents.get_component_by_name(name)\nRetrieve a component by name.\nComponents.get_component_net_connection_info(refdes)\nRetrieve net connection information.\nComponents.get_component_placement_vector(...)\nGet the placement vector between 2 components.\nComponents.get_components_from_nets([netlist])\nRetrieve components from a net list.\nComponents.get_nets_from_pin_list(PinList)\nRetrieve nets with one or more pins.\nComponents.get_pin_from_component(component)\nRetrieve the pins of a component.\nComponents.get_pin_position(pin)\nRetrieve the pin position in meters.\nComponents.get_pins(reference_designator[, ...])\nGet component pins.\nComponents.get_pins_name_from_net(net_name)\nRetrieve pins belonging to a net.\nComponents.get_rats()\nRetrieve a list of dictionaries of the reference designator, pin names, and net names.\nComponents.get_solder_ball_height(cmp)\nGet component solder ball height.\nComponents.get_through_resistor_list([threshold])\nRetrieve through resistors.\nComponents.get_vendor_libraries()\nRetrieve all capacitors and inductors libraries from ANSYS installation (used by Siwave).\nComponents.import_bom(bom_file[, delimiter, ...])\nLoad external BOM file.\nComponents.import_definition(file_path)\nImport component definition from json file.\nComponents.refresh_components()\nRefresh the component dictionary.\nComponents.replace_rlc_by_gap_boundaries([...])\nReplace RLC component by RLC gap boundaries.\nComponents.set_component_model(componentname)\nAssign a Spice or Touchstone model to a component.\nComponents.set_component_rlc(componentname)\nUpdate values for an RLC component.\nComponents.set_solder_ball([component, ...])\nSet cylindrical solder balls on a given component.\nComponents.short_component_pins(component_name)\nShort pins of component with a trace.\nComponents.update_rlc_from_bom(bom_file[, ...])\nUpdate the EDC core component values (RLCs) with values coming from a BOM file.\nComponents.ICs\nIntegrated circuits.\nComponents.IOs\nCircuit inupts and outputs.\nComponents.Others\nOther core components.\nComponents.capacitors\nCapacitors.\nComponents.components_by_partname\nComponents by part name.\nComponents.definitions\nRetrieve component definition list.\nComponents.inductors\nInductors.\nComponents.instances\nAll Cell components objects.\nComponents.nport_comp_definition\nRetrieve Nport component definition list.\nComponents.resistors\nResistors.\nComponents\npyedb.dotnet.edb.Edb\nComponents.add_port_on_rlc_component\nComponents.add_rlc_boundary\nComponents.create\nComponents.create_pingroup_from_pins\nComponents.create_port_on_component\nComponents.create_port_on_pins\nComponents.create_rlc_component\nComponents.create_source_on_component\nComponents.deactivate_rlc_component\nComponents.delete\nComponents.delete_single_pin_rlc\nComponents.disable_rlc_component\nComponents.export_bom\nComponents.export_definition\nComponents.find_by_reference_designator\nComponents.get_aedt_pin_name\nComponents.get_component_by_name\nComponents.get_component_net_connection_info\nComponents.get_component_placement_vector\nComponents.get_components_from_nets\nComponents.get_nets_from_pin_list\nComponents.get_pin_from_component\nComponents.get_pin_position\nComponents.get_pins\nComponents.get_pins_name_from_net\nComponents.get_rats\nComponents.get_solder_ball_height\nComponents.get_through_resistor_list\nComponents.get_vendor_libraries\nComponents.import_bom\nComponents.import_definition\nComponents.refresh_components\nComponents.replace_rlc_by_gap_boundaries\nComponents.set_component_model\nComponents.set_component_rlc\nComponents.set_solder_ball\nComponents.short_component_pins\nComponents.update_rlc_from_bom\nComponents.ICs\nComponents.IOs\nComponents.Others\nComponents.capacitors\nComponents.components_by_partname\nComponents.definitions\nComponents.inductors\nComponents.instances\nComponents.nport_comp_definition\nComponents.resistors"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.html#pyedb.dotnet.database.components.Components",
        "title": "Components > Components > Components",
        "section": "Components > Components",
        "text": "class pyedb.dotnet.database.components.Components(p_edb)\n\nManages EDB components and related method accessible from Edb.components property.\n\nParameters\n\nedb_class\n\npyedb.dotnet.edb.Edb\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nComponents.add_port_on_rlc_component([...])\n\nDeactivate RLC component and replace it with a circuit port.\n\nComponents.add_rlc_boundary([component, ...])\n\nAdd RLC gap boundary on component and replace it with a circuit port.\n\nComponents.create(pins[, component_name, ...])\n\nCreate a component from pins.\n\nComponents.create_pingroup_from_pins(pins[, ...])\n\nCreate a pin group on a component.\n\nComponents.create_port_on_component(...[, ...])\n\nCreate ports on a component.\n\nComponents.create_port_on_pins(refdes, pins, ...)\n\nCreate circuit port between pins and reference ones.\n\nComponents.create_rlc_component(pins[, ...])\n\nCreate physical Rlc component.\n\nComponents.create_source_on_component([sources])\n\nCreate voltage, current source, or resistor on component.\n\nComponents.deactivate_rlc_component([...])\n\nDeactivate RLC component with a possibility to convert it to a circuit port.\n\nComponents.delete(component_name)\n\nDelete a component.\n\nComponents.delete_single_pin_rlc([...])\n\nDelete all RLC components with a single pin.\n\nComponents.disable_rlc_component(component_name)\n\nDisable a RLC component.\n\nComponents.export_bom(bom_file[, delimiter])\n\nExport Bom file from layout.\n\nComponents.export_definition(file_path)\n\nExport component definitions to json file.\n\nComponents.find_by_reference_designator(...)\n\nFind a component.\n\nComponents.get_aedt_pin_name(pin)\n\nRetrieve the pin name that is shown in AEDT.\n\nComponents.get_component_by_name(name)\n\nRetrieve a component by name.\n\nComponents.get_component_net_connection_info(refdes)\n\nRetrieve net connection information.\n\nComponents.get_component_placement_vector(...)\n\nGet the placement vector between 2 components.\n\nComponents.get_components_from_nets([netlist])\n\nRetrieve components from a net list.\n\nComponents.get_nets_from_pin_list(PinList)\n\nRetrieve nets with one or more pins.\n\nComponents.get_pin_from_component(component)\n\nRetrieve the pins of a component.\n\nComponents.get_pin_position(pin)\n\nRetrieve the pin position in meters.\n\nComponents.get_pins(reference_designator[, ...])\n\nGet component pins.\n\nComponents.get_pins_name_from_net(net_name)\n\nRetrieve pins belonging to a net.\n\nComponents.get_rats()\n\nRetrieve a list of dictionaries of the reference designator, pin names, and net names.\n\nComponents.get_solder_ball_height(cmp)\n\nGet component solder ball height.\n\nComponents.get_through_resistor_list([threshold])\n\nRetrieve through resistors.\n\nComponents.get_vendor_libraries()\n\nRetrieve all capacitors and inductors libraries from ANSYS installation (used by Siwave).\n\nComponents.import_bom(bom_file[, delimiter, ...])\n\nLoad external BOM file.\n\nComponents.import_definition(file_path)\n\nImport component definition from json file.\n\nComponents.refresh_components()\n\nRefresh the component dictionary.\n\nComponents.replace_rlc_by_gap_boundaries([...])\n\nReplace RLC component by RLC gap boundaries.\n\nComponents.set_component_model(componentname)\n\nAssign a Spice or Touchstone model to a component.\n\nComponents.set_component_rlc(componentname)\n\nUpdate values for an RLC component.\n\nComponents.set_solder_ball([component, ...])\n\nSet cylindrical solder balls on a given component.\n\nComponents.short_component_pins(component_name)\n\nShort pins of component with a trace.\n\nComponents.update_rlc_from_bom(bom_file[, ...])\n\nUpdate the EDC core component values (RLCs) with values coming from a BOM file.\n\n\n\nAttributes\n\n\n\n\n\n\n\nComponents.ICs\n\nIntegrated circuits.\n\nComponents.IOs\n\nCircuit inupts and outputs.\n\nComponents.Others\n\nOther core components.\n\nComponents.capacitors\n\nCapacitors.\n\nComponents.components_by_partname\n\nComponents by part name.\n\nComponents.definitions\n\nRetrieve component definition list.\n\nComponents.inductors\n\nInductors.\n\nComponents.instances\n\nAll Cell components objects.\n\nComponents.nport_comp_definition\n\nRetrieve Nport component definition list.\n\nComponents.resistors\n\nResistors.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_low_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_low_freq.html#adaptive_low_freq",
        "title": "adaptive_low_freq",
        "section": "adaptive_low_freq",
        "text": "HFSS broadband low frequency adaptive meshing.\nadaptive_low_freq\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_low_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_low_freq.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.adaptive_low_freq",
        "title": "adaptive_low_freq > adaptive_low_freq > adaptive_low_freq",
        "section": "adaptive_low_freq > adaptive_low_freq",
        "text": "property SimulationConfigurationAc.adaptive_low_freq\n\nHFSS broadband low frequency adaptive meshing.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_loss_handling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_loss_handling.html#signal_nets_include_improved_loss_handling",
        "title": "signal_nets_include_improved_loss_handling",
        "section": "signal_nets_include_improved_loss_handling",
        "text": "Improved Dielectric Fill Refinement choice.\nsignal_nets_include_improved_loss_handling"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_loss_handling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_loss_handling.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_include_improved_loss_handling",
        "title": "signal_nets_include_improved_loss_handling > signal_nets_include_improved_loss_handling > signal_nets_include_improved_loss_handling",
        "section": "signal_nets_include_improved_loss_handling > signal_nets_include_improved_loss_handling",
        "text": "property HFSSPISimulationSettings.signal_nets_include_improved_loss_handling\n\nImproved Dielectric Fill Refinement choice.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.padstack_definition",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.padstack_definition.html#padstack_definition",
        "title": "padstack_definition",
        "section": "padstack_definition",
        "text": "Padstack definition Name.\nName of the padstack definition.\npadstack_definition\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.padstack_definition",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.padstack_definition.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.padstack_definition",
        "title": "padstack_definition > padstack_definition > padstack_definition",
        "section": "padstack_definition > padstack_definition",
        "text": "property EDBPadstackInstance.padstack_definition\n\nPadstack definition Name.\n\nReturns\n\npython:str\n\nName of the padstack definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.refresh_components",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.refresh_components.html#refresh_components",
        "title": "refresh_components",
        "section": "refresh_components",
        "text": "Refresh the component dictionary.\nrefresh_components"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.refresh_components",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.refresh_components.html#pyedb.dotnet.database.components.Components.refresh_components",
        "title": "refresh_components > refresh_components > refresh_components",
        "section": "refresh_components > refresh_components",
        "text": "Components.refresh_components()\n\nRefresh the component dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.resistors",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.resistors.html#resistors",
        "title": "resistors",
        "section": "resistors",
        "text": "Resistors.\nDictionary of resistors.\nresistors\npython:dict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.resistors",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.resistors.html#pyedb.dotnet.database.components.Components.resistors",
        "title": "resistors > resistors > resistors",
        "section": "resistors > resistors",
        "text": "property Components.resistors\n\nResistors.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\nDictionary of resistors.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.resistors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_style",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_style.html#via_style",
        "title": "via_style",
        "section": "via_style",
        "text": "Via style.\nOptions:\n1- k25DViaWirebond.\n2- k25DViaRibbon.\n3- k25DViaMesh.\n4- k25DViaField.\n5- kNum25DViaStyle.\nvia_style\nk25DViaWirebond\nk25DViaRibbon\nk25DViaMesh\nk25DViaField\nkNum25DViaStyle\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_style",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_style.html#pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_style",
        "title": "via_style > via_style > via_style",
        "section": "via_style > via_style",
        "text": "property ViaSettings.via_style\n\nVia style.\nOptions:\n1- k25DViaWirebond.\n2- k25DViaRibbon.\n3- k25DViaMesh.\n4- k25DViaField.\n5- kNum25DViaStyle.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.component_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.component_defs.html#component_defs",
        "title": "component_defs",
        "section": "component_defs",
        "text": "Get all component definitions in the database.\ncomponent_defs\npython:list\nComponentDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.component_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.component_defs.html#pyedb.dotnet.edb.Edb.component_defs",
        "title": "component_defs > component_defs > component_defs",
        "section": "component_defs > component_defs",
        "text": "property Edb.component_defs\n\nGet all component definitions in the database.\n\nReturns\n\npython:list[ComponentDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent_enabled.html#air_box_horizontal_extent_enabled",
        "title": "air_box_horizontal_extent_enabled",
        "section": "air_box_horizontal_extent_enabled",
        "text": "Whether horizontal extent is enabled for the airbox.\nair_box_horizontal_extent_enabled"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent_enabled",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent_enabled.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_horizontal_extent_enabled",
        "title": "air_box_horizontal_extent_enabled > air_box_horizontal_extent_enabled > air_box_horizontal_extent_enabled",
        "section": "air_box_horizontal_extent_enabled > air_box_horizontal_extent_enabled",
        "text": "property HfssExtentInfo.air_box_horizontal_extent_enabled\n\nWhether horizontal extent is enabled for the airbox.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_simulation_settings.html#get_simulation_settings",
        "title": "get_simulation_settings",
        "section": "get_simulation_settings",
        "text": "get_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_simulation_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_simulation_settings",
        "title": "get_simulation_settings > get_simulation_settings > get_simulation_settings",
        "section": "get_simulation_settings > get_simulation_settings",
        "text": "SiwaveSimulationSetup.get_simulation_settings()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_si_slider",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_si_slider.html#set_si_slider",
        "title": "set_si_slider",
        "section": "set_si_slider",
        "text": "set_si_slider"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_si_slider",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_si_slider.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_si_slider",
        "title": "set_si_slider > set_si_slider > set_si_slider",
        "section": "set_si_slider > set_si_slider",
        "text": "AdvancedSettings.set_si_slider(value)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.add_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.add_net.html#add_net",
        "title": "add_net",
        "section": "add_net",
        "text": "Add a new net.\nThe name of the net to be added.\nadd_net\npython:str\nobject"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.add_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.add_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.add_net",
        "title": "add_net > add_net > add_net",
        "section": "add_net > add_net",
        "text": "EDBExtendedNetData.add_net(name)\n\nAdd a new net.\n\nParameters\n\nname\n\npython:str\n\nThe name of the net to be added.\n\nReturns\n\nobject\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.syslib",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.syslib.html#syslib",
        "title": "syslib",
        "section": "syslib",
        "text": "Get the project sys library.\nsyslib"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.syslib",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.syslib.html#pyedb.dotnet.database.materials.Materials.syslib",
        "title": "syslib > syslib > syslib",
        "section": "syslib > syslib",
        "text": "property Materials.syslib\n\nGet the project sys library.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component_pin.html#component_pin",
        "title": "component_pin",
        "section": "component_pin",
        "text": "Get component pin.\ncomponent_pin"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component_pin.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.component_pin",
        "title": "component_pin > component_pin > component_pin",
        "section": "component_pin > component_pin",
        "text": "property EDBPadstackInstance.component_pin\n\nGet component pin.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_pyaedt_cutout",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_pyaedt_cutout.html#use_pyaedt_cutout",
        "title": "use_pyaedt_cutout",
        "section": "use_pyaedt_cutout",
        "text": "Whether the default EDB cutout or a new PyAEDT cutout is used.\nuse_pyaedt_cutout"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_pyaedt_cutout",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_pyaedt_cutout.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_pyaedt_cutout",
        "title": "use_pyaedt_cutout > use_pyaedt_cutout > use_pyaedt_cutout",
        "section": "use_pyaedt_cutout > use_pyaedt_cutout",
        "text": "property SimulationConfigurationBatch.use_pyaedt_cutout\n\nWhether the default EDB cutout or a new PyAEDT cutout is used.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_data.CfgData",
        "href": "api/_autosummary/pyedb.configuration.cfg_data.CfgData.html#cfgdata",
        "title": "CfgData",
        "section": "CfgData",
        "text": "Manages configure data.\nCfgData"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_data.CfgData",
        "href": "api/_autosummary/pyedb.configuration.cfg_data.CfgData.html#pyedb.configuration.cfg_data.CfgData",
        "title": "CfgData > CfgData > CfgData",
        "section": "CfgData > CfgData",
        "text": "class pyedb.configuration.cfg_data.CfgData(pedb, **kwargs)\n\nManages configure data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_common.CfgBase.get_attributes.html#pyedb.configuration.cfg_common.CfgBase.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgBase.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupLength",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupLength.html#kmeshsetuplength",
        "title": "kMeshSetupLength",
        "section": "kMeshSetupLength",
        "text": "kMeshSetupLength"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupLength",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupLength.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOpType.kMeshSetupLength",
        "title": "kMeshSetupLength > kMeshSetupLength > kMeshSetupLength",
        "section": "kMeshSetupLength > kMeshSetupLength",
        "text": "MeshOpType.kMeshSetupLength = 'length'\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.position.html#position",
        "title": "position",
        "section": "position",
        "text": "Position in the setup list.\nposition"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.position.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property SiwaveSimulationSetup.position\n\nPosition in the setup list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.layer_snap_tol",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.layer_snap_tol.html#layer_snap_tol",
        "title": "layer_snap_tol",
        "section": "layer_snap_tol",
        "text": "Layer snap tolerance. Attempt to align independent stackups in the mesher.\nlayer_snap_tol\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.layer_snap_tol",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.layer_snap_tol.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.layer_snap_tol",
        "title": "layer_snap_tol > layer_snap_tol > layer_snap_tol",
        "section": "layer_snap_tol > layer_snap_tol",
        "text": "property AdvancedMeshSettings.layer_snap_tol\n\nLayer snap tolerance. Attempt to align independent stackups in the mesher.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_advanced_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_advanced_settings.html#dc_advanced_settings",
        "title": "dc_advanced_settings",
        "section": "dc_advanced_settings",
        "text": "Siwave DC advanced settings.\ndc_advanced_settings\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveDCAdvancedSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_advanced_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_advanced_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_advanced_settings",
        "title": "dc_advanced_settings > dc_advanced_settings > dc_advanced_settings",
        "section": "dc_advanced_settings > dc_advanced_settings",
        "text": "property SiwaveDCSimulationSetup.dc_advanced_settings\n\nSiwave DC advanced settings.\n\nReturns\n\npyedb.dotnet.database.edb_data.siwave_simulation_setup_data.SiwaveDCAdvancedSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_components_from_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_components_from_nets.html#get_components_from_nets",
        "title": "get_components_from_nets",
        "section": "get_components_from_nets",
        "text": "Retrieve components from a net list.\nName of the net list. The default is None.\nList of components that belong to the signal nets.\nget_components_from_nets\npython:str\noptional\nNone\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_components_from_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_components_from_nets.html#pyedb.dotnet.database.components.Components.get_components_from_nets",
        "title": "get_components_from_nets > get_components_from_nets > get_components_from_nets",
        "section": "get_components_from_nets > get_components_from_nets",
        "text": "Components.get_components_from_nets(netlist=None)\n\nRetrieve components from a net list.\n\nParameters\n\nnetlist\n\npython:str, optional\n\nName of the net list. The default is None.\n\nReturns\n\npython:list\n\nList of components that belong to the signal nets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sim_setup_info.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property SimulationSetup.sim_setup_info\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "Imports operation information from JSON.\napply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.apply.html#pyedb.configuration.cfg_operations.CfgOperations.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgOperations.apply()\n\nImports operation information from JSON.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_vertical",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_vertical.html#create_edge_port_vertical",
        "title": "create_edge_port_vertical",
        "section": "create_edge_port_vertical",
        "text": "Create a vertical edge port.\nPrimitive ID.\nCoordinate of the point to define the edge terminal.\nThe point must be on the target edge but not on the two\nends of the edge.\nName of the port. The default is None.\nImpedance of the port. The default value is 50.\nReference layer of the port. The default is None.\nType of the port. The default value is \"Gap\". Options are \"Gap\", \"Wave\".\nHorizontal extent factor. The default value is 5.\nVertical extent factor. The default value is 3.\nRadial extent factor. The default value is 0.\nLaunch Width of PEC. The default value is \"0.01mm\".\nPort name.\ncreate_edge_port_vertical\npython:int\npython:list\npython:str\noptional\nNone\npython:int\npython:float\noptional\n50\npython:str\noptional\nNone\npython:str\noptional\n\"Gap\"\n\"Gap\"\n\"Wave\"\npython:int\npython:float\noptional\n5\npython:int\npython:float\noptional\n3\npython:int\npython:float\noptional\n0\npython:str\noptional\n\"0.01mm\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_vertical",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_vertical.html#pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_vertical",
        "title": "create_edge_port_vertical > create_edge_port_vertical > create_edge_port_vertical",
        "section": "create_edge_port_vertical > create_edge_port_vertical",
        "text": "EdbHfss.create_edge_port_vertical(prim_id, point_on_edge, port_name=None, impedance=50, reference_layer=None, hfss_type='Gap', horizontal_extent_factor=5, vertical_extent_factor=3, pec_launch_width='0.01mm')\n\nCreate a vertical edge port.\n\nParameters\n\nprim_id\n\npython:int\n\nPrimitive ID.\n\npoint_on_edge\n\npython:list\n\nCoordinate of the point to define the edge terminal.\nThe point must be on the target edge but not on the two\nends of the edge.\n\nport_name\n\npython:str, optional\n\nName of the port. The default is None.\n\nimpedance\n\npython:int, python:float, optional\n\nImpedance of the port. The default value is 50.\n\nreference_layer\n\npython:str, optional\n\nReference layer of the port. The default is None.\n\nhfss_type\n\npython:str, optional\n\nType of the port. The default value is \"Gap\". Options are \"Gap\", \"Wave\".\n\nhorizontal_extent_factor\n\npython:int, python:float, optional\n\nHorizontal extent factor. The default value is 5.\n\nvertical_extent_factor\n\npython:int, python:float, optional\n\nVertical extent factor. The default value is 3.\n\nradial_extent_factor\n\npython:int, python:float, optional\n\nRadial extent factor. The default value is 0.\n\npec_launch_width\n\npython:str, optional\n\nLaunch Width of PEC. The default value is \"0.01mm\".\n\nReturns\n\npython:str\n\nPort name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_statistics",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_statistics.html#get_statistics",
        "title": "get_statistics",
        "section": "get_statistics",
        "text": "Get the EDBStatistics object.\nget_statistics\nEDBStatistics\nobject\nfrom\nthe\nloaded"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_statistics",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_statistics.html#pyedb.dotnet.edb.Edb.get_statistics",
        "title": "get_statistics > get_statistics > get_statistics",
        "section": "get_statistics > get_statistics",
        "text": "Edb.get_statistics(compute_area=False)\n\nGet the EDBStatistics object.\n\nReturns\n\nEDBStatistics object from the loaded layout.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_settings.html#dc_settings",
        "title": "dc_settings",
        "section": "dc_settings",
        "text": "SIwave DC setting.\ndc_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_settings",
        "title": "dc_settings > dc_settings > dc_settings",
        "section": "dc_settings > dc_settings",
        "text": "property SiwaveDCSimulationSetup.dc_settings\n\nSIwave DC setting.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.max_coupled_lines",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.max_coupled_lines.html#max_coupled_lines",
        "title": "max_coupled_lines",
        "section": "max_coupled_lines",
        "text": "Maximum number of coupled lines to build the new coupled transmission line model.\nmax_coupled_lines\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.max_coupled_lines",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.max_coupled_lines.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.max_coupled_lines",
        "title": "max_coupled_lines > max_coupled_lines > max_coupled_lines",
        "section": "max_coupled_lines > max_coupled_lines",
        "text": "property AdvancedSettings.max_coupled_lines\n\nMaximum number of coupled lines to build the new coupled transmission line model.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed.html#deembed",
        "title": "deembed",
        "section": "deembed",
        "text": "Inductance value of the deembed gap port.\ndeembed"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.deembed.html#pyedb.dotnet.database.edb_data.ports.GapPort.deembed",
        "title": "deembed > deembed > deembed",
        "section": "deembed > deembed",
        "text": "property GapPort.deembed\n\nInductance value of the deembed gap port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_void_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_void_area_to_mesh.html#dc_min_void_area_to_mesh",
        "title": "dc_min_void_area_to_mesh",
        "section": "dc_min_void_area_to_mesh",
        "text": "DC minimum area below which voids are ignored.\ndc_min_void_area_to_mesh\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_void_area_to_mesh",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_void_area_to_mesh.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.dc_min_void_area_to_mesh",
        "title": "dc_min_void_area_to_mesh > dc_min_void_area_to_mesh > dc_min_void_area_to_mesh",
        "section": "dc_min_void_area_to_mesh > dc_min_void_area_to_mesh",
        "text": "property DCAdvancedSettings.dc_min_void_area_to_mesh\n\nDC minimum area below which voids are ignored.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_on_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_on_polygon.html#create_edge_port_on_polygon",
        "title": "create_edge_port_on_polygon",
        "section": "create_edge_port_on_polygon",
        "text": "Create lumped port between two edges from two different polygons. Can also create a vertical port when\nthe reference layer name is only provided. When a port is created between two edge from two polygons which don’t\nbelong to the same layer, a circuit port will be automatically created instead of lumped. To enforce the circuit\nport instead of lumped,use the boolean force_circuit_port.\nEdb.Cell.Primitive.Polygon object.\nEdb.Cell.Primitive.Polygon object.\nlist[float, float] with values provided in meter.\nlist[float, float] with values provided in meter.\nstr the layer name.\nstr.\nfloat, impedance value.\ncreate_edge_port_on_polygon\nThe\nEDB\npolygon\nobject\nused\nto\nassign\nthe\nThe\nEDB\npolygon\nobject\nused\nto\ndefine\nthe\nport\nThe\ncoordinate\nof\nthe\npoint\nto\ndefine\nthe\nedge\nterminal\nof\nthe\nThis\npoint\nmust\nbe\nsame\nas\nterminal_point\nbut\nused\nfor\ndefining\nthe\nreference\nlocation\non\nthe\nName\nused\nto\ndefine\nport\nreference\nfor\nvertical\nName\nof\nthe\nport\nimpedance\nDefault\nvalue\nis"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_on_polygon",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_on_polygon.html#pyedb.dotnet.database.hfss.EdbHfss.create_edge_port_on_polygon",
        "title": "create_edge_port_on_polygon > create_edge_port_on_polygon > create_edge_port_on_polygon",
        "section": "create_edge_port_on_polygon > create_edge_port_on_polygon",
        "text": "EdbHfss.create_edge_port_on_polygon(polygon=None, reference_polygon=None, terminal_point=None, reference_point=None, reference_layer=None, port_name=None, port_impedance=50.0, force_circuit_port=False)\n\nCreate lumped port between two edges from two different polygons. Can also create a vertical port when\nthe reference layer name is only provided. When a port is created between two edge from two polygons which don’t\nbelong to the same layer, a circuit port will be automatically created instead of lumped. To enforce the circuit\nport instead of lumped,use the boolean force_circuit_port.\n\nParameters\n\npolygon\n\nThe EDB polygon object used to assign the port.\n\nEdb.Cell.Primitive.Polygon object.\n\nreference_polygon\n\nThe EDB polygon object used to define the port reference.\n\nEdb.Cell.Primitive.Polygon object.\n\nterminal_point\n\nThe coordinate of the point to define the edge terminal of the port. This point must be\n\n\n\nlocated on the edge of the polygon where the port has to be placed. For instance taking the middle point\n\n\n\nof an edge is a good practice but any point of the edge should be valid. Taking a corner might cause unwanted\n\n\n\nport location.\n\nlist[float, float] with values provided in meter.\n\nreference_point\n\nsame as terminal_point but used for defining the reference location on the edge.\n\nlist[float, float] with values provided in meter.\n\nreference_layer\n\nName used to define port reference for vertical ports.\n\nstr the layer name.\n\nport_name\n\nName of the port.\n\nstr.\n\nport_impedance\n\nport impedance value. Default value is 50 Ohms.\n\nfloat, impedance value.\n\nforce_circuit_port ; used to force circuit port creation instead of lumped. Works for vertical and coplanar\n\n\n\nports.\n\n\n\nExamples\n\n>>> edb_path = path_to_edb\n>>> edb = Edb(edb_path)\n>>> poly_list = [poly for poly in list(edb.layout.primitives) if poly.GetPrimitiveType() == 2]\n>>> port_poly = [poly for poly in poly_list if poly.GetId() == 17][0]\n>>> ref_poly = [poly for poly in poly_list if poly.GetId() == 19][0]\n>>> port_location = [-65e-3, -13e-3]\n>>> ref_location = [-63e-3, -13e-3]\n>>> edb.hfss.create_edge_port_on_polygon(polygon=port_poly, reference_polygon=ref_poly,\n>>> terminal_point=port_location, reference_point=ref_location)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_net_by_name",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_net_by_name.html#get_net_by_name",
        "title": "get_net_by_name",
        "section": "get_net_by_name",
        "text": "Find a net by name.\nget_net_by_name"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_net_by_name",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_net_by_name.html#pyedb.dotnet.database.nets.EdbNets.get_net_by_name",
        "title": "get_net_by_name > get_net_by_name > get_net_by_name",
        "section": "get_net_by_name > get_net_by_name",
        "text": "EdbNets.get_net_by_name(net_name)\n\nFind a net by name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_thickness",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_thickness.html#fin_thickness",
        "title": "fin_thickness",
        "section": "fin_thickness",
        "text": "The fin thickness.\nfin_thickness"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_thickness",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_thickness.html#pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_thickness",
        "title": "fin_thickness > fin_thickness > fin_thickness",
        "section": "fin_thickness > fin_thickness",
        "text": "property HeatSink.fin_thickness\n\nThe fin thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.snap_length_threshold",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.snap_length_threshold.html#snap_length_threshold",
        "title": "snap_length_threshold",
        "section": "snap_length_threshold",
        "text": "Retrieve the boolean to activate the snapping threshold feature.\nsnap_length_threshold\nTrue\nactivate\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.snap_length_threshold",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.snap_length_threshold.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.snap_length_threshold",
        "title": "snap_length_threshold > snap_length_threshold > snap_length_threshold",
        "section": "snap_length_threshold > snap_length_threshold",
        "text": "property SimulationConfigurationAc.snap_length_threshold\n\nRetrieve the boolean to activate the snapping threshold feature.\n\nReturns\n\nbool\n\n\n\nTrue activate False deactivated.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_resistor_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_resistor_on_pin.html#create_resistor_on_pin",
        "title": "create_resistor_on_pin",
        "section": "create_resistor_on_pin",
        "text": "Create a Resistor boundary between two given pins.\nPositive Pin.\nNegative Pin.\nResistance value. The default is 1.\nName of the resistor. The default is \"\".\nName of the Resistor.\ncreate_resistor_on_pin\nObject\nObject\npython:float\noptional\n1\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_resistor_on_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_resistor_on_pin.html#pyedb.dotnet.database.hfss.EdbHfss.create_resistor_on_pin",
        "title": "create_resistor_on_pin > create_resistor_on_pin > create_resistor_on_pin",
        "section": "create_resistor_on_pin > create_resistor_on_pin",
        "text": "EdbHfss.create_resistor_on_pin(pos_pin, neg_pin, rvalue=1, resistor_name='')\n\nCreate a Resistor boundary between two given pins.\n\nParameters\n\npos_pin\n\nObject\n\nPositive Pin.\n\nneg_pin\n\nObject\n\nNegative Pin.\n\nrvalue\n\npython:float, optional\n\nResistance value. The default is 1.\n\nresistor_name\n\npython:str, optional\n\nName of the resistor. The default is \"\".\n\nReturns\n\npython:str\n\nName of the Resistor.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> pins =edbapp.components.get_pin_from_component(\"U2A5\")\n>>> edbapp.hfss.create_resistor_on_pin(pins[0], pins[1],50,\"res_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.relative_s_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.relative_s_error.html#relative_s_error",
        "title": "relative_s_error",
        "section": "relative_s_error",
        "text": "S-parameter error tolerance.\nrelative_s_error\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.relative_s_error",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.relative_s_error.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.relative_s_error",
        "title": "relative_s_error > relative_s_error > relative_s_error",
        "section": "relative_s_error > relative_s_error",
        "text": "property SweepData.relative_s_error\n\nS-parameter error tolerance.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.configuration",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.configuration.html#configuration",
        "title": "configuration",
        "section": "configuration",
        "text": "Edb project configuration from file.\nconfiguration"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.configuration",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.configuration.html#pyedb.dotnet.edb.Edb.configuration",
        "title": "configuration > configuration > configuration",
        "section": "configuration > configuration",
        "text": "property Edb.configuration\n\nEdb project configuration from file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.version",
        "href": "api/_autosummary/pyedb.siwave.Siwave.version.html#version",
        "title": "version",
        "section": "version",
        "text": "version"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.version",
        "href": "api/_autosummary/pyedb.siwave.Siwave.version.html#pyedb.siwave.Siwave.version",
        "title": "version > version > version",
        "section": "version > version",
        "text": "property Siwave.version\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.set_coax_port_attributes",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.set_coax_port_attributes.html#set_coax_port_attributes",
        "title": "set_coax_port_attributes",
        "section": "set_coax_port_attributes",
        "text": "Set coaxial port attribute with forcing default impedance to 50 Ohms and adjusting the coaxial extent radius.\nEdb_DATA.SimulationConfiguration object.\nTrue when succeeded, False when failed.\nset_coax_port_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.set_coax_port_attributes",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.set_coax_port_attributes.html#pyedb.dotnet.database.hfss.EdbHfss.set_coax_port_attributes",
        "title": "set_coax_port_attributes > set_coax_port_attributes > set_coax_port_attributes",
        "section": "set_coax_port_attributes > set_coax_port_attributes",
        "text": "EdbHfss.set_coax_port_attributes(simulation_setup=None)\n\nSet coaxial port attribute with forcing default impedance to 50 Ohms and adjusting the coaxial extent radius.\n\nParameters\n\nsimulation_setup\n\nEdb_DATA.SimulationConfiguration object.\n\nReturns\n\nbool\n\nTrue when succeeded, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_ir_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_ir_settings.html#dc_ir_settings",
        "title": "dc_ir_settings",
        "section": "dc_ir_settings",
        "text": "DC IR settings.\ndc_ir_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_ir_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_ir_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.dc_ir_settings",
        "title": "dc_ir_settings > dc_ir_settings > dc_ir_settings",
        "section": "dc_ir_settings > dc_ir_settings",
        "text": "property SiwaveDCSimulationSetup.dc_ir_settings\n\nDC IR settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_error_z0",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_error_z0.html#use_error_z0",
        "title": "use_error_z0",
        "section": "use_error_z0",
        "text": "Retrieve value for the error on Z0 for the port.\nuse_error_z0\npython:float\nThe\nZ0"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_error_z0",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_error_z0.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.use_error_z0",
        "title": "use_error_z0 > use_error_z0 > use_error_z0",
        "section": "use_error_z0 > use_error_z0",
        "text": "property SimulationConfigurationAc.use_error_z0\n\nRetrieve value for the error on Z0 for the port.\n\nReturns\n\npython:float\n\n\n\nThe Z0 value.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_parameters_to_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_parameters_to_edb.html#set_parameters_to_edb",
        "title": "set_parameters_to_edb",
        "section": "set_parameters_to_edb",
        "text": "Create sources.\nset_parameters_to_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_parameters_to_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.set_parameters_to_edb.html#pyedb.configuration.cfg_ports_sources.CfgSource.set_parameters_to_edb",
        "title": "set_parameters_to_edb > set_parameters_to_edb > set_parameters_to_edb",
        "section": "set_parameters_to_edb > set_parameters_to_edb",
        "text": "CfgSource.set_parameters_to_edb()\n\nCreate sources.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Edb Dotnet Api Database Delete.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.delete.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "EDBExtendedNetData.delete()\n\nEdb Dotnet Api Database Delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "enabled"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.enabled.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property HFSSPISimulationSettings.enabled\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.include_only_selected_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.include_only_selected_nets.html#include_only_selected_nets",
        "title": "include_only_selected_nets",
        "section": "include_only_selected_nets",
        "text": "Include only net selection in the project. It is only used when do_cutout is set to False.\nWill also be ignored if signal_nets and power_nets are None, resulting project will have all nets included.\nTrue or False. Default value is False.\ninclude_only_selected_nets\ndo_cutout\nFalse\nNone\nTrue\nFalse\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.include_only_selected_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.include_only_selected_nets.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.include_only_selected_nets",
        "title": "include_only_selected_nets > include_only_selected_nets > include_only_selected_nets",
        "section": "include_only_selected_nets > include_only_selected_nets",
        "text": "property SimulationConfigurationBatch.include_only_selected_nets\n\nInclude only net selection in the project. It is only used when do_cutout is set to False.\nWill also be ignored if signal_nets and power_nets are None, resulting project will have all nets included.\n\nReturns\n\nbool\n\nTrue or False. Default value is False.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers.html#via_layers",
        "title": "via_layers",
        "section": "via_layers",
        "text": "Layers.\nList of layers.\nvia_layers\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers",
        "title": "via_layers > via_layers > via_layers",
        "section": "via_layers > via_layers",
        "text": "property EDBPadstack.via_layers\n\nLayers.\n\nReturns\n\npython:list\n\nList of layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.general_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.general_settings.html#general_settings",
        "title": "general_settings",
        "section": "general_settings",
        "text": "general_settings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.general_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.general_settings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSettings.general_settings",
        "title": "general_settings > general_settings > general_settings",
        "section": "general_settings > general_settings",
        "text": "property RaptorXSimulationSettings.general_settings\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_rlc_component.html#create_rlc_component",
        "title": "create_rlc_component",
        "section": "create_rlc_component",
        "text": "Create physical Rlc component.\nList of EDB pins, length must be 2, since only 2 pins component are currently supported.\nIt can be an dotnet.database.edb_data.padstacks_data.EDBPadstackInstance object or\nan Edb Padstack Instance object.\nComponent definition name.\nResistor value.\nCapacitance value.\nInductor value.\nUsing parallel model when True, series when False.\nCreated EDB component.\ncreate_rlc_component\npython:list\npython:str\npython:float\npython:float\npython:float\nTrue\nFalse\nComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.create_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.create_rlc_component.html#pyedb.dotnet.database.components.Components.create_rlc_component",
        "title": "create_rlc_component > create_rlc_component > create_rlc_component",
        "section": "create_rlc_component > create_rlc_component",
        "text": "Components.create_rlc_component(pins, component_name='', r_value=None, c_value=None, l_value=None, is_parallel=False)\n\nCreate physical Rlc component.\n\nParameters\n\npins\n\npython:list\n\nList of EDB pins, length must be 2, since only 2 pins component are currently supported.\nIt can be an dotnet.database.edb_data.padstacks_data.EDBPadstackInstance object or\nan Edb Padstack Instance object.\n\ncomponent_name\n\npython:str\n\nComponent definition name.\n\nr_value\n\npython:float\n\nResistor value.\n\nc_value\n\npython:float\n\nCapacitance value.\n\nl_value\n\npython:float\n\nInductor value.\n\nis_parallel\n\nbool\n\nUsing parallel model when True, series when False.\n\nReturns\n\nComponent\n\nCreated EDB component.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias.html#split_to_microvias",
        "title": "split_to_microvias",
        "section": "split_to_microvias",
        "text": "Convert actual padstack definition to multiple microvias definitions.\nsplit_to_microvias\nList\nof\npyedb.dotnet.database.padstackEDBPadstack"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.split_to_microvias",
        "title": "split_to_microvias > split_to_microvias > split_to_microvias",
        "section": "split_to_microvias > split_to_microvias",
        "text": "EDBPadstack.split_to_microvias()\n\nConvert actual padstack definition to multiple microvias definitions.\n\nReturns\n\nList of pyedb.dotnet.database.padstackEDBPadstack\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_coax_port_radial_extension",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_coax_port_radial_extension.html#use_default_coax_port_radial_extension",
        "title": "use_default_coax_port_radial_extension",
        "section": "use_default_coax_port_radial_extension",
        "text": "Retrieve the boolean for using the default coaxial port extension value.\nTrue when the default value is used False if not.\nuse_default_coax_port_radial_extension\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_coax_port_radial_extension",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_coax_port_radial_extension.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.use_default_coax_port_radial_extension",
        "title": "use_default_coax_port_radial_extension > use_default_coax_port_radial_extension > use_default_coax_port_radial_extension",
        "section": "use_default_coax_port_radial_extension > use_default_coax_port_radial_extension",
        "text": "property SimulationConfigurationBatch.use_default_coax_port_radial_extension\n\nRetrieve the boolean for using the default coaxial port extension value.\n\nReturns\n\nbool\n\nTrue when the default value is used False if not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_conductor_modeling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_conductor_modeling.html#signal_nets_conductor_modeling",
        "title": "signal_nets_conductor_modeling",
        "section": "signal_nets_conductor_modeling",
        "text": "Conductor Modeling.\n0: MeshInside,\n1: ImpedanceBoundary\nsignal_nets_conductor_modeling"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_conductor_modeling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_conductor_modeling.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.signal_nets_conductor_modeling",
        "title": "signal_nets_conductor_modeling > signal_nets_conductor_modeling > signal_nets_conductor_modeling",
        "section": "signal_nets_conductor_modeling > signal_nets_conductor_modeling",
        "text": "property HFSSPISimulationSettings.signal_nets_conductor_modeling: int\n\nConductor Modeling.\n0: MeshInside,\n1: ImpedanceBoundary\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.honor_user_dielectric",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.honor_user_dielectric.html#honor_user_dielectric",
        "title": "honor_user_dielectric",
        "section": "honor_user_dielectric",
        "text": "Honor user dielectric.\nhonor_user_dielectric"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.honor_user_dielectric",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.honor_user_dielectric.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.honor_user_dielectric",
        "title": "honor_user_dielectric > honor_user_dielectric > honor_user_dielectric",
        "section": "honor_user_dielectric > honor_user_dielectric",
        "text": "property HfssExtentInfo.honor_user_dielectric\n\nHonor user dielectric.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.html#cfgports",
        "title": "CfgPorts",
        "section": "CfgPorts",
        "text": "CfgPorts.apply()\n\nCfgPorts.export_properties()\n\nCfgPorts.get_data_from_db()\n\nCfgPorts\nCfgPorts.apply\nCfgPorts.export_properties\nCfgPorts.get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.html#pyedb.configuration.cfg_ports_sources.CfgPorts",
        "title": "CfgPorts > CfgPorts > CfgPorts",
        "section": "CfgPorts > CfgPorts",
        "text": "class pyedb.configuration.cfg_ports_sources.CfgPorts(pedb, ports_data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgPorts.apply()\n\n\n\nCfgPorts.export_properties()\n\n\n\nCfgPorts.get_data_from_db()\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_hfss_prop.html#set_hfss_prop",
        "title": "set_hfss_prop",
        "section": "set_hfss_prop",
        "text": "Set HFSS properties.\nMaterial property name to be set.\nWhether to do solve inside.\nset_hfss_prop\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_hfss_prop.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_hfss_prop",
        "title": "set_hfss_prop > set_hfss_prop > set_hfss_prop",
        "section": "set_hfss_prop > set_hfss_prop",
        "text": "EDBPadstackInstance.set_hfss_prop(material, solve_inside)\n\nSet HFSS properties.\n\nParameters\n\nmaterial\n\npython:str\n\nMaterial property name to be set.\n\nsolve_inside\n\nbool\n\nWhether to do solve inside.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_elements.html#restrict_max_elements",
        "title": "restrict_max_elements",
        "section": "restrict_max_elements",
        "text": "Whether to restrict maximum number  of elements.\nrestrict_max_elements"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_elements.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_elements",
        "title": "restrict_max_elements > restrict_max_elements > restrict_max_elements",
        "section": "restrict_max_elements > restrict_max_elements",
        "text": "property LengthMeshOperation.restrict_max_elements\n\nWhether to restrict maximum number  of elements.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.add_port_on_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.add_port_on_rlc_component.html#add_port_on_rlc_component",
        "title": "add_port_on_rlc_component",
        "section": "add_port_on_rlc_component",
        "text": "Deactivate RLC component and replace it with a circuit port.\nThe circuit port supports only two-pin components.\nReference designator of the RLC component.\nTrue will replace RLC component by circuit ports, False gap ports compatible with HFSS 3D modeler\nexport.\nWhether to define the PEC boundary, The default is False. If set to True,\na perfect short is created between the pin and impedance is ignored. This\nparameter is only supported on a port created between two pins, such as\nwhen there is no pin group.\nTrue when successful, False when failed.\nadd_port_on_rlc_component\npython:str\nTrue\nFalse\noptional\nFalse\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.add_port_on_rlc_component",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.add_port_on_rlc_component.html#pyedb.dotnet.database.components.Components.add_port_on_rlc_component",
        "title": "add_port_on_rlc_component > add_port_on_rlc_component > add_port_on_rlc_component",
        "section": "add_port_on_rlc_component > add_port_on_rlc_component",
        "text": "Components.add_port_on_rlc_component(component=None, circuit_ports=True, pec_boundary=False)\n\nDeactivate RLC component and replace it with a circuit port.\nThe circuit port supports only two-pin components.\n\nParameters\n\ncomponent\n\npython:str\n\nReference designator of the RLC component.\n\ncircuit_ports\n\nbool\n\nTrue will replace RLC component by circuit ports, False gap ports compatible with HFSS 3D modeler\nexport.\n\npec_boundary\n\nbool, optional\n\nWhether to define the PEC boundary, The default is False. If set to True,\na perfect short is created between the pin and impedance is ignored. This\nparameter is only supported on a port created between two pins, such as\nwhen there is no pin group.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequencies",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequencies.html#frequencies",
        "title": "frequencies",
        "section": "frequencies",
        "text": "List of frequency points.\nfrequencies"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequencies",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequencies.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.frequencies",
        "title": "frequencies > frequencies > frequencies",
        "section": "frequencies > frequencies",
        "text": "property SweepData.frequencies\n\nList of frequency points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.get_attributes.html#get_attributes",
        "title": "get_attributes",
        "section": "get_attributes",
        "text": "get_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.get_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.get_attributes.html#pyedb.configuration.cfg_package_definition.CfgHeatSink.get_attributes",
        "title": "get_attributes > get_attributes > get_attributes",
        "section": "get_attributes > get_attributes",
        "text": "CfgHeatSink.get_attributes(exclude=None)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.truncate_airbox_at_ground",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.truncate_airbox_at_ground.html#truncate_airbox_at_ground",
        "title": "truncate_airbox_at_ground",
        "section": "truncate_airbox_at_ground",
        "text": "Retrieve the boolean to truncate hfss air box at ground.\nTrue activated, False deactivated.\ntruncate_airbox_at_ground\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.truncate_airbox_at_ground",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.truncate_airbox_at_ground.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.truncate_airbox_at_ground",
        "title": "truncate_airbox_at_ground > truncate_airbox_at_ground > truncate_airbox_at_ground",
        "section": "truncate_airbox_at_ground > truncate_airbox_at_ground",
        "text": "property SimulationConfigurationBatch.truncate_airbox_at_ground\n\nRetrieve the boolean to truncate hfss air box at ground.\n\nReturns\n\nbool\n\nTrue activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.voltage_regulator_modules",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.voltage_regulator_modules.html#voltage_regulator_modules",
        "title": "voltage_regulator_modules",
        "section": "voltage_regulator_modules",
        "text": "Get all voltage regulator modules\nvoltage_regulator_modules"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.voltage_regulator_modules",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.voltage_regulator_modules.html#pyedb.dotnet.database.siwave.EdbSiwave.voltage_regulator_modules",
        "title": "voltage_regulator_modules > voltage_regulator_modules > voltage_regulator_modules",
        "section": "voltage_regulator_modules > voltage_regulator_modules",
        "text": "property EdbSiwave.voltage_regulator_modules\n\nGet all voltage regulator modules\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed.html#deembed",
        "title": "deembed",
        "section": "deembed",
        "text": "Whether deembed is active.\ndeembed"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.deembed.html#pyedb.dotnet.database.edb_data.ports.WavePort.deembed",
        "title": "deembed > deembed > deembed",
        "section": "deembed > deembed",
        "text": "property WavePort.deembed\n\nWhether deembed is active.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adv_dc_extrapolation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adv_dc_extrapolation.html#adv_dc_extrapolation",
        "title": "adv_dc_extrapolation",
        "section": "adv_dc_extrapolation",
        "text": "Flag indicating if advanced DC extrapolation is turned on.\nTrue if advanced DC Extrapolation is used, False otherwise.\nadv_dc_extrapolation\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adv_dc_extrapolation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adv_dc_extrapolation.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adv_dc_extrapolation",
        "title": "adv_dc_extrapolation > adv_dc_extrapolation > adv_dc_extrapolation",
        "section": "adv_dc_extrapolation > adv_dc_extrapolation",
        "text": "property SweepData.adv_dc_extrapolation\n\nFlag indicating if advanced DC extrapolation is turned on.\n\nReturns\n\nbool\n\nTrue if advanced DC Extrapolation is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_frequency_sweep",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_frequency_sweep.html#add_frequency_sweep",
        "title": "add_frequency_sweep",
        "section": "add_frequency_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep.\nList of frequency points.\nadd_frequency_sweep\npython:str\noptional\npython:list\noptional\npyedb.dotnet.database.edb_data.simulation_setup.EdbFrequencySweep"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_frequency_sweep",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_frequency_sweep.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.add_frequency_sweep",
        "title": "add_frequency_sweep > add_frequency_sweep > add_frequency_sweep",
        "section": "add_frequency_sweep > add_frequency_sweep",
        "text": "RaptorXSimulationSetup.add_frequency_sweep(name=None, frequency_sweep=None)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep.\n\nfrequency_sweep\n\npython:list, optional\n\nList of frequency points.\n\nReturns\n\npyedb.dotnet.database.edb_data.simulation_setup.EdbFrequencySweep\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_hfss_setup(\"setup1\")\n>>> setup1.add_frequency_sweep(frequency_sweep=[\n...                           [\"linear count\", \"0\", \"1kHz\", 1],\n...                           [\"log scale\", \"1kHz\", \"0.1GHz\", 10],\n...                           [\"linear scale\", \"0.1GHz\", \"10GHz\", \"0.1GHz\"],\n...                           ])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_layout_statistics",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_layout_statistics.html#get_layout_statistics",
        "title": "get_layout_statistics",
        "section": "get_layout_statistics",
        "text": "Return EDBStatistics object from a layout.\nWhen True evaluates the layout metal surface, can take time-consuming,\navoid using this option on large design.\nget_layout_statistics\noptional\nEDBStatistics"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_layout_statistics",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_layout_statistics.html#pyedb.dotnet.database.modeler.Modeler.get_layout_statistics",
        "title": "get_layout_statistics > get_layout_statistics > get_layout_statistics",
        "section": "get_layout_statistics > get_layout_statistics",
        "text": "Modeler.get_layout_statistics(evaluate_area=False, net_list=None)\n\nReturn EDBStatistics object from a layout.\n\nParameters\n\nevaluate_area\n\noptional bool\n\nWhen True evaluates the layout metal surface, can take time-consuming,\navoid using this option on large design.\n\nReturns\n\nEDBStatistics object.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pin_group_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pin_group_terminal_reference_pin.html#get_pin_group_terminal_reference_pin",
        "title": "get_pin_group_terminal_reference_pin",
        "section": "get_pin_group_terminal_reference_pin",
        "text": "Return a list of pins and serves terminals connected to pingroups.\nPreferred reference net name.\nget_pin_group_terminal_reference_pin\npython:str\noptional\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pin_group_terminal_reference_pin",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_pin_group_terminal_reference_pin.html#pyedb.dotnet.database.edb_data.ports.GapPort.get_pin_group_terminal_reference_pin",
        "title": "get_pin_group_terminal_reference_pin > get_pin_group_terminal_reference_pin > get_pin_group_terminal_reference_pin",
        "section": "get_pin_group_terminal_reference_pin > get_pin_group_terminal_reference_pin",
        "text": "GapPort.get_pin_group_terminal_reference_pin(gnd_net_name_preference=None)\n\nReturn a list of pins and serves terminals connected to pingroups.\n\nParameters\n\ngnd_net_name_preference\n\npython:str, optional\n\nPreferred reference net name.\n\nReturns\n\ndotnet.database.edb_data.padstack_data.EDBPadstackInstance\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_net.html#create_current_source_on_net",
        "title": "create_current_source_on_net",
        "section": "create_current_source_on_net",
        "text": "Create a current source.\nName of the positive component.\nName of the positive net.\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\nName of the negative net name. The default is None which will look for GND Nets.\nValue for the current. The default is 0.1.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nThe name of the source.\ncreate_current_source_on_net\npython:str\npython:str\npython:str\noptional\nNone\npython:str\noptional\nNone\npython:float\noptional\n0.1\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_net.html#pyedb.dotnet.database.siwave.EdbSiwave.create_current_source_on_net",
        "title": "create_current_source_on_net > create_current_source_on_net > create_current_source_on_net",
        "section": "create_current_source_on_net > create_current_source_on_net",
        "text": "EdbSiwave.create_current_source_on_net(positive_component_name, positive_net_name, negative_component_name=None, negative_net_name=None, current_value=0.1, phase_value=0, source_name='')\n\nCreate a current source.\n\nParameters\n\npositive_component_name\n\npython:str\n\nName of the positive component.\n\npositive_net_name\n\npython:str\n\nName of the positive net.\n\nnegative_component_name\n\npython:str, optional\n\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\n\nnegative_net_name\n\npython:str, optional\n\nName of the negative net name. The default is None which will look for GND Nets.\n\ncurrent_value\n\npython:float, optional\n\nValue for the current. The default is 0.1.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nThe name of the source.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edb.siwave.create_current_source_on_net(\"U2A5\", \"V1P5_S3\", \"U2A5\", \"GND\", 0.1, 0, \"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.html#configuration",
        "title": "Configuration",
        "section": "Configuration",
        "text": "Enables export and import of a JSON configuration file that can be applied to a new or existing design.\nConfiguration.export(file_path[, stackup, ...])\nExport the configuration data from layout to a file.\nConfiguration.get_data_from_db(**kwargs)\nGet configuration data from layout.\nConfiguration.load(config_file[, append, ...])\nImport configuration settings from a configure file.\nConfiguration.run(**kwargs)\nApply configuration settings to the current design\nConfiguration\nConfiguration.export\nConfiguration.get_data_from_db\nConfiguration.load\nConfiguration.run"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.html#pyedb.configuration.configuration.Configuration",
        "title": "Configuration > Configuration > Configuration",
        "section": "Configuration > Configuration",
        "text": "class pyedb.configuration.configuration.Configuration(pedb)\n\nEnables export and import of a JSON configuration file that can be applied to a new or existing design.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nConfiguration.export(file_path[, stackup, ...])\n\nExport the configuration data from layout to a file.\n\nConfiguration.get_data_from_db(**kwargs)\n\nGet configuration data from layout.\n\nConfiguration.load(config_file[, append, ...])\n\nImport configuration settings from a configure file.\n\nConfiguration.run(**kwargs)\n\nApply configuration settings to the current design\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.probes",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.probes.html#probes",
        "title": "probes",
        "section": "probes",
        "text": "Get all probes.\nprobes"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.probes",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.probes.html#pyedb.dotnet.database.siwave.EdbSiwave.probes",
        "title": "probes > probes > probes",
        "section": "probes > probes",
        "text": "property EdbSiwave.probes\n\nGet all probes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values.html#parameters_values",
        "title": "parameters_values",
        "section": "parameters_values",
        "text": "Parameters.\nList of parameters.\nparameters_values\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values",
        "title": "parameters_values > parameters_values > parameters_values",
        "section": "parameters_values > parameters_values",
        "text": "property EDBPadProperties.parameters_values\n\nParameters.\n\nReturns\n\npython:list\n\nList of parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net_name.html#net_name",
        "title": "net_name",
        "section": "net_name",
        "text": "Get the primitive layer name.\nnet_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net_name.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net_name",
        "title": "net_name > net_name > net_name",
        "section": "net_name > net_name",
        "text": "property EdbPolygon.net_name\n\nGet the primitive layer name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.sources",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.sources.html#sources",
        "title": "sources",
        "section": "sources",
        "text": "Retrieve the source list.\nsources\ndotnet.database.edb_data.sources.Source"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.sources",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.sources.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.sources",
        "title": "sources > sources > sources",
        "section": "sources > sources",
        "text": "property SimulationConfigurationBatch.sources\n\nRetrieve the source list.\n\nReturns\n\ndotnet.database.edb_data.sources.Source\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.load",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.load.html#load",
        "title": "load",
        "section": "load",
        "text": "Import stackup from a file. The file format can be XML, CSV, or JSON. Valid control file must\nhave the same number of signal layers. Signals layers can be renamed. Dielectric layers can be\nadded and deleted.\nPath to stackup file or dict with stackup details.\nIf rename is False then layer in layout not found in the stackup file are deleted.\nOtherwise, if the number of layer in the stackup file equals the number of stackup layer\nin the layout, layers are renamed according the file.\nNote that layer order matters, and has to be writtent from top to bottom layer in the file.\nTrue when successful, False when failed.\nload\npython:str\npython:dict\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.load",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.load.html#pyedb.dotnet.database.stackup.Stackup.load",
        "title": "load > load > load",
        "section": "load > load",
        "text": "Stackup.load(file_path, rename=False)\n\nImport stackup from a file. The file format can be XML, CSV, or JSON. Valid control file must\nhave the same number of signal layers. Signals layers can be renamed. Dielectric layers can be\nadded and deleted.\n\nParameters\n\nfile_path\n\npython:str, python:dict\n\nPath to stackup file or dict with stackup details.\n\nrename\n\nbool\n\nIf rename is False then layer in layout not found in the stackup file are deleted.\nOtherwise, if the number of layer in the stackup file equals the number of stackup layer\nin the layout, layers are renamed according the file.\nNote that layer order matters, and has to be writtent from top to bottom layer in the file.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb()\n>>> edb.stackup.load(\"stackup.xml\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points.html#points",
        "title": "points",
        "section": "points",
        "text": "Return the list of points with arcs converted to segments.\nNumber of facets to convert an arc. Default is 6.\nx and y list of points.\npoints\npython:int\npython:list\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.points",
        "title": "points > points > points",
        "section": "points > points",
        "text": "property EDBArcs.points\n\nReturn the list of points with arcs converted to segments.\n\nParameters\n\narc_segments\n\npython:int\n\nNumber of facets to convert an arc. Default is 6.\n\nReturns\n\npython:list, python:list\n\nx and y list of points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_num_passes",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_num_passes.html#max_num_passes",
        "title": "max_num_passes",
        "section": "max_num_passes",
        "text": "Retrieve maximum of points for the HFSS adaptive meshing.\nmax_num_passes\npython:int\nThe\nmaximum\nnumber\nof\nadaptive\npasses"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_num_passes",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_num_passes.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_num_passes",
        "title": "max_num_passes > max_num_passes > max_num_passes",
        "section": "max_num_passes > max_num_passes",
        "text": "property SimulationConfigurationAc.max_num_passes\n\nRetrieve maximum of points for the HFSS adaptive meshing.\n\nReturns\n\npython:int\n\n\n\nThe maximum number of adaptive passes value.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.frequency_sweeps.html#frequency_sweeps",
        "title": "frequency_sweeps",
        "section": "frequency_sweeps",
        "text": "frequency_sweeps"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.frequency_sweeps",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.frequency_sweeps.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.frequency_sweeps",
        "title": "frequency_sweeps > frequency_sweeps > frequency_sweeps",
        "section": "frequency_sweeps > frequency_sweeps",
        "text": "property HFSSPISimulationSetup.frequency_sweeps\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.dataset_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.dataset_defs.html#dataset_defs",
        "title": "dataset_defs",
        "section": "dataset_defs",
        "text": "Get all dataset definitions in the database.\ndataset_defs\npython:list\nDatasetDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.dataset_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.dataset_defs.html#pyedb.dotnet.edb.Edb.dataset_defs",
        "title": "dataset_defs > dataset_defs > dataset_defs",
        "section": "dataset_defs > dataset_defs",
        "text": "property Edb.dataset_defs\n\nGet all dataset definitions in the database.\n\nReturns\n\npython:list[DatasetDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.make_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.make_zone_primitive.html#make_zone_primitive",
        "title": "make_zone_primitive",
        "section": "make_zone_primitive",
        "text": "Make primitive a zone primitive with a zone specified by the provided id.\nId of zone primitive will use.\nmake_zone_primitive\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.make_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.make_zone_primitive.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.make_zone_primitive",
        "title": "make_zone_primitive > make_zone_primitive > make_zone_primitive",
        "section": "make_zone_primitive > make_zone_primitive",
        "text": "EdbPolygon.make_zone_primitive(zone_id)\n\nMake primitive a zone primitive with a zone specified by the provided id.\n\nParameters\n\nzone_id\n\npython:int\n\nId of zone primitive will use.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature.html#use_defeature",
        "title": "use_defeature",
        "section": "use_defeature",
        "text": "Whether to turn on the defeature.\nTrue if defeature is used, False otherwise.\nuse_defeature\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.use_defeature",
        "title": "use_defeature > use_defeature > use_defeature",
        "section": "use_defeature > use_defeature",
        "text": "property DefeatureSettings.use_defeature\n\nWhether to turn on the defeature.\n\nReturns\n\nbool\n\nTrue if defeature is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_vias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_vias.html#dc_mesh_vias",
        "title": "dc_mesh_vias",
        "section": "dc_mesh_vias",
        "text": "Retrieve the value for meshing vias.\nTrue when activated, False deactivated.\ndc_mesh_vias\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_vias",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_vias.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_mesh_vias",
        "title": "dc_mesh_vias > dc_mesh_vias > dc_mesh_vias",
        "section": "dc_mesh_vias > dc_mesh_vias",
        "text": "property SimulationConfigurationDc.dc_mesh_vias\n\nRetrieve the value for meshing vias.\n\nReturns\n\nbool\n\nTrue when activated, False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.remove_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.remove_hfss_prop.html#remove_hfss_prop",
        "title": "remove_hfss_prop",
        "section": "remove_hfss_prop",
        "text": "Remove HFSS properties.\nremove_hfss_prop"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.remove_hfss_prop",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.remove_hfss_prop.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.remove_hfss_prop",
        "title": "remove_hfss_prop > remove_hfss_prop > remove_hfss_prop",
        "section": "remove_hfss_prop > remove_hfss_prop",
        "text": "EDBPadstackInstance.remove_hfss_prop()\n\nRemove HFSS properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.directory",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.directory.html#directory",
        "title": "directory",
        "section": "directory",
        "text": "Get the directory of the Database.\nDirectory of the Database.\ndirectory\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.directory",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.directory.html#pyedb.dotnet.edb.Edb.directory",
        "title": "directory > directory > directory",
        "section": "directory > directory",
        "text": "property Edb.directory\n\nGet the directory of the Database.\n\nReturns\n\npython:str\n\nDirectory of the Database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.id.html#id",
        "title": "id",
        "section": "id",
        "text": "id"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.id.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.id",
        "title": "id > id > id",
        "section": "id > id",
        "text": "property LayerEdbClass.id\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_vias",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_vias.html#num_vias",
        "title": "num_vias",
        "section": "num_vias",
        "text": "num_vias"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_vias",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_vias.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_vias",
        "title": "num_vias > num_vias > num_vias",
        "section": "num_vias > num_vias",
        "text": "property EDBStatistics.num_vias\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_circuit_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_circuit_port.html#is_circuit_port",
        "title": "is_circuit_port",
        "section": "is_circuit_port",
        "text": "Whether it is a circuit port.\nis_circuit_port"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_circuit_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_circuit_port.html#pyedb.dotnet.database.edb_data.ports.GapPort.is_circuit_port",
        "title": "is_circuit_port > is_circuit_port > is_circuit_port",
        "section": "is_circuit_port > is_circuit_port",
        "text": "property GapPort.is_circuit_port\n\nWhether it is a circuit port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sim_setup_info.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property HfssSimulationSetup.sim_setup_info\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_round_corner",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_round_corner.html#cutout_subdesign_round_corner",
        "title": "cutout_subdesign_round_corner",
        "section": "cutout_subdesign_round_corner",
        "text": "Retrieve boolean to perform the design clipping using round corner for the extent generation.\nTrue when using round corner, False if not.\ncutout_subdesign_round_corner\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_round_corner",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_round_corner.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.cutout_subdesign_round_corner",
        "title": "cutout_subdesign_round_corner > cutout_subdesign_round_corner > cutout_subdesign_round_corner",
        "section": "cutout_subdesign_round_corner > cutout_subdesign_round_corner",
        "text": "property SimulationConfigurationBatch.cutout_subdesign_round_corner\n\nRetrieve boolean to perform the design clipping using round corner for the extent generation.\n\nReturns\n\nbool\n\nTrue when using round corner, False if not.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.retrieve_parameters_from_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.retrieve_parameters_from_edb.html#retrieve_parameters_from_edb",
        "title": "retrieve_parameters_from_edb",
        "section": "retrieve_parameters_from_edb",
        "text": "retrieve_parameters_from_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.retrieve_parameters_from_edb",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.retrieve_parameters_from_edb.html#pyedb.configuration.cfg_setup.CfgSetups.retrieve_parameters_from_edb",
        "title": "retrieve_parameters_from_edb > retrieve_parameters_from_edb > retrieve_parameters_from_edb",
        "section": "retrieve_parameters_from_edb > retrieve_parameters_from_edb",
        "text": "CfgSetups.retrieve_parameters_from_edb()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.set_attributes.html#pyedb.configuration.cfg_stackup.CfgMaterial.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgMaterial.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable.html#get_variable",
        "title": "get_variable",
        "section": "get_variable",
        "text": "Return Variable Value if variable exists.\nget_variable\npyedb.dotnet.database.edb_data.edbvalue.EdbValue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_variable.html#pyedb.dotnet.edb.Edb.get_variable",
        "title": "get_variable > get_variable > get_variable",
        "section": "get_variable > get_variable",
        "text": "Edb.get_variable(variable_name)\n\nReturn Variable Value if variable exists.\n\nParameters\n\nvariable_name\n\n\n\nReturns\n\npyedb.dotnet.database.edb_data.edbvalue.EdbValue\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.radiation_level",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.radiation_level.html#radiation_level",
        "title": "radiation_level",
        "section": "radiation_level",
        "text": "PML Radiation level to calculate the thickness of boundary.\nradiation_level"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.radiation_level",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.radiation_level.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.radiation_level",
        "title": "radiation_level > radiation_level > radiation_level",
        "section": "radiation_level > radiation_level",
        "text": "property HfssExtentInfo.radiation_level\n\nPML Radiation level to calculate the thickness of boundary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layer_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layer_elements.html#number_of_layer_elements",
        "title": "number_of_layer_elements",
        "section": "number_of_layer_elements",
        "text": "Number of layer elements.\nnumber_of_layer_elements\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layer_elements",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layer_elements.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layer_elements",
        "title": "number_of_layer_elements > number_of_layer_elements > number_of_layer_elements",
        "section": "number_of_layer_elements > number_of_layer_elements",
        "text": "property SkinDepthMeshOperation.number_of_layer_elements\n\nNumber of layer elements.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/padstacks/set_all_antipads_value",
        "href": "user_guide/padstacks/set_all_antipads_value.html#edit-a-padstack-definition",
        "title": "Edit a padstack definition",
        "section": "Edit a padstack definition",
        "text": "This page shows how to edit a padstack definition, setting all anti-pad values to a fixed value.\nEdit a padstack definition"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_spacing",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_spacing.html#fin_spacing",
        "title": "fin_spacing",
        "section": "fin_spacing",
        "text": "The fin spacing.\nfin_spacing"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_spacing",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_spacing.html#pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_spacing",
        "title": "fin_spacing > fin_spacing > fin_spacing",
        "section": "fin_spacing > fin_spacing",
        "text": "property HeatSink.fin_spacing\n\nThe fin spacing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.paths",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.paths.html#paths",
        "title": "paths",
        "section": "paths",
        "text": "Paths.\nList of paths.\npaths\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.paths",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.paths.html#pyedb.dotnet.database.modeler.Modeler.paths",
        "title": "paths > paths > paths",
        "section": "paths > paths",
        "text": "property Modeler.paths\n\nPaths.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nList of paths.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.variables",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.variables.html#variables",
        "title": "variables",
        "section": "variables",
        "text": "Get all Edb variables.\nvariables\nDict\npython:str\npyedb.dotnet.database.edb_data.variables.Variable"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.variables",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.variables.html#pyedb.dotnet.edb.Edb.variables",
        "title": "variables > variables > variables",
        "section": "variables > variables",
        "text": "property Edb.variables\n\nGet all Edb variables.\n\nReturns\n\nvariables dictionary\n\nDict[python:str, pyedb.dotnet.database.edb_data.variables.Variable]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_inductors",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_inductors.html#num_inductors",
        "title": "num_inductors",
        "section": "num_inductors",
        "text": "num_inductors"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_inductors",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_inductors.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_inductors",
        "title": "num_inductors > num_inductors > num_inductors",
        "section": "num_inductors > num_inductors",
        "text": "property EDBStatistics.num_inductors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.rotation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.rotation.html#rotation",
        "title": "rotation",
        "section": "rotation",
        "text": "Rotation.\nValue for the rotation.\nrotation\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.rotation",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.rotation.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.rotation",
        "title": "rotation > rotation > rotation",
        "section": "rotation > rotation",
        "text": "property EDBPadProperties.rotation\n\nRotation.\n\nReturns\n\npython:str\n\nValue for the rotation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.get_data_from_db.html#pyedb.configuration.cfg_general.CfgGeneral.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgGeneral.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Padstack Definition Name.\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EDBPadstack.name\n\nPadstack Definition Name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_dielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_dielectric.html#add_dielectric",
        "title": "add_dielectric",
        "section": "add_dielectric",
        "text": "Add a new dielectric.\nLayer name.\nDielectric layer index as they must be stacked. If not provided the layer index will be incremented.\nMaterial name.\nLayer thickness.\nDictionary with key and  property value.\nLayer name used for layer placement. Default value is None. This option is used for inserting\ndielectric layer between two existing ones. When no argument is provided the dielectric layer will be placed\non top of the stacked ones.\nProvides the method to use when the argument base_layer is provided. When True the layer is added\non top on the base layer, when False it will be added below.\nadd_dielectric\npython:str\npython:int\noptional\npython:str\npython:float\npython:dict\npython:str\noptional\nNone\nbase_layer\nTrue\nFalse\npyedb.dotnet.database.edb_data.control_file.ControlFileDielectric"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_dielectric",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_dielectric.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.add_dielectric",
        "title": "add_dielectric > add_dielectric > add_dielectric",
        "section": "add_dielectric > add_dielectric",
        "text": "ControlFileStackup.add_dielectric(layer_name, layer_index=None, material='', thickness=0.0, properties=None, base_layer=None, add_on_top=True)\n\nAdd a new dielectric.\n\nParameters\n\nlayer_name\n\npython:str\n\nLayer name.\n\nlayer_index\n\npython:int, optional\n\nDielectric layer index as they must be stacked. If not provided the layer index will be incremented.\n\nmaterial\n\npython:str\n\nMaterial name.\n\nthickness\n\npython:float\n\nLayer thickness.\n\nproperties\n\npython:dict\n\nDictionary with key and  property value.\n\nbase_layer\n\npython:str,  optional\n\nLayer name used for layer placement. Default value is None. This option is used for inserting\ndielectric layer between two existing ones. When no argument is provided the dielectric layer will be placed\non top of the stacked ones.\n\nmethod\n\nbool, Optional.\n\nProvides the method to use when the argument base_layer is provided. When True the layer is added\non top on the base layer, when False it will be added below.\n\nReturns\n\npyedb.dotnet.database.edb_data.control_file.ControlFileDielectric\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.html#raptorxgeneralsettings",
        "title": "RaptorXGeneralSettings",
        "section": "RaptorXGeneralSettings",
        "text": "RaptorXGeneralSettings.global_temperature\nThe simulation temperature.\nRaptorXGeneralSettings.max_frequency\n\nRaptorXGeneralSettings\nRaptorXGeneralSettings.global_temperature\nRaptorXGeneralSettings.max_frequency"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings",
        "title": "RaptorXGeneralSettings > RaptorXGeneralSettings > RaptorXGeneralSettings",
        "section": "RaptorXGeneralSettings > RaptorXGeneralSettings",
        "text": "class pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXGeneralSettings(edb_setup_info, pedb)\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nRaptorXGeneralSettings.global_temperature\n\nThe simulation temperature.\n\nRaptorXGeneralSettings.max_frequency\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net_name.html#net_name",
        "title": "net_name",
        "section": "net_name",
        "text": "Get the primitive layer name.\nnet_name\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.net_name.html#pyedb.dotnet.database.edb_data.ports.GapPort.net_name",
        "title": "net_name > net_name > net_name",
        "section": "net_name > net_name",
        "text": "property GapPort.net_name\n\nGet the primitive layer name.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.net_layer_info",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.net_layer_info.html#net_layer_info",
        "title": "net_layer_info",
        "section": "net_layer_info",
        "text": "Adding property for grpc compatibility.\nnet_layer_info"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.net_layer_info",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.net_layer_info.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.net_layer_info",
        "title": "net_layer_info > net_layer_info > net_layer_info",
        "section": "net_layer_info > net_layer_info",
        "text": "property LengthMeshOperation.net_layer_info\n\nAdding property for grpc compatibility.\n\nReturns\n\nThe tuple is in this form: (net_name, layer_name, is_sheet)``.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.operating_freq",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.operating_freq.html#operating_freq",
        "title": "operating_freq",
        "section": "operating_freq",
        "text": "PML Operating frequency.\noperating_freq\npyedb.dotnet.database.edb_data.edbvalue.EdbValue"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.operating_freq",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.operating_freq.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.operating_freq",
        "title": "operating_freq > operating_freq > operating_freq",
        "section": "operating_freq > operating_freq",
        "text": "property HfssExtentInfo.operating_freq\n\nPML Operating frequency.\n\nReturns\n\npyedb.dotnet.database.edb_data.edbvalue.EdbValue\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_class.html#api_class",
        "title": "api_class",
        "section": "api_class",
        "text": "Return Ansys.Ansoft.Edb class object.\napi_class"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_class.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.api_class",
        "title": "api_class > api_class > api_class",
        "section": "api_class > api_class",
        "text": "property EDBNetsData.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweep_data.html#sweep_data",
        "title": "sweep_data",
        "section": "sweep_data",
        "text": "Adding property for compatibility with grpc.\nsweep_data"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweep_data.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.sweep_data",
        "title": "sweep_data > sweep_data > sweep_data",
        "section": "sweep_data > sweep_data",
        "text": "property SiwaveDCSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "Get net information.\nget_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_nets.CfgNets.get_data_from_db.html#pyedb.configuration.cfg_nets.CfgNets.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgNets.get_data_from_db()\n\nGet net information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.num_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.num_layers.html#num_layers",
        "title": "num_layers",
        "section": "num_layers",
        "text": "Retrieve the stackup layer number.\nlayer number.\nnum_layers\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.num_layers",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.num_layers.html#pyedb.dotnet.database.stackup.Stackup.num_layers",
        "title": "num_layers > num_layers > num_layers",
        "section": "num_layers > num_layers",
        "text": "property Stackup.num_layers\n\nRetrieve the stackup layer number.\n\nReturns\n\npython:int\n\nlayer number.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.enhanced_low_freq_accuracy",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.enhanced_low_freq_accuracy.html#enhanced_low_freq_accuracy",
        "title": "enhanced_low_freq_accuracy",
        "section": "enhanced_low_freq_accuracy",
        "text": "Whether to enable legacy low-frequency sampling.\nTrue if low frequency accuracy is used, False otherwise.\nenhanced_low_freq_accuracy\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.enhanced_low_freq_accuracy",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.enhanced_low_freq_accuracy.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssSolverSettings.enhanced_low_freq_accuracy",
        "title": "enhanced_low_freq_accuracy > enhanced_low_freq_accuracy > enhanced_low_freq_accuracy",
        "section": "enhanced_low_freq_accuracy > enhanced_low_freq_accuracy",
        "text": "property HfssSolverSettings.enhanced_low_freq_accuracy\n\nWhether to enable legacy low-frequency sampling.\n\nReturns\n\nbool\n\nTrue if low frequency accuracy is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_points",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_points.html#get_polygon_points",
        "title": "get_polygon_points",
        "section": "get_polygon_points",
        "text": "Retrieve polygon points.\nFor arcs, one point is returned.\nclass: dotnet.database.edb_data.primitives_data.Primitive\nfrom the list equals 2, a segment is defined. The first tuple defines the starting point while the second\ntuple the ending one. If the length of one tuple equals one, that means a polyline is defined and the value\nis giving the arc height. Therefore to polyline is defined as starting point for the tuple\nbefore in the list, the current one the arc height and the tuple after the polyline ending point.\nget_polygon_points\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_points",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_polygon_points.html#pyedb.dotnet.database.modeler.Modeler.get_polygon_points",
        "title": "get_polygon_points > get_polygon_points > get_polygon_points",
        "section": "get_polygon_points > get_polygon_points",
        "text": "Modeler.get_polygon_points(polygon)\n\nRetrieve polygon points.\n\nFor arcs, one point is returned.\n\nParameters\n\npolygon\n\nclass: dotnet.database.edb_data.primitives_data.Primitive\n\nReturns\n\npython:list\n\nList of tuples. Each tuple provides x, y point coordinate. If the length of two consecutives tuples\n\nfrom the list equals 2, a segment is defined. The first tuple defines the starting point while the second\ntuple the ending one. If the length of one tuple equals one, that means a polyline is defined and the value\nis giving the arc height. Therefore to polyline is defined as starting point for the tuple\nbefore in the list, the current one the arc height and the tuple after the polyline ending point.\n\nExamples\n\n>>> poly = database.modeler.get_polygons_by_layer(\"GND\")\n>>> points  = database.modeler.get_polygon_points(poly[0])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSS",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSS.html#khfss",
        "title": "kHFSS",
        "section": "kHFSS",
        "text": "kHFSS"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSS",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSS.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kHFSS",
        "title": "kHFSS > kHFSS > kHFSS",
        "section": "kHFSS > kHFSS",
        "text": "SimulationSetupType.kHFSS = 'hfss'\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPorts.apply.html#pyedb.configuration.cfg_ports_sources.CfgPorts.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgPorts.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_wave_port",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_wave_port.html#create_wave_port",
        "title": "create_wave_port",
        "section": "create_wave_port",
        "text": "Create a wave port.\nPrimitive ID.\nCoordinate of the point to define the edge terminal.\nThe point must be on the target edge but not on the two\nends of the edge.\nName of the port. The default is None.\nImpedance of the port. The default value is 50.\nHorizontal extent factor. The default value is 5.\nVertical extent factor. The default value is 3.\nLaunch Width of PEC. The default value is \"0.01mm\".\nThe tuple contains: (Port name, pyedb.dotnet.database.edb_data.sources.Excitation).\ncreate_wave_port\npython:int\nPrimitive\npython:list\npython:str\noptional\nNone\npython:int\npython:float\noptional\n50\npython:int\npython:float\noptional\n5\npython:int\npython:float\noptional\n3\npython:str\noptional\n\"0.01mm\"\npython:tuple"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_wave_port",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_wave_port.html#pyedb.dotnet.database.hfss.EdbHfss.create_wave_port",
        "title": "create_wave_port > create_wave_port > create_wave_port",
        "section": "create_wave_port > create_wave_port",
        "text": "EdbHfss.create_wave_port(prim_id, point_on_edge, port_name=None, impedance=50, horizontal_extent_factor=5, vertical_extent_factor=3, pec_launch_width='0.01mm')\n\nCreate a wave port.\n\nParameters\n\nprim_id\n\npython:int, Primitive\n\nPrimitive ID.\n\npoint_on_edge\n\npython:list\n\nCoordinate of the point to define the edge terminal.\nThe point must be on the target edge but not on the two\nends of the edge.\n\nport_name\n\npython:str, optional\n\nName of the port. The default is None.\n\nimpedance\n\npython:int, python:float, optional\n\nImpedance of the port. The default value is 50.\n\nhorizontal_extent_factor\n\npython:int, python:float, optional\n\nHorizontal extent factor. The default value is 5.\n\nvertical_extent_factor\n\npython:int, python:float, optional\n\nVertical extent factor. The default value is 3.\n\npec_launch_width\n\npython:str, optional\n\nLaunch Width of PEC. The default value is \"0.01mm\".\n\nReturns\n\npython:tuple\n\nThe tuple contains: (Port name, pyedb.dotnet.database.edb_data.sources.Excitation).\n\nExamples\n\n>>> edb.hfss.create_wave_port(0, [\"-50mm\", \"-0mm\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings.html#basesimulationsettings",
        "title": "BaseSimulationSettings",
        "section": "BaseSimulationSettings",
        "text": "BaseSimulationSettings.enabled\n\nBaseSimulationSettings\nBaseSimulationSettings.enabled"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings",
        "title": "BaseSimulationSettings > BaseSimulationSettings > BaseSimulationSettings",
        "section": "BaseSimulationSettings > BaseSimulationSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.simulation_settings.BaseSimulationSettings(pedb, sim_setup, edb_object)\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nBaseSimulationSettings.enabled\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.pin_groups",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.pin_groups.html#pin_groups",
        "title": "pin_groups",
        "section": "pin_groups",
        "text": "All Layout Pin groups.\nList of all layout pin groups.\npin_groups\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.pin_groups",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.pin_groups.html#pyedb.dotnet.database.siwave.EdbSiwave.pin_groups",
        "title": "pin_groups > pin_groups > pin_groups",
        "section": "pin_groups > pin_groups",
        "text": "property EdbSiwave.pin_groups\n\nAll Layout Pin groups.\n\nReturns\n\npython:list\n\nList of all layout pin groups.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Edb Dotnet Api Database Net.IsNull().\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_null.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property EDBNetsData.is_null\n\nEdb Dotnet Api Database Net.IsNull().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.impedance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.impedance.html#impedance",
        "title": "impedance",
        "section": "impedance",
        "text": "Impedance of the port.\nimpedance"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.impedance",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.impedance.html#pyedb.dotnet.database.edb_data.ports.WavePort.impedance",
        "title": "impedance > impedance > impedance",
        "section": "impedance > impedance",
        "text": "property WavePort.impedance\n\nImpedance of the port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.calculate_initial_extent",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.calculate_initial_extent.html#calculate_initial_extent",
        "title": "calculate_initial_extent",
        "section": "calculate_initial_extent",
        "text": "Compute a float representing the larger number between the dielectric thickness or trace width\nmultiplied by the nW factor. The trace width search is limited to nets with ports attached.\nValue for the width multiplier (nW factor).\ncalculate_initial_extent\npython:float\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.calculate_initial_extent",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.calculate_initial_extent.html#pyedb.dotnet.edb.Edb.calculate_initial_extent",
        "title": "calculate_initial_extent > calculate_initial_extent > calculate_initial_extent",
        "section": "calculate_initial_extent > calculate_initial_extent",
        "text": "Edb.calculate_initial_extent(expansion_factor)\n\nCompute a float representing the larger number between the dielectric thickness or trace width\nmultiplied by the nW factor. The trace width search is limited to nets with ports attached.\n\nParameters\n\nexpansion_factor\n\npython:float\n\nValue for the width multiplier (nW factor).\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_point.html#get_closest_point",
        "title": "get_closest_point",
        "section": "get_closest_point",
        "text": "Get the closest point of the primitive to the input data.\nget_closest_point\npython:list\nof\npython:float\nPointData\npython:list\nof\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_point.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.get_closest_point",
        "title": "get_closest_point > get_closest_point > get_closest_point",
        "section": "get_closest_point > get_closest_point",
        "text": "EdbPolygon.get_closest_point(point)\n\nGet the closest point of the primitive to the input data.\n\nParameters\n\npoint\n\npython:list of python:float or PointData\n\n\n\nReturns\n\npython:list of python:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.process_padstack_definitions",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.process_padstack_definitions.html#process_padstack_definitions",
        "title": "process_padstack_definitions",
        "section": "process_padstack_definitions",
        "text": "Retrieve the boolean for activating the padstack definition processing.\nprocess_padstack_definitions\nflot\nValue\nof\nthe\narc\nto\nchord"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.process_padstack_definitions",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.process_padstack_definitions.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.process_padstack_definitions",
        "title": "process_padstack_definitions > process_padstack_definitions > process_padstack_definitions",
        "section": "process_padstack_definitions > process_padstack_definitions",
        "text": "property SimulationConfigurationAc.process_padstack_definitions\n\nRetrieve the boolean for activating the padstack definition processing.\n\nReturns\n\nflot\n\n\n\nValue of the arc to chord error.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Edb Dotnet Api Database NetClass.IsNull().\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.is_null.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property EDBDifferentialPairData.is_null\n\nEdb Dotnet Api Database NetClass.IsNull().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.phase",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.phase.html#phase",
        "title": "phase",
        "section": "phase",
        "text": "Phase.\nphase"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.phase",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.phase.html#pyedb.dotnet.database.edb_data.ports.GapPort.phase",
        "title": "phase > phase > phase",
        "section": "phase > phase",
        "text": "property GapPort.phase\n\nPhase.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_stackup_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_stackup_layer.html#is_stackup_layer",
        "title": "is_stackup_layer",
        "section": "is_stackup_layer",
        "text": "Determine whether this layer is a stackup layer.\nTrue if this layer is a stackup layer, False otherwise.\nis_stackup_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_stackup_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_stackup_layer.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.is_stackup_layer",
        "title": "is_stackup_layer > is_stackup_layer > is_stackup_layer",
        "section": "is_stackup_layer > is_stackup_layer",
        "text": "property LayerEdbClass.is_stackup_layer\n\nDetermine whether this layer is a stackup layer.\n\nReturns\n\nbool\n\nTrue if this layer is a stackup layer, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kPEM",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kPEM.html#kpem",
        "title": "kPEM",
        "section": "kPEM",
        "text": "kPEM"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kPEM",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kPEM.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kPEM",
        "title": "kPEM > kPEM > kPEM",
        "section": "kPEM > kPEM",
        "text": "SimulationSetupType.kPEM = None\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_open_region",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_open_region.html#use_open_region",
        "title": "use_open_region",
        "section": "use_open_region",
        "text": "Whether using an open region is enabled.\nuse_open_region"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_open_region",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_open_region.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.use_open_region",
        "title": "use_open_region > use_open_region > use_open_region",
        "section": "use_open_region > use_open_region",
        "text": "property HfssExtentInfo.use_open_region\n\nWhether using an open region is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.is_parameter",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.is_parameter.html#is_parameter",
        "title": "is_parameter",
        "section": "is_parameter",
        "text": "Determine whether this variable is a parameter.\nis_parameter"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.is_parameter",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.is_parameter.html#pyedb.dotnet.database.edb_data.variables.Variable.is_parameter",
        "title": "is_parameter > is_parameter > is_parameter",
        "section": "is_parameter > is_parameter",
        "text": "property Variable.is_parameter\n\nDetermine whether this variable is a parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_instance",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_instance.html#layout_instance",
        "title": "layout_instance",
        "section": "layout_instance",
        "text": "Edb Layout Instance.\nlayout_instance"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_instance",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.layout_instance.html#pyedb.dotnet.edb.Edb.layout_instance",
        "title": "layout_instance > layout_instance > layout_instance",
        "section": "layout_instance > layout_instance",
        "text": "property Edb.layout_instance\n\nEdb Layout Instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweep_data.html#sweep_data",
        "title": "sweep_data",
        "section": "sweep_data",
        "text": "Adding property for compatibility with grpc.\nsweep_data"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweep_data",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweep_data.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sweep_data",
        "title": "sweep_data > sweep_data > sweep_data",
        "section": "sweep_data > sweep_data",
        "text": "property HFSSPISimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.html#advancedmeshsettings",
        "title": "AdvancedMeshSettings",
        "section": "AdvancedMeshSettings",
        "text": "Manages EDB methods for advanced mesh settings.\nAdvancedMeshSettings.layer_snap_tol\nLayer snap tolerance.\nAdvancedMeshSettings.mesh_display_attributes\nMesh display attributes.\nAdvancedMeshSettings.replace_3d_triangles\nWhether to turn on replace 3D triangles.\nAdvancedMeshSettings\nAdvancedMeshSettings.layer_snap_tol\nAdvancedMeshSettings.mesh_display_attributes\nAdvancedMeshSettings.replace_3d_triangles"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings",
        "title": "AdvancedMeshSettings > AdvancedMeshSettings > AdvancedMeshSettings",
        "section": "AdvancedMeshSettings > AdvancedMeshSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings(parent)\n\nManages EDB methods for advanced mesh settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nAdvancedMeshSettings.layer_snap_tol\n\nLayer snap tolerance.\n\nAdvancedMeshSettings.mesh_display_attributes\n\nMesh display attributes.\n\nAdvancedMeshSettings.replace_3d_triangles\n\nWhether to turn on replace 3D triangles.\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/sweep_data",
        "href": "api/sim_setup_data/data/sweep_data.html#sweep-data",
        "title": "Sweep data",
        "section": "Sweep data",
        "text": "This class is the container of sweep data.\nSweepData\nManages EDB methods for a frequency sweep.\nSweep data\nSweepData"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.set_dc_slider",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.set_dc_slider.html#set_dc_slider",
        "title": "set_dc_slider",
        "section": "set_dc_slider",
        "text": "set_dc_slider"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.set_dc_slider",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.set_dc_slider.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.set_dc_slider",
        "title": "set_dc_slider > set_dc_slider > set_dc_slider",
        "section": "set_dc_slider > set_dc_slider",
        "text": "DCAdvancedSettings.set_dc_slider(value)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfsspi_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfsspi_setup.html#create_hfsspi_setup",
        "title": "create_hfsspi_setup",
        "section": "create_hfsspi_setup",
        "text": "Create an HFSS PI simulation setup from a template.\nSetup name.\ncreate_hfsspi_setup\npython:str\noptional\nlegacy.database.edb_data.hfss_pi_simulation_setup_data.HFSSPISimulationSetup when succeeded, ``False`\nwhen"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfsspi_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_hfsspi_setup.html#pyedb.dotnet.edb.Edb.create_hfsspi_setup",
        "title": "create_hfsspi_setup > create_hfsspi_setup > create_hfsspi_setup",
        "section": "create_hfsspi_setup > create_hfsspi_setup",
        "text": "Edb.create_hfsspi_setup(name=None)\n\nCreate an HFSS PI simulation setup from a template.\n\nParameters\n\nname\n\npython:str, optional\n\nSetup name.\n\nReturns\n\nlegacy.database.edb_data.hfss_pi_simulation_setup_data.HFSSPISimulationSetup when succeeded, ``False`\n\n\n\nwhen failed.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_net_in_component",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_net_in_component.html#is_net_in_component",
        "title": "is_net_in_component",
        "section": "is_net_in_component",
        "text": "Check if a net belongs to a component.\nName of the component.\nName of the net.\nTrue if the net is found in component pins.\nis_net_in_component\npython:str\npython:str\nTrue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_net_in_component",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.is_net_in_component.html#pyedb.dotnet.database.nets.EdbNets.is_net_in_component",
        "title": "is_net_in_component > is_net_in_component > is_net_in_component",
        "section": "is_net_in_component > is_net_in_component",
        "text": "EdbNets.is_net_in_component(component_name, net_name)\n\nCheck if a net belongs to a component.\n\nParameters\n\ncomponent_name\n\npython:str\n\nName of the component.\n\nnet_name\n\npython:str\n\nName of the net.\n\nReturns\n\nbool\n\nTrue if the net is found in component pins.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Padstack Instance Name. If it is a pin, the syntax will be like in AEDT ComponentName-PinName.\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.name.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EDBPadstackInstance.name\n\nPadstack Instance Name. If it is a pin, the syntax will be like in AEDT ComponentName-PinName.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Flag indicating if this object is null.\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.is_null.html#pyedb.dotnet.database.edb_data.ports.WavePort.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property WavePort.is_null\n\nFlag indicating if this object is null.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layer_etching_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layer_etching_instances.html#signal_layer_etching_instances",
        "title": "signal_layer_etching_instances",
        "section": "signal_layer_etching_instances",
        "text": "Retrieve the list of layers which has layer etching activated.\nsignal_layer_etching_instances\npython:list\npython:str\nList\nof\nlayer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layer_etching_instances",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layer_etching_instances.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layer_etching_instances",
        "title": "signal_layer_etching_instances > signal_layer_etching_instances > signal_layer_etching_instances",
        "section": "signal_layer_etching_instances > signal_layer_etching_instances",
        "text": "property SimulationConfigurationBatch.signal_layer_etching_instances\n\nRetrieve the list of layers which has layer etching activated.\n\nReturns\n\npython:list[python:str]\n\n\n\nList of layer name.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_material.html#update_material",
        "title": "update_material",
        "section": "update_material",
        "text": "Update material attributes.\nupdate_material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_material.html#pyedb.dotnet.database.materials.Materials.update_material",
        "title": "update_material > update_material > update_material",
        "section": "update_material > update_material",
        "text": "Materials.update_material(material_name, input_dict)\n\nUpdate material attributes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.scale",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.scale.html#scale",
        "title": "scale",
        "section": "scale",
        "text": "Scales the polygon relative to a center point by a factor.\nScaling factor.\nIf None scaling is done from polygon center.\nTrue when successful, False when failed.\nscale\npython:float\nList\nof\npython:float\npython:str\noptional\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.scale",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.scale.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.scale",
        "title": "scale > scale > scale",
        "section": "scale > scale",
        "text": "EDBPadstackInstance.scale(factor, center=None)\n\nScales the polygon relative to a center point by a factor.\n\nParameters\n\nfactor\n\npython:float\n\nScaling factor.\n\ncenter\n\nList of python:float or python:str [x,y], optional\n\nIf None scaling is done from polygon center.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_configuration",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_configuration.html#export_configuration",
        "title": "export_configuration",
        "section": "export_configuration",
        "text": "Export layout information into a configuration file.\nPath to the configuration file.\nName all the padstacks in edb.\nexport_configuration\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.export_configuration",
        "href": "api/_autosummary/pyedb.siwave.Siwave.export_configuration.html#pyedb.siwave.Siwave.export_configuration",
        "title": "export_configuration > export_configuration > export_configuration",
        "section": "export_configuration > export_configuration",
        "text": "Siwave.export_configuration(file_path: str, fix_padstack_names: bool = False)\n\nExport layout information into a configuration file.\n\nParameters\n\nfile_path\n\npython:str\n\nPath to the configuration file.\n\nfix_padstack_names\n\nbool\n\nName all the padstacks in edb.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.base_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.base_polygon.html#base_polygon",
        "title": "base_polygon",
        "section": "base_polygon",
        "text": "Base polygon.\nbase_polygon\ndotnet.database.edb_data.primitives_data.EDBPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.base_polygon",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.base_polygon.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.base_polygon",
        "title": "base_polygon > base_polygon > base_polygon",
        "section": "base_polygon > base_polygon",
        "text": "property HfssExtentInfo.base_polygon\n\nBase polygon.\n\nReturns\n\ndotnet.database.edb_data.primitives_data.EDBPrimitive\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layers_properties",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layers_properties.html#signal_layers_properties",
        "title": "signal_layers_properties",
        "section": "signal_layers_properties",
        "text": "Retrieve the list of layers to have properties changes.\nList of layer name.\nsignal_layers_properties\npython:list\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layers_properties",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layers_properties.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_layers_properties",
        "title": "signal_layers_properties > signal_layers_properties > signal_layers_properties",
        "section": "signal_layers_properties > signal_layers_properties",
        "text": "property SimulationConfigurationBatch.signal_layers_properties\n\nRetrieve the list of layers to have properties changes.\n\nReturns\n\npython:list[python:str]\n\nList of layer name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_through_resistor_list",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_through_resistor_list.html#get_through_resistor_list",
        "title": "get_through_resistor_list",
        "section": "get_through_resistor_list",
        "text": "Retrieve through resistors.\nThreshold value. The default is 1.\nList of through resistors.\nget_through_resistor_list\npython:int\noptional\n1\npython:list"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_through_resistor_list",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_through_resistor_list.html#pyedb.dotnet.database.components.Components.get_through_resistor_list",
        "title": "get_through_resistor_list > get_through_resistor_list > get_through_resistor_list",
        "section": "get_through_resistor_list > get_through_resistor_list",
        "text": "Components.get_through_resistor_list(threshold=1)\n\nRetrieve through resistors.\n\nParameters\n\nthreshold\n\npython:int, optional\n\nThreshold value. The default is 1.\n\nReturns\n\npython:list\n\nList of through resistors.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_through_resistor_list()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_region",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_region.html#mesh_region",
        "title": "mesh_region",
        "section": "mesh_region",
        "text": "Mesh region name.\nName of the mesh region.\nmesh_region\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_region",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_region.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.mesh_region",
        "title": "mesh_region > mesh_region > mesh_region",
        "section": "mesh_region > mesh_region",
        "text": "property SkinDepthMeshOperation.mesh_region\n\nMesh region name.\n\nReturns\n\npython:str\n\nName of the mesh region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.definitions",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.definitions.html#definitions",
        "title": "definitions",
        "section": "definitions",
        "text": "Retrieve component definition list.\ndefinitions\npython:dict\nof\nEDBComponentDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.definitions",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.definitions.html#pyedb.dotnet.database.components.Components.definitions",
        "title": "definitions > definitions > definitions",
        "section": "definitions > definitions",
        "text": "property Components.definitions\n\nRetrieve component definition list.\n\nReturns\n\npython:dict of EDBComponentDef\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_nets.html#signal_nets",
        "title": "signal_nets",
        "section": "signal_nets",
        "text": "Retrieve the list of signal net names.\nList of signal net names.\nsignal_nets\nList\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_nets",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_nets.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationBatch.signal_nets",
        "title": "signal_nets > signal_nets > signal_nets",
        "section": "signal_nets > signal_nets",
        "text": "property SimulationConfigurationBatch.signal_nets\n\nRetrieve the list of signal net names.\n\nReturns\n\nList[python:str]\n\nList of signal net names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tofloat",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tofloat.html#tofloat",
        "title": "tofloat",
        "section": "tofloat",
        "text": "Returns the float number of the variable.\ntofloat\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tofloat",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tofloat.html#pyedb.dotnet.database.edb_data.edbvalue.EdbValue.tofloat",
        "title": "tofloat > tofloat > tofloat",
        "section": "tofloat > tofloat",
        "text": "property EdbValue.tofloat\n\nReturns the float number of the variable.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/CoreEdb",
        "href": "api/CoreEdb.html#edb-manager",
        "title": "EDB manager",
        "section": "EDB manager",
        "text": "An AEDB database is a folder that contains the database representing any part of a PCB.\nIt can be opened and edited using the Edb class.\nedb.Edb([edbpath, cellname, isreadonly, ...])\nProvides the EDB application interface.\nEDB manager\nEdb\nedb.Edb"
    },
    {
        "objectID": "api/CoreEdb",
        "href": "api/CoreEdb.html#edb-modules",
        "title": "EDB manager > EDB modules",
        "section": "EDB modules",
        "text": "This section lists the core EDB modules for reading and writing information\nto AEDB files.\ncomponents.Components\nManages EDB components and related method accessible from Edb.components property.\nhfss.EdbHfss\nManages EDB method to configure Hfss setup accessible from Edb.hfss property.\nlayout_validation.LayoutValidation\nManages all layout validation capabilities\nmaterials.Materials\nManages EDB methods for material management accessible from Edb.materials property.\nmodeler.Modeler\nManages EDB methods for primitives management accessible from Edb.modeler property.\nnets.EdbNets\nManages EDB methods for nets management accessible from Edb.nets property.\nedb_data.padstacks_data.EDBPadstack\nManages EDB functionalities for a padstack.\nsiwave.EdbSiwave\nManages EDB methods related to Siwave Setup accessible from Edb.siwave property.\nstackup.Stackup\nManages EDB methods for stackup accessible from Edb.stackup property.\nEDB modules\ncomponents.Components\nhfss.EdbHfss\nlayout_validation.LayoutValidation\nmaterials.Materials\nmodeler.Modeler\nnets.EdbNets\nedb_data.padstacks_data.EDBPadstack\nsiwave.EdbSiwave\nstackup.Stackup"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.min_num_pass",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.min_num_pass.html#min_num_pass",
        "title": "min_num_pass",
        "section": "min_num_pass",
        "text": "Minimum number of passes.\nmin_num_pass\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.min_num_pass",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.min_num_pass.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.min_num_pass",
        "title": "min_num_pass > min_num_pass > min_num_pass",
        "section": "min_num_pass > min_num_pass",
        "text": "property DCAdvancedSettings.min_num_pass\n\nMinimum number of passes.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_compute_inductance",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_compute_inductance.html#dc_compute_inductance",
        "title": "dc_compute_inductance",
        "section": "dc_compute_inductance",
        "text": "Return the boolean for computing the inductance with SIwave DC solver.\nTrue activate False deactivated.\ndc_compute_inductance\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_compute_inductance",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_compute_inductance.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_compute_inductance",
        "title": "dc_compute_inductance > dc_compute_inductance > dc_compute_inductance",
        "section": "dc_compute_inductance > dc_compute_inductance",
        "text": "property SimulationConfigurationDc.dc_compute_inductance\n\nReturn the boolean for computing the inductance with SIwave DC solver.\n\nReturns\n\nbool\n\nTrue activate False deactivated.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.instances",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.instances.html#instances",
        "title": "instances",
        "section": "instances",
        "text": "All Cell components objects.\nDefault dictionary for the EDB component.\ninstances\nDict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.instances",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.instances.html#pyedb.dotnet.database.components.Components.instances",
        "title": "instances > instances > instances",
        "section": "instances > instances",
        "text": "property Components.instances\n\nAll Cell components objects.\n\nReturns\n\nDict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\nDefault dictionary for the EDB component.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.instances\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveDCIR",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveDCIR.html#ksiwavedcir",
        "title": "kSIwaveDCIR",
        "section": "kSIwaveDCIR",
        "text": "kSIwaveDCIR"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveDCIR",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveDCIR.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kSIwaveDCIR",
        "title": "kSIwaveDCIR > kSIwaveDCIR > kSIwaveDCIR",
        "section": "kSIwaveDCIR > kSIwaveDCIR",
        "text": "SimulationSetupType.kSIwaveDCIR = 'siwave_dc'\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.change_design_variable_value",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.change_design_variable_value.html#change_design_variable_value",
        "title": "change_design_variable_value",
        "section": "change_design_variable_value",
        "text": "Change a variable value.\nUser can use also the getitem to read the variable value. See example below.\nName of the variable.\nValue of the variable with units.\nTuple containing the SetVariableValue result and variable server.\nchange_design_variable_value\npython:str\npython:str\npython:float\npython:tuple\nSetVariableValue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.change_design_variable_value",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.change_design_variable_value.html#pyedb.dotnet.edb.Edb.change_design_variable_value",
        "title": "change_design_variable_value > change_design_variable_value > change_design_variable_value",
        "section": "change_design_variable_value > change_design_variable_value",
        "text": "Edb.change_design_variable_value(variable_name, variable_value)\n\nChange a variable value.\n\n..note::\n\nUser can use also the getitem to read the variable value. See example below.\n\nParameters\n\nvariable_name\n\npython:str\n\nName of the variable.\n\nvariable_value\n\npython:str, python:float\n\nValue of the variable with units.\n\nReturns\n\npython:tuple\n\nTuple containing the SetVariableValue result and variable server.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb_app = Edb()\n>>> boolean, ant_length = edb_app.add_design_variable(\"ant_length\", \"1cm\")\n>>> boolean, ant_length = edb_app.change_design_variable_value(\"ant_length\", \"1m\")\n>>> print(edb_app[\"ant_length\"])    #using getitem\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_converged_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_converged_passes.html#conduction_min_converged_passes",
        "title": "conduction_min_converged_passes",
        "section": "conduction_min_converged_passes",
        "text": "Conduction minimum number of converged passes.\nconduction_min_converged_passes\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_converged_passes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_converged_passes.html#pyedb.dotnet.database.sim_setup_data.data.settings.DcrSettings.conduction_min_converged_passes",
        "title": "conduction_min_converged_passes > conduction_min_converged_passes > conduction_min_converged_passes",
        "section": "conduction_min_converged_passes > conduction_min_converged_passes",
        "text": "property DcrSettings.conduction_min_converged_passes\n\nConduction minimum number of converged passes.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.Others",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.Others.html#others",
        "title": "Others",
        "section": "Others",
        "text": "Other core components.\nDictionary of other core components.\nOthers\npython:dict\npython:str\npyedb.dotnet.database.cell.hierarchy.component.EDBComponent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.Others",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.Others.html#pyedb.dotnet.database.components.Components.Others",
        "title": "Others > Others > Others",
        "section": "Others > Others",
        "text": "property Components.Others\n\nOther core components.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.cell.hierarchy.component.EDBComponent]\n\nDictionary of other core components.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.others\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_terminal.html#reference_terminal",
        "title": "reference_terminal",
        "section": "reference_terminal",
        "text": "Adding grpc compatibility.\nreference_terminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_terminal.html#pyedb.dotnet.database.edb_data.ports.WavePort.reference_terminal",
        "title": "reference_terminal > reference_terminal > reference_terminal",
        "section": "reference_terminal > reference_terminal",
        "text": "property WavePort.reference_terminal\n\nAdding grpc compatibility.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.source_terms_to_ground",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.source_terms_to_ground.html#source_terms_to_ground",
        "title": "source_terms_to_ground",
        "section": "source_terms_to_ground",
        "text": "Dictionary of grounded terminals.\n{str, int}, keys is source name, value int 0 unspecified, 1 negative node, 2 positive one.\nsource_terms_to_ground\nDictionary"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.source_terms_to_ground",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.source_terms_to_ground.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.source_terms_to_ground",
        "title": "source_terms_to_ground > source_terms_to_ground > source_terms_to_ground",
        "section": "source_terms_to_ground > source_terms_to_ground",
        "text": "property SiwaveDCSimulationSetup.source_terms_to_ground\n\nDictionary of grounded terminals.\n\nReturns\n\nDictionary\n\n{str, int}, keys is source name, value int 0 unspecified, 1 negative node, 2 positive one.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.to_dict.html#to_dict",
        "title": "to_dict",
        "section": "to_dict",
        "text": "to_dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.to_dict",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetups.to_dict.html#pyedb.configuration.cfg_setup.CfgSetups.to_dict",
        "title": "to_dict > to_dict > to_dict",
        "section": "to_dict > to_dict",
        "text": "CfgSetups.to_dict()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_aedt_pin_name",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_aedt_pin_name.html#get_aedt_pin_name",
        "title": "get_aedt_pin_name",
        "section": "get_aedt_pin_name",
        "text": "Retrieve the pin name that is shown in AEDT.\nTo obtain the EDB core pin name, use pin.GetName().\nName of the pin in EDB core.\nName of the pin in AEDT.\nget_aedt_pin_name\npython:str\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.get_aedt_pin_name",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.get_aedt_pin_name.html#pyedb.dotnet.database.components.Components.get_aedt_pin_name",
        "title": "get_aedt_pin_name > get_aedt_pin_name > get_aedt_pin_name",
        "section": "get_aedt_pin_name > get_aedt_pin_name",
        "text": "Components.get_aedt_pin_name(pin)\n\nRetrieve the pin name that is shown in AEDT.\n\nTo obtain the EDB core pin name, use pin.GetName().\n\nParameters\n\npin\n\npython:str\n\nName of the pin in EDB core.\n\nReturns\n\npython:str\n\nName of the pin in AEDT.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.components.get_aedt_pin_name(pin)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.modeler",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.modeler.html#modeler",
        "title": "modeler",
        "section": "modeler",
        "text": "Core primitives modeler.\nmodeler\nInstance\nof"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.modeler",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.modeler.html#pyedb.dotnet.edb.Edb.modeler",
        "title": "modeler > modeler > modeler",
        "section": "modeler > modeler",
        "text": "property Edb.modeler\n\nCore primitives modeler.\n\nReturns\n\nInstance of :class: legacy.database.layout.EdbLayout\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> top_prims = edbapp.modeler.primitives_by_layer[\"TOP\"]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.source_terms_to_ground",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.source_terms_to_ground.html#source_terms_to_ground",
        "title": "source_terms_to_ground",
        "section": "source_terms_to_ground",
        "text": "A dictionary of SourceName, NodeToGround pairs,\nwhere NodeToGround is one of 0 (unspecified), 1 (negative), 2 (positive).\nstr: source name,\nint: node to ground pairs, 0 (unspecified), 1 (negative), 2 (positive) .\nsource_terms_to_ground\npython:dict"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.source_terms_to_ground",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.source_terms_to_ground.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.source_terms_to_ground",
        "title": "source_terms_to_ground > source_terms_to_ground > source_terms_to_ground",
        "section": "source_terms_to_ground > source_terms_to_ground",
        "text": "property SiwaveDCIRSettings.source_terms_to_ground\n\nA dictionary of SourceName, NodeToGround pairs,\nwhere NodeToGround is one of 0 (unspecified), 1 (negative), 2 (positive).\n\nReturns\n\npython:dict <str, int>\n\nstr: source name,\nint: node to ground pairs, 0 (unspecified), 1 (negative), 2 (positive) .\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_sweep.html#add_sweep",
        "title": "add_sweep",
        "section": "add_sweep",
        "text": "Add frequency sweep.\nName of the frequency sweep. The default is None.\nAdded for grpc compatibility.\nAdded for rpc compatibility.\nAdded for grpc compatibility.\nAdded for grpc compatibility.\nList of frequency points. The default is None.\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\nadd_sweep\npython:str\noptional\nNone\npython:str\noptional\npython:str\noptional\npython:str\noptional\noptional\npython:list\noptional\nNone\npython:str\noptional\n\"interpolation\"\n\"discrete\""
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_sweep.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.add_sweep",
        "title": "add_sweep > add_sweep > add_sweep",
        "section": "add_sweep > add_sweep",
        "text": "HfssSimulationSetup.add_sweep(name: str | None = None, distribution: str | None = None, start_freq: str | None = None, stop_freq: str | None = None, step=None, frequency_set: list | None = None, sweep_type: str = 'interpolation', **kwargs)\n\nAdd frequency sweep.\n\nParameters\n\nname\n\npython:str, optional\n\nName of the frequency sweep. The default is None.\n\ndistribution\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstart_freq\n\npython:str, optional\n\nAdded for rpc compatibility.\n\nstop_freq\n\npython:str, optional\n\nAdded for grpc compatibility.\n\nstep\n\noptional\n\nAdded for grpc compatibility.\n\nfrequency_set\n\npython:list, optional\n\nList of frequency points. The default is None.\n\nsweep_type\n\npython:str, optional\n\nSweep type. The default is \"interpolation\". Options are \"discrete\",”discrete”``.\n\nReturns\n\n\n\n——-\n\n\n\nExamples\n\n>>> setup1 = edbapp.create_siwave_syz_setup(\"setup1\")\n>>> setup1.add_sweep(name=\"sw1\", frequency_set=[\"linear count\", \"1MHz\", \"100MHz\", 10])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/mesh_operation",
        "href": "api/sim_setup_data/data/mesh_operation.html#mesh-operation",
        "title": "Mesh operation",
        "section": "Mesh operation",
        "text": "This class is the container of HFSS mesh operation.\nMeshOpType\nAn enumeration.\nMeshOperation\nMesh Operation Class.\nLengthMeshOperation\nMesh operation Length class.\nSkinDepthMeshOperation\nMesh operation Skin Depth class.\nMesh operation\nMeshOpType\nMeshOperation\nLengthMeshOperation\nSkinDepthMeshOperation"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_net",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_net.html#primitives_by_net",
        "title": "primitives_by_net",
        "section": "primitives_by_net",
        "text": "Primitives with net names as keys.\nDictionary of primitives with nat names as keys.\nprimitives_by_net\npython:dict"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_net",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives_by_net.html#pyedb.dotnet.database.modeler.Modeler.primitives_by_net",
        "title": "primitives_by_net > primitives_by_net > primitives_by_net",
        "section": "primitives_by_net > primitives_by_net",
        "text": "property Modeler.primitives_by_net\n\nPrimitives with net names as keys.\n\nReturns\n\npython:dict\n\nDictionary of primitives with nat names as keys.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin_group.html#create_circuit_port_on_pin_group",
        "title": "create_circuit_port_on_pin_group",
        "section": "create_circuit_port_on_pin_group",
        "text": "Create a port between two pin groups.\nName of the positive pin group.\nName of the negative pin group.\nImpedance of the port. Default is 50.\nPort name.\ncreate_circuit_port_on_pin_group\npython:str\npython:str\npython:int\npython:float\noptional\n50\npython:str\noptional"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin_group",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin_group.html#pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_pin_group",
        "title": "create_circuit_port_on_pin_group > create_circuit_port_on_pin_group > create_circuit_port_on_pin_group",
        "section": "create_circuit_port_on_pin_group > create_circuit_port_on_pin_group",
        "text": "EdbSiwave.create_circuit_port_on_pin_group(pos_pin_group_name, neg_pin_group_name, impedance=50, name=None)\n\nCreate a port between two pin groups.\n\nParameters\n\npos_pin_group_name\n\npython:str\n\nName of the positive pin group.\n\nneg_pin_group_name\n\npython:str\n\nName of the negative pin group.\n\nimpedance\n\npython:int, python:float, optional\n\nImpedance of the port. Default is 50.\n\nname\n\npython:str, optional\n\nPort name.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_point.html#is_point",
        "title": "is_point",
        "section": "is_point",
        "text": "Either if it is a point or not.\nis_point"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_point",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_point.html#pyedb.dotnet.database.edb_data.primitives_data.EDBArcs.is_point",
        "title": "is_point > is_point > is_point",
        "section": "is_point > is_point",
        "text": "property EDBArcs.is_point\n\nEither if it is a point or not.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.mesh_frequency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.mesh_frequency.html#mesh_frequency",
        "title": "mesh_frequency",
        "section": "mesh_frequency",
        "text": "User can override the default meshing applied by setting a custom frequency for mesh generation.\nExample: “1GHz”.\nmesh_frequency"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.mesh_frequency",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.mesh_frequency.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.mesh_frequency",
        "title": "mesh_frequency > mesh_frequency > mesh_frequency",
        "section": "mesh_frequency > mesh_frequency",
        "text": "property RaptorXSimulationAdvancedSettings.mesh_frequency\n\nUser can override the default meshing applied by setting a custom frequency for mesh generation.\nExample: “1GHz”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlExtent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlExtent.html#controlextent",
        "title": "ControlExtent",
        "section": "ControlExtent",
        "text": "Extent options.\nControlExtent"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlExtent",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlExtent.html#pyedb.dotnet.database.edb_data.control_file.ControlExtent",
        "title": "ControlExtent > ControlExtent > ControlExtent",
        "section": "ControlExtent > ControlExtent",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlExtent(type='bbox', dieltype='bbox', diel_hactor=0.25, airbox_hfactor=0.25, airbox_vr_p=0.25, airbox_vr_n=0.25, useradiation=True, honor_primitives=True, truncate_at_gnd=True)\n\nExtent options.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_conductor_property_values",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_conductor_property_values.html#default_conductor_property_values",
        "title": "default_conductor_property_values",
        "section": "default_conductor_property_values",
        "text": "default_conductor_property_values"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_conductor_property_values",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.default_conductor_property_values.html#pyedb.dotnet.database.materials.Materials.default_conductor_property_values",
        "title": "default_conductor_property_values > default_conductor_property_values > default_conductor_property_values",
        "section": "default_conductor_property_values > default_conductor_property_values",
        "text": "Materials.default_conductor_property_values = {'conductivity': 58000000, 'dielectric_loss_tangent': 0, 'magnetic_loss_tangent': 0, 'mass_density': 8933, 'permeability': 0.999991, 'permittivity': 1, 'poisson_ratio': 0.38, 'specific_heat': 385, 'thermal_conductivity': 400, 'thermal_expansion_coefficient': 1.77e-05, 'youngs_modulus': 120000000000}\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.via_report_path",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.via_report_path.html#via_report_path",
        "title": "via_report_path",
        "section": "via_report_path",
        "text": "Via Report Path.\nvia_report_path\npython:str\npath\nfor\nthe\nVia"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.via_report_path",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.via_report_path.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.via_report_path",
        "title": "via_report_path > via_report_path > via_report_path",
        "section": "via_report_path > via_report_path",
        "text": "property SiwaveDCIRSettings.via_report_path\n\nVia Report Path.\n\nReturns\n\npython:str\n\n\n\npath for the Via Report.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.layer.html#layer",
        "title": "layer",
        "section": "layer",
        "text": "Get layer of the terminal.\nlayer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.layer.html#pyedb.dotnet.database.edb_data.ports.WavePort.layer",
        "title": "layer > layer > layer",
        "section": "layer > layer",
        "text": "property WavePort.layer\n\nGet layer of the terminal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#pyedb-documentation-0480",
        "title": "PyEDB documentation 0.48.0",
        "section": "PyEDB documentation 0.48.0",
        "text": "PyEDB is a Python library that interacts directly with the PyEDB-Core\nAPI to make scripting simpler.\nFuture build breaking changes in Linux\nIf you want to know more about the build breaking change that is going to happen in a future version, see the build_breaking_change.\nLearn more about PyEDB and how to install and use it. Also view\nimportant version, interface, and troubleshooting information.\nUnderstand how to use PyEDB by looking at some simple tutorials.\nUnderstand PyEDB API endpoints, their capabilities,\nand how to interact with them programmatically.\nExplore examples that show how to use PyEDB to\nperform many different types of simulations.\nLearn how to contribute to the PyEDB codebase or documentation.\nPyEDB documentation 0.48.0"
    },
    {
        "objectID": "index",
        "href": "index.html#indices-and-tables",
        "title": "PyEDB documentation 0.48.0 > Indices and tables",
        "section": "Indices and tables",
        "text": "genindex\nmodindex\nsearch\nIndices and tables"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add.html#add",
        "title": "add",
        "section": "add",
        "text": "add"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add",
        "title": "add > add > add",
        "section": "add > add",
        "text": "SweepData.add(sweep_type, start, stop, increment)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.passivity_tolerance",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.passivity_tolerance.html#passivity_tolerance",
        "title": "passivity_tolerance",
        "section": "passivity_tolerance",
        "text": "Retrieve the value for the passivity tolerance when used.\npassivity_tolerance\npython:float\nThe\npassivity\ntolerance\ncriteria\nfor\nthe\nfrequency"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.passivity_tolerance",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.passivity_tolerance.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.passivity_tolerance",
        "title": "passivity_tolerance > passivity_tolerance > passivity_tolerance",
        "section": "passivity_tolerance > passivity_tolerance",
        "text": "property SimulationConfigurationAc.passivity_tolerance\n\nRetrieve the value for the passivity tolerance when used.\n\nReturns\n\npython:float\n\n\n\nThe passivity tolerance criteria for the frequency sweep.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.extended_nets",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.extended_nets.html#extended_nets",
        "title": "extended_nets",
        "section": "extended_nets",
        "text": "Get all extended nets.\nextended_nets\nlegacy.database.nets.EdbExtendedNets"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.extended_nets",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.extended_nets.html#pyedb.dotnet.edb.Edb.extended_nets",
        "title": "extended_nets > extended_nets > extended_nets",
        "section": "extended_nets > extended_nets",
        "text": "property Edb.extended_nets\n\nGet all extended nets.\n\nReturns\n\nlegacy.database.nets.EdbExtendedNets\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> edbapp.extended_nets\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.remove_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.remove_layer.html#remove_layer",
        "title": "remove_layer",
        "section": "remove_layer",
        "text": "Remove a layer from stackup.\nName of the layer to remove.\nremove_layer\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.remove_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.remove_layer.html#pyedb.dotnet.database.stackup.Stackup.remove_layer",
        "title": "remove_layer > remove_layer > remove_layer",
        "section": "remove_layer > remove_layer",
        "text": "Stackup.remove_layer(name)\n\nRemove a layer from stackup.\n\nParameters\n\nname\n\npython:str\n\nName of the layer to remove.\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.settings.html#settings",
        "title": "settings",
        "section": "settings",
        "text": "settings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.settings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.settings",
        "title": "settings > settings > settings",
        "section": "settings > settings",
        "text": "property RaptorXSimulationSetup.settings\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_dc_short",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_dc_short.html#find_dc_short",
        "title": "find_dc_short",
        "section": "find_dc_short",
        "text": "Find DC-shorted nets.\nIf True, rename all the nets. (default)\nIf False, only report dc shorts.\n[[net name, net name]].\nfind_dc_short\noptional\nList\nList\npython:str\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_dc_short",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_dc_short.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.find_dc_short",
        "title": "find_dc_short > find_dc_short > find_dc_short",
        "section": "find_dc_short > find_dc_short",
        "text": "EDBNetsData.find_dc_short(fix=False)\n\nFind DC-shorted nets.\n\nParameters\n\nfix\n\nbool, optional\n\nIf True, rename all the nets. (default)\nIf False, only report dc shorts.\n\nReturns\n\nList[List[python:str, python:str]]\n\n[[net name, net name]].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweeps",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweeps.html#sweeps",
        "title": "sweeps",
        "section": "sweeps",
        "text": "List of frequency sweeps.\nsweeps"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweeps",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweeps.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweeps",
        "title": "sweeps > sweeps > sweeps",
        "section": "sweeps > sweeps",
        "text": "property RaptorXSimulationSetup.sweeps\n\nList of frequency sweeps.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec5_bondwire_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec5_bondwire_defs.html#jedec5_bondwire_defs",
        "title": "jedec5_bondwire_defs",
        "section": "jedec5_bondwire_defs",
        "text": "Get all JEDEC5 bondwire definitions in this Database.\njedec5_bondwire_defs\npython:list\nJedec5BondwireDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec5_bondwire_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.jedec5_bondwire_defs.html#pyedb.dotnet.edb.Edb.jedec5_bondwire_defs",
        "title": "jedec5_bondwire_defs > jedec5_bondwire_defs > jedec5_bondwire_defs",
        "section": "jedec5_bondwire_defs > jedec5_bondwire_defs",
        "text": "property Edb.jedec5_bondwire_defs\n\nGet all JEDEC5 bondwire definitions in this Database.\n\nReturns\n\npython:list[Jedec5BondwireDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.shortest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.shortest_arc.html#shortest_arc",
        "title": "shortest_arc",
        "section": "shortest_arc",
        "text": "Get the longest arc.\nshortest_arc"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.shortest_arc",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.shortest_arc.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.shortest_arc",
        "title": "shortest_arc > shortest_arc > shortest_arc",
        "section": "shortest_arc > shortest_arc",
        "text": "property EDBPadstackInstance.shortest_arc\n\nGet the longest arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_init_mesh_edge_length",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_init_mesh_edge_length.html#max_init_mesh_edge_length",
        "title": "max_init_mesh_edge_length",
        "section": "max_init_mesh_edge_length",
        "text": "Initial mesh maximum edge length.\nmax_init_mesh_edge_length\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_init_mesh_edge_length",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_init_mesh_edge_length.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_init_mesh_edge_length",
        "title": "max_init_mesh_edge_length > max_init_mesh_edge_length > max_init_mesh_edge_length",
        "section": "max_init_mesh_edge_length > max_init_mesh_edge_length",
        "text": "property DCAdvancedSettings.max_init_mesh_edge_length\n\nInitial mesh maximum edge length.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.active_cell",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.active_cell.html#active_cell",
        "title": "active_cell",
        "section": "active_cell",
        "text": "Active cell.\nactive_cell"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.active_cell",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.active_cell.html#pyedb.dotnet.edb.Edb.active_cell",
        "title": "active_cell > active_cell > active_cell",
        "section": "active_cell > active_cell",
        "text": "property Edb.active_cell\n\nActive cell.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_back_drill_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_back_drill_by_layer.html#set_back_drill_by_layer",
        "title": "set_back_drill_by_layer",
        "section": "set_back_drill_by_layer",
        "text": "Method added to bring compatibility with grpc.\nset_back_drill_by_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_back_drill_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_back_drill_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.set_back_drill_by_layer",
        "title": "set_back_drill_by_layer > set_back_drill_by_layer > set_back_drill_by_layer",
        "section": "set_back_drill_by_layer > set_back_drill_by_layer",
        "text": "EDBPadstackInstance.set_back_drill_by_layer(drill_to_layer, diameter, offset)\n\nMethod added to bring compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.html#simulationsetup",
        "title": "SimulationSetup",
        "section": "SimulationSetup",
        "text": "Provide base simulation setup.\nInherited object.\nEDB object.\nSimulationSetup.add_frequency_sweep([name, ...])\nAdd frequency sweep.\nSimulationSetup.add_sweep([name, ...])\nAdd frequency sweep.\nSimulationSetup.delete()\nDelete current simulation setup.\nSimulationSetup.delete_frequency_sweep(...)\nDelete a frequency sweep.\nSimulationSetup.get_simulation_settings()\n\nSimulationSetup.set_sim_setup_info(...)\n\nSimulationSetup.set_simulation_settings(...)\n\nSimulationSetup.enabled\nFlag indicating if the setup is enabled.\nSimulationSetup.frequency_sweeps\n\nSimulationSetup.get_sim_setup_info\nGet simulation setup information.\nSimulationSetup.is_null\nAdding this property for compatibility with grpc.\nSimulationSetup.mesh_operations\n\nSimulationSetup.name\nName of the setup.\nSimulationSetup.position\nPosition in the setup list.\nSimulationSetup.setup_type\nType of the setup.\nSimulationSetup.sim_setup_info\n\nSimulationSetup.sweep_data\nAdding property for compatibility with grpc.\nSimulationSetup.sweeps\nList of frequency sweeps.\nSimulationSetup.type\n\nSimulationSetup\npyedb.dotnet.edb.Edb\nAnsys.Ansoft.Edb.Utility.SIWaveSimulationSetup\nSimulationSetup.add_frequency_sweep\nSimulationSetup.add_sweep\nSimulationSetup.delete\nSimulationSetup.delete_frequency_sweep\nSimulationSetup.get_simulation_settings\nSimulationSetup.set_sim_setup_info\nSimulationSetup.set_simulation_settings\nSimulationSetup.enabled\nSimulationSetup.frequency_sweeps\nSimulationSetup.get_sim_setup_info\nSimulationSetup.is_null\nSimulationSetup.mesh_operations\nSimulationSetup.name\nSimulationSetup.position\nSimulationSetup.setup_type\nSimulationSetup.sim_setup_info\nSimulationSetup.sweep_data\nSimulationSetup.sweeps\nSimulationSetup.type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup",
        "title": "SimulationSetup > SimulationSetup > SimulationSetup",
        "section": "SimulationSetup > SimulationSetup",
        "text": "class pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup(pedb, edb_object=None)\n\nProvide base simulation setup.\n\nParameters\n\npedb\n\npyedb.dotnet.edb.Edb\n\nInherited object.\n\nedb_object\n\nAnsys.Ansoft.Edb.Utility.SIWaveSimulationSetup,\n\n\n\n:class:`Ansys.Ansoft.Edb.Utility.SIWDCIRSimulationSettings`,\n\n\n\n:class:`Ansys.Ansoft.Edb.Utility.HFSSSimulationSettings`\n\nEDB object.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSimulationSetup.add_frequency_sweep([name, ...])\n\nAdd frequency sweep.\n\nSimulationSetup.add_sweep([name, ...])\n\nAdd frequency sweep.\n\nSimulationSetup.delete()\n\nDelete current simulation setup.\n\nSimulationSetup.delete_frequency_sweep(...)\n\nDelete a frequency sweep.\n\nSimulationSetup.get_simulation_settings()\n\n\n\nSimulationSetup.set_sim_setup_info(...)\n\n\n\nSimulationSetup.set_simulation_settings(...)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nSimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\nSimulationSetup.frequency_sweeps\n\n\n\nSimulationSetup.get_sim_setup_info\n\nGet simulation setup information.\n\nSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\nSimulationSetup.mesh_operations\n\n\n\nSimulationSetup.name\n\nName of the setup.\n\nSimulationSetup.position\n\nPosition in the setup list.\n\nSimulationSetup.setup_type\n\nType of the setup.\n\nSimulationSetup.sim_setup_info\n\n\n\nSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\nSimulationSetup.sweeps\n\nList of frequency sweeps.\n\nSimulationSetup.type\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_source",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_source.html#create_voltage_source",
        "title": "create_voltage_source",
        "section": "create_voltage_source",
        "text": "Create a voltage source.\nPositive terminal of the port.\nNegative terminal of the source.\ncreate_voltage_source\npyedb.dotnet.database.edb_data.terminals.EdgeTerminal\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal\npyedb.dotnet.database.edb_data.terminals.PointTerminal\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal\npyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal\npyedb.dotnet.database.edb_data.terminals.PointTerminal\npyedb.dotnet.database.edb_data.terminals.PinGroupTerminal"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_source",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_voltage_source.html#pyedb.dotnet.edb.Edb.create_voltage_source",
        "title": "create_voltage_source > create_voltage_source > create_voltage_source",
        "section": "create_voltage_source > create_voltage_source",
        "text": "Edb.create_voltage_source(terminal, ref_terminal)\n\nCreate a voltage source.\n\nParameters\n\nterminal\n\npyedb.dotnet.database.edb_data.terminals.EdgeTerminal,             pyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,             pyedb.dotnet.database.edb_data.terminals.PointTerminal,             pyedb.dotnet.database.edb_data.terminals.PinGroupTerminal\n\nPositive terminal of the port.\n\nref_terminal\n\nclass:pyedb.dotnet.database.edb_data.terminals.EdgeTerminal,             pyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,             pyedb.dotnet.database.edb_data.terminals.PointTerminal,             pyedb.dotnet.database.edb_data.terminals.PinGroupTerminal\n\nNegative terminal of the source.\n\nReturns\n\nclass:legacy.database.edb_data.ports.ExcitationSources\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.primitive_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.primitive_type.html#primitive_type",
        "title": "primitive_type",
        "section": "primitive_type",
        "text": "Return the type of the primitive.\nExpected output is among \"circle\", \"rectangle\",``”polygon”,”path”`` or \"bondwire\".\nprimitive_type\n\"circle\"\n\"rectangle\"\n,\n\"bondwire\"\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.primitive_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.primitive_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.primitive_type",
        "title": "primitive_type > primitive_type > primitive_type",
        "section": "primitive_type > primitive_type",
        "text": "property EDBPadstackInstance.primitive_type\n\nReturn the type of the primitive.\n\nExpected output is among \"circle\", \"rectangle\",``”polygon”,”path”`` or \"bondwire\".\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.export",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.export.html#export",
        "title": "export",
        "section": "export",
        "text": "Export the configuration data from layout to a file.\nFile path to export the configuration data.\nWhether to export stackup or not.\nWhether to export package definitions or not.\nWhether to export setups or not.\nWhether to export sources or not.\nWhether to export ports or not.\nWhether to export nets.\nWhether to export pin groups.\nWhether to export operations.\nWhether to export component.\nWhether to export boundaries.\nWhether to export s_parameters.\nWhether to export padstacks.\nWhether to export general information.\nexport\npython:str\nPath"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.configuration.Configuration.export",
        "href": "api/_autosummary/pyedb.configuration.configuration.Configuration.export.html#pyedb.configuration.configuration.Configuration.export",
        "title": "export > export > export",
        "section": "export > export",
        "text": "Configuration.export(file_path, stackup=True, package_definitions=False, setups=True, sources=True, ports=True, nets=True, pin_groups=True, operations=True, components=True, boundaries=True, s_parameters=True, padstacks=True, general=True)\n\nExport the configuration data from layout to a file.\n\nParameters\n\nfile_path\n\npython:str, Path\n\nFile path to export the configuration data.\n\nstackup\n\nbool\n\nWhether to export stackup or not.\n\npackage_definitions\n\nbool\n\nWhether to export package definitions or not.\n\nsetups\n\nbool\n\nWhether to export setups or not.\n\nsources\n\nbool\n\nWhether to export sources or not.\n\nports\n\nbool\n\nWhether to export ports or not.\n\nnets\n\nbool\n\nWhether to export nets.\n\npin_groups\n\nbool\n\nWhether to export pin groups.\n\noperations\n\nbool\n\nWhether to export operations.\n\ncomponents\n\nbool\n\nWhether to export component.\n\nboundaries\n\nbool\n\nWhether to export boundaries.\n\ns_parameters\n\nbool\n\nWhether to export s_parameters.\n\npadstacks\n\nbool\n\nWhether to export padstacks.\n\ngeneral\n\nbool\n\nWhether to export general information.\n\nReturns\n\n\n\n——-\n\n\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.export_config",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.export_config.html#export_config",
        "title": "export_config",
        "section": "export_config",
        "text": "Export HFSS extent information.\nReturns:\ndict\nParameters of the HFSS extent information.\nexport_config"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.export_config",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.export_config.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.export_config",
        "title": "export_config > export_config > export_config",
        "section": "export_config > export_config",
        "text": "HfssExtentInfo.export_config()\n\nExport HFSS extent information.\n\nReturns:\ndict\n\nParameters of the HFSS extent information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_length.html#restrict_length",
        "title": "restrict_length",
        "section": "restrict_length",
        "text": "Whether to restrict length of elements.\nrestrict_length"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_length.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_length",
        "title": "restrict_length > restrict_length > restrict_length",
        "section": "restrict_length > restrict_length",
        "text": "property LengthMeshOperation.restrict_length\n\nWhether to restrict length of elements.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.position",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.position.html#position",
        "title": "position",
        "section": "position",
        "text": "Position in the setup list.\nposition"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.position",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.position.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property RaptorXSimulationSetup.position\n\nPosition in the setup list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add_frequencies",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add_frequencies.html#add_frequencies",
        "title": "add_frequencies",
        "section": "add_frequencies",
        "text": "add_frequencies"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add_frequencies",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add_frequencies.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.add_frequencies",
        "title": "add_frequencies > add_frequencies > add_frequencies",
        "section": "add_frequencies > add_frequencies",
        "text": "SweepData.add_frequencies(frequencies)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.protected_attributes.html#pyedb.configuration.cfg_ports_sources.CfgSource.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgSource.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "apply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroups.apply.html#pyedb.configuration.cfg_pin_groups.CfgPinGroups.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgPinGroups.apply()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets.html#nets",
        "title": "nets",
        "section": "nets",
        "text": "Nets.\nDictionary of nets.\nnets\npython:dict\npython:str\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.nets.html#pyedb.dotnet.database.nets.EdbNets.nets",
        "title": "nets > nets > nets",
        "section": "nets > nets",
        "text": "property EdbNets.nets\n\nNets.\n\nReturns\n\npython:dict[python:str, pyedb.dotnet.database.edb_data.nets_data.EDBNetsData]\n\nDictionary of nets.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.lock_file",
        "href": "api/_autosummary/pyedb.siwave.Siwave.lock_file.html#lock_file",
        "title": "lock_file",
        "section": "lock_file",
        "text": "Lock file.\nFull absolute path and name for the project lock file.\nlock_file\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.lock_file",
        "href": "api/_autosummary/pyedb.siwave.Siwave.lock_file.html#pyedb.siwave.Siwave.lock_file",
        "title": "lock_file > lock_file > lock_file",
        "section": "lock_file > lock_file",
        "text": "property Siwave.lock_file\n\nLock file.\n\nReturns\n\npython:str\n\nFull absolute path and name for the project lock file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layers",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layers.html#number_of_layers",
        "title": "number_of_layers",
        "section": "number_of_layers",
        "text": "Adding property for grpc compatibility.\nnumber_of_layers"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layers",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layers.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.number_of_layers",
        "title": "number_of_layers > number_of_layers > number_of_layers",
        "section": "number_of_layers > number_of_layers",
        "text": "property SkinDepthMeshOperation.number_of_layers\n\nAdding property for grpc compatibility.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_use_minimal_comp_defaults",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_use_minimal_comp_defaults.html#icepak_use_minimal_comp_defaults",
        "title": "icepak_use_minimal_comp_defaults",
        "section": "icepak_use_minimal_comp_defaults",
        "text": "Icepak default setting. If “True”, only resistor are active in Icepak simulation.\nThe power dissipation of the resistors are calculated from DC results.\nicepak_use_minimal_comp_defaults"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_use_minimal_comp_defaults",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.icepak_use_minimal_comp_defaults.html#pyedb.dotnet.database.siwave.EdbSiwave.icepak_use_minimal_comp_defaults",
        "title": "icepak_use_minimal_comp_defaults > icepak_use_minimal_comp_defaults > icepak_use_minimal_comp_defaults",
        "section": "icepak_use_minimal_comp_defaults > icepak_use_minimal_comp_defaults",
        "text": "property EdbSiwave.icepak_use_minimal_comp_defaults\n\nIcepak default setting. If “True”, only resistor are active in Icepak simulation.\nThe power dissipation of the resistors are calculated from DC results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.apply.html#apply",
        "title": "apply",
        "section": "apply",
        "text": "Imports boundary information from JSON.\napply"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.apply",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.apply.html#pyedb.configuration.cfg_boundaries.CfgBoundaries.apply",
        "title": "apply > apply > apply",
        "section": "apply > apply",
        "text": "CfgBoundaries.apply()\n\nImports boundary information from JSON.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_init_mesh_edge_length",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_init_mesh_edge_length.html#dc_max_init_mesh_edge_length",
        "title": "dc_max_init_mesh_edge_length",
        "section": "dc_max_init_mesh_edge_length",
        "text": "Retrieve the maximum initial mesh edge value.\nmaximum mesh length.\ndc_max_init_mesh_edge_length\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_init_mesh_edge_length",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_init_mesh_edge_length.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_max_init_mesh_edge_length",
        "title": "dc_max_init_mesh_edge_length > dc_max_init_mesh_edge_length > dc_max_init_mesh_edge_length",
        "section": "dc_max_init_mesh_edge_length > dc_max_init_mesh_edge_length",
        "text": "property SimulationConfigurationDc.dc_max_init_mesh_edge_length\n\nRetrieve the maximum initial mesh edge value.\n\nReturns\n\npython:str\n\nmaximum mesh length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.magnitude",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.magnitude.html#magnitude",
        "title": "magnitude",
        "section": "magnitude",
        "text": "Get the magnitude of the source.\nmagnitude"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.magnitude",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.magnitude.html#pyedb.dotnet.database.edb_data.ports.WavePort.magnitude",
        "title": "magnitude > magnitude > magnitude",
        "section": "magnitude > magnitude",
        "text": "property WavePort.magnitude\n\nGet the magnitude of the source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.energy_error",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.energy_error.html#energy_error",
        "title": "energy_error",
        "section": "energy_error",
        "text": "Energy error.\nenergy_error\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.energy_error",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.energy_error.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.energy_error",
        "title": "energy_error > energy_error > energy_error",
        "section": "energy_error > energy_error",
        "text": "property DCAdvancedSettings.energy_error\n\nEnergy error.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.import_cadence_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.import_cadence_file.html#import_cadence_file",
        "title": "import_cadence_file",
        "section": "import_cadence_file",
        "text": "Import a board file and generate an edb.def file in the working directory.\nFull path to the board file.\nDirectory in which to create the aedb folder. The default value is None,\nin which case the AEDB file is given the same name as the board file. Only\nthe extension differs.\nFull path to the Ansys translator.\nWhether to use the PPE License. The default is False.\nTrue when successful, False when failed.\nimport_cadence_file\nedb.def\npython:str\npython:str\noptional\naedb\nNone\npython:str\noptional\noptional\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.import_cadence_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.import_cadence_file.html#pyedb.dotnet.edb.Edb.import_cadence_file",
        "title": "import_cadence_file > import_cadence_file > import_cadence_file",
        "section": "import_cadence_file > import_cadence_file",
        "text": "Edb.import_cadence_file(inputBrd, WorkDir=None, anstranslator_full_path='', use_ppe=False)\n\nImport a board file and generate an edb.def file in the working directory.\n\nParameters\n\ninputBrd\n\npython:str\n\nFull path to the board file.\n\nWorkDir\n\npython:str, optional\n\nDirectory in which to create the aedb folder. The default value is None,\nin which case the AEDB file is given the same name as the board file. Only\nthe extension differs.\n\nanstranslator_full_path\n\npython:str, optional\n\nFull path to the Ansys translator.\n\nuse_ppe\n\nbool, optional\n\nWhether to use the PPE License. The default is False.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.nets",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.nets.html#nets",
        "title": "nets",
        "section": "nets",
        "text": "Core nets.\nnets\nlegacy.database.nets.EdbNets"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.nets",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.nets.html#pyedb.dotnet.edb.Edb.nets",
        "title": "nets > nets > nets",
        "section": "nets > nets",
        "text": "property Edb.nets\n\nCore nets.\n\nReturns\n\nlegacy.database.nets.EdbNets\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb\"myproject.aedb\")\n>>> edbapp.nets.find_or_create_net(\"GND\")\n>>> edbapp.nets.find_and_fix_disjoint_nets(\"GND\", keep_only_main_net=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.passivity_tolerance",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.passivity_tolerance.html#passivity_tolerance",
        "title": "passivity_tolerance",
        "section": "passivity_tolerance",
        "text": "Tolerance for passivity enforcement.\npassivity_tolerance\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.passivity_tolerance",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.passivity_tolerance.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.passivity_tolerance",
        "title": "passivity_tolerance > passivity_tolerance > passivity_tolerance",
        "section": "passivity_tolerance > passivity_tolerance",
        "text": "property SweepData.passivity_tolerance\n\nTolerance for passivity enforcement.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_material.html#load_material",
        "title": "load_material",
        "section": "load_material",
        "text": "Load material.\nload_material"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_material",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.load_material.html#pyedb.dotnet.database.materials.Materials.load_material",
        "title": "load_material > load_material > load_material",
        "section": "load_material > load_material",
        "text": "Materials.load_material(material: dict)\n\nLoad material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_freq.html#mesh_freq",
        "title": "mesh_freq",
        "section": "mesh_freq",
        "text": "Retrieve the meshing frequency for the HFSS adaptive convergence.\nmesh_freq\npython:float\nThe\nvalue\nof\nthe\nfrequency"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_freq",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_freq.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.mesh_freq",
        "title": "mesh_freq > mesh_freq > mesh_freq",
        "section": "mesh_freq > mesh_freq",
        "text": "property SimulationConfigurationAc.mesh_freq\n\nRetrieve the meshing frequency for the HFSS adaptive convergence.\n\nReturns\n\npython:float\n\n\n\nThe value of the frequency point.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_coplane_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_coplane_coupling.html#include_coplane_coupling",
        "title": "include_coplane_coupling",
        "section": "include_coplane_coupling",
        "text": "Whether to enable coupling between traces and adjacent plane edges.\nThis option provides a model for crosstalk between signal lines and planes.\nPlane edges couple to traces when they are parallel.\nTraces and coplanar edges that are oblique to each other do not overlap\nand cannot be considered for coupling.\nTrue if coplane coupling is used, False otherwise.\ninclude_coplane_coupling\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_coplane_coupling",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_coplane_coupling.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.include_coplane_coupling",
        "title": "include_coplane_coupling > include_coplane_coupling > include_coplane_coupling",
        "section": "include_coplane_coupling > include_coplane_coupling",
        "text": "property AdvancedSettings.include_coplane_coupling\n\nWhether to enable coupling between traces and adjacent plane edges.\nThis option provides a model for crosstalk between signal lines and planes.\nPlane edges couple to traces when they are parallel.\nTraces and coplanar edges that are oblique to each other do not overlap\nand cannot be considered for coupling.\n\nReturns\n\nbool\n\nTrue if coplane coupling is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter.html#hole_diameter",
        "title": "hole_diameter",
        "section": "hole_diameter",
        "text": "Hole diameter.\nhole_diameter"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter",
        "title": "hole_diameter > hole_diameter > hole_diameter",
        "section": "hole_diameter > hole_diameter",
        "text": "property EDBPadstack.hole_diameter\n\nHole diameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Flag indicating if the setup is enabled.\nenabled"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.enabled.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property HFSSPISimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_net.html#create_circuit_port_on_net",
        "title": "create_circuit_port_on_net",
        "section": "create_circuit_port_on_net",
        "text": "Create a circuit port on a NET.\nIt groups all pins belonging to the specified net and then applies the port on PinGroups.\nName of the positive component.\nName of the positive net.\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\nName of the negative net name. The default is None which will look for GND Nets.\nPort impedance value. The default is 50.\nName of the port. The default is \"\".\nThe name of the port.\ncreate_circuit_port_on_net\npython:str\npython:str\npython:str\noptional\nNone\npython:str\noptional\nNone\npython:float\noptional\n50\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_net.html#pyedb.dotnet.database.siwave.EdbSiwave.create_circuit_port_on_net",
        "title": "create_circuit_port_on_net > create_circuit_port_on_net > create_circuit_port_on_net",
        "section": "create_circuit_port_on_net > create_circuit_port_on_net",
        "text": "EdbSiwave.create_circuit_port_on_net(positive_component_name, positive_net_name, negative_component_name=None, negative_net_name=None, impedance_value=50, port_name='')\n\nCreate a circuit port on a NET.\n\nIt groups all pins belonging to the specified net and then applies the port on PinGroups.\n\nParameters\n\npositive_component_name\n\npython:str\n\nName of the positive component.\n\npositive_net_name\n\npython:str\n\nName of the positive net.\n\nnegative_component_name\n\npython:str, optional\n\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\n\nnegative_net_name\n\npython:str, optional\n\nName of the negative net name. The default is None which will look for GND Nets.\n\nimpedance_value\n\npython:float, optional\n\nPort impedance value. The default is 50.\n\nport_name\n\npython:str, optional\n\nName of the port. The default is \"\".\n\nReturns\n\npython:str\n\nThe name of the port.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edbapp.siwave.create_circuit_port_on_net(\"U2A5\", \"V1P5_S3\", \"U2A5\", \"GND\", 50, \"port_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x.html#hole_offset_x",
        "title": "hole_offset_x",
        "section": "hole_offset_x",
        "text": "Hole offset for the X axis.\nHole offset value for the X axis.\nhole_offset_x\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_x",
        "title": "hole_offset_x > hole_offset_x > hole_offset_x",
        "section": "hole_offset_x > hole_offset_x",
        "text": "property EDBPadstack.hole_offset_x\n\nHole offset for the X axis.\n\nReturns\n\npython:str\n\nHole offset value for the X axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.advanced_mesh_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.advanced_mesh_settings.html#advanced_mesh_settings",
        "title": "advanced_mesh_settings",
        "section": "advanced_mesh_settings",
        "text": "Advanced mesh settings Class.\nadvanced_mesh_settings\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdvancedMeshSettings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.advanced_mesh_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.advanced_mesh_settings.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.advanced_mesh_settings",
        "title": "advanced_mesh_settings > advanced_mesh_settings > advanced_mesh_settings",
        "section": "advanced_mesh_settings > advanced_mesh_settings",
        "text": "property HfssSimulationSetup.advanced_mesh_settings\n\nAdvanced mesh settings Class.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdvancedMeshSettings\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_powertree",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_powertree.html#get_powertree",
        "title": "get_powertree",
        "section": "get_powertree",
        "text": "Retrieve the power tree.\nName of the power net.\nget_powertree\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_powertree",
        "href": "api/_autosummary/pyedb.dotnet.database.nets.EdbNets.get_powertree.html#pyedb.dotnet.database.nets.EdbNets.get_powertree",
        "title": "get_powertree > get_powertree > get_powertree",
        "section": "get_powertree > get_powertree",
        "text": "EdbNets.get_powertree(power_net_name, ground_nets)\n\nRetrieve the power tree.\n\nParameters\n\npower_net_name\n\npython:str\n\nName of the power net.\n\nground_nets\n\n\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_void.html#is_void",
        "title": "is_void",
        "section": "is_void",
        "text": "Either if the primitive is a void or not.\nis_void"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_void.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.is_void",
        "title": "is_void > is_void > is_void",
        "section": "is_void > is_void",
        "text": "property EdbPolygon.is_void\n\nEither if the primitive is a void or not.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_lde",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_lde.html#use_lde",
        "title": "use_lde",
        "section": "use_lde",
        "text": "Takes into account the variation of resistivity as a function of a conductor’s drawn width and spacing to\nits neighbors or as a function of its local density, due to dishing, slotting, cladding thickness, and so\non.\nuse_lde"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_lde",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_lde.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_lde",
        "title": "use_lde > use_lde > use_lde",
        "section": "use_lde > use_lde",
        "text": "property RaptorXSimulationAdvancedSettings.use_lde\n\nTakes into account the variation of resistivity as a function of a conductor’s drawn width and spacing to\nits neighbors or as a function of its local density, due to dishing, slotting, cladding thickness, and so\non.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bounding_box",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bounding_box.html#bounding_box",
        "title": "bounding_box",
        "section": "bounding_box",
        "text": "Get bounding box of the padstack instance.\nBecause this method is slow, the bounding box is stored in a variable and reused.\nbounding_box\npython:list\nof\npython:float"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bounding_box",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bounding_box.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.bounding_box",
        "title": "bounding_box > bounding_box > bounding_box",
        "section": "bounding_box > bounding_box",
        "text": "property EDBPadstackInstance.bounding_box\n\nGet bounding box of the padstack instance.\nBecause this method is slow, the bounding box is stored in a variable and reused.\n\nReturns\n\npython:list of python:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_via_sides",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_via_sides.html#num_via_sides",
        "title": "num_via_sides",
        "section": "num_via_sides",
        "text": "Number of via sides.\nnum_via_sides\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_via_sides",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_via_sides.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.num_via_sides",
        "title": "num_via_sides > num_via_sides > num_via_sides",
        "section": "num_via_sides > num_via_sides",
        "text": "property DCAdvancedSettings.num_via_sides\n\nNumber of via sides.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Edb Dotnet Api Database NetClass.IsNull().\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.is_null.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property EDBNetClassData.is_null\n\nEdb Dotnet Api Database NetClass.IsNull().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.edge_mesh",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.edge_mesh.html#edge_mesh",
        "title": "edge_mesh",
        "section": "edge_mesh",
        "text": "This option controls both, the thickness and the width of the exterior conductor filament.\nWhen specified, it prevails over the Mesh Frequency or Max Frequency during mesh calculation.\nExample: “0.8um”.\nedge_mesh"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.edge_mesh",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.edge_mesh.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.edge_mesh",
        "title": "edge_mesh > edge_mesh > edge_mesh",
        "section": "edge_mesh > edge_mesh",
        "text": "property RaptorXSimulationAdvancedSettings.edge_mesh\n\nThis option controls both, the thickness and the width of the exterior conductor filament.\nWhen specified, it prevails over the Mesh Frequency or Max Frequency during mesh calculation.\nExample: “0.8um”.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.trim_component_reference_size",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.trim_component_reference_size.html#trim_component_reference_size",
        "title": "trim_component_reference_size",
        "section": "trim_component_reference_size",
        "text": "Trim the common component reference to the minimally acceptable size.\nEdb_DATA.SimulationConfiguration object\nTrue, reduce the reference to a box covering only the active terminals (i.e. those with\nFalse, reduce the reference to the minimal size needed to cover all pins\nTrue when succeeded, False when failed.\ntrim_component_reference_size"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.trim_component_reference_size",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.trim_component_reference_size.html#pyedb.dotnet.database.hfss.EdbHfss.trim_component_reference_size",
        "title": "trim_component_reference_size > trim_component_reference_size > trim_component_reference_size",
        "section": "trim_component_reference_size > trim_component_reference_size",
        "text": "EdbHfss.trim_component_reference_size(simulation_setup=None, trim_to_terminals=False)\n\nTrim the common component reference to the minimally acceptable size.\n\nParameters\n\nsimulation_setup\n\nEdb_DATA.SimulationConfiguration object\n\ntrim_to_terminals\n\nbool.\n\nTrue, reduce the reference to a box covering only the active terminals (i.e. those with\n\nports).\n\nFalse, reduce the reference to the minimal size needed to cover all pins\n\nReturns\n\nbool\n\nTrue when succeeded, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_interpolating",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_interpolating.html#sweep_interpolating",
        "title": "sweep_interpolating",
        "section": "sweep_interpolating",
        "text": "Retrieve boolean to add a sweep interpolating sweep.\nsweep_interpolating\nTrue\nwhen\na\nsweep\ninterpolating\nis\ndefined\nFalse\nwhen\na\ndiscrete\none\nis\ndefined"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_interpolating",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_interpolating.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.sweep_interpolating",
        "title": "sweep_interpolating > sweep_interpolating > sweep_interpolating",
        "section": "sweep_interpolating > sweep_interpolating",
        "text": "property SimulationConfigurationAc.sweep_interpolating\n\nRetrieve boolean to add a sweep interpolating sweep.\n\nReturns\n\nbool\n\n\n\nTrue when a sweep interpolating is defined, False when a discrete one is defined instead.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweep_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweep_data.html#sweep_data",
        "title": "sweep_data",
        "section": "sweep_data",
        "text": "Adding property for compatibility with grpc.\nsweep_data"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweep_data",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweep_data.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.sweep_data",
        "title": "sweep_data > sweep_data > sweep_data",
        "section": "sweep_data > sweep_data",
        "text": "property RaptorXSimulationSetup.sweep_data\n\nAdding property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies.html#set_frequencies",
        "title": "set_frequencies",
        "section": "set_frequencies",
        "text": "Set frequency list to the sweep frequencies.\n1 - frequency type (\"linear count\", \"log scale\", or \"linear scale\")\n2 - start frequency\n3 - stop frequency\n4 - step frequency or count\nTrue if correctly executed, False otherwise.\nset_frequencies\npython:list\noptional\nNone\n\"linear count\"\n\"log scale\"\n\"linear scale\"\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies",
        "title": "set_frequencies > set_frequencies > set_frequencies",
        "section": "set_frequencies > set_frequencies",
        "text": "SweepData.set_frequencies(frequency_list=None, update=True)\n\nSet frequency list to the sweep frequencies.\n\nParameters\n\nfrequency_list\n\npython:list, optional\n\nList of lists with four elements. The default is None. If provided, each list must contain:\n\n1 - frequency type (\"linear count\", \"log scale\", or \"linear scale\")\n2 - start frequency\n3 - stop frequency\n4 - step frequency or count\n\nReturns\n\n\n\n——-\n\n\n\nbool\n\nTrue if correctly executed, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_dc_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_dc_setup.html#create_siwave_dc_setup",
        "title": "create_siwave_dc_setup",
        "section": "create_siwave_dc_setup",
        "text": "Create a setup from a template.\nSetup name.\ncreate_siwave_dc_setup\npython:str\noptional\nlegacy.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_dc_setup",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_siwave_dc_setup.html#pyedb.dotnet.edb.Edb.create_siwave_dc_setup",
        "title": "create_siwave_dc_setup > create_siwave_dc_setup > create_siwave_dc_setup",
        "section": "create_siwave_dc_setup > create_siwave_dc_setup",
        "text": "Edb.create_siwave_dc_setup(name=None, **kwargs)\n\nCreate a setup from a template.\n\nParameters\n\nname\n\npython:str, optional\n\nSetup name.\n\nReturns\n\nlegacy.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb()\n>>> setup1 = edbapp.create_siwave_dc_setup(\"setup1\")\n>>> setup1.mesh_bondwires = True\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.api_class.html#api_class",
        "title": "api_class",
        "section": "api_class",
        "text": "api_class"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.api_class.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.api_class",
        "title": "api_class > api_class > api_class",
        "section": "api_class > api_class",
        "text": "property EDBPadstackInstance.api_class\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.html#siwavedcirsettings",
        "title": "SiwaveDCIRSettings",
        "section": "SiwaveDCIRSettings",
        "text": "Class for DC IR settings.\nSiwaveDCIRSettings.dc_report_config_file\nDC Report Config File.\nSiwaveDCIRSettings.dc_report_show_active_devices\nDC Report Show Active Devices.\nSiwaveDCIRSettings.export_dc_thermal_data\nExport DC Thermal Data.\nSiwaveDCIRSettings.full_dc_report_path\nFull DC Report Path.\nSiwaveDCIRSettings.icepak_temp_file\nIcepack Temp File.\nSiwaveDCIRSettings.import_thermal_data\nImport Thermal Data.\nSiwaveDCIRSettings.per_pin_res_path\nPer Pin Res Path.\nSiwaveDCIRSettings.per_pin_use_pin_format\nPer Pin Use Pin Format.\nSiwaveDCIRSettings.source_terms_to_ground\nA dictionary of SourceName, NodeToGround pairs, where NodeToGround is one of 0 (unspecified), 1 (negative), 2 (positive).\nSiwaveDCIRSettings.use_loop_res_for_per_pin\nUse loop Res Per Pin.\nSiwaveDCIRSettings.via_report_path\nVia Report Path.\nSiwaveDCIRSettings\nSiwaveDCIRSettings.dc_report_config_file\nSiwaveDCIRSettings.dc_report_show_active_devices\nSiwaveDCIRSettings.export_dc_thermal_data\nSiwaveDCIRSettings.full_dc_report_path\nSiwaveDCIRSettings.icepak_temp_file\nSiwaveDCIRSettings.import_thermal_data\nSiwaveDCIRSettings.per_pin_res_path\nSiwaveDCIRSettings.per_pin_use_pin_format\nSiwaveDCIRSettings.source_terms_to_ground\nSiwaveDCIRSettings.use_loop_res_for_per_pin\nSiwaveDCIRSettings.via_report_path"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings.html#pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings",
        "title": "SiwaveDCIRSettings > SiwaveDCIRSettings > SiwaveDCIRSettings",
        "section": "SiwaveDCIRSettings > SiwaveDCIRSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.siw_dc_ir_settings.SiwaveDCIRSettings(parent)\n\nClass for DC IR settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nSiwaveDCIRSettings.dc_report_config_file\n\nDC Report Config File.\n\nSiwaveDCIRSettings.dc_report_show_active_devices\n\nDC Report Show Active Devices.\n\nSiwaveDCIRSettings.export_dc_thermal_data\n\nExport DC Thermal Data.\n\nSiwaveDCIRSettings.full_dc_report_path\n\nFull DC Report Path.\n\nSiwaveDCIRSettings.icepak_temp_file\n\nIcepack Temp File.\n\nSiwaveDCIRSettings.import_thermal_data\n\nImport Thermal Data.\n\nSiwaveDCIRSettings.per_pin_res_path\n\nPer Pin Res Path.\n\nSiwaveDCIRSettings.per_pin_use_pin_format\n\nPer Pin Use Pin Format.\n\nSiwaveDCIRSettings.source_terms_to_ground\n\nA dictionary of SourceName, NodeToGround pairs, where NodeToGround is one of 0 (unspecified), 1 (negative), 2 (positive).\n\nSiwaveDCIRSettings.use_loop_res_for_per_pin\n\nUse loop Res Per Pin.\n\nSiwaveDCIRSettings.via_report_path\n\nVia Report Path.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Get the name of this variable.\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.name.html#pyedb.dotnet.database.edb_data.variables.Variable.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property Variable.name\n\nGet the name of this variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_net.html#create_voltage_source_on_net",
        "title": "create_voltage_source_on_net",
        "section": "create_voltage_source_on_net",
        "text": "Create a voltage source.\nName of the positive component.\nName of the positive net.\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\nName of the negative net. The default is \"GND\".\nValue for the voltage. The default is 3.3.\nValue for the phase. The default is 0.\nName of the source. The default is \"\".\nSource Name.\ncreate_voltage_source_on_net\npython:str\npython:str\npython:str\noptional\nNone\npython:str\noptional\n\"GND\"\npython:float\noptional\n3.3\noptional\n0\npython:str\noptional\n\"\"\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_net",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_net.html#pyedb.dotnet.database.hfss.EdbHfss.create_voltage_source_on_net",
        "title": "create_voltage_source_on_net > create_voltage_source_on_net > create_voltage_source_on_net",
        "section": "create_voltage_source_on_net > create_voltage_source_on_net",
        "text": "EdbHfss.create_voltage_source_on_net(positive_component_name, positive_net_name, negative_component_name=None, negative_net_name='GND', voltage_value=3.3, phase_value=0, source_name='')\n\nCreate a voltage source.\n\nParameters\n\npositive_component_name\n\npython:str\n\nName of the positive component.\n\npositive_net_name\n\npython:str\n\nName of the positive net.\n\nnegative_component_name\n\npython:str, optional\n\nName of the negative component. The default is None, in which case the name of\nthe positive net is assigned.\n\nnegative_net_name\n\npython:str, optional\n\nName of the negative net. The default is \"GND\".\n\nvoltage_value\n\npython:float, optional\n\nValue for the voltage. The default is 3.3.\n\nphase_value\n\noptional\n\nValue for the phase. The default is 0.\n\nsource_name\n\npython:str, optional\n\nName of the source. The default is \"\".\n\nReturns\n\npython:str\n\nSource Name.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", \"project name\", \"release version\")\n>>> edb.hfss.create_voltage_source_on_net(\"U2A5\", \"V1P5_S3\", \"U2A5\", \"GND\", 3.3, 0, \"source_name\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_point_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_point_terminal_reference_primitive.html#get_point_terminal_reference_primitive",
        "title": "get_point_terminal_reference_primitive",
        "section": "get_point_terminal_reference_primitive",
        "text": "Find and return the primitive reference for the point terminal or the padstack instance.\nget_point_terminal_reference_primitive\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance\nor\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_point_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.get_point_terminal_reference_primitive.html#pyedb.dotnet.database.edb_data.ports.GapPort.get_point_terminal_reference_primitive",
        "title": "get_point_terminal_reference_primitive > get_point_terminal_reference_primitive > get_point_terminal_reference_primitive",
        "section": "get_point_terminal_reference_primitive > get_point_terminal_reference_primitive",
        "text": "GapPort.get_point_terminal_reference_primitive()\n\nFind and return the primitive reference for the point terminal or the padstack instance.\n\nReturns\n\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance or\n\n\n\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.owner",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.owner.html#owner",
        "title": "owner",
        "section": "owner",
        "text": "Primitive: Owner of the primitive object.\nRead-Only.\nowner\nPrimitive"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.owner",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.owner.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.owner",
        "title": "owner > owner > owner",
        "section": "owner > owner",
        "text": "property EdbPolygon.owner\n\nPrimitive: Owner of the primitive object.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.boundary_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.boundary_type.html#boundary_type",
        "title": "boundary_type",
        "section": "boundary_type",
        "text": "Boundary type.\nInvalidBoundary, PortBoundary, PecBoundary, RlcBoundary, kCurrentSource, kVoltageSource, kNexximGround,\nkNexximPort, kDcTerminal, kVoltageProbe\nboundary_type\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.boundary_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.boundary_type.html#pyedb.dotnet.database.edb_data.ports.GapPort.boundary_type",
        "title": "boundary_type > boundary_type > boundary_type",
        "section": "boundary_type > boundary_type",
        "text": "property GapPort.boundary_type\n\nBoundary type.\n\nReturns\n\npython:str\n\nInvalidBoundary, PortBoundary, PecBoundary, RlcBoundary, kCurrentSource, kVoltageSource, kNexximGround,\nkNexximPort, kDcTerminal, kVoltageProbe\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_object.html#reference_object",
        "title": "reference_object",
        "section": "reference_object",
        "text": "This returns the object assigned as reference. It can be a primitive or a padstack instance.\nreference_object\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance\nor\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_object",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.reference_object.html#pyedb.dotnet.database.edb_data.ports.WavePort.reference_object",
        "title": "reference_object > reference_object > reference_object",
        "section": "reference_object > reference_object",
        "text": "property WavePort.reference_object\n\nThis returns the object assigned as reference. It can be a primitive or a padstack instance.\n\nReturns\n\ndotnet.database.edb_data.padstacks_data.EDBPadstackInstance or\n\n\n\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.set_layer_clone",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.set_layer_clone.html#set_layer_clone",
        "title": "set_layer_clone",
        "section": "set_layer_clone",
        "text": "set_layer_clone"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.set_layer_clone",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.set_layer_clone.html#pyedb.dotnet.database.stackup.Stackup.set_layer_clone",
        "title": "set_layer_clone > set_layer_clone > set_layer_clone",
        "section": "set_layer_clone > set_layer_clone",
        "text": "Stackup.set_layer_clone(layer_clone)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.html#cfgsources",
        "title": "CfgSources",
        "section": "CfgSources",
        "text": "CfgSources.apply()\n\nCfgSources.export_properties()\n\nCfgSources.get_data_from_db()\n\nCfgSources\nCfgSources.apply\nCfgSources.export_properties\nCfgSources.get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.html#pyedb.configuration.cfg_ports_sources.CfgSources",
        "title": "CfgSources > CfgSources > CfgSources",
        "section": "CfgSources > CfgSources",
        "text": "class pyedb.configuration.cfg_ports_sources.CfgSources(pedb, sources_data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgSources.apply()\n\n\n\nCfgSources.export_properties()\n\n\n\nCfgSources.get_data_from_db()\n\n\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_sim_setup_info.html#set_sim_setup_info",
        "title": "set_sim_setup_info",
        "section": "set_sim_setup_info",
        "text": "set_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_sim_setup_info.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_sim_setup_info",
        "title": "set_sim_setup_info > set_sim_setup_info > set_sim_setup_info",
        "section": "set_sim_setup_info > set_sim_setup_info",
        "text": "SiwaveDCSimulationSetup.set_sim_setup_info(sim_setup_info)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.html#cfgmaterial",
        "title": "CfgMaterial",
        "section": "CfgMaterial",
        "text": "CfgMaterial.get_attributes([exclude])\n\nCfgMaterial.set_attributes(pedb_object)\n\nCfgMaterial.protected_attributes\n\nCfgMaterial\nCfgMaterial.get_attributes\nCfgMaterial.set_attributes\nCfgMaterial.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgMaterial.html#pyedb.configuration.cfg_stackup.CfgMaterial",
        "title": "CfgMaterial > CfgMaterial > CfgMaterial",
        "section": "CfgMaterial > CfgMaterial",
        "text": "class pyedb.configuration.cfg_stackup.CfgMaterial(**kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgMaterial.get_attributes([exclude])\n\n\n\nCfgMaterial.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgMaterial.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_s_matrix",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_s_matrix.html#interpolation_use_s_matrix",
        "title": "interpolation_use_s_matrix",
        "section": "interpolation_use_s_matrix",
        "text": "Flag indicating if the S matrix is used.\nTrue if S matrix are used, False otherwise.\ninterpolation_use_s_matrix\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_s_matrix",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_s_matrix.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.interpolation_use_s_matrix",
        "title": "interpolation_use_s_matrix > interpolation_use_s_matrix > interpolation_use_s_matrix",
        "section": "interpolation_use_s_matrix > interpolation_use_s_matrix",
        "text": "property SweepData.interpolation_use_s_matrix\n\nFlag indicating if the S matrix is used.\n\nReturns\n\nbool\n\nTrue if S matrix are used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.html#cfgcomponents",
        "title": "CfgComponents",
        "section": "CfgComponents",
        "text": "CfgComponents.apply()\n\nCfgComponents.clean()\n\nCfgComponents.retrieve_parameters_from_edb()\n\nCfgComponents\nCfgComponents.apply\nCfgComponents.clean\nCfgComponents.retrieve_parameters_from_edb"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents",
        "href": "api/_autosummary/pyedb.configuration.cfg_components.CfgComponents.html#pyedb.configuration.cfg_components.CfgComponents",
        "title": "CfgComponents > CfgComponents > CfgComponents",
        "section": "CfgComponents > CfgComponents",
        "text": "class pyedb.configuration.cfg_components.CfgComponents(pedb, components_data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgComponents.apply()\n\n\n\nCfgComponents.clean()\n\n\n\nCfgComponents.retrieve_parameters_from_edb()\n\n\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.type.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property SiwaveSimulationSetup.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/components/index",
        "href": "user_guide/components/index.html#working-with-a-component",
        "title": "Working with a component",
        "section": "Working with a component",
        "text": "Learn how to create a resistor boundary on pins.\nLearn how to create an RLC component between pins.\nLearn how to create an RLC boundary on pins.\nWorking with a component"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_nets.html#num_nets",
        "title": "num_nets",
        "section": "num_nets",
        "text": "num_nets"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_nets.html#pyedb.dotnet.database.edb_data.utilities.EDBStatistics.num_nets",
        "title": "num_nets > num_nets > num_nets",
        "section": "num_nets > num_nets",
        "text": "property EDBStatistics.num_nets\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.skin_depth",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.skin_depth.html#skin_depth",
        "title": "skin_depth",
        "section": "skin_depth",
        "text": "Skin depth value.\nskin_depth\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.skin_depth",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.skin_depth.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.skin_depth",
        "title": "skin_depth > skin_depth > skin_depth",
        "section": "skin_depth > skin_depth",
        "text": "property SkinDepthMeshOperation.skin_depth\n\nSkin depth value.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type.html#hole_type",
        "title": "hole_type",
        "section": "hole_type",
        "text": "Hole type.\nType of the hole.\nhole_type\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_type",
        "title": "hole_type > hole_type > hole_type",
        "section": "hole_type > hole_type",
        "text": "property EDBPadstack.hole_type\n\nHole type.\n\nReturns\n\npython:int\n\nType of the hole.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete_frequency_sweep.html#delete_frequency_sweep",
        "title": "delete_frequency_sweep",
        "section": "delete_frequency_sweep",
        "text": "Delete a frequency sweep.\ndelete_frequency_sweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete_frequency_sweep.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.delete_frequency_sweep",
        "title": "delete_frequency_sweep > delete_frequency_sweep > delete_frequency_sweep",
        "section": "delete_frequency_sweep > delete_frequency_sweep",
        "text": "SimulationSetup.delete_frequency_sweep(sweep_data)\n\nDelete a frequency sweep.\n\nParameters\n\nsweep_data\n\nEdbFrequencySweep.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_void_area",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_void_area.html#min_void_area",
        "title": "min_void_area",
        "section": "min_void_area",
        "text": "Minimum void area to include.\nmin_void_area"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_void_area",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_void_area.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.min_void_area",
        "title": "min_void_area > min_void_area > min_void_area",
        "section": "min_void_area > min_void_area",
        "text": "property AdvancedSettings.min_void_area\n\nMinimum void area to include.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property_ids",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property_ids.html#get_product_property_ids",
        "title": "get_product_property_ids",
        "section": "get_product_property_ids",
        "text": "Get a list of attribute ids corresponding to a product property id.\nProduct ID.\nThe attribute ids associated with this product property.\nget_product_property_ids\nProductIdType\npython:list\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property_ids",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.get_product_property_ids.html#pyedb.dotnet.edb.Edb.get_product_property_ids",
        "title": "get_product_property_ids > get_product_property_ids > get_product_property_ids",
        "section": "get_product_property_ids > get_product_property_ids",
        "text": "Edb.get_product_property_ids(prod_id)\n\nGet a list of attribute ids corresponding to a product property id.\n\nParameters\n\nprod_id\n\nProductIdType\n\nProduct ID.\n\nReturns\n\npython:list[python:int]\n\nThe attribute ids associated with this product property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.html#layeredbclass",
        "title": "LayerEdbClass",
        "section": "LayerEdbClass",
        "text": "Manages Edb Layers. Replaces EDBLayer.\nLayerEdbClass.update(**kwargs)\n\nLayerEdbClass.color\nColor of the layer.\nLayerEdbClass.fill_material\nThe layer's fill material.\nLayerEdbClass.id\n\nLayerEdbClass.is_stackup_layer\nDetermine whether this layer is a stackup layer.\nLayerEdbClass.is_via_layer\nDetermine whether this layer is a via layer.\nLayerEdbClass.name\nRetrieve name of the layer.\nLayerEdbClass.properties\n\nLayerEdbClass.transparency\nRetrieve transparency of the layer.\nLayerEdbClass.type\nRetrieve type of the layer.\nLayerEdbClass\nLayerEdbClass.update\nLayerEdbClass.color\nLayerEdbClass.fill_material\nLayerEdbClass.id\nLayerEdbClass.is_stackup_layer\nLayerEdbClass.is_via_layer\nLayerEdbClass.name\nLayerEdbClass.properties\nLayerEdbClass.transparency\nLayerEdbClass.type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass.html#pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass",
        "title": "LayerEdbClass > LayerEdbClass > LayerEdbClass",
        "section": "LayerEdbClass > LayerEdbClass",
        "text": "class pyedb.dotnet.database.edb_data.layer_data.LayerEdbClass(pedb, edb_object=None, name='', layer_type='undefined', **kwargs)\n\nManages Edb Layers. Replaces EDBLayer.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nLayerEdbClass.update(**kwargs)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nLayerEdbClass.color\n\nColor of the layer.\n\nLayerEdbClass.fill_material\n\nThe layer's fill material.\n\nLayerEdbClass.id\n\n\n\nLayerEdbClass.is_stackup_layer\n\nDetermine whether this layer is a stackup layer.\n\nLayerEdbClass.is_via_layer\n\nDetermine whether this layer is a via layer.\n\nLayerEdbClass.name\n\nRetrieve name of the layer.\n\nLayerEdbClass.properties\n\n\n\nLayerEdbClass.transparency\n\nRetrieve transparency of the layer.\n\nLayerEdbClass.type\n\nRetrieve type of the layer.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Flag indicating if the setup is enabled.\nenabled"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.enabled",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.enabled.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property SimulationSetup.enabled\n\nFlag indicating if the setup is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.write_export3d_option_config_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.write_export3d_option_config_file.html#write_export3d_option_config_file",
        "title": "write_export3d_option_config_file",
        "section": "write_export3d_option_config_file",
        "text": "Write the options for a 3D export to a configuration file.\nFull path to the configuration file to save 3D export options to.\nConfiguration dictionaries. The default is None.\nwrite_export3d_option_config_file\npython:str\npython:dict\noptional\nNone"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.write_export3d_option_config_file",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.write_export3d_option_config_file.html#pyedb.dotnet.edb.Edb.write_export3d_option_config_file",
        "title": "write_export3d_option_config_file > write_export3d_option_config_file > write_export3d_option_config_file",
        "section": "write_export3d_option_config_file > write_export3d_option_config_file",
        "text": "Edb.write_export3d_option_config_file(path_to_output, config_dictionaries=None)\n\nWrite the options for a 3D export to a configuration file.\n\nParameters\n\npath_to_output\n\npython:str\n\nFull path to the configuration file to save 3D export options to.\n\nconfig_dictionaries\n\npython:dict, optional\n\nConfiguration dictionaries. The default is None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/versioning",
        "href": "getting_started/versioning.html#versions-and-interfaces",
        "title": "Versions and interfaces",
        "section": "Versions and interfaces",
        "text": "PyEDB attempts to maintain compatibility with legacy versions of EDB\nwhile allowing for support of faster and better interfaces with the\nlatest versions of EDB.\nCurrently, there is only one interface PyEDB can use to connect to EDB.\nVersions and interfaces"
    },
    {
        "objectID": "getting_started/versioning",
        "href": "getting_started/versioning.html#grpc-interface",
        "title": "Versions and interfaces > gRPC interface",
        "section": "gRPC interface",
        "text": "The gRPC interface is under development and should be available soon.\ngRPC interface"
    },
    {
        "objectID": "getting_started/versioning",
        "href": "getting_started/versioning.html#legacy-interface",
        "title": "Versions and interfaces > Legacy interface",
        "section": "Legacy interface",
        "text": "PyEDB currently connects to EDB using the native C# interface for the EDB API.\nYou do not need to set the PYEDB_USE_DOTNET environment variable to 0 to\nuse the legacy interface because it is the default value. Once the gRPC interface is\navailable, to use it, simply set the PYEDB_USE_DOTNET environment variable to 1.\nLegacy interface\nPYEDB_USE_DOTNET\n0\nPYEDB_USE_DOTNET\n1"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_abs_length",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_abs_length.html#defeature_abs_length",
        "title": "defeature_abs_length",
        "section": "defeature_abs_length",
        "text": "Retrieve the value of arc to chord for HFSS meshing.\ndefeature_abs_length\nflot\nValue\nof\nthe\narc\nto\nchord"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_abs_length",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_abs_length.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.defeature_abs_length",
        "title": "defeature_abs_length > defeature_abs_length > defeature_abs_length",
        "section": "defeature_abs_length > defeature_abs_length",
        "text": "property SimulationConfigurationAc.defeature_abs_length\n\nRetrieve the value of arc to chord for HFSS meshing.\n\nReturns\n\nflot\n\n\n\nValue of the arc to chord error.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.get_data_from_db.html#pyedb.configuration.cfg_operations.CfgCutout.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgCutout.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_materials_from_sys_library",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_materials_from_sys_library.html#update_materials_from_sys_library",
        "title": "update_materials_from_sys_library",
        "section": "update_materials_from_sys_library",
        "text": "Update material properties from syslib AMAT file.\nupdate_materials_from_sys_library"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_materials_from_sys_library",
        "href": "api/_autosummary/pyedb.dotnet.database.materials.Materials.update_materials_from_sys_library.html#pyedb.dotnet.database.materials.Materials.update_materials_from_sys_library",
        "title": "update_materials_from_sys_library > update_materials_from_sys_library > update_materials_from_sys_library",
        "section": "update_materials_from_sys_library > update_materials_from_sys_library",
        "text": "Materials.update_materials_from_sys_library(update_all: bool = True, material_name: str | list | None = None)\n\nUpdate material properties from syslib AMAT file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_bundle_wave_port",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_bundle_wave_port.html#create_bundle_wave_port",
        "title": "create_bundle_wave_port",
        "section": "create_bundle_wave_port",
        "text": "Create a bundle wave port.\nPrimitive ID of the positive terminal.\nCoordinate of the point to define the edge terminal.\nThe point must be close to the target edge but not on the two\nends of the edge.\nName of the port. The default is None.\nHorizontal extent factor. The default value is 5.\nVertical extent factor. The default value is 3.\nLaunch Width of PEC. The default value is \"0.01mm\".\nThe tuple contains: (port_name, pyedb.egacy.database.edb_data.sources.ExcitationDifferential).\ncreate_bundle_wave_port\npython:list\npython:list\npython:str\noptional\nNone\npython:int\npython:float\noptional\n5\npython:int\npython:float\noptional\n3\npython:str\noptional\n\"0.01mm\"\npython:tuple"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_bundle_wave_port",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.create_bundle_wave_port.html#pyedb.dotnet.database.hfss.EdbHfss.create_bundle_wave_port",
        "title": "create_bundle_wave_port > create_bundle_wave_port > create_bundle_wave_port",
        "section": "create_bundle_wave_port > create_bundle_wave_port",
        "text": "EdbHfss.create_bundle_wave_port(primitives_id, points_on_edge, port_name=None, horizontal_extent_factor=5, vertical_extent_factor=3, pec_launch_width='0.01mm')\n\nCreate a bundle wave port.\n\nParameters\n\nprimitives_id\n\npython:list\n\nPrimitive ID of the positive terminal.\n\npoints_on_edge\n\npython:list\n\nCoordinate of the point to define the edge terminal.\nThe point must be close to the target edge but not on the two\nends of the edge.\n\nport_name\n\npython:str, optional\n\nName of the port. The default is None.\n\nhorizontal_extent_factor\n\npython:int, python:float, optional\n\nHorizontal extent factor. The default value is 5.\n\nvertical_extent_factor\n\npython:int, python:float, optional\n\nVertical extent factor. The default value is 3.\n\npec_launch_width\n\npython:str, optional\n\nLaunch Width of PEC. The default value is \"0.01mm\".\n\nReturns\n\npython:tuple\n\nThe tuple contains: (port_name, pyedb.egacy.database.edb_data.sources.ExcitationDifferential).\n\nExamples\n\n>>> edb.hfss.create_bundle_wave_port(0, [\"-50mm\", \"-0mm\"], 1, [\"-50mm\", \"-0.2mm\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_terminal",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_terminal.html#create_pin_group_terminal",
        "title": "create_pin_group_terminal",
        "section": "create_pin_group_terminal",
        "text": "Create a pin group terminal.\nName of the source.\ncreate_pin_group_terminal\nVoltageSource\nCircuitPort\nCurrentSource\nDCTerminal\nResistorSource"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_terminal",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_terminal.html#pyedb.dotnet.database.siwave.EdbSiwave.create_pin_group_terminal",
        "title": "create_pin_group_terminal > create_pin_group_terminal > create_pin_group_terminal",
        "section": "create_pin_group_terminal > create_pin_group_terminal",
        "text": "EdbSiwave.create_pin_group_terminal(source)\n\nCreate a pin group terminal.\n\nParameters\n\nsource\n\nVoltageSource, CircuitPort, CurrentSource, DCTerminal or ResistorSource\n\nName of the source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.html#edb",
        "title": "Edb",
        "section": "Edb",
        "text": "Provides the EDB application interface.\nThis module inherits all objects that belong to EDB.\nFull path to the aedb folder. The variable can also contain\nthe path to a layout to import. Allowed formats are BRD, MCM,\nXML (IPC2581), GDS, ODB++(TGZ and ZIP) and DXF. The default is None.\nFor GDS import, the Ansys control file (also XML) should have the same\nname as the GDS file. Only the file extension differs.\nName of the cell to select. The default is None.\nWhether to open EBD in read-only mode when it is\nowned by HFSS 3D Layout. The default is False.\nVersion of EDB to use. The default is None.\nExamples of input values are 232, 23.2, 2023.2, \"2023.2\".\nWhether to launch EDB from HFSS 3D Layout. The\ndefault is False.\nReference to the AEDT project object.\nWhether to open the AEDT student version. The default is False.\nPath to the XML file. The default is None, in which case an attempt is made to find\nthe XML file in the same directory as the board file. To succeed, the XML file and board file\nmust have the same name. Only the extension differs.\nLayer map .map file.\nFull path to technology file to be converted to xml before importing or xml.\nSupported by GDS format only.\nLayer filter .txt file.\nCreate an Edb object and a new EDB cell.\nAdd a new variable named “s1” to the Edb instance.\nor add a new parameter with description:\nCreate an Edb object and open the specified project.\nCreate an Edb object from GDS and control files.\nThe XML control file resides in the same directory as the GDS file: (myfile.xml).\nEdb.add_design_variable(variable_name, ...)\nAdd a variable to edb.\nEdb.add_project_variable(variable_name, ...)\nAdd a variable to edb database (project).\nEdb.are_port_reference_terminals_connected([...])\nCheck if all terminal references in design are connected.\nEdb.attach(hdb)\nAttach the database to existing AEDT instance.\nEdb.auto_parametrize_design([layers, ...])\nAssign automatically design and project variables with current values.\nEdb.build_simulation_project(simulation_setup)\nBuild a ready-to-solve simulation project.\nEdb.calculate_initial_extent(expansion_factor)\nCompute a float representing the larger number between the dielectric thickness or trace width multiplied by the nW factor.\nEdb.change_design_variable_value(...)\nChange a variable value.\nEdb.close()\nClose EDB and cleanup variables.\nEdb.close_edb()\nClose EDB and cleanup variables.\nEdb.copy_cells(cells_to_copy)\nCopy Cells from other Databases or this Database into this Database.\nEdb.copy_zones([working_directory])\nCopy multizone EDB project to one new edb per zone.\nEdb.create(db_path)\nCreate a Database at the specified file location.\nEdb.create_current_source(terminal, ref_terminal)\nCreate a current source.\nEdb.create_edb()\nCreate EDB.\nEdb.create_hfss_setup([name])\nCreate an HFSS simulation setup from a template.\nEdb.create_hfsspi_setup([name])\nCreate an HFSS PI simulation setup from a template.\nEdb.create_model_for_arbitrary_wave_ports(...)\nGenerate EDB design to be consumed by PyAEDT to generate arbitrary wave ports shapes.\nEdb.create_port(terminal[, ref_terminal, ...])\nCreate a port.\nEdb.create_raptorx_setup([name])\nCreate an RaptorX simulation setup from a template.\nEdb.create_siwave_dc_setup([name])\nCreate a setup from a template.\nEdb.create_siwave_syz_setup([name])\nCreate a setup from a template.\nEdb.create_voltage_probe(terminal, ref_terminal)\nCreate a voltage probe.\nEdb.create_voltage_source(terminal, ref_terminal)\nCreate a voltage source.\nEdb.cutout([signal_list, reference_list, ...])\nCreate a cutout using an approach entirely based on PyAEDT.\nEdb.cutout_multizone_layout(zone_dict[, ...])\nCreate a multizone project cutout.\nEdb.delete(db_path)\nDelete a database at the specified file location.\nEdb.edb_exception(ex_value, tb_data)\nWrite the trace stack to AEDT when a Python error occurs.\nEdb.edb_value(val)\nConvert a value to an EDB value.\nEdb.execute(func)\nExecute a function.\nEdb.export_gds_comp_xml(comps_to_export[, ...])\nExports an XML file with selected components information for use in a GDS import.\nEdb.export_hfss(path_to_output[, net_list, ...])\nExport EDB to HFSS.\nEdb.export_maxwell(path_to_output[, ...])\nExport EDB to Maxwell 3D.\nEdb.export_q3d(path_to_output[, net_list, ...])\nExport EDB to Q3D.\nEdb.export_siwave_dc_results(siwave_project, ...)\nClose EDB and solve it with Siwave.\nEdb.export_to_ipc2581([ipc_path, units])\nCreate an XML IPC2581 file from the active EDB.\nEdb.find_by_id(db_id)\nFind a database by ID.\nEdb.get_bounding_box()\nGet the layout bounding box.\nEdb.get_conformal_polygon_from_netlist([netlist])\nReturn an EDB conformal polygon based on a netlist.\nEdb.get_connected_objects(layout_object_instance)\nGet connected objects.\nEdb.get_point_terminal(name, net_name, ...)\nPlace a voltage probe between two points.\nEdb.get_product_property(prod_id, attr_it)\nGet the product-specific property value.\nEdb.get_product_property_ids(prod_id)\nGet a list of attribute ids corresponding to a product property id.\nEdb.get_statistics([compute_area])\nGet the EDBStatistics object.\nEdb.get_variable(variable_name)\nReturn Variable Value if variable exists.\nEdb.get_variable_value(variable_name)\nAdded to get closer architecture as for grpc.\nEdb.import_cadence_file(inputBrd[, WorkDir, ...])\nImport a board file and generate an edb.def file in the working directory.\nEdb.import_layout_file(input_file[, ...])\nImport a board file and generate an edb.def file in the working directory.\nEdb.import_material_from_control_file(...[, ...])\nImport materials from the provided control file.\nEdb.new_simulation_configuration([filename])\nNew SimulationConfiguration Object.\nEdb.number_with_units(value[, units])\nConvert a number to a string with units.\nEdb.open(db_path, read_only)\nOpen an existing Database at the specified file location.\nEdb.open_edb()\nOpen EDB.\nEdb.point_3d(x, y[, z])\nCompute the Edb 3d Point Data.\nEdb.point_data(x[, y])\nCompute the Edb Point Data.\nEdb.run_as_standalone(flag)\nSet if Edb is run as standalone or embedded in AEDT.\nEdb.save()\nSave the EDB file.\nEdb.save_as(path[, version])\nSave the EDB file as another file.\nEdb.save_edb()\nSave the EDB file.\nEdb.save_edb_as(path)\nSave the EDB file as another file.\nEdb.scale(scale_factor)\nUniformly scale all geometry and their locations by a positive factor.\nEdb.set_product_property(prod_id, attr_it, ...)\nSet the product property associated with the given product and attribute ids.\nEdb.solve_siwave()\nClose EDB and solve it with Siwave.\nEdb.variable_exists(variable_name)\nCheck if a variable exists or not.\nEdb.write_export3d_option_config_file(...[, ...])\nWrite the options for a 3D export to a configuration file.\nEdb.active_cell\nActive cell.\nEdb.active_db\nDatabase object.\nEdb.active_layout\nActive layout.\nEdb.apd_bondwire_defs\nGet all APD bondwire definitions in this Database.\nEdb.api_class\nReturn Ansys.Ansoft.Edb class object.\nEdb.api_object\nReturn Ansys.Ansoft.Edb object.\nEdb.cell_names\nCell name container.\nEdb.circuit_cells\nGet all circuit cells in the Database.\nEdb.component_defs\nGet all component definitions in the database.\nEdb.components\nEdb Components methods and properties.\nEdb.configuration\nEdb project configuration from file.\nEdb.database\nEdb Dotnet Api Database.\nEdb.dataset_defs\nGet all dataset definitions in the database.\nEdb.db\nActive database object.\nEdb.definition\nEdb Dotnet Api Database Edb.Definition.\nEdb.definitions\nDefinitions class.\nEdb.design_options\nEdb Design Settings and Options.\nEdb.design_variables\nGet all edb design variables.\nEdb.differential_pairs\nGet all differential pairs.\nEdb.directory\nGet the directory of the Database.\nEdb.edb_api\nEdb Dotnet Api class.\nEdb.edb_uid\nGet ID of the database.\nEdb.excitations\nGet all layout excitations.\nEdb.excitations_nets\nGet all excitations net names.\nEdb.extended_nets\nGet all extended nets.\nEdb.footprint_cells\nGet all footprint cells in the Database.\nEdb.grpc\ngrpc flag.\nEdb.hfss\nCore HFSS methods and properties.\nEdb.hfss_setups\nActive HFSS setup in EDB.\nEdb.is_read_only\nDetermine if the database is open in a read-only mode.\nEdb.jedec4_bondwire_defs\nGet all JEDEC4 bondwire definitions in this Database.\nEdb.jedec5_bondwire_defs\nGet all JEDEC5 bondwire definitions in this Database.\nEdb.layout\nLayout object.\nEdb.layout_instance\nEdb Layout Instance.\nEdb.layout_validation\npyedb.dotnet.database.edb_data.layout_validation.LayoutValidation.\nEdb.logger\nLogger for EDB.\nEdb.material_defs\nGet all material definitions in the database.\nEdb.materials\nMaterial Database.\nEdb.modeler\nCore primitives modeler.\nEdb.net_classes\nGet all net classes.\nEdb.nets\nCore nets.\nEdb.package_defs\nGet all Package definitions in this Database.\nEdb.padstack_defs\nGet all Padstack definitions in this Database.\nEdb.padstacks\nCore padstack.\nEdb.pedb_class\n\nEdb.ports\nGet all ports.\nEdb.probes\nGet all layout probes.\nEdb.project_variables\nGet all project variables.\nEdb.setups\nGet the dictionary of all EDB HFSS and SIwave setups.\nEdb.siwave\nCore SIWave methods and properties.\nEdb.siwave_ac_setups\nActive Siwave SYZ setups.\nEdb.siwave_dc_setups\nActive Siwave DC IR Setups.\nEdb.source\nGet source name for this Database.\nEdb.source_version\nGet the source version for this Database.\nEdb.sources\nGet all layout sources.\nEdb.stackup\nStackup manager.\nEdb.student_version\nSet the student version flag.\nEdb.terminals\nGet terminals belonging to active layout.\nEdb.top_circuit_cells\nGet top circuit cells.\nEdb.variables\nGet all Edb variables.\nEdb.version\nGet version of the Database.\nEdb.voltage_regulator_modules\nGet all voltage regulator modules\nEdb.workflow\nWorkflow class.\nEdb\npython:str\noptional\naedb\nNone\npython:str\noptional\nNone\noptional\nFalse\npython:str\npython:int\npython:float\noptional\nNone\n232\n23.2\n2023.2\n\"2023.2\"\noptional\nFalse\noptional\noptional\nFalse.\npython:str\noptional\nNone\npython:str\noptional\npython:str\noptional\nEdb\nEdb\nEdb\nEdb\nEdb.add_design_variable\nEdb.add_project_variable\nEdb.are_port_reference_terminals_connected\nEdb.attach\nEdb.auto_parametrize_design\nEdb.build_simulation_project\nEdb.calculate_initial_extent\nEdb.change_design_variable_value\nEdb.close\nEdb.close_edb\nEdb.copy_cells\nEdb.copy_zones\nEdb.create\nEdb.create_current_source\nEdb.create_edb\nEdb.create_hfss_setup\nEdb.create_hfsspi_setup\nEdb.create_model_for_arbitrary_wave_ports\nEdb.create_port\nEdb.create_raptorx_setup\nEdb.create_siwave_dc_setup\nEdb.create_siwave_syz_setup\nEdb.create_voltage_probe\nEdb.create_voltage_source\nEdb.cutout\nEdb.cutout_multizone_layout\nEdb.delete\nEdb.edb_exception\nEdb.edb_value\nEdb.execute\nEdb.export_gds_comp_xml\nEdb.export_hfss\nEdb.export_maxwell\nEdb.export_q3d\nEdb.export_siwave_dc_results\nEdb.export_to_ipc2581\nEdb.find_by_id\nEdb.get_bounding_box\nEdb.get_conformal_polygon_from_netlist\nEdb.get_connected_objects\nEdb.get_point_terminal\nEdb.get_product_property\nEdb.get_product_property_ids\nEdb.get_statistics\nEdb.get_variable\nEdb.get_variable_value\nEdb.import_cadence_file\nedb.def\nEdb.import_layout_file\nedb.def\nEdb.import_material_from_control_file\nEdb.new_simulation_configuration\nEdb.number_with_units\nEdb.open\nEdb.open_edb\nEdb.point_3d\nEdb.point_data\nEdb.run_as_standalone\nEdb.save\nEdb.save_as\nEdb.save_edb\nEdb.save_edb_as\nEdb.scale\nEdb.set_product_property\nEdb.solve_siwave\nEdb.variable_exists\nEdb.write_export3d_option_config_file\nEdb.active_cell\nEdb.active_db\nEdb.active_layout\nEdb.apd_bondwire_defs\nEdb.api_class\nEdb.api_object\nEdb.cell_names\nEdb.circuit_cells\nEdb.component_defs\nEdb.components\nEdb.configuration\nEdb.database\nEdb.dataset_defs\nEdb.db\nEdb.definition\nEdb.definitions\nEdb.design_options\nEdb.design_variables\nEdb.differential_pairs\nEdb.directory\nEdb.edb_api\nEdb.edb_uid\nEdb.excitations\nEdb.excitations_nets\nEdb.extended_nets\nEdb.footprint_cells\nEdb.grpc\nEdb.hfss\nEdb.hfss_setups\nEdb.is_read_only\nEdb.jedec4_bondwire_defs\nEdb.jedec5_bondwire_defs\nEdb.layout\nEdb.layout_instance\nEdb.layout_validation\npyedb.dotnet.database.edb_data.layout_validation.LayoutValidation\nEdb.logger\nEdb.material_defs\nEdb.materials\nEdb.modeler\nEdb.net_classes\nEdb.nets\nEdb.package_defs\nEdb.padstack_defs\nEdb.padstacks\nEdb.pedb_class\nEdb.ports\nEdb.probes\nEdb.project_variables\nEdb.setups\nEdb.siwave\nEdb.siwave_ac_setups\nEdb.siwave_dc_setups\nEdb.source\nEdb.source_version\nEdb.sources\nEdb.stackup\nEdb.student_version\nEdb.terminals\nEdb.top_circuit_cells\nEdb.variables\nEdb.version\nEdb.voltage_regulator_modules\nEdb.workflow"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.html#pyedb.dotnet.edb.Edb",
        "title": "Edb > Edb > Edb",
        "section": "Edb > Edb",
        "text": "class pyedb.dotnet.edb.Edb(edbpath: str | Path | None = None, cellname: str | None = None, isreadonly: bool = False, edbversion: str | None = None, isaedtowned: bool = False, oproject=None, student_version: bool = False, use_ppe: bool = False, control_file: str | None = None, map_file: str | None = None, technology_file: str | None = None, layer_filter: str | None = None, remove_existing_aedt: bool = False)\n\nProvides the EDB application interface.\n\nThis module inherits all objects that belong to EDB.\n\nParameters\n\nedbpath\n\npython:str, optional\n\nFull path to the aedb folder. The variable can also contain\nthe path to a layout to import. Allowed formats are BRD, MCM,\nXML (IPC2581), GDS, ODB++(TGZ and ZIP) and DXF. The default is None.\nFor GDS import, the Ansys control file (also XML) should have the same\nname as the GDS file. Only the file extension differs.\n\ncellname\n\npython:str, optional\n\nName of the cell to select. The default is None.\n\nisreadonly\n\nbool, optional\n\nWhether to open EBD in read-only mode when it is\nowned by HFSS 3D Layout. The default is False.\n\nedbversion\n\npython:str, python:int, python:float, optional\n\nVersion of EDB to use. The default is None.\nExamples of input values are 232, 23.2, 2023.2, \"2023.2\".\n\nisaedtowned\n\nbool, optional\n\nWhether to launch EDB from HFSS 3D Layout. The\ndefault is False.\n\noproject\n\noptional\n\nReference to the AEDT project object.\n\nstudent_version\n\nbool, optional\n\nWhether to open the AEDT student version. The default is False.\n\ncontrol_file\n\npython:str, optional\n\nPath to the XML file. The default is None, in which case an attempt is made to find\nthe XML file in the same directory as the board file. To succeed, the XML file and board file\nmust have the same name. Only the extension differs.\n\nmap_file\n\npython:str, optional\n\nLayer map .map file.\n\ntechnology_file\n\npython:str, optional\n\nFull path to technology file to be converted to xml before importing or xml.\nSupported by GDS format only.\n\nlayer_filter:str,optional\n\nLayer filter .txt file.\n\nExamples\n\nCreate an Edb object and a new EDB cell.\n\n>>> from pyedb import Edb\n>>> app = Edb()\n\nAdd a new variable named “s1” to the Edb instance.\n\n>>> app['s1'] = \"0.25 mm\"\n>>> app['s1'].tofloat\n>>> 0.00025\n>>> app['s1'].tostring\n>>> \"0.25mm\"\n\nor add a new parameter with description:\n\n>>> app['s2'] = [\"20um\", \"Spacing between traces\"]\n>>> app['s2'].value\n>>> 1.9999999999999998e-05\n>>> app['s2'].description\n>>> 'Spacing between traces'\n\nCreate an Edb object and open the specified project.\n\n>>> app = Edb(\"myfile.aedb\")\n\nCreate an Edb object from GDS and control files.\nThe XML control file resides in the same directory as the GDS file: (myfile.xml).\n\n>>> app = Edb(\"/path/to/file/myfile.gds\")\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEdb.add_design_variable(variable_name, ...)\n\nAdd a variable to edb.\n\nEdb.add_project_variable(variable_name, ...)\n\nAdd a variable to edb database (project).\n\nEdb.are_port_reference_terminals_connected([...])\n\nCheck if all terminal references in design are connected.\n\nEdb.attach(hdb)\n\nAttach the database to existing AEDT instance.\n\nEdb.auto_parametrize_design([layers, ...])\n\nAssign automatically design and project variables with current values.\n\nEdb.build_simulation_project(simulation_setup)\n\nBuild a ready-to-solve simulation project.\n\nEdb.calculate_initial_extent(expansion_factor)\n\nCompute a float representing the larger number between the dielectric thickness or trace width multiplied by the nW factor.\n\nEdb.change_design_variable_value(...)\n\nChange a variable value.\n\nEdb.close()\n\nClose EDB and cleanup variables.\n\nEdb.close_edb()\n\nClose EDB and cleanup variables.\n\nEdb.copy_cells(cells_to_copy)\n\nCopy Cells from other Databases or this Database into this Database.\n\nEdb.copy_zones([working_directory])\n\nCopy multizone EDB project to one new edb per zone.\n\nEdb.create(db_path)\n\nCreate a Database at the specified file location.\n\nEdb.create_current_source(terminal, ref_terminal)\n\nCreate a current source.\n\nEdb.create_edb()\n\nCreate EDB.\n\nEdb.create_hfss_setup([name])\n\nCreate an HFSS simulation setup from a template.\n\nEdb.create_hfsspi_setup([name])\n\nCreate an HFSS PI simulation setup from a template.\n\nEdb.create_model_for_arbitrary_wave_ports(...)\n\nGenerate EDB design to be consumed by PyAEDT to generate arbitrary wave ports shapes.\n\nEdb.create_port(terminal[, ref_terminal, ...])\n\nCreate a port.\n\nEdb.create_raptorx_setup([name])\n\nCreate an RaptorX simulation setup from a template.\n\nEdb.create_siwave_dc_setup([name])\n\nCreate a setup from a template.\n\nEdb.create_siwave_syz_setup([name])\n\nCreate a setup from a template.\n\nEdb.create_voltage_probe(terminal, ref_terminal)\n\nCreate a voltage probe.\n\nEdb.create_voltage_source(terminal, ref_terminal)\n\nCreate a voltage source.\n\nEdb.cutout([signal_list, reference_list, ...])\n\nCreate a cutout using an approach entirely based on PyAEDT.\n\nEdb.cutout_multizone_layout(zone_dict[, ...])\n\nCreate a multizone project cutout.\n\nEdb.delete(db_path)\n\nDelete a database at the specified file location.\n\nEdb.edb_exception(ex_value, tb_data)\n\nWrite the trace stack to AEDT when a Python error occurs.\n\nEdb.edb_value(val)\n\nConvert a value to an EDB value.\n\nEdb.execute(func)\n\nExecute a function.\n\nEdb.export_gds_comp_xml(comps_to_export[, ...])\n\nExports an XML file with selected components information for use in a GDS import.\n\nEdb.export_hfss(path_to_output[, net_list, ...])\n\nExport EDB to HFSS.\n\nEdb.export_maxwell(path_to_output[, ...])\n\nExport EDB to Maxwell 3D.\n\nEdb.export_q3d(path_to_output[, net_list, ...])\n\nExport EDB to Q3D.\n\nEdb.export_siwave_dc_results(siwave_project, ...)\n\nClose EDB and solve it with Siwave.\n\nEdb.export_to_ipc2581([ipc_path, units])\n\nCreate an XML IPC2581 file from the active EDB.\n\nEdb.find_by_id(db_id)\n\nFind a database by ID.\n\nEdb.get_bounding_box()\n\nGet the layout bounding box.\n\nEdb.get_conformal_polygon_from_netlist([netlist])\n\nReturn an EDB conformal polygon based on a netlist.\n\nEdb.get_connected_objects(layout_object_instance)\n\nGet connected objects.\n\nEdb.get_point_terminal(name, net_name, ...)\n\nPlace a voltage probe between two points.\n\nEdb.get_product_property(prod_id, attr_it)\n\nGet the product-specific property value.\n\nEdb.get_product_property_ids(prod_id)\n\nGet a list of attribute ids corresponding to a product property id.\n\nEdb.get_statistics([compute_area])\n\nGet the EDBStatistics object.\n\nEdb.get_variable(variable_name)\n\nReturn Variable Value if variable exists.\n\nEdb.get_variable_value(variable_name)\n\nAdded to get closer architecture as for grpc.\n\nEdb.import_cadence_file(inputBrd[, WorkDir, ...])\n\nImport a board file and generate an edb.def file in the working directory.\n\nEdb.import_layout_file(input_file[, ...])\n\nImport a board file and generate an edb.def file in the working directory.\n\nEdb.import_material_from_control_file(...[, ...])\n\nImport materials from the provided control file.\n\nEdb.new_simulation_configuration([filename])\n\nNew SimulationConfiguration Object.\n\nEdb.number_with_units(value[, units])\n\nConvert a number to a string with units.\n\nEdb.open(db_path, read_only)\n\nOpen an existing Database at the specified file location.\n\nEdb.open_edb()\n\nOpen EDB.\n\nEdb.point_3d(x, y[, z])\n\nCompute the Edb 3d Point Data.\n\nEdb.point_data(x[, y])\n\nCompute the Edb Point Data.\n\nEdb.run_as_standalone(flag)\n\nSet if Edb is run as standalone or embedded in AEDT.\n\nEdb.save()\n\nSave the EDB file.\n\nEdb.save_as(path[, version])\n\nSave the EDB file as another file.\n\nEdb.save_edb()\n\nSave the EDB file.\n\nEdb.save_edb_as(path)\n\nSave the EDB file as another file.\n\nEdb.scale(scale_factor)\n\nUniformly scale all geometry and their locations by a positive factor.\n\nEdb.set_product_property(prod_id, attr_it, ...)\n\nSet the product property associated with the given product and attribute ids.\n\nEdb.solve_siwave()\n\nClose EDB and solve it with Siwave.\n\nEdb.variable_exists(variable_name)\n\nCheck if a variable exists or not.\n\nEdb.write_export3d_option_config_file(...[, ...])\n\nWrite the options for a 3D export to a configuration file.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEdb.active_cell\n\nActive cell.\n\nEdb.active_db\n\nDatabase object.\n\nEdb.active_layout\n\nActive layout.\n\nEdb.apd_bondwire_defs\n\nGet all APD bondwire definitions in this Database.\n\nEdb.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\nEdb.api_object\n\nReturn Ansys.Ansoft.Edb object.\n\nEdb.cell_names\n\nCell name container.\n\nEdb.circuit_cells\n\nGet all circuit cells in the Database.\n\nEdb.component_defs\n\nGet all component definitions in the database.\n\nEdb.components\n\nEdb Components methods and properties.\n\nEdb.configuration\n\nEdb project configuration from file.\n\nEdb.database\n\nEdb Dotnet Api Database.\n\nEdb.dataset_defs\n\nGet all dataset definitions in the database.\n\nEdb.db\n\nActive database object.\n\nEdb.definition\n\nEdb Dotnet Api Database Edb.Definition.\n\nEdb.definitions\n\nDefinitions class.\n\nEdb.design_options\n\nEdb Design Settings and Options.\n\nEdb.design_variables\n\nGet all edb design variables.\n\nEdb.differential_pairs\n\nGet all differential pairs.\n\nEdb.directory\n\nGet the directory of the Database.\n\nEdb.edb_api\n\nEdb Dotnet Api class.\n\nEdb.edb_uid\n\nGet ID of the database.\n\nEdb.excitations\n\nGet all layout excitations.\n\nEdb.excitations_nets\n\nGet all excitations net names.\n\nEdb.extended_nets\n\nGet all extended nets.\n\nEdb.footprint_cells\n\nGet all footprint cells in the Database.\n\nEdb.grpc\n\ngrpc flag.\n\nEdb.hfss\n\nCore HFSS methods and properties.\n\nEdb.hfss_setups\n\nActive HFSS setup in EDB.\n\nEdb.is_read_only\n\nDetermine if the database is open in a read-only mode.\n\nEdb.jedec4_bondwire_defs\n\nGet all JEDEC4 bondwire definitions in this Database.\n\nEdb.jedec5_bondwire_defs\n\nGet all JEDEC5 bondwire definitions in this Database.\n\nEdb.layout\n\nLayout object.\n\nEdb.layout_instance\n\nEdb Layout Instance.\n\nEdb.layout_validation\n\npyedb.dotnet.database.edb_data.layout_validation.LayoutValidation.\n\nEdb.logger\n\nLogger for EDB.\n\nEdb.material_defs\n\nGet all material definitions in the database.\n\nEdb.materials\n\nMaterial Database.\n\nEdb.modeler\n\nCore primitives modeler.\n\nEdb.net_classes\n\nGet all net classes.\n\nEdb.nets\n\nCore nets.\n\nEdb.package_defs\n\nGet all Package definitions in this Database.\n\nEdb.padstack_defs\n\nGet all Padstack definitions in this Database.\n\nEdb.padstacks\n\nCore padstack.\n\nEdb.pedb_class\n\n\n\nEdb.ports\n\nGet all ports.\n\nEdb.probes\n\nGet all layout probes.\n\nEdb.project_variables\n\nGet all project variables.\n\nEdb.setups\n\nGet the dictionary of all EDB HFSS and SIwave setups.\n\nEdb.siwave\n\nCore SIWave methods and properties.\n\nEdb.siwave_ac_setups\n\nActive Siwave SYZ setups.\n\nEdb.siwave_dc_setups\n\nActive Siwave DC IR Setups.\n\nEdb.source\n\nGet source name for this Database.\n\nEdb.source_version\n\nGet the source version for this Database.\n\nEdb.sources\n\nGet all layout sources.\n\nEdb.stackup\n\nStackup manager.\n\nEdb.student_version\n\nSet the student version flag.\n\nEdb.terminals\n\nGet terminals belonging to active layout.\n\nEdb.top_circuit_cells\n\nGet top circuit cells.\n\nEdb.variables\n\nGet all Edb variables.\n\nEdb.version\n\nGet version of the Database.\n\nEdb.voltage_regulator_modules\n\nGet all voltage regulator modules\n\nEdb.workflow\n\nWorkflow class.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_power_ground",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_power_ground.html#is_power_ground",
        "title": "is_power_ground",
        "section": "is_power_ground",
        "text": "Edb Dotnet Api Database Net.IsPowerGround() and  Net.SetIsPowerGround().\nis_power_ground"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_power_ground",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_power_ground.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.is_power_ground",
        "title": "is_power_ground > is_power_ground > is_power_ground",
        "section": "is_power_ground > is_power_ground",
        "text": "property EDBNetsData.is_power_ground\n\nEdb Dotnet Api Database Net.IsPowerGround() and  Net.SetIsPowerGround().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSources.export_properties.html#pyedb.configuration.cfg_ports_sources.CfgSources.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgSources.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.BroadBand",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.BroadBand.html#broadband",
        "title": "BroadBand",
        "section": "BroadBand",
        "text": "BroadBand"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.BroadBand",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.BroadBand.html#pyedb.dotnet.database.utilities.simulation_setup.AdaptiveType.BroadBand",
        "title": "BroadBand > BroadBand > BroadBand",
        "section": "BroadBand > BroadBand",
        "text": "AdaptiveType.BroadBand = 2\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_intersecting",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_intersecting.html#is_intersecting",
        "title": "is_intersecting",
        "section": "is_intersecting",
        "text": "Check if actual primitive and another primitive or polygon data intesects.\nis_intersecting\npyaeedt.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_intersecting",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_intersecting.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_intersecting",
        "title": "is_intersecting > is_intersecting > is_intersecting",
        "section": "is_intersecting > is_intersecting",
        "text": "EDBPadstackInstance.is_intersecting(primitive)\n\nCheck if actual primitive and another primitive or polygon data intesects.\n\nParameters\n\nprimitive\n\npyaeedt.database.edb_data.primitives_data.EDBPrimitives or PolygonData\n\n\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.unite_polygons_on_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.unite_polygons_on_layer.html#unite_polygons_on_layer",
        "title": "unite_polygons_on_layer",
        "section": "unite_polygons_on_layer",
        "text": "Try to unite all Polygons on specified layer.\nName of layer name to unite objects on. The default is None, in which case all layers are taken.\nWhether to delete all padstack geometries. The default is False.\nNet names list filter. The default is [], in which case all nets are taken.\nTrue is successful.\nunite_polygons_on_layer\npython:str\noptional\nNone\noptional\nFalse\npython:list\npython:str\noptional\n[]\nTrue"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.unite_polygons_on_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.unite_polygons_on_layer.html#pyedb.dotnet.database.modeler.Modeler.unite_polygons_on_layer",
        "title": "unite_polygons_on_layer > unite_polygons_on_layer > unite_polygons_on_layer",
        "section": "unite_polygons_on_layer > unite_polygons_on_layer",
        "text": "Modeler.unite_polygons_on_layer(layer_name=None, delete_padstack_gemometries=False, net_names_list=[])\n\nTry to unite all Polygons on specified layer.\n\nParameters\n\nlayer_name\n\npython:str, optional\n\nName of layer name to unite objects on. The default is None, in which case all layers are taken.\n\ndelete_padstack_gemometries\n\nbool, optional\n\nWhether to delete all padstack geometries. The default is False.\n\nnet_names_list\n\npython:list[python:str]\n\noptional\n\nNet names list filter. The default is [], in which case all nets are taken.\n\nReturns\n\nbool\n\nTrue is successful.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAMI",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAMI.html#kami",
        "title": "kAMI",
        "section": "kAMI",
        "text": "kAMI"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAMI",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAMI.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kAMI",
        "title": "kAMI > kAMI > kAMI",
        "section": "kAMI > kAMI",
        "text": "SimulationSetupType.kAMI = 'ami'\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_delta_z0",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_delta_z0.html#max_delta_z0",
        "title": "max_delta_z0",
        "section": "max_delta_z0",
        "text": "Maximum change to Z0 in successive passes.\nmax_delta_z0\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_delta_z0",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_delta_z0.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.max_delta_z0",
        "title": "max_delta_z0 > max_delta_z0 > max_delta_z0",
        "section": "max_delta_z0 > max_delta_z0",
        "text": "property HfssPortSettings.max_delta_z0\n\nMaximum change to Z0 in successive passes.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.dcir_equipotential_region",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.dcir_equipotential_region.html#dcir_equipotential_region",
        "title": "dcir_equipotential_region",
        "section": "dcir_equipotential_region",
        "text": "Check whether dcir equipotential region is enabled.\ndcir_equipotential_region"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.dcir_equipotential_region",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.dcir_equipotential_region.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.dcir_equipotential_region",
        "title": "dcir_equipotential_region > dcir_equipotential_region > dcir_equipotential_region",
        "section": "dcir_equipotential_region > dcir_equipotential_region",
        "text": "property EDBPadstackInstance.dcir_equipotential_region\n\nCheck whether dcir equipotential region is enabled.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_scale",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_scale.html#set_frequencies_linear_scale",
        "title": "set_frequencies_linear_scale",
        "section": "set_frequencies_linear_scale",
        "text": "Set a linear scale frequency sweep.\nStart frequency. The default is \"0.1GHz\".\nStop frequency. The default is \"20GHz\".\nStep frequency. The default is \"50MHz\".\nTrue if correctly executed, False otherwise.\nset_frequencies_linear_scale\npython:str\npython:float\noptional\n\"0.1GHz\"\npython:str\npython:float\noptional\n\"20GHz\"\npython:str\npython:float\noptional\n\"50MHz\"\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_scale",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_scale.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.set_frequencies_linear_scale",
        "title": "set_frequencies_linear_scale > set_frequencies_linear_scale > set_frequencies_linear_scale",
        "section": "set_frequencies_linear_scale > set_frequencies_linear_scale",
        "text": "SweepData.set_frequencies_linear_scale(start='0.1GHz', stop='20GHz', step='50MHz')\n\nSet a linear scale frequency sweep.\n\nParameters\n\nstart\n\npython:str, python:float, optional\n\nStart frequency. The default is \"0.1GHz\".\n\nstop\n\npython:str, python:float, optional\n\nStop frequency. The default is \"20GHz\".\n\nstep\n\npython:str, python:float, optional\n\nStep frequency. The default is \"50MHz\".\n\nReturns\n\nbool\n\nTrue if correctly executed, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_rlc",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_rlc.html#set_component_rlc",
        "title": "set_component_rlc",
        "section": "set_component_rlc",
        "text": "Update values for an RLC component.\nName of the RLC component.\nResistance value. The default is None.\nInductor value.  The default is None.\nCapacitor value.  The default is None.\nWhether the RLC component is parallel. The default is False.\nTrue when successful, False when failed.\nset_component_rlc\npython:float\noptional\nNone\npython:float\noptional\nNone\npython:float\noptional\nNone\noptional\nFalse\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_rlc",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.set_component_rlc.html#pyedb.dotnet.database.components.Components.set_component_rlc",
        "title": "set_component_rlc > set_component_rlc > set_component_rlc",
        "section": "set_component_rlc > set_component_rlc",
        "text": "Components.set_component_rlc(componentname, res_value=None, ind_value=None, cap_value=None, isparallel=False)\n\nUpdate values for an RLC component.\n\nParameters\n\ncomponentname\n\nName of the RLC component.\n\nres_value\n\npython:float, optional\n\nResistance value. The default is None.\n\nind_value\n\npython:float, optional\n\nInductor value.  The default is None.\n\ncap_value\n\npython:float optional\n\nCapacitor value.  The default is None.\n\nisparallel\n\nbool, optional\n\nWhether the RLC component is parallel. The default is False.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edbapp.components.set_component_rlc(\n...     \"R1\", res_value=50, ind_value=1e-9, cap_value=1e-12, isparallel=False\n... )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers.html#via_layers",
        "title": "via_layers",
        "section": "via_layers",
        "text": "Layers.\nList of layers.\nvia_layers\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.via_layers",
        "title": "via_layers > via_layers > via_layers",
        "section": "via_layers > via_layers",
        "text": "property EDBPadstack.via_layers\n\nLayers.\n\nReturns\n\npython:list\n\nList of layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/components/create_rlc_boundary_on_pins",
        "href": "user_guide/components/create_rlc_boundary_on_pins.html#create-an-rlc-boundary-on-pins",
        "title": "Create an RLC boundary on pins",
        "section": "Create an RLC boundary on pins",
        "text": "This page shows how to create an RLC boundary on pins.\nCreate an RLC boundary on pins"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.heatsink",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.heatsink.html#heatsink",
        "title": "heatsink",
        "section": "heatsink",
        "text": "heatsink"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.heatsink",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.heatsink.html#pyedb.configuration.cfg_package_definition.CfgPackage.heatsink",
        "title": "heatsink > heatsink > heatsink",
        "section": "heatsink > heatsink",
        "text": "property CfgPackage.heatsink\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_si_slider",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_si_slider.html#set_si_slider",
        "title": "set_si_slider",
        "section": "set_si_slider",
        "text": "Set SIwave SI simulation accuracy level.\nOptions are:\n- 0: Optimal speed;\n- 1:  Balanced;\n- 2: Optimal accuracy```.\nset_si_slider\n0\n1\n2"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_si_slider",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_si_slider.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.set_si_slider",
        "title": "set_si_slider > set_si_slider > set_si_slider",
        "section": "set_si_slider > set_si_slider",
        "text": "SiwaveSimulationSetup.set_si_slider(value)\n\nSet SIwave SI simulation accuracy level.\n\nOptions are:\n- 0: Optimal speed;\n- 1:  Balanced;\n- 2: Optimal accuracy```.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.export_properties.html#pyedb.configuration.cfg_ports_sources.CfgNearestPinTerminalInfo.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgNearestPinTerminalInfo.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.html#viasettings",
        "title": "ViaSettings",
        "section": "ViaSettings",
        "text": "Manages EDB methods for via settings.\nViaSettings.via_density\nVia density.\nViaSettings.via_material\nVia material.\nViaSettings.via_mesh_plating\nVia mesh plating.\nViaSettings.via_num_sides\nVia number of sides.\nViaSettings.via_style\nVia style.\nViaSettings\nViaSettings.via_density\nViaSettings.via_material\nViaSettings.via_mesh_plating\nViaSettings.via_num_sides\nViaSettings.via_style"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.html#pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings",
        "title": "ViaSettings > ViaSettings > ViaSettings",
        "section": "ViaSettings > ViaSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings(parent)\n\nManages EDB methods for via settings.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nViaSettings.via_density\n\nVia density.\n\nViaSettings.via_material\n\nVia material.\n\nViaSettings.via_mesh_plating\n\nVia mesh plating.\n\nViaSettings.via_num_sides\n\nVia number of sides.\n\nViaSettings.via_style\n\nVia style.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.html#cfgheatsink",
        "title": "CfgHeatSink",
        "section": "CfgHeatSink",
        "text": "Configuration heat sink class.\nCfgHeatSink.get_attributes([exclude])\n\nCfgHeatSink.set_attributes(pedb_object)\n\nCfgHeatSink.protected_attributes\n\nCfgHeatSink\nCfgHeatSink.get_attributes\nCfgHeatSink.set_attributes\nCfgHeatSink.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.html#pyedb.configuration.cfg_package_definition.CfgHeatSink",
        "title": "CfgHeatSink > CfgHeatSink > CfgHeatSink",
        "section": "CfgHeatSink > CfgHeatSink",
        "text": "class pyedb.configuration.cfg_package_definition.CfgHeatSink(**kwargs)\n\nConfiguration heat sink class.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgHeatSink.get_attributes([exclude])\n\n\n\nCfgHeatSink.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgHeatSink.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.is_null.html#is_null",
        "title": "is_null",
        "section": "is_null",
        "text": "Adding this property for compatibility with grpc.\nis_null"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.is_null",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.is_null.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.is_null",
        "title": "is_null > is_null > is_null",
        "section": "is_null > is_null",
        "text": "property RaptorXSimulationSetup.is_null\n\nAdding this property for compatibility with grpc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_configurations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_configurations.html#get_configurations",
        "title": "get_configurations",
        "section": "get_configurations",
        "text": "Get SIwave SYZ simulation settings.\nDictionary of SIwave SYZ simulation settings.\nget_configurations\npython:dict"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_configurations",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_configurations.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.get_configurations",
        "title": "get_configurations > get_configurations > get_configurations",
        "section": "get_configurations > get_configurations",
        "text": "SiwaveSimulationSetup.get_configurations()\n\nGet SIwave SYZ simulation settings.\n\nReturns\n\npython:dict\n\nDictionary of SIwave SYZ simulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_port.html#is_port",
        "title": "is_port",
        "section": "is_port",
        "text": "Whether it is a port.\nis_port"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_port",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_port.html#pyedb.dotnet.database.edb_data.ports.GapPort.is_port",
        "title": "is_port > is_port > is_port",
        "section": "is_port > is_port",
        "text": "property GapPort.is_port\n\nWhether it is a port.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.project_file",
        "href": "api/_autosummary/pyedb.siwave.Siwave.project_file.html#project_file",
        "title": "project_file",
        "section": "project_file",
        "text": "Project file.\nFull absolute path and name for the project file.\nproject_file\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.siwave.Siwave.project_file",
        "href": "api/_autosummary/pyedb.siwave.Siwave.project_file.html#pyedb.siwave.Siwave.project_file",
        "title": "project_file > project_file > project_file",
        "section": "project_file > project_file",
        "text": "property Siwave.project_file\n\nProject file.\n\nReturns\n\npython:str\n\nFull absolute path and name for the project file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.find_by_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.find_by_name.html#find_by_name",
        "title": "find_by_name",
        "section": "find_by_name",
        "text": "Edb Dotnet Api Database Edb.ExtendedNet.FindByName.\nfind_by_name"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.find_by_name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.find_by_name.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.find_by_name",
        "title": "find_by_name > find_by_name > find_by_name",
        "section": "find_by_name > find_by_name",
        "text": "EDBExtendedNetData.find_by_name(layout, net)\n\nEdb Dotnet Api Database Edb.ExtendedNet.FindByName.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.html#dcadvancedsettings",
        "title": "DCAdvancedSettings",
        "section": "DCAdvancedSettings",
        "text": "DCAdvancedSettings.get_configurations()\nGet all attributes.\nDCAdvancedSettings.restore_default()\n\nDCAdvancedSettings.set_dc_slider(value)\n\nDCAdvancedSettings.dc_min_plane_area_to_mesh\nMinimum area below which geometry is ignored.\nDCAdvancedSettings.dc_min_void_area_to_mesh\nDC minimum area below which voids are ignored.\nDCAdvancedSettings.energy_error\nEnergy error.\nDCAdvancedSettings.max_init_mesh_edge_length\nInitial mesh maximum edge length.\nDCAdvancedSettings.max_num_pass\nMaximum number of passes.\nDCAdvancedSettings.mesh_bondwires\nMesh bondwires.\nDCAdvancedSettings.mesh_vias\nMesh vias.\nDCAdvancedSettings.min_num_pass\nMinimum number of passes.\nDCAdvancedSettings.num_bondwire_sides\nNumber of bondwire sides.\nDCAdvancedSettings.num_via_sides\nNumber of via sides.\nDCAdvancedSettings.percent_local_refinement\nPercentage of local refinement.\nDCAdvancedSettings.perform_adaptive_refinement\nWhether to perform adaptive mesh refinement.\nDCAdvancedSettings.refine_bondwires\nWhether to refine mesh along bondwires.\nDCAdvancedSettings.refine_vias\nWhether to refine mesh along vias.\nDCAdvancedSettings.sim_setup_info\nEDB internal simulation setup object.\nDCAdvancedSettings\nDCAdvancedSettings.get_configurations\nDCAdvancedSettings.restore_default\nDCAdvancedSettings.set_dc_slider\nDCAdvancedSettings.dc_min_plane_area_to_mesh\nDCAdvancedSettings.dc_min_void_area_to_mesh\nDCAdvancedSettings.energy_error\nDCAdvancedSettings.max_init_mesh_edge_length\nDCAdvancedSettings.max_num_pass\nDCAdvancedSettings.mesh_bondwires\nDCAdvancedSettings.mesh_vias\nDCAdvancedSettings.min_num_pass\nDCAdvancedSettings.num_bondwire_sides\nDCAdvancedSettings.num_via_sides\nDCAdvancedSettings.percent_local_refinement\nDCAdvancedSettings.perform_adaptive_refinement\nDCAdvancedSettings.refine_bondwires\nDCAdvancedSettings.refine_vias\nDCAdvancedSettings.sim_setup_info"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings",
        "title": "DCAdvancedSettings > DCAdvancedSettings > DCAdvancedSettings",
        "section": "DCAdvancedSettings > DCAdvancedSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings(parent)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nDCAdvancedSettings.get_configurations()\n\nGet all attributes.\n\nDCAdvancedSettings.restore_default()\n\n\n\nDCAdvancedSettings.set_dc_slider(value)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nDCAdvancedSettings.dc_min_plane_area_to_mesh\n\nMinimum area below which geometry is ignored.\n\nDCAdvancedSettings.dc_min_void_area_to_mesh\n\nDC minimum area below which voids are ignored.\n\nDCAdvancedSettings.energy_error\n\nEnergy error.\n\nDCAdvancedSettings.max_init_mesh_edge_length\n\nInitial mesh maximum edge length.\n\nDCAdvancedSettings.max_num_pass\n\nMaximum number of passes.\n\nDCAdvancedSettings.mesh_bondwires\n\nMesh bondwires.\n\nDCAdvancedSettings.mesh_vias\n\nMesh vias.\n\nDCAdvancedSettings.min_num_pass\n\nMinimum number of passes.\n\nDCAdvancedSettings.num_bondwire_sides\n\nNumber of bondwire sides.\n\nDCAdvancedSettings.num_via_sides\n\nNumber of via sides.\n\nDCAdvancedSettings.percent_local_refinement\n\nPercentage of local refinement.\n\nDCAdvancedSettings.perform_adaptive_refinement\n\nWhether to perform adaptive mesh refinement.\n\nDCAdvancedSettings.refine_bondwires\n\nWhether to refine mesh along bondwires.\n\nDCAdvancedSettings.refine_vias\n\nWhether to refine mesh along vias.\n\nDCAdvancedSettings.sim_setup_info\n\nEDB internal simulation setup object.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string.html#hole_diameter_string",
        "title": "hole_diameter_string",
        "section": "hole_diameter_string",
        "text": "Hole diameter in string format.\nhole_diameter_string"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_diameter_string",
        "title": "hole_diameter_string > hole_diameter_string > hole_diameter_string",
        "section": "hole_diameter_string > hole_diameter_string",
        "text": "property EDBPadstack.hole_diameter_string\n\nHole diameter in string format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.model_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.model_type.html#model_type",
        "title": "model_type",
        "section": "model_type",
        "text": "Model type.\nOptions:\n0- General.\n1- IC.\nmodel_type\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.model_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.model_type.html#pyedb.dotnet.database.sim_setup_data.data.settings.DefeatureSettings.model_type",
        "title": "model_type > model_type > model_type",
        "section": "model_type > model_type",
        "text": "property DefeatureSettings.model_type\n\nModel type.\nOptions:\n0- General.\n1- IC.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/siw_dc_ir_settings",
        "href": "api/sim_setup_data/data/siw_dc_ir_settings.html#siwave-dc-ir-settings",
        "title": "SIwave DC-IR settings",
        "section": "SIwave DC-IR settings",
        "text": "This class is the container of SIwave DC-IR settings.\nSiwaveDCIRSettings\nClass for DC IR settings.\nSIwave DC-IR settings\nSiwaveDCIRSettings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move.html#move",
        "title": "move",
        "section": "move",
        "text": "Move polygon along a vector.\nTrue when successful, False when failed.\nmove\nList\nof\npython:float\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.move",
        "title": "move > move > move",
        "section": "move > move",
        "text": "EdbPolygon.move(vector)\n\nMove polygon along a vector.\n\nParameters\n\nvector\n\nList of python:float or python:str [x,y].\n\n\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\nExamples\n\n>>> edbapp = ansys.aedt.core.Edb(\"myproject.aedb\")\n>>> top_layer_polygon = [poly for poly in edbapp.modeler.polygons if poly.layer_name == \"Top Layer\"]\n>>> for polygon in top_layer_polygon:\n>>>     polygon.move(vector=[\"2mm\", \"100um\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.net_classes",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.net_classes.html#net_classes",
        "title": "net_classes",
        "section": "net_classes",
        "text": "Get all net classes.\nnet_classes\nlegacy.database.nets.EdbNetClasses"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.net_classes",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.net_classes.html#pyedb.dotnet.edb.Edb.net_classes",
        "title": "net_classes > net_classes > net_classes",
        "section": "net_classes > net_classes",
        "text": "property Edb.net_classes\n\nGet all net classes.\n\nReturns\n\nlegacy.database.nets.EdbNetClasses\n\n\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myproject.aedb\")\n>>> edbapp.net_classes\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgCircuitElement.protected_attributes.html#pyedb.configuration.cfg_ports_sources.CfgCircuitElement.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgCircuitElement.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_cells_per_wavelength",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_cells_per_wavelength.html#use_cells_per_wavelength",
        "title": "use_cells_per_wavelength",
        "section": "use_cells_per_wavelength",
        "text": "This setting describes the number of cells that fit under each wavelength. The wavelength is calculated\naccording to the Max Frequency or the Mesh Frequency, unless specified by user through this setting.\nuse_cells_per_wavelength"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_cells_per_wavelength",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_cells_per_wavelength.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_cells_per_wavelength",
        "title": "use_cells_per_wavelength > use_cells_per_wavelength > use_cells_per_wavelength",
        "section": "use_cells_per_wavelength > use_cells_per_wavelength",
        "text": "property RaptorXSimulationAdvancedSettings.use_cells_per_wavelength\n\nThis setting describes the number of cells that fit under each wavelength. The wavelength is calculated\naccording to the Max Frequency or the Mesh Frequency, unless specified by user through this setting.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.definitions",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.definitions.html#definitions",
        "title": "definitions",
        "section": "definitions",
        "text": "Definitions class.\ndefinitions"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.definitions",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.definitions.html#pyedb.dotnet.edb.Edb.definitions",
        "title": "definitions > definitions > definitions",
        "section": "definitions > definitions",
        "text": "property Edb.definitions\n\nDefinitions class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save_as",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save_as.html#save_as",
        "title": "save_as",
        "section": "save_as",
        "text": "Save the EDB file as another file.\nName of the new file to save to.\nTrue when successful, False when failed.\nsave_as\npython:str\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.save_as",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.save_as.html#pyedb.dotnet.edb.Edb.save_as",
        "title": "save_as > save_as > save_as",
        "section": "save_as > save_as",
        "text": "Edb.save_as(path, version='')\n\nSave the EDB file as another file.\n\nParameters\n\npath\n\npython:str\n\nName of the new file to save to.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_pad_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_pad_type.html#int_to_pad_type",
        "title": "int_to_pad_type",
        "section": "int_to_pad_type",
        "text": "Convert an integer to an EDB.PadGeometryType.\nEDB.PadType enumerator value.\nint_to_pad_type\npython:int\nobject"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_pad_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_pad_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.int_to_pad_type",
        "title": "int_to_pad_type > int_to_pad_type > int_to_pad_type",
        "section": "int_to_pad_type > int_to_pad_type",
        "text": "EDBPadProperties.int_to_pad_type(val=0)\n\nConvert an integer to an EDB.PadGeometryType.\n\nParameters\n\nval\n\npython:int\n\n\n\nReturns\n\nobject\n\nEDB.PadType enumerator value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.sync_air_box_vertical_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.sync_air_box_vertical_extent.html#sync_air_box_vertical_extent",
        "title": "sync_air_box_vertical_extent",
        "section": "sync_air_box_vertical_extent",
        "text": "Vertical extent of the sync air box.\nsync_air_box_vertical_extent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.sync_air_box_vertical_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.sync_air_box_vertical_extent.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.sync_air_box_vertical_extent",
        "title": "sync_air_box_vertical_extent > sync_air_box_vertical_extent > sync_air_box_vertical_extent",
        "section": "sync_air_box_vertical_extent > sync_air_box_vertical_extent",
        "text": "property HfssExtentInfo.sync_air_box_vertical_extent\n\nVertical extent of the sync air box.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.materials",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.materials.html#materials",
        "title": "materials",
        "section": "materials",
        "text": "Material list.\nmaterials\npython:list\nof\npyedb.dotnet.database.edb_data.control_file.ControlFileMaterial"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.materials",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.materials.html#pyedb.dotnet.database.edb_data.control_file.ControlFileStackup.materials",
        "title": "materials > materials > materials",
        "section": "materials > materials",
        "text": "property ControlFileStackup.materials\n\nMaterial list.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.control_file.ControlFileMaterial\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y.html#hole_offset_y",
        "title": "hole_offset_y",
        "section": "hole_offset_y",
        "text": "Hole offset for the Y axis.\nHole offset value for the Y axis.\nhole_offset_y\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_offset_y",
        "title": "hole_offset_y > hole_offset_y > hole_offset_y",
        "section": "hole_offset_y > hole_offset_y",
        "text": "property EDBPadstack.hole_offset_y\n\nHole offset for the Y axis.\n\nReturns\n\npython:str\n\nHole offset value for the Y axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adaptive_sampling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adaptive_sampling.html#adaptive_sampling",
        "title": "adaptive_sampling",
        "section": "adaptive_sampling",
        "text": "Flag indicating if adaptive sampling is turned on.\nTrue if adaptive sampling is used, False otherwise.\nadaptive_sampling\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adaptive_sampling",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adaptive_sampling.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.adaptive_sampling",
        "title": "adaptive_sampling > adaptive_sampling > adaptive_sampling",
        "section": "adaptive_sampling > adaptive_sampling",
        "text": "property SweepData.adaptive_sampling\n\nFlag indicating if adaptive sampling is turned on.\n\nReturns\n\nbool\n\nTrue if adaptive sampling is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_s_parameter_models.CfgSParameterModel",
        "href": "api/_autosummary/pyedb.configuration.cfg_s_parameter_models.CfgSParameterModel.html#cfgsparametermodel",
        "title": "CfgSParameterModel",
        "section": "CfgSParameterModel",
        "text": "CfgSParameterModel"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_s_parameter_models.CfgSParameterModel",
        "href": "api/_autosummary/pyedb.configuration.cfg_s_parameter_models.CfgSParameterModel.html#pyedb.configuration.cfg_s_parameter_models.CfgSParameterModel",
        "title": "CfgSParameterModel > CfgSParameterModel > CfgSParameterModel",
        "section": "CfgSParameterModel > CfgSParameterModel",
        "text": "class pyedb.configuration.cfg_s_parameter_models.CfgSParameterModel(**kwargs)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_nets.html#api_nets",
        "title": "api_nets",
        "section": "api_nets",
        "text": "Return Edb Nets object dictionary.\napi_nets"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_nets.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_nets",
        "title": "api_nets > api_nets > api_nets",
        "section": "api_nets > api_nets",
        "text": "property EDBDifferentialPairData.api_nets\n\nReturn Edb Nets object dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetup.html#cfgsetup",
        "title": "CfgSetup",
        "section": "CfgSetup",
        "text": "Type of the setup. Optionals are \"hfss\", \"siwave_ac\", \"siwave_dc\".\nCfgSetup\npython:str\noptional\npython:str\n\"hfss\"\n\"siwave_ac\"\n\"siwave_dc\""
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetup",
        "href": "api/_autosummary/pyedb.configuration.cfg_setup.CfgSetup.html#pyedb.configuration.cfg_setup.CfgSetup",
        "title": "CfgSetup > CfgSetup > CfgSetup",
        "section": "CfgSetup > CfgSetup",
        "text": "class pyedb.configuration.cfg_setup.CfgSetup(pedb, pedb_obj, **kwargs)\n\nParameters\n\nname\n\npython:str, optional\n\n\n\ntype\n\npython:str\n\nType of the setup. Optionals are \"hfss\", \"siwave_ac\", \"siwave_dc\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness.html#hole_plating_thickness",
        "title": "hole_plating_thickness",
        "section": "hole_plating_thickness",
        "text": "Hole plating thickness.\nThickness of the hole plating if present.\nhole_plating_thickness\npython:float"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.hole_plating_thickness",
        "title": "hole_plating_thickness > hole_plating_thickness > hole_plating_thickness",
        "section": "hole_plating_thickness > hole_plating_thickness",
        "text": "property EDBPadstack.hole_plating_thickness\n\nHole plating thickness.\n\nReturns\n\npython:float\n\nThickness of the hole plating if present.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_mag_delta_s",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_mag_delta_s.html#max_mag_delta_s",
        "title": "max_mag_delta_s",
        "section": "max_mag_delta_s",
        "text": "Retrieve the magnitude of the delta S convergence criteria for the interpolating sweep.\nmax_mag_delta_s\npython:float\nThe\nvalue\nof\nconvergence"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_mag_delta_s",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_mag_delta_s.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.max_mag_delta_s",
        "title": "max_mag_delta_s > max_mag_delta_s > max_mag_delta_s",
        "section": "max_mag_delta_s > max_mag_delta_s",
        "text": "property SimulationConfigurationAc.max_mag_delta_s\n\nRetrieve the magnitude of the delta S convergence criteria for the interpolating sweep.\n\nReturns\n\npython:float\n\n\n\nThe value of convergence criteria.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/NetData",
        "href": "api/edb_data/NetData.html#nets",
        "title": "Nets",
        "section": "Nets",
        "text": "Nets"
    },
    {
        "objectID": "api/edb_data/NetData",
        "href": "api/edb_data/NetData.html#net-properties",
        "title": "Nets > Net properties",
        "section": "Net properties",
        "text": "The following class is the container of data management for nets, extended nets and differential pairs.\nEDBNetsData\nManages EDB functionalities for a primitives.\nEDBNetClassData\nManages EDB functionalities for a primitives.\nEDBExtendedNetData\nManages EDB functionalities for a primitives.\nEDBDifferentialPairData\nManages EDB functionalities for a primitive.\nNet properties\nEDBNetsData\nEDBNetClassData\nEDBExtendedNetData\nEDBDifferentialPairData"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.shape",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.shape.html#shape",
        "title": "shape",
        "section": "shape",
        "text": "Get the shape of the pad.\nshape"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.shape",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.shape.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.shape",
        "title": "shape > shape > shape",
        "section": "shape > shape",
        "text": "property EDBPadProperties.shape\n\nGet the shape of the pad.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.plot_jv",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.plot_jv.html#plot_jv",
        "title": "plot_jv",
        "section": "plot_jv",
        "text": "Plot current and voltage distributions.\nTrue if plot JV is used, False otherwise.\nplot_jv\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.plot_jv",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.plot_jv.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.plot_jv",
        "title": "plot_jv > plot_jv > plot_jv",
        "section": "plot_jv > plot_jv",
        "text": "property DCSettings.plot_jv\n\nPlot current and voltage distributions.\n\nReturns\n\nbool\n\nTrue if plot JV is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_height",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_height.html#fin_height",
        "title": "fin_height",
        "section": "fin_height",
        "text": "The fin height.\nfin_height"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_height",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_height.html#pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_height",
        "title": "fin_height > fin_height > fin_height",
        "section": "fin_height > fin_height",
        "text": "property HeatSink.fin_height\n\nThe fin height.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.create",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.create.html#create",
        "title": "create",
        "section": "create",
        "text": "Apply pin group on layout.\ncreate"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.create",
        "href": "api/_autosummary/pyedb.configuration.cfg_pin_groups.CfgPinGroup.create.html#pyedb.configuration.cfg_pin_groups.CfgPinGroup.create",
        "title": "create > create > create",
        "section": "create > create",
        "text": "CfgPinGroup.create()\n\nApply pin group on layout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values_string",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values_string.html#parameters_values_string",
        "title": "parameters_values_string",
        "section": "parameters_values_string",
        "text": "Parameters value in string format.\nparameters_values_string"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values_string",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values_string.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadProperties.parameters_values_string",
        "title": "parameters_values_string > parameters_values_string > parameters_values_string",
        "section": "parameters_values_string > parameters_values_string",
        "text": "property EDBPadProperties.parameters_values_string\n\nParameters value in string format.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_material",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_material.html#via_material",
        "title": "via_material",
        "section": "via_material",
        "text": "Via material.\nvia_material\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_material",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_material.html#pyedb.dotnet.database.sim_setup_data.data.settings.ViaSettings.via_material",
        "title": "via_material > via_material > via_material",
        "section": "via_material > via_material",
        "text": "property ViaSettings.via_material\n\nVia material.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.can_be_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.can_be_zone_primitive.html#can_be_zone_primitive",
        "title": "can_be_zone_primitive",
        "section": "can_be_zone_primitive",
        "text": "bool: If a primitive can be a zone.\nRead-Only.\ncan_be_zone_primitive\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.can_be_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.can_be_zone_primitive.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.can_be_zone_primitive",
        "title": "can_be_zone_primitive > can_be_zone_primitive > can_be_zone_primitive",
        "section": "can_be_zone_primitive > can_be_zone_primitive",
        "text": "property EDBPadstackInstance.can_be_zone_primitive\n\nbool: If a primitive can be a zone.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_positive_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_positive_net.html#api_positive_net",
        "title": "api_positive_net",
        "section": "api_positive_net",
        "text": "Edb Api Positive net object.\napi_positive_net"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_positive_net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_positive_net.html#pyedb.dotnet.database.edb_data.nets_data.EDBDifferentialPairData.api_positive_net",
        "title": "api_positive_net > api_positive_net > api_positive_net",
        "section": "api_positive_net > api_positive_net",
        "text": "property EDBDifferentialPairData.api_positive_net\n\nEdb Api Positive net object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgHeatSink.set_attributes.html#pyedb.configuration.cfg_package_definition.CfgHeatSink.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgHeatSink.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations_nets",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations_nets.html#excitations_nets",
        "title": "excitations_nets",
        "section": "excitations_nets",
        "text": "Get all excitations net names.\nexcitations_nets"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations_nets",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.excitations_nets.html#pyedb.dotnet.edb.Edb.excitations_nets",
        "title": "excitations_nets > excitations_nets > excitations_nets",
        "section": "excitations_nets > excitations_nets",
        "text": "property Edb.excitations_nets\n\nGet all excitations net names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.enabled.html#enabled",
        "title": "enabled",
        "section": "enabled",
        "text": "Whether if mesh operation is enabled.\nTrue if mesh operation is used, False otherwise.\nenabled\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.enabled",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.enabled.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.MeshOperation.enabled",
        "title": "enabled > enabled > enabled",
        "section": "enabled > enabled",
        "text": "property MeshOperation.enabled\n\nWhether if mesh operation is enabled.\n\nReturns\n\nbool\n\nTrue if mesh operation is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_sim_setup_info.html#set_sim_setup_info",
        "title": "set_sim_setup_info",
        "section": "set_sim_setup_info",
        "text": "set_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_sim_setup_info.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetup.set_sim_setup_info",
        "title": "set_sim_setup_info > set_sim_setup_info > set_sim_setup_info",
        "section": "set_sim_setup_info > set_sim_setup_info",
        "text": "SimulationSetup.set_sim_setup_info(sim_setup_info)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.type.html#type",
        "title": "type",
        "section": "type",
        "text": "Return the type of the primitive.\nExpected output is among \"Circle\", \"Rectangle\",``”Polygon”,”Path”`` or \"Bondwire\".\ntype\n\"Circle\"\n\"Rectangle\"\n,\n\"Bondwire\"\npython:str"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.type.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property EdbPolygon.type\n\nReturn the type of the primitive.\n\nExpected output is among \"Circle\", \"Rectangle\",``”Polygon”,”Path”`` or \"Bondwire\".\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_sim_setup_info.html#get_sim_setup_info",
        "title": "get_sim_setup_info",
        "section": "get_sim_setup_info",
        "text": "Get simulation information from the setup.\nget_sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_sim_setup_info.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.get_sim_setup_info",
        "title": "get_sim_setup_info > get_sim_setup_info > get_sim_setup_info",
        "section": "get_sim_setup_info > get_sim_setup_info",
        "text": "property SiwaveDCSimulationSetup.get_sim_setup_info\n\nGet simulation information from the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.html#variable",
        "title": "Variable",
        "section": "Variable",
        "text": "Manages EDB methods for variable accessible from Edb.Utility.VariableServer property.\nVariable.delete()\nDelete this variable.\nVariable.description\nGet the description of this variable.\nVariable.is_parameter\nDetermine whether this variable is a parameter.\nVariable.name\nGet the name of this variable.\nVariable.value\nGet the value of this variable.\nVariable.value_object\nGet/Set the value of this variable.\nVariable.value_string\nGet/Set the value of this variable.\nVariable\nVariable.delete\nVariable.description\nVariable.is_parameter\nVariable.name\nVariable.value\nVariable.value_object\nVariable.value_string"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.variables.Variable.html#pyedb.dotnet.database.edb_data.variables.Variable",
        "title": "Variable > Variable > Variable",
        "section": "Variable > Variable",
        "text": "class pyedb.dotnet.database.edb_data.variables.Variable(pedb, name)\n\nManages EDB methods for variable accessible from Edb.Utility.VariableServer property.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nVariable.delete()\n\nDelete this variable.\n\n\n\nAttributes\n\n\n\n\n\n\n\nVariable.description\n\nGet the description of this variable.\n\nVariable.is_parameter\n\nDetermine whether this variable is a parameter.\n\nVariable.name\n\nGet the name of this variable.\n\nVariable.value\n\nGet the value of this variable.\n\nVariable.value_object\n\nGet/Set the value of this variable.\n\nVariable.value_string\n\nGet/Set the value of this variable.\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.eliminate_slit_per_hole",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.eliminate_slit_per_hole.html#eliminate_slit_per_hole",
        "title": "eliminate_slit_per_hole",
        "section": "eliminate_slit_per_hole",
        "text": "This is a setting that internally simplifies layouts with strain relief or thermal relief slits and\nholes. It will examine each hole separately against the whole polygon it belongs to.\nIf the area of the hole is below the threshold defined in this setting, then the hole will be filled.\nUnits: unitless.\neliminate_slit_per_hole"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.eliminate_slit_per_hole",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.eliminate_slit_per_hole.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.eliminate_slit_per_hole",
        "title": "eliminate_slit_per_hole > eliminate_slit_per_hole > eliminate_slit_per_hole",
        "section": "eliminate_slit_per_hole > eliminate_slit_per_hole",
        "text": "property RaptorXSimulationAdvancedSettings.eliminate_slit_per_hole\n\nThis is a setting that internally simplifies layouts with strain relief or thermal relief slits and\nholes. It will examine each hole separately against the whole polygon it belongs to.\nIf the area of the hole is below the threshold defined in this setting, then the hole will be filled.\nUnits: unitless.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.is_pml_visible",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.is_pml_visible.html#is_pml_visible",
        "title": "is_pml_visible",
        "section": "is_pml_visible",
        "text": "Whether visibility of the PML is enabled.\nis_pml_visible"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.is_pml_visible",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.is_pml_visible.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.is_pml_visible",
        "title": "is_pml_visible > is_pml_visible > is_pml_visible",
        "section": "is_pml_visible > is_pml_visible",
        "text": "property HfssExtentInfo.is_pml_visible\n\nWhether visibility of the PML is enabled.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_type.html#backdrill_type",
        "title": "backdrill_type",
        "section": "backdrill_type",
        "text": "Adding grpc compatibility. DotNet is supporting only layer drill type with adding stub length.\nbackdrill_type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_type.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_type",
        "title": "backdrill_type > backdrill_type > backdrill_type",
        "section": "backdrill_type > backdrill_type",
        "text": "property EDBPadstackInstance.backdrill_type\n\nAdding grpc compatibility. DotNet is supporting only layer drill type with adding stub length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.percent_local_refinement",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.percent_local_refinement.html#percent_local_refinement",
        "title": "percent_local_refinement",
        "section": "percent_local_refinement",
        "text": "Percentage of local refinement.\npercent_local_refinement\npython:float"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.percent_local_refinement",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.percent_local_refinement.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.percent_local_refinement",
        "title": "percent_local_refinement > percent_local_refinement > percent_local_refinement",
        "section": "percent_local_refinement > percent_local_refinement",
        "text": "property DCAdvancedSettings.percent_local_refinement\n\nPercentage of local refinement.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_azimuth",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_azimuth.html#start_azimuth",
        "title": "start_azimuth",
        "section": "start_azimuth",
        "text": "Retrieve the value of the starting azimuth for the HFSS meshing.\nstart_azimuth\npython:float\nValue\nof\nthe\nstarting"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_azimuth",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_azimuth.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.start_azimuth",
        "title": "start_azimuth > start_azimuth > start_azimuth",
        "section": "start_azimuth > start_azimuth",
        "text": "property SimulationConfigurationAc.start_azimuth\n\nRetrieve the value of the starting azimuth for the HFSS meshing.\n\nReturns\n\npython:float\n\n\n\nValue of the starting azimuth.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer.html#pad_by_layer",
        "title": "pad_by_layer",
        "section": "pad_by_layer",
        "text": "Regular pad property.\npad_by_layer"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer",
        "title": "pad_by_layer > pad_by_layer > pad_by_layer",
        "section": "pad_by_layer > pad_by_layer",
        "text": "property EDBPadstack.pad_by_layer\n\nRegular pad property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net.html#net",
        "title": "net",
        "section": "net",
        "text": "Net Object.\nnet\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.net",
        "title": "net > net > net",
        "section": "net > net",
        "text": "property EdbPolygon.net\n\nNet Object.\n\nReturns\n\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_loop_res_for_per_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_loop_res_for_per_pin.html#dc_use_loop_res_for_per_pin",
        "title": "dc_use_loop_res_for_per_pin",
        "section": "dc_use_loop_res_for_per_pin",
        "text": "Retrieve the value for using the loop resistor per pin.\ndc_use_loop_res_for_per_pin"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_loop_res_for_per_pin",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_loop_res_for_per_pin.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_use_loop_res_for_per_pin",
        "title": "dc_use_loop_res_for_per_pin > dc_use_loop_res_for_per_pin > dc_use_loop_res_for_per_pin",
        "section": "dc_use_loop_res_for_per_pin > dc_use_loop_res_for_per_pin",
        "text": "property SimulationConfigurationDc.dc_use_loop_res_for_per_pin\n\nRetrieve the value for using the loop resistor per pin.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.enable_set_triangles_wave_port",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.enable_set_triangles_wave_port.html#enable_set_triangles_wave_port",
        "title": "enable_set_triangles_wave_port",
        "section": "enable_set_triangles_wave_port",
        "text": "Whether to enable setting of minimum and maximum mesh limits for wave ports.\nTrue if triangles wave port  is used, False otherwise.\nenable_set_triangles_wave_port\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.enable_set_triangles_wave_port",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.enable_set_triangles_wave_port.html#pyedb.dotnet.database.sim_setup_data.data.settings.HfssPortSettings.enable_set_triangles_wave_port",
        "title": "enable_set_triangles_wave_port > enable_set_triangles_wave_port > enable_set_triangles_wave_port",
        "section": "enable_set_triangles_wave_port > enable_set_triangles_wave_port",
        "text": "property HfssPortSettings.enable_set_triangles_wave_port\n\nWhether to enable setting of minimum and maximum mesh limits for wave ports.\n\nReturns\n\nbool\n\nTrue if triangles wave port  is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_data_from_db.html#get_data_from_db",
        "title": "get_data_from_db",
        "section": "get_data_from_db",
        "text": "get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_data_from_db",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgOperations.get_data_from_db.html#pyedb.configuration.cfg_operations.CfgOperations.get_data_from_db",
        "title": "get_data_from_db > get_data_from_db > get_data_from_db",
        "section": "get_data_from_db > get_data_from_db",
        "text": "CfgOperations.get_data_from_db()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_class.html#api_class",
        "title": "api_class",
        "section": "api_class",
        "text": "Return Ansys.Ansoft.Edb class object.\napi_class"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_class.html#pyedb.dotnet.database.edb_data.nets_data.EDBExtendedNetData.api_class",
        "title": "api_class > api_class > api_class",
        "section": "api_class > api_class",
        "text": "property EDBExtendedNetData.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.cell_names",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.cell_names.html#cell_names",
        "title": "cell_names",
        "section": "cell_names",
        "text": "Cell name container.\ncell_names\nList\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.cell_names",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.cell_names.html#pyedb.dotnet.edb.Edb.cell_names",
        "title": "cell_names > cell_names > cell_names",
        "section": "cell_names > cell_names",
        "text": "property Edb.cell_names\n\nCell name container.\n\nReturns\n\nlist of cell names\n\nList[python:str]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/load_export_edb/index",
        "href": "user_guide/load_export_edb/index.html#load-a-layout-file",
        "title": "Load a layout file",
        "section": "Load a layout file",
        "text": "Learn how to load an AEDB layout file in EDB.\nLoad a layout file"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.find_layer_by_name",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.find_layer_by_name.html#find_layer_by_name",
        "title": "find_layer_by_name",
        "section": "find_layer_by_name",
        "text": "Finds a layer with the given name.\nfind_layer_by_name"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.find_layer_by_name",
        "href": "api/_autosummary/pyedb.dotnet.database.stackup.Stackup.find_layer_by_name.html#pyedb.dotnet.database.stackup.Stackup.find_layer_by_name",
        "title": "find_layer_by_name > find_layer_by_name > find_layer_by_name",
        "section": "find_layer_by_name > find_layer_by_name",
        "text": "Stackup.find_layer_by_name(name: str)\n\nFinds a layer with the given name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral",
        "href": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.html#cfggeneral",
        "title": "CfgGeneral",
        "section": "CfgGeneral",
        "text": "Manage configuration general settings.\nCfgGeneral.apply()\n\nCfgGeneral.get_data_from_db()\n\nCfgGeneral\nCfgGeneral.apply\nCfgGeneral.get_data_from_db"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral",
        "href": "api/_autosummary/pyedb.configuration.cfg_general.CfgGeneral.html#pyedb.configuration.cfg_general.CfgGeneral",
        "title": "CfgGeneral > CfgGeneral > CfgGeneral",
        "section": "CfgGeneral > CfgGeneral",
        "text": "class pyedb.configuration.cfg_general.CfgGeneral(pedb, data)\n\nManage configuration general settings.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgGeneral.apply()\n\n\n\nCfgGeneral.get_data_from_db()\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.html#edbsiwave",
        "title": "EdbSiwave",
        "section": "EdbSiwave",
        "text": "Manages EDB methods related to Siwave Setup accessible from Edb.siwave property.\nInherited parent object.\nEdbSiwave.add_siwave_dc_analysis([name])\nAdd a Siwave DC analysis in EDB.\nEdbSiwave.add_siwave_syz_analysis([name, ...])\nAdd a SIwave AC analysis to EDB.\nEdbSiwave.configure_siw_analysis_setup([...])\nConfigure Siwave analysis setup.\nEdbSiwave.create_circuit_port_on_net(...[, ...])\nCreate a circuit port on a NET.\nEdbSiwave.create_circuit_port_on_pin(...[, ...])\nCreate a circuit port on a pin.\nEdbSiwave.create_circuit_port_on_pin_group(...)\nCreate a port between two pin groups.\nEdbSiwave.create_current_source_on_net(...)\nCreate a current source.\nEdbSiwave.create_current_source_on_pin(...)\nCreate a current source.\nEdbSiwave.create_current_source_on_pin_group(...)\nCreate current source between two pin groups.\nEdbSiwave.create_dc_terminal(component_name, ...)\nCreate a dc terminal.\nEdbSiwave.create_exec_file([add_dc, add_ac, ...])\nCreate an executable file.\nEdbSiwave.create_impedance_crosstalk_scan([...])\nCreate Siwave crosstalk scan object\nEdbSiwave.create_pin_group(...[, group_name])\nCreate pin group on the component.\nEdbSiwave.create_pin_group_on_net(...[, ...])\nCreate pin group on component by net name.\nEdbSiwave.create_pin_group_terminal(source)\nCreate a pin group terminal.\nEdbSiwave.create_port_between_pin_and_layer([...])\nCreate circuit port between pin and a reference layer.\nEdbSiwave.create_resistor_on_pin(pos_pin, ...)\nCreate a Resistor boundary between two given pins..\nEdbSiwave.create_rlc_component(pins[, ...])\nCreate physical Rlc component.\nEdbSiwave.create_voltage_probe_on_pin_group(...)\nCreate voltage probe between two pin groups.\nEdbSiwave.create_voltage_source_on_net(...)\nCreate a voltage source.\nEdbSiwave.create_voltage_source_on_pin(...)\nCreate a voltage source.\nEdbSiwave.create_voltage_source_on_pin_group(...)\nCreate voltage source between two pin groups.\nEdbSiwave.create_vrm_module([name, ...])\nCreate a voltage regulator module.\nEdbSiwave.place_voltage_probe(name, ...)\nPlace a voltage probe between two points.\nEdbSiwave.excitations\nGet all excitations.\nEdbSiwave.icepak_component_file\nIcepak component file path.\nEdbSiwave.icepak_use_minimal_comp_defaults\nIcepak default setting.\nEdbSiwave.pin_groups\nAll Layout Pin groups.\nEdbSiwave.probes\nGet all probes.\nEdbSiwave.sources\nGet all sources.\nEdbSiwave.voltage_regulator_modules\nGet all voltage regulator modules\nEdbSiwave\npyedb.edb.Edb\nEdbSiwave.add_siwave_dc_analysis\nEdbSiwave.add_siwave_syz_analysis\nEdbSiwave.configure_siw_analysis_setup\nEdbSiwave.create_circuit_port_on_net\nEdbSiwave.create_circuit_port_on_pin\nEdbSiwave.create_circuit_port_on_pin_group\nEdbSiwave.create_current_source_on_net\nEdbSiwave.create_current_source_on_pin\nEdbSiwave.create_current_source_on_pin_group\nEdbSiwave.create_dc_terminal\nEdbSiwave.create_exec_file\nEdbSiwave.create_impedance_crosstalk_scan\nEdbSiwave.create_pin_group\nEdbSiwave.create_pin_group_on_net\nEdbSiwave.create_pin_group_terminal\nEdbSiwave.create_port_between_pin_and_layer\nEdbSiwave.create_resistor_on_pin\nEdbSiwave.create_rlc_component\nEdbSiwave.create_voltage_probe_on_pin_group\nEdbSiwave.create_voltage_source_on_net\nEdbSiwave.create_voltage_source_on_pin\nEdbSiwave.create_voltage_source_on_pin_group\nEdbSiwave.create_vrm_module\nEdbSiwave.place_voltage_probe\nEdbSiwave.excitations\nEdbSiwave.icepak_component_file\nEdbSiwave.icepak_use_minimal_comp_defaults\nEdbSiwave.pin_groups\nEdbSiwave.probes\nEdbSiwave.sources\nEdbSiwave.voltage_regulator_modules"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave",
        "href": "api/_autosummary/pyedb.dotnet.database.siwave.EdbSiwave.html#pyedb.dotnet.database.siwave.EdbSiwave",
        "title": "EdbSiwave > EdbSiwave > EdbSiwave",
        "section": "EdbSiwave > EdbSiwave",
        "text": "class pyedb.dotnet.database.siwave.EdbSiwave(p_edb)\n\nManages EDB methods related to Siwave Setup accessible from Edb.siwave property.\n\nParameters\n\nedb_class\n\npyedb.edb.Edb\n\nInherited parent object.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\", edbversion=\"2021.2\")\n>>> edb_siwave = edbapp.siwave\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEdbSiwave.add_siwave_dc_analysis([name])\n\nAdd a Siwave DC analysis in EDB.\n\nEdbSiwave.add_siwave_syz_analysis([name, ...])\n\nAdd a SIwave AC analysis to EDB.\n\nEdbSiwave.configure_siw_analysis_setup([...])\n\nConfigure Siwave analysis setup.\n\nEdbSiwave.create_circuit_port_on_net(...[, ...])\n\nCreate a circuit port on a NET.\n\nEdbSiwave.create_circuit_port_on_pin(...[, ...])\n\nCreate a circuit port on a pin.\n\nEdbSiwave.create_circuit_port_on_pin_group(...)\n\nCreate a port between two pin groups.\n\nEdbSiwave.create_current_source_on_net(...)\n\nCreate a current source.\n\nEdbSiwave.create_current_source_on_pin(...)\n\nCreate a current source.\n\nEdbSiwave.create_current_source_on_pin_group(...)\n\nCreate current source between two pin groups.\n\nEdbSiwave.create_dc_terminal(component_name, ...)\n\nCreate a dc terminal.\n\nEdbSiwave.create_exec_file([add_dc, add_ac, ...])\n\nCreate an executable file.\n\nEdbSiwave.create_impedance_crosstalk_scan([...])\n\nCreate Siwave crosstalk scan object\n\nEdbSiwave.create_pin_group(...[, group_name])\n\nCreate pin group on the component.\n\nEdbSiwave.create_pin_group_on_net(...[, ...])\n\nCreate pin group on component by net name.\n\nEdbSiwave.create_pin_group_terminal(source)\n\nCreate a pin group terminal.\n\nEdbSiwave.create_port_between_pin_and_layer([...])\n\nCreate circuit port between pin and a reference layer.\n\nEdbSiwave.create_resistor_on_pin(pos_pin, ...)\n\nCreate a Resistor boundary between two given pins..\n\nEdbSiwave.create_rlc_component(pins[, ...])\n\nCreate physical Rlc component.\n\nEdbSiwave.create_voltage_probe_on_pin_group(...)\n\nCreate voltage probe between two pin groups.\n\nEdbSiwave.create_voltage_source_on_net(...)\n\nCreate a voltage source.\n\nEdbSiwave.create_voltage_source_on_pin(...)\n\nCreate a voltage source.\n\nEdbSiwave.create_voltage_source_on_pin_group(...)\n\nCreate voltage source between two pin groups.\n\nEdbSiwave.create_vrm_module([name, ...])\n\nCreate a voltage regulator module.\n\nEdbSiwave.place_voltage_probe(name, ...)\n\nPlace a voltage probe between two points.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEdbSiwave.excitations\n\nGet all excitations.\n\nEdbSiwave.icepak_component_file\n\nIcepak component file path.\n\nEdbSiwave.icepak_use_minimal_comp_defaults\n\nIcepak default setting.\n\nEdbSiwave.pin_groups\n\nAll Layout Pin groups.\n\nEdbSiwave.probes\n\nGet all probes.\n\nEdbSiwave.sources\n\nGet all sources.\n\nEdbSiwave.voltage_regulator_modules\n\nGet all voltage regulator modules\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.html#gapport",
        "title": "GapPort",
        "section": "GapPort",
        "text": "Manages gap port properties.\nEDB object from the Edblib library.\nEdge terminal instance from EDB.\nThis example shows how to access the GapPort class.\n>>> from pyedb import Edb\n>>> edb = Edb(“myaedb.aedb”)\n>>> gap_port = edb.ports[“gap_port”]\nGapPort.couple_ports(port)\nCreate a bundle wave port.\nGapPort.delete()\nDelete this primitive.\nGapPort.get_edge_terminal_reference_primitive()\nCheck and  return a primitive instance that serves Edge ports, wave ports and coupled edge ports that are directly connedted to primitives.\nGapPort.get_pad_edge_terminal_reference_pin([...])\nGet the closest pin padstack instances and serves any edge terminal connected to a pad.\nGapPort.get_padstack_terminal_reference_pin([...])\nGet a list of pad stacks instances and serves Coax wave ports, pingroup terminals, PadEdge terminals.\nGapPort.get_pin_group_terminal_reference_pin([...])\nReturn a list of pins and serves terminals connected to pingroups.\nGapPort.get_point_terminal_reference_primitive()\nFind and return the primitive reference for the point terminal or the padstack instance.\nGapPort.boundary_type\nBoundary type.\nGapPort.component\nComponent connected to this object.\nGapPort.deembed\nInductance value of the deembed gap port.\nGapPort.deembed_length\nDeembed Length.\nGapPort.do_renormalize\nDetermine whether port renormalization is enabled.\nGapPort.hfss_type\nHFSS port type.\nGapPort.horizontal_extent_factor\nHorizontal extent factor.\nGapPort.id\nPrimitive ID.\nGapPort.impedance\nImpedance of the port.\nGapPort.is_circuit_port\nWhether it is a circuit port.\nGapPort.is_current_source\nWhether it is a current source.\nGapPort.is_null\nFlag indicating if this object is null.\nGapPort.is_port\nWhether it is a port.\nGapPort.is_reference_terminal\nWhether it is a reference terminal.\nGapPort.is_voltage_source\nWhether it is a voltage source.\nGapPort.layer\nGet layer of the terminal.\nGapPort.magnitude\nMagnitude.\nGapPort.name\nName of the definition.\nGapPort.net\nNet Object.\nGapPort.net_name\nGet the primitive layer name.\nGapPort.pec_launch_width\nLaunch width for the printed electronic component (PEC).\nGapPort.phase\nPhase.\nGapPort.ref_terminal\nGet reference terminal.\nGapPort.reference_net_name\nNet name to which reference_object belongs.\nGapPort.reference_object\nThis returns the object assigned as reference.\nGapPort.reference_terminal\nAdding grpc compatibility.\nGapPort.renormalization_impedance\n\nGapPort.renormalize\nWhether renormalize is active.\nGapPort.renormalize_z0\nRenormalize Z0 value (real, imag).\nGapPort.source_amplitude\nProperty added for grpc compatibility\nGapPort.source_phase\nProperty added for grpc compatibility\nGapPort.terminal_type\nTerminal Type.\nGapPort.type\nType of the edb object.\nGapPort.vertical_extent_factor\nVertical extent factor.\nGapPort\npyedb.edb.Edb\nEdblib\nAnsys.Ansoft.Edb.Cell.Terminal.EdgeTerminal\nGapPort\nGapPort.couple_ports\nGapPort.delete\nGapPort.get_edge_terminal_reference_primitive\nGapPort.get_pad_edge_terminal_reference_pin\nGapPort.get_padstack_terminal_reference_pin\nGapPort.get_pin_group_terminal_reference_pin\nGapPort.get_point_terminal_reference_primitive\nGapPort.boundary_type\nGapPort.component\nGapPort.deembed\nGapPort.deembed_length\nGapPort.do_renormalize\nGapPort.hfss_type\nGapPort.horizontal_extent_factor\nGapPort.id\nGapPort.impedance\nGapPort.is_circuit_port\nGapPort.is_current_source\nGapPort.is_null\nGapPort.is_port\nGapPort.is_reference_terminal\nGapPort.is_voltage_source\nGapPort.layer\nGapPort.magnitude\nGapPort.name\nGapPort.net\nGapPort.net_name\nGapPort.pec_launch_width\nGapPort.phase\nGapPort.ref_terminal\nGapPort.reference_net_name\nGapPort.reference_object\nGapPort.reference_terminal\nGapPort.renormalization_impedance\nGapPort.renormalize\nGapPort.renormalize_z0\nGapPort.source_amplitude\nGapPort.source_phase\nGapPort.terminal_type\nGapPort.type\nGapPort.vertical_extent_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.html#pyedb.dotnet.database.edb_data.ports.GapPort",
        "title": "GapPort > GapPort > GapPort",
        "section": "GapPort > GapPort",
        "text": "class pyedb.dotnet.database.edb_data.ports.GapPort(pedb, edb_object)\n\nManages gap port properties.\n\nParameters\n\npedb\n\npyedb.edb.Edb\n\nEDB object from the Edblib library.\n\nedb_object\n\nAnsys.Ansoft.Edb.Cell.Terminal.EdgeTerminal\n\nEdge terminal instance from EDB.\n\nExamples\n\nThis example shows how to access the GapPort class.\n>>> from pyedb import Edb\n>>> edb = Edb(“myaedb.aedb”)\n>>> gap_port = edb.ports[“gap_port”]\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nGapPort.couple_ports(port)\n\nCreate a bundle wave port.\n\nGapPort.delete()\n\nDelete this primitive.\n\nGapPort.get_edge_terminal_reference_primitive()\n\nCheck and  return a primitive instance that serves Edge ports, wave ports and coupled edge ports that are directly connedted to primitives.\n\nGapPort.get_pad_edge_terminal_reference_pin([...])\n\nGet the closest pin padstack instances and serves any edge terminal connected to a pad.\n\nGapPort.get_padstack_terminal_reference_pin([...])\n\nGet a list of pad stacks instances and serves Coax wave ports, pingroup terminals, PadEdge terminals.\n\nGapPort.get_pin_group_terminal_reference_pin([...])\n\nReturn a list of pins and serves terminals connected to pingroups.\n\nGapPort.get_point_terminal_reference_primitive()\n\nFind and return the primitive reference for the point terminal or the padstack instance.\n\n\n\nAttributes\n\n\n\n\n\n\n\nGapPort.boundary_type\n\nBoundary type.\n\nGapPort.component\n\nComponent connected to this object.\n\nGapPort.deembed\n\nInductance value of the deembed gap port.\n\nGapPort.deembed_length\n\nDeembed Length.\n\nGapPort.do_renormalize\n\nDetermine whether port renormalization is enabled.\n\nGapPort.hfss_type\n\nHFSS port type.\n\nGapPort.horizontal_extent_factor\n\nHorizontal extent factor.\n\nGapPort.id\n\nPrimitive ID.\n\nGapPort.impedance\n\nImpedance of the port.\n\nGapPort.is_circuit_port\n\nWhether it is a circuit port.\n\nGapPort.is_current_source\n\nWhether it is a current source.\n\nGapPort.is_null\n\nFlag indicating if this object is null.\n\nGapPort.is_port\n\nWhether it is a port.\n\nGapPort.is_reference_terminal\n\nWhether it is a reference terminal.\n\nGapPort.is_voltage_source\n\nWhether it is a voltage source.\n\nGapPort.layer\n\nGet layer of the terminal.\n\nGapPort.magnitude\n\nMagnitude.\n\nGapPort.name\n\nName of the definition.\n\nGapPort.net\n\nNet Object.\n\nGapPort.net_name\n\nGet the primitive layer name.\n\nGapPort.pec_launch_width\n\nLaunch width for the printed electronic component (PEC).\n\nGapPort.phase\n\nPhase.\n\nGapPort.ref_terminal\n\nGet reference terminal.\n\nGapPort.reference_net_name\n\nNet name to which reference_object belongs.\n\nGapPort.reference_object\n\nThis returns the object assigned as reference.\n\nGapPort.reference_terminal\n\nAdding grpc compatibility.\n\nGapPort.renormalization_impedance\n\n\n\nGapPort.renormalize\n\nWhether renormalize is active.\n\nGapPort.renormalize_z0\n\nRenormalize Z0 value (real, imag).\n\nGapPort.source_amplitude\n\nProperty added for grpc compatibility\n\nGapPort.source_phase\n\nProperty added for grpc compatibility\n\nGapPort.terminal_type\n\nTerminal Type.\n\nGapPort.type\n\nType of the edb object.\n\nGapPort.vertical_extent_factor\n\nVertical extent factor.\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.dc_shorts",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.dc_shorts.html#dc_shorts",
        "title": "dc_shorts",
        "section": "dc_shorts",
        "text": "Find DC shorts on layout.\nList of nets.\nIf True, rename all the nets. (default)\nIf False, only report dc shorts.\n[[net name, net name]].\ndc_shorts\npython:str\npython:list\npython:str\noptional\noptional\nList\nList\npython:str\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.dc_shorts",
        "href": "api/_autosummary/pyedb.dotnet.database.layout_validation.LayoutValidation.dc_shorts.html#pyedb.dotnet.database.layout_validation.LayoutValidation.dc_shorts",
        "title": "dc_shorts > dc_shorts > dc_shorts",
        "section": "dc_shorts > dc_shorts",
        "text": "LayoutValidation.dc_shorts(net_list=None, fix=False)\n\nFind DC shorts on layout.\n\nParameters\n\nnet_list\n\npython:str or python:list[python:str], optional\n\nList of nets.\n\nfix\n\nbool, optional\n\nIf True, rename all the nets. (default)\nIf False, only report dc shorts.\n\nReturns\n\nList[List[python:str, python:str]]\n\n[[net name, net name]].\n\nExamples\n\n>>> edb = Edb(\"edb_file\")\n>>> dc_shorts = edb.layout_validation.dc_shorts()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_source_terms_to_ground",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_source_terms_to_ground.html#dc_source_terms_to_ground",
        "title": "dc_source_terms_to_ground",
        "section": "dc_source_terms_to_ground",
        "text": "Retrieve the dictionary of grounded terminals.\ndc_source_terms_to_ground\nDictionary\npython:str\npython:int\nkeys\nis\nsource\nname\nvalue\npython:int\nunspecified\nnegative\nnode\npositive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_source_terms_to_ground",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_source_terms_to_ground.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_source_terms_to_ground",
        "title": "dc_source_terms_to_ground > dc_source_terms_to_ground > dc_source_terms_to_ground",
        "section": "dc_source_terms_to_ground > dc_source_terms_to_ground",
        "text": "property SimulationConfigurationDc.dc_source_terms_to_ground\n\nRetrieve the dictionary of grounded terminals.\n\nReturns\n\nDictionary\n\n\n\n{python:str, python:int}, keys is source name, value python:int 0 unspecified, 1 negative node, 2 positive one.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_stackup.CfgLayer.protected_attributes.html#pyedb.configuration.cfg_stackup.CfgLayer.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgLayer.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.plot",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.plot.html#plot",
        "title": "plot",
        "section": "plot",
        "text": "Plot a net to Matplotlib 2D chart.\nName of the layers to include in the plot. If None all the signal layers will be considered.\nIf True the legend is shown in the plot. (default)\nIf False the legend is not shown.\nIf a path is specified the plot will be saved in this location.\nIf save_plot is provided, the show parameter is ignored.\nList of points of the outline to plot.\nImage size in pixel (width, height).\nWhether to show the plot or not. Default is True.\nplot\npython:str\npython:list\noptional\noptional\npython:str\noptional\nsave_plot\nshow\npython:list\noptional\npython:tuple\noptional\noptional"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.plot",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.plot.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetsData.plot",
        "title": "plot > plot > plot",
        "section": "plot > plot",
        "text": "EDBNetsData.plot(layers=None, show_legend=True, save_plot=None, outline=None, size=(2000, 1000), show=True)\n\nPlot a net to Matplotlib 2D chart.\n\nParameters\n\nlayers\n\npython:str, python:list, optional\n\nName of the layers to include in the plot. If None all the signal layers will be considered.\n\nshow_legend\n\nbool, optional\n\nIf True the legend is shown in the plot. (default)\nIf False the legend is not shown.\n\nsave_plot\n\npython:str, optional\n\nIf a path is specified the plot will be saved in this location.\nIf save_plot is provided, the show parameter is ignored.\n\noutline\n\npython:list, optional\n\nList of points of the outline to plot.\n\nsize\n\npython:tuple, optional\n\nImage size in pixel (width, height).\n\nshow\n\nbool, optional\n\nWhether to show the plot or not. Default is True.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_edge_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_edge_terminal_reference_primitive.html#get_edge_terminal_reference_primitive",
        "title": "get_edge_terminal_reference_primitive",
        "section": "get_edge_terminal_reference_primitive",
        "text": "Check and  return a primitive instance that serves Edge ports,\nwave ports and coupled edge ports that are directly connedted to primitives.\nget_edge_terminal_reference_primitive\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_edge_terminal_reference_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.get_edge_terminal_reference_primitive.html#pyedb.dotnet.database.edb_data.ports.WavePort.get_edge_terminal_reference_primitive",
        "title": "get_edge_terminal_reference_primitive > get_edge_terminal_reference_primitive > get_edge_terminal_reference_primitive",
        "section": "get_edge_terminal_reference_primitive > get_edge_terminal_reference_primitive",
        "text": "WavePort.get_edge_terminal_reference_primitive()\n\nCheck and  return a primitive instance that serves Edge ports,\nwave ports and coupled edge ports that are directly connedted to primitives.\n\nReturns\n\npyedb.dotnet.database.edb_data.primitives_data.EDBPrimitives\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_package_definition.CfgPackage.set_attributes.html#pyedb.configuration.cfg_package_definition.CfgPackage.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgPackage.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.do_lambda_refinement",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.do_lambda_refinement.html#do_lambda_refinement",
        "title": "do_lambda_refinement",
        "section": "do_lambda_refinement",
        "text": "Retrieve boolean to activate the lambda refinement.\ndo_lambda_refinement\nTrue\nEnable\nthe\nlambda\nmeshing\nrefinement\nwith\nHFSS\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.do_lambda_refinement",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.do_lambda_refinement.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.do_lambda_refinement",
        "title": "do_lambda_refinement > do_lambda_refinement > do_lambda_refinement",
        "section": "do_lambda_refinement > do_lambda_refinement",
        "text": "property SimulationConfigurationAc.do_lambda_refinement\n\nRetrieve boolean to activate the lambda refinement.\n\nReturns\n\nbool\n\n\n\nTrue Enable the lambda meshing refinement with HFSS, False deactivate.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.position.html#position",
        "title": "position",
        "section": "position",
        "text": "Position in the setup list.\nposition"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.position",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.position.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.position",
        "title": "position > position > position",
        "section": "position > position",
        "text": "property SiwaveDCSimulationSetup.position\n\nPosition in the setup list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.basis_order",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.basis_order.html#basis_order",
        "title": "basis_order",
        "section": "basis_order",
        "text": "Retrieve the BasisOrder object.\nbasis_order\nBasisOrder\nclass\nThis\nclass\nsupports\nselections\nMixed\nZero\nsingle\nand\nDouble\nfor\nthe\nHFSS\norder"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.basis_order",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.basis_order.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationAc.basis_order",
        "title": "basis_order > basis_order > basis_order",
        "section": "basis_order > basis_order",
        "text": "property SimulationConfigurationAc.basis_order\n\nRetrieve the BasisOrder object.\n\nReturns\n\nBasisOrder class\n\n\n\nThis class supports 4 selections Mixed, Zero, single and Double for the HFSS order matrix.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.design_options",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.design_options.html#design_options",
        "title": "design_options",
        "section": "design_options",
        "text": "Edb Design Settings and Options.\ndesign_options\nInstance\nof\npyedb.dotnet.database.edb_data.design_options.EdbDesignOptions"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.design_options",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.design_options.html#pyedb.dotnet.edb.Edb.design_options",
        "title": "design_options > design_options > design_options",
        "section": "design_options > design_options",
        "text": "property Edb.design_options\n\nEdb Design Settings and Options.\n\nReturns\n\nInstance of pyedb.dotnet.database.edb_data.design_options.EdbDesignOptions\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize_z0",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize_z0.html#renormalize_z0",
        "title": "renormalize_z0",
        "section": "renormalize_z0",
        "text": "Renormalize Z0 value (real, imag).\nrenormalize_z0"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize_z0",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.renormalize_z0.html#pyedb.dotnet.database.edb_data.ports.GapPort.renormalize_z0",
        "title": "renormalize_z0 > renormalize_z0 > renormalize_z0",
        "section": "renormalize_z0 > renormalize_z0",
        "text": "property GapPort.renormalize_z0\n\nRenormalize Z0 value (real, imag).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/index",
        "href": "api/sim_setup_data/data/index.html#simulation-setup-data",
        "title": "Simulation setup data",
        "section": "Simulation setup data",
        "text": "This section describes Simulation setup data.\nSimulation setup data"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_fields",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_fields.html#save_fields",
        "title": "save_fields",
        "section": "save_fields",
        "text": "Flag indicating if the extraction of surface current data is turned on.\nTrue if save fields is enabled, False otherwise.\nsave_fields\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_fields",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_fields.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.save_fields",
        "title": "save_fields > save_fields > save_fields",
        "section": "save_fields > save_fields",
        "text": "property SweepData.save_fields\n\nFlag indicating if the extraction of surface current data is turned on.\n\nReturns\n\nbool\n\nTrue if save fields is enabled, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_ac_setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_ac_setups.html#siwave_ac_setups",
        "title": "siwave_ac_setups",
        "section": "siwave_ac_setups",
        "text": "Active Siwave SYZ setups.\nsiwave_ac_setups\nDict\npython:str\nlegacy.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_ac_setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.siwave_ac_setups.html#pyedb.dotnet.edb.Edb.siwave_ac_setups",
        "title": "siwave_ac_setups > siwave_ac_setups > siwave_ac_setups",
        "section": "siwave_ac_setups > siwave_ac_setups",
        "text": "property Edb.siwave_ac_setups\n\nActive Siwave SYZ setups.\n\nReturns\n\nDict[python:str, legacy.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.mesh_display_attributes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.mesh_display_attributes.html#mesh_display_attributes",
        "title": "mesh_display_attributes",
        "section": "mesh_display_attributes",
        "text": "Mesh display attributes. Set color for mesh display (i.e. \"#000000\").\nmesh_display_attributes\n\"#000000\"\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.mesh_display_attributes",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.mesh_display_attributes.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdvancedMeshSettings.mesh_display_attributes",
        "title": "mesh_display_attributes > mesh_display_attributes > mesh_display_attributes",
        "section": "mesh_display_attributes > mesh_display_attributes",
        "text": "property AdvancedMeshSettings.mesh_display_attributes\n\nMesh display attributes. Set color for mesh display (i.e. \"#000000\").\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Delete this primitive.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.delete.html#pyedb.dotnet.database.edb_data.ports.WavePort.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "WavePort.delete()\n\nDelete this primitive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.max_arc_points",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.max_arc_points.html#max_arc_points",
        "title": "max_arc_points",
        "section": "max_arc_points",
        "text": "Maximum number of mesh points for arc segments.\nmax_arc_points\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.max_arc_points",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.max_arc_points.html#pyedb.dotnet.database.sim_setup_data.data.settings.CurveApproxSettings.max_arc_points",
        "title": "max_arc_points > max_arc_points > max_arc_points",
        "section": "max_arc_points > max_arc_points",
        "text": "property CurveApproxSettings.max_arc_points\n\nMaximum number of mesh points for arc segments.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_base_height",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_base_height.html#fin_base_height",
        "title": "fin_base_height",
        "section": "fin_base_height",
        "text": "The base elevation of the fins.\nfin_base_height"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_base_height",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_base_height.html#pyedb.dotnet.database.utilities.heatsink.HeatSink.fin_base_height",
        "title": "fin_base_height > fin_base_height > fin_base_height",
        "section": "fin_base_height > fin_base_height",
        "text": "property HeatSink.fin_base_height\n\nThe base elevation of the fins.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.duplicate_across_layers",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.duplicate_across_layers.html#duplicate_across_layers",
        "title": "duplicate_across_layers",
        "section": "duplicate_across_layers",
        "text": "Duplicate across layer a primitive object.\nParameters:\nlist of str, with layer names\nTrue when successful, False when failed.\nduplicate_across_layers\nTrue\nFalse"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.duplicate_across_layers",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.duplicate_across_layers.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.duplicate_across_layers",
        "title": "duplicate_across_layers > duplicate_across_layers > duplicate_across_layers",
        "section": "duplicate_across_layers > duplicate_across_layers",
        "text": "EdbPolygon.duplicate_across_layers(layers)\n\nDuplicate across layer a primitive object.\n\nParameters:\n\nlayers: list\n\nlist of str, with layer names\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.compute_inductance",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.compute_inductance.html#compute_inductance",
        "title": "compute_inductance",
        "section": "compute_inductance",
        "text": "Whether to compute Inductance.\nTrue if inductances will be computed, False otherwise.\ncompute_inductance\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.compute_inductance",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.compute_inductance.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCSettings.compute_inductance",
        "title": "compute_inductance > compute_inductance > compute_inductance",
        "section": "compute_inductance > compute_inductance",
        "text": "property DCSettings.compute_inductance\n\nWhether to compute Inductance.\n\nReturns\n\nbool\n\nTrue if inductances will be computed, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.protected_attributes.html#protected_attributes",
        "title": "protected_attributes",
        "section": "protected_attributes",
        "text": "protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.protected_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgPort.protected_attributes.html#pyedb.configuration.cfg_ports_sources.CfgPort.protected_attributes",
        "title": "protected_attributes > protected_attributes > protected_attributes",
        "section": "protected_attributes > protected_attributes",
        "text": "CfgPort.protected_attributes = ['pedb', 'pyedb_obj', 'api']\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings.html#simulationsettings",
        "title": "SimulationSettings",
        "section": "SimulationSettings",
        "text": "SimulationSettings.enabled\n\nSimulationSettings\nSimulationSettings.enabled"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings",
        "title": "SimulationSettings > SimulationSettings > SimulationSettings",
        "section": "SimulationSettings > SimulationSettings",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.simulation_settings.SimulationSettings(pedb, sim_setup, edb_object)\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nSimulationSettings.enabled\n\n\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.export_properties.html#export_properties",
        "title": "export_properties",
        "section": "export_properties",
        "text": "export_properties"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.export_properties",
        "href": "api/_autosummary/pyedb.configuration.cfg_operations.CfgCutout.export_properties.html#pyedb.configuration.cfg_operations.CfgCutout.export_properties",
        "title": "export_properties > export_properties > export_properties",
        "section": "export_properties > export_properties",
        "text": "CfgCutout.export_properties()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer.html#pad_by_layer",
        "title": "pad_by_layer",
        "section": "pad_by_layer",
        "text": "Regular pad property.\npad_by_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.pad_by_layer",
        "title": "pad_by_layer > pad_by_layer > pad_by_layer",
        "section": "pad_by_layer > pad_by_layer",
        "text": "property EDBPadstack.pad_by_layer\n\nRegular pad property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileVia",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileVia.html#controlfilevia",
        "title": "ControlFileVia",
        "section": "ControlFileVia",
        "text": "ControlFileVia"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileVia",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileVia.html#pyedb.dotnet.database.edb_data.control_file.ControlFileVia",
        "title": "ControlFileVia > ControlFileVia > ControlFileVia",
        "section": "ControlFileVia > ControlFileVia",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileVia(name, properties)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.set_attributes.html#set_attributes",
        "title": "set_attributes",
        "section": "set_attributes",
        "text": "set_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.set_attributes",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.set_attributes.html#pyedb.configuration.cfg_ports_sources.CfgTerminalInfo.set_attributes",
        "title": "set_attributes > set_attributes > set_attributes",
        "section": "set_attributes > set_attributes",
        "text": "CfgTerminalInfo.set_attributes(pedb_object)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_frequency_data_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_frequency_data_list.html#adaptive_frequency_data_list",
        "title": "adaptive_frequency_data_list",
        "section": "adaptive_frequency_data_list",
        "text": "List of all adaptive frequency data.\nadaptive_frequency_data_list\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdaptiveFrequencyData"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_frequency_data_list",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_frequency_data_list.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adaptive_frequency_data_list",
        "title": "adaptive_frequency_data_list > adaptive_frequency_data_list > adaptive_frequency_data_list",
        "section": "adaptive_frequency_data_list > adaptive_frequency_data_list",
        "text": "property AdaptiveSettings.adaptive_frequency_data_list\n\nList of all adaptive frequency data.\n\nReturns\n\npyedb.dotnet.database.edb_data.hfss_simulation_setup_data.AdaptiveFrequencyData\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section shows you how to use PyEDB.\nPyEDB loads EDB in memory, meaning non-graphically.\nLearn how to load a layout (AEDB file) in EDB.\nLearn how to run EDB layout queries.\nLearn how to build various types of simulation projects.\nLearn how to create and set up current sources and ports.\nThis section provides details about how to create a setup in HFSS or SIwave.\nThis section provides in-depth information on how to modify the edb stackup.\nThis section provides in-depth information on how to modify the pad-stacks definitions and instances.\nThis section provides in-depth information on how to play with EDB components.\nThis section provides example on how to modify your layout.\nUser guide"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_zone_primitive.html#is_zone_primitive",
        "title": "is_zone_primitive",
        "section": "is_zone_primitive",
        "text": "bool: If primitive object is a zone.\nRead-Only.\nis_zone_primitive\nbool"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_zone_primitive",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_zone_primitive.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_zone_primitive",
        "title": "is_zone_primitive > is_zone_primitive > is_zone_primitive",
        "section": "is_zone_primitive > is_zone_primitive",
        "text": "property EDBPadstackInstance.is_zone_primitive\n\nbool: If primitive object is a zone.\n\nRead-Only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/SimulationConfigurationV2",
        "href": "api/SimulationConfigurationV2.html#simulation-configuration-v20",
        "title": "Simulation configuration v2.0",
        "section": "Simulation configuration v2.0",
        "text": "These classes are the containers of simulation configuration constructors V2.0 for the EDB.\nCfgBoundaries\n\nCfgBase\n\nCfgComponent\n\nCfgComponents\n\nCfgData\nManages configure data.\nCfgGeneral\nManage configuration general settings.\nCfgNets\nManage configuration net class.\nCfgCutout\n\nCfgOperations\n\nCfgPackage\nConfiguration package class.\nCfgHeatSink\nConfiguration heat sink class.\nCfgPackageDefinitions\n\nCfgPadstacks\nPadstack data class.\nCfgPinGroups\nManage configuration pin group class.\nCfgPinGroup\n\nCfgTerminalInfo\n\nCfgNearestPinTerminalInfo\n\nCfgSources\n\nCfgPorts\n\nCfgCircuitElement\n\nCfgPort\nManage port.\nCfgSource\n\nCfgSParameterModel\n\nCfgSetup\n\nCfgSIwaveACSetup\n\nCfgSIwaveDCSetup\n\nCfgHFSSSetup\n\nCfgSetups\n\nCfgSpiceModel\n\nCfgMaterial\n\nCfgLayer\n\nCfgStackup\n\nConfiguration\nEnables export and import of a JSON configuration file that can be applied to a new or existing design.\nSimulation configuration v2.0\nCfgBoundaries\nCfgBase\nCfgComponent\nCfgComponents\nCfgData\nCfgGeneral\nCfgNets\nCfgCutout\nCfgOperations\nCfgPackage\nCfgHeatSink\nCfgPackageDefinitions\nCfgPadstacks\nCfgPinGroups\nCfgPinGroup\nCfgTerminalInfo\nCfgNearestPinTerminalInfo\nCfgSources\nCfgPorts\nCfgCircuitElement\nCfgPort\nCfgSource\nCfgSParameterModel\nCfgSetup\nCfgSIwaveACSetup\nCfgSIwaveDCSetup\nCfgHFSSSetup\nCfgSetups\nCfgSpiceModel\nCfgMaterial\nCfgLayer\nCfgStackup\nConfiguration"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.html#cfgboundaries",
        "title": "CfgBoundaries",
        "section": "CfgBoundaries",
        "text": "CfgBoundaries.apply()\nImports boundary information from JSON.\nCfgBoundaries.get_attributes([exclude])\n\nCfgBoundaries.get_data_from_db()\n\nCfgBoundaries.set_attributes(pedb_object)\n\nCfgBoundaries.protected_attributes\n\nCfgBoundaries\nCfgBoundaries.apply\nCfgBoundaries.get_attributes\nCfgBoundaries.get_data_from_db\nCfgBoundaries.set_attributes\nCfgBoundaries.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries",
        "href": "api/_autosummary/pyedb.configuration.cfg_boundaries.CfgBoundaries.html#pyedb.configuration.cfg_boundaries.CfgBoundaries",
        "title": "CfgBoundaries > CfgBoundaries > CfgBoundaries",
        "section": "CfgBoundaries > CfgBoundaries",
        "text": "class pyedb.configuration.cfg_boundaries.CfgBoundaries(pedb, boundary_data)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgBoundaries.apply()\n\nImports boundary information from JSON.\n\nCfgBoundaries.get_attributes([exclude])\n\n\n\nCfgBoundaries.get_data_from_db()\n\n\n\nCfgBoundaries.set_attributes(pedb_object)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgBoundaries.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adapt_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adapt_type.html#adapt_type",
        "title": "adapt_type",
        "section": "adapt_type",
        "text": "Adaptive type.\nOptions:\n1- kSingle.\n2- kMultiFrequencies.\n3- kBroadband.\n4- kNumAdaptTypes.\nadapt_type\nkSingle\nkMultiFrequencies\nkBroadband\nkNumAdaptTypes\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adapt_type",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adapt_type.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.adapt_type",
        "title": "adapt_type > adapt_type > adapt_type",
        "section": "adapt_type > adapt_type",
        "text": "property AdaptiveSettings.adapt_type\n\nAdaptive type.\nOptions:\n1- kSingle.\n2- kMultiFrequencies.\n3- kBroadband.\n4- kNumAdaptTypes.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_length.html#restrict_max_length",
        "title": "restrict_max_length",
        "section": "restrict_max_length",
        "text": "Adding property for grpc compatibility.\nrestrict_max_length"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_length",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_length.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.LengthMeshOperation.restrict_max_length",
        "title": "restrict_max_length > restrict_max_length > restrict_max_length",
        "section": "restrict_max_length > restrict_max_length",
        "text": "property LengthMeshOperation.restrict_max_length\n\nAdding property for grpc compatibility.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer.html#antipad_by_layer",
        "title": "antipad_by_layer",
        "section": "antipad_by_layer",
        "text": "Anti pad property.\nantipad_by_layer"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.antipad_by_layer",
        "title": "antipad_by_layer > antipad_by_layer > antipad_by_layer",
        "section": "antipad_by_layer > antipad_by_layer",
        "text": "property EDBPadstack.antipad_by_layer\n\nAnti pad property.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.clean",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.clean.html#clean",
        "title": "clean",
        "section": "clean",
        "text": "clean"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.clean",
        "href": "api/_autosummary/pyedb.configuration.cfg_padstacks.CfgPadstacks.clean.html#pyedb.configuration.cfg_padstacks.CfgPadstacks.clean",
        "title": "clean > clean > clean",
        "section": "clean > clean",
        "text": "CfgPadstacks.clean()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.type.html#type",
        "title": "type",
        "section": "type",
        "text": "type"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.type",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.type.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.type",
        "title": "type > type > type",
        "section": "type > type",
        "text": "property RaptorXSimulationSetup.type\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_nets.html#api_nets",
        "title": "api_nets",
        "section": "api_nets",
        "text": "Return Edb Nets object dictionary.\napi_nets"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_nets",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_nets.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.api_nets",
        "title": "api_nets > api_nets > api_nets",
        "section": "api_nets > api_nets",
        "text": "property EDBNetClassData.api_nets\n\nReturn Edb Nets object dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Padstack Definition Name.\nname"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstack.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EDBPadstack.name\n\nPadstack Definition Name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.html#cfgsource",
        "title": "CfgSource",
        "section": "CfgSource",
        "text": "CfgSource.create_terminals()\nCreate step 1.\nCfgSource.export_properties()\n\nCfgSource.get_attributes([exclude])\n\nCfgSource.set_attributes(pedb_object)\n\nCfgSource.set_parameters_to_edb()\nCreate sources.\nCfgSource.CFG_SOURCE_TYPE\n\nCfgSource.protected_attributes\n\nCfgSource\nCfgSource.create_terminals\nCfgSource.export_properties\nCfgSource.get_attributes\nCfgSource.set_attributes\nCfgSource.set_parameters_to_edb\nCfgSource.CFG_SOURCE_TYPE\nCfgSource.protected_attributes"
    },
    {
        "objectID": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource",
        "href": "api/_autosummary/pyedb.configuration.cfg_ports_sources.CfgSource.html#pyedb.configuration.cfg_ports_sources.CfgSource",
        "title": "CfgSource > CfgSource > CfgSource",
        "section": "CfgSource > CfgSource",
        "text": "class pyedb.configuration.cfg_ports_sources.CfgSource(pedb, **kwargs)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCfgSource.create_terminals()\n\nCreate step 1.\n\nCfgSource.export_properties()\n\n\n\nCfgSource.get_attributes([exclude])\n\n\n\nCfgSource.set_attributes(pedb_object)\n\n\n\nCfgSource.set_parameters_to_edb()\n\nCreate sources.\n\n\n\nAttributes\n\n\n\n\n\n\n\nCfgSource.CFG_SOURCE_TYPE\n\n\n\nCfgSource.protected_attributes\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.api_class.html#api_class",
        "title": "api_class",
        "section": "api_class",
        "text": "api_class"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.api_class",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.api_class.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.api_class",
        "title": "api_class > api_class > api_class",
        "section": "api_class > api_class",
        "text": "property EdbPolygon.api_class\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.student_version",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.student_version.html#student_version",
        "title": "student_version",
        "section": "student_version",
        "text": "Set the student version flag.\nstudent_version"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.student_version",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.student_version.html#pyedb.dotnet.edb.Edb.student_version",
        "title": "student_version > student_version > student_version",
        "section": "student_version > student_version",
        "text": "property Edb.student_version\n\nSet the student version flag.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.source",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.source.html#source",
        "title": "source",
        "section": "source",
        "text": "Get source name for this Database.\nThis attribute is also used to set the source name.\nname of the source\nsource\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.source",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.source.html#pyedb.dotnet.edb.Edb.source",
        "title": "source > source > source",
        "section": "source > source",
        "text": "property Edb.source\n\nGet source name for this Database.\n\nThis attribute is also used to set the source name.\n\nReturns\n\npython:str\n\nname of the source\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_via_sides",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_via_sides.html#dc_num_via_sides",
        "title": "dc_num_via_sides",
        "section": "dc_num_via_sides",
        "text": "Retrieve the number of sides used for cylinder discretization.\nNumber of sides.\ndc_num_via_sides\npython:int"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_via_sides",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_via_sides.html#pyedb.dotnet.database.edb_data.simulation_configuration.SimulationConfigurationDc.dc_num_via_sides",
        "title": "dc_num_via_sides > dc_num_via_sides > dc_num_via_sides",
        "section": "dc_num_via_sides > dc_num_via_sides",
        "text": "property SimulationConfigurationDc.dc_num_via_sides\n\nRetrieve the number of sides used for cylinder discretization.\n\nReturns\n\npython:int\n\nNumber of sides.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_terminal.html#create_terminal",
        "title": "create_terminal",
        "section": "create_terminal",
        "text": "Create a padstack instance terminal\ncreate_terminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_terminal.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.create_terminal",
        "title": "create_terminal > create_terminal > create_terminal",
        "section": "create_terminal > create_terminal",
        "text": "EDBPadstackInstance.create_terminal(name=None)\n\nCreate a padstack instance terminal\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_q3d",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_q3d.html#export_q3d",
        "title": "export_q3d",
        "section": "export_q3d",
        "text": "Export EDB to Q3D.\nFull path and name for saving the AEDT file.\nList of nets to export only if certain ones are to be exported.\nThe default is None, in which case all nets are eported.\nNumber of cores to use for the export. The default is None.\nName of the AEDT output file without the .aedt extension. The default is None,\nin which case the default name is used.\nOpen Siwave in embedding mode. User will only see Siwave Icon but UI will be hidden.\nFull path to the AEDT file.\nexport_q3d\npython:str\npython:list\noptional\nNone\npython:int\noptional\nNone\npython:str\noptional\n.aedt\nNone\noptional\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.export_q3d",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.export_q3d.html#pyedb.dotnet.edb.Edb.export_q3d",
        "title": "export_q3d > export_q3d > export_q3d",
        "section": "export_q3d > export_q3d",
        "text": "Edb.export_q3d(path_to_output, net_list=None, num_cores=None, aedt_file_name=None, hidden=False)\n\nExport EDB to Q3D.\n\nParameters\n\npath_to_output\n\npython:str\n\nFull path and name for saving the AEDT file.\n\nnet_list\n\npython:list, optional\n\nList of nets to export only if certain ones are to be exported.\nThe default is None, in which case all nets are eported.\n\nnum_cores\n\npython:int, optional\n\nNumber of cores to use for the export. The default is None.\n\naedt_file_name\n\npython:str, optional\n\nName of the AEDT output file without the .aedt extension. The default is None,\nin which case the default name is used.\n\nhidden\n\nbool, optional\n\nOpen Siwave in embedding mode. User will only see Siwave Icon but UI will be hidden.\n\nReturns\n\npython:str\n\nFull path to the AEDT file.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edb = Edb(edbpath=r\"C:      emp\\myproject.aedb\", edbversion=\"2021.2\")\n>>> options_config = {'UNITE_NETS' : 1, 'LAUNCH_Q3D' : 0}\n>>> edb.write_export3d_option_config_file(r\"C:  emp\", options_config)\n>>> edb.export_q3d(r\"C: emp\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.add_rlc_boundary",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.add_rlc_boundary.html#add_rlc_boundary",
        "title": "add_rlc_boundary",
        "section": "add_rlc_boundary",
        "text": "Add RLC gap boundary on component and replace it with a circuit port.\nThe circuit port supports only 2-pin components.\nReference designator of the RLC component.\nWhen True circuit type are defined, if False gap type will be used instead (compatible with HFSS 3D\nmodeler). Default value is True.\nTrue when successful, False when failed.\nadd_rlc_boundary\npython:str\nTrue\nFalse\nTrue\nTrue\nFalse"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.add_rlc_boundary",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.add_rlc_boundary.html#pyedb.dotnet.database.components.Components.add_rlc_boundary",
        "title": "add_rlc_boundary > add_rlc_boundary > add_rlc_boundary",
        "section": "add_rlc_boundary > add_rlc_boundary",
        "text": "Components.add_rlc_boundary(component=None, circuit_type=True)\n\nAdd RLC gap boundary on component and replace it with a circuit port.\nThe circuit port supports only 2-pin components.\n\nParameters\n\ncomponent\n\npython:str\n\nReference designator of the RLC component.\n\ncircuit_type\n\nbool\n\nWhen True circuit type are defined, if False gap type will be used instead (compatible with HFSS 3D\nmodeler). Default value is True.\n\nReturns\n\nbool\n\nTrue when successful, False when failed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_relaxed_z_axis",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_relaxed_z_axis.html#use_relaxed_z_axis",
        "title": "use_relaxed_z_axis",
        "section": "use_relaxed_z_axis",
        "text": "Enabling this option provides a simplified mesh along the z-axis.\nuse_relaxed_z_axis"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_relaxed_z_axis",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_relaxed_z_axis.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationAdvancedSettings.use_relaxed_z_axis",
        "title": "use_relaxed_z_axis > use_relaxed_z_axis > use_relaxed_z_axis",
        "section": "use_relaxed_z_axis > use_relaxed_z_axis",
        "text": "property RaptorXSimulationAdvancedSettings.use_relaxed_z_axis\n\nEnabling this option provides a simplified mesh along the z-axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.net_layer_info",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.net_layer_info.html#net_layer_info",
        "title": "net_layer_info",
        "section": "net_layer_info",
        "text": "Adding property for grpc compatibility.\nnet_layer_info"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.net_layer_info",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.net_layer_info.html#pyedb.dotnet.database.sim_setup_data.data.mesh_operation.SkinDepthMeshOperation.net_layer_info",
        "title": "net_layer_info > net_layer_info > net_layer_info",
        "section": "net_layer_info > net_layer_info",
        "text": "property SkinDepthMeshOperation.net_layer_info\n\nAdding property for grpc compatibility.\n\nReturns\n\nThe tuple is in this form: (net_name, layer_name, is_sheet)``.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.horizontal_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.horizontal_extent_factor.html#horizontal_extent_factor",
        "title": "horizontal_extent_factor",
        "section": "horizontal_extent_factor",
        "text": "Horizontal extent factor.\nhorizontal_extent_factor"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.horizontal_extent_factor",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.horizontal_extent_factor.html#pyedb.dotnet.database.edb_data.ports.WavePort.horizontal_extent_factor",
        "title": "horizontal_extent_factor > horizontal_extent_factor > horizontal_extent_factor",
        "section": "horizontal_extent_factor > horizontal_extent_factor",
        "text": "property WavePort.horizontal_extent_factor\n\nHorizontal extent factor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.setup_type.html#setup_type",
        "title": "setup_type",
        "section": "setup_type",
        "text": "Type of the setup.\nsetup_type"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.setup_type",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.setup_type.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HfssSimulationSetup.setup_type",
        "title": "setup_type > setup_type > setup_type",
        "section": "setup_type > setup_type",
        "text": "property HfssSimulationSetup.setup_type\n\nType of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent.html#air_box_negative_vertical_extent",
        "title": "air_box_negative_vertical_extent",
        "section": "air_box_negative_vertical_extent",
        "text": "Negative vertical extent for the airbox.\nair_box_negative_vertical_extent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent.html#pyedb.dotnet.database.edb_data.hfss_extent_info.HfssExtentInfo.air_box_negative_vertical_extent",
        "title": "air_box_negative_vertical_extent > air_box_negative_vertical_extent > air_box_negative_vertical_extent",
        "section": "air_box_negative_vertical_extent > air_box_negative_vertical_extent",
        "text": "property HfssExtentInfo.air_box_negative_vertical_extent\n\nNegative vertical extent for the airbox.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_parameters",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_parameters.html#backdrill_parameters",
        "title": "backdrill_parameters",
        "section": "backdrill_parameters",
        "text": "backdrill_parameters"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_parameters",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_parameters.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.backdrill_parameters",
        "title": "backdrill_parameters > backdrill_parameters > backdrill_parameters",
        "section": "backdrill_parameters > backdrill_parameters",
        "text": "property EDBPadstackInstance.backdrill_parameters\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_simulation_settings.html#set_simulation_settings",
        "title": "set_simulation_settings",
        "section": "set_simulation_settings",
        "text": "set_simulation_settings"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_simulation_settings",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_simulation_settings.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveDCSimulationSetup.set_simulation_settings",
        "title": "set_simulation_settings > set_simulation_settings > set_simulation_settings",
        "section": "set_simulation_settings > set_simulation_settings",
        "text": "SiwaveDCSimulationSetup.set_simulation_settings(sim_settings: dict)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_pi_slider",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_pi_slider.html#set_pi_slider",
        "title": "set_pi_slider",
        "section": "set_pi_slider",
        "text": "set_pi_slider"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_pi_slider",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_pi_slider.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.set_pi_slider",
        "title": "set_pi_slider > set_pi_slider > set_pi_slider",
        "section": "set_pi_slider > set_pi_slider",
        "text": "AdvancedSettings.set_pi_slider(value)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.setups.html#setups",
        "title": "setups",
        "section": "setups",
        "text": "Get the dictionary of all EDB HFSS and SIwave setups.\nsetups\nDict\npython:str\nlegacy.database.edb_data.hfss_simulation_setup_data.HfssSimulationSetup\nor\nDict\npython:str\nlegacy.database.edb_data.siwave_simulation_setup_data.SiwaveDCSimulationSetup\nor\nDict\npython:str\nlegacy.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.setups",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.setups.html#pyedb.dotnet.edb.Edb.setups",
        "title": "setups > setups > setups",
        "section": "setups > setups",
        "text": "property Edb.setups\n\nGet the dictionary of all EDB HFSS and SIwave setups.\n\nReturns\n\nDict[python:str, legacy.database.edb_data.hfss_simulation_setup_data.HfssSimulationSetup] or\n\n\n\nDict[python:str, legacy.database.edb_data.siwave_simulation_setup_data.SiwaveDCSimulationSetup] or\n\n\n\nDict[python:str, legacy.database.edb_data.siwave_simulation_setup_data.SiwaveSYZSimulationSetup]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net.html#net",
        "title": "net",
        "section": "net",
        "text": "Net Object.\nnet\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.net.html#pyedb.dotnet.database.edb_data.ports.WavePort.net",
        "title": "net > net > net",
        "section": "net > net",
        "text": "property WavePort.net\n\nNet Object.\n\nReturns\n\npyedb.dotnet.database.edb_data.nets_data.EDBNetsData\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.api_class",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.api_class.html#api_class",
        "title": "api_class",
        "section": "api_class",
        "text": "Return Ansys.Ansoft.Edb class object.\napi_class"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.api_class",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.api_class.html#pyedb.dotnet.edb.Edb.api_class",
        "title": "api_class > api_class > api_class",
        "section": "api_class > api_class",
        "text": "property Edb.api_class\n\nReturn Ansys.Ansoft.Edb class object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the definition.\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.name.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EdbPolygon.name\n\nName of the definition.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.html#simsetupinfo",
        "title": "SimSetupInfo",
        "section": "SimSetupInfo",
        "text": "SimSetupInfo.add_sweep_data(sweep_data)\n\nSimSetupInfo.name\n\nSimSetupInfo.position\n\nSimSetupInfo.sim_setup_type\n\"kHFSS\": self._pedb.simsetupdata.HFSSSimulationSettings, \"kPEM\": None, \"kSIwave\": self._pedb.simsetupdata.SIwave.SIWSimulationSettings, \"kLNA\": None, \"kTransient\": None, \"kQEye\": None, \"kVEye\": None, \"kAMI\": None, \"kAnalysisOption\": None, \"kSIwaveDCIR\": self._pedb.simsetupdata.SIwave.SIWDCIRSimulationSettings, \"kSIwaveEMI\": None, \"kHFSSPI\": self._pedb.simsetupdata.HFSSPISimulationSettings, \"kDDRwizard\": None, \"kQ3D\": None, \"kNumSetupTypes\": None,\nSimSetupInfo.simulation_settings\n\nSimSetupInfo.sweep_data_list\n\nSimSetupInfo\nSimSetupInfo.add_sweep_data\nSimSetupInfo.name\nSimSetupInfo.position\nSimSetupInfo.sim_setup_type\nSimSetupInfo.simulation_settings\nSimSetupInfo.sweep_data_list"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo.html#pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo",
        "title": "SimSetupInfo > SimSetupInfo > SimSetupInfo",
        "section": "SimSetupInfo > SimSetupInfo",
        "text": "class pyedb.dotnet.database.sim_setup_data.data.sim_setup_info.SimSetupInfo(pedb, sim_setup, edb_object=None, setup_type: str | None = None, name: str | None = None)\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nSimSetupInfo.add_sweep_data(sweep_data)\n\n\n\n\n\nAttributes\n\n\n\n\n\n\n\nSimSetupInfo.name\n\n\n\nSimSetupInfo.position\n\n\n\nSimSetupInfo.sim_setup_type\n\n\"kHFSS\": self._pedb.simsetupdata.HFSSSimulationSettings, \"kPEM\": None, \"kSIwave\": self._pedb.simsetupdata.SIwave.SIWSimulationSettings, \"kLNA\": None, \"kTransient\": None, \"kQEye\": None, \"kVEye\": None, \"kAMI\": None, \"kAnalysisOption\": None, \"kSIwaveDCIR\": self._pedb.simsetupdata.SIwave.SIWDCIRSimulationSettings, \"kSIwaveEMI\": None, \"kHFSSPI\": self._pedb.simsetupdata.HFSSPISimulationSettings, \"kDDRwizard\": None, \"kQ3D\": None, \"kNumSetupTypes\": None,\n\nSimSetupInfo.simulation_settings\n\n\n\nSimSetupInfo.sweep_data_list\n\n\n\n"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Edb Dotnet Api Database NetClass.name and  NetClass.SetName().\nname"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.name",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.name.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property EDBNetClassData.name\n\nEdb Dotnet Api Database NetClass.name and  NetClass.SetName().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_hole_to_conical_shape",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_hole_to_conical_shape.html#convert_hole_to_conical_shape",
        "title": "convert_hole_to_conical_shape",
        "section": "convert_hole_to_conical_shape",
        "text": "Convert actual padstack instance to microvias 3D Objects with a given aspect ratio.\nAngle of laser penetration in degrees. The angle defines the lowest hole diameter with this formula:\nHoleDiameter -2*tan(laser_angle* Hole depth). Hole depth is the height of the via (dielectric thickness).\nThe default is 75.\nThe lowest hole is 0.75*HoleDepth/HoleDiam.\nconvert_hole_to_conical_shape\npython:float\noptional\n75\n0.75*HoleDepth/HoleDiam"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_hole_to_conical_shape",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_hole_to_conical_shape.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.convert_hole_to_conical_shape",
        "title": "convert_hole_to_conical_shape > convert_hole_to_conical_shape > convert_hole_to_conical_shape",
        "section": "convert_hole_to_conical_shape > convert_hole_to_conical_shape",
        "text": "EDBPadstackInstance.convert_hole_to_conical_shape(angle=75)\n\nConvert actual padstack instance to microvias 3D Objects with a given aspect ratio.\n\nParameters\n\nangle\n\npython:float, optional\n\nAngle of laser penetration in degrees. The angle defines the lowest hole diameter with this formula:\nHoleDiameter -2*tan(laser_angle* Hole depth). Hole depth is the height of the via (dielectric thickness).\nThe default is 75.\nThe lowest hole is 0.75*HoleDepth/HoleDiam.\n\nReturns\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.component.html#component",
        "title": "component",
        "section": "component",
        "text": "Component connected to this object.\ncomponent\ndotnet.database.edb_data.nets_data.EDBComponent"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.component",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.WavePort.component.html#pyedb.dotnet.database.edb_data.ports.WavePort.component",
        "title": "component > component > component",
        "section": "component > component",
        "text": "property WavePort.component\n\nComponent connected to this object.\n\nReturns\n\ndotnet.database.edb_data.nets_data.EDBComponent\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_simulation_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_simulation_settings.html#set_simulation_settings",
        "title": "set_simulation_settings",
        "section": "set_simulation_settings",
        "text": "set_simulation_settings"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_simulation_settings",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_simulation_settings.html#pyedb.dotnet.database.edb_data.raptor_x_simulation_setup_data.RaptorXSimulationSetup.set_simulation_settings",
        "title": "set_simulation_settings > set_simulation_settings > set_simulation_settings",
        "section": "set_simulation_settings > set_simulation_settings",
        "text": "RaptorXSimulationSetup.set_simulation_settings(sim_settings: dict)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.compute_dc_point",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.compute_dc_point.html#compute_dc_point",
        "title": "compute_dc_point",
        "section": "compute_dc_point",
        "text": "Flag indicating if computing the exact DC point is turned on.\ncompute_dc_point"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.compute_dc_point",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.compute_dc_point.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.compute_dc_point",
        "title": "compute_dc_point > compute_dc_point > compute_dc_point",
        "section": "compute_dc_point > compute_dc_point",
        "text": "property SweepData.compute_dc_point\n\nFlag indicating if computing the exact DC point is turned on.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Name of the setup.\nname"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.name",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.name.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property SiwaveSimulationSetup.name\n\nName of the setup.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.restore_default.html#restore_default",
        "title": "restore_default",
        "section": "restore_default",
        "text": "restore_default"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.restore_default",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.restore_default.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.restore_default",
        "title": "restore_default > restore_default > restore_default",
        "section": "restore_default > restore_default",
        "text": "DCAdvancedSettings.restore_default()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/excitations/create_port_between_pin_and_layer",
        "href": "user_guide/excitations/create_port_between_pin_and_layer.html#create-port-between-a-pin-and-layer",
        "title": "Create port between a pin and layer",
        "section": "Create port between a pin and layer",
        "text": "This page shows how to create a port between a pin and a layer.\nCreate port between a pin and layer"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete_frequency_sweep.html#delete_frequency_sweep",
        "title": "delete_frequency_sweep",
        "section": "delete_frequency_sweep",
        "text": "Delete a frequency sweep.\ndelete_frequency_sweep"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete_frequency_sweep",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete_frequency_sweep.html#pyedb.dotnet.database.utilities.siwave_simulation_setup.SiwaveSimulationSetup.delete_frequency_sweep",
        "title": "delete_frequency_sweep > delete_frequency_sweep > delete_frequency_sweep",
        "section": "delete_frequency_sweep > delete_frequency_sweep",
        "text": "SiwaveSimulationSetup.delete_frequency_sweep(sweep_data)\n\nDelete a frequency sweep.\n\nParameters\n\nsweep_data\n\nEdbFrequencySweep.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.html#edbhfss",
        "title": "EdbHfss",
        "section": "EdbHfss",
        "text": "Manages EDB method to configure Hfss setup accessible from Edb.hfss property.\nEdbHfss.add_setup([name])\nAdding method for grpc compatibility\nEdbHfss.configure_hfss_analysis_setup([...])\nConfigure HFSS analysis setup.\nEdbHfss.configure_hfss_extents([...])\nConfigure the HFSS extent box.\nEdbHfss.create_bundle_wave_port(...[, ...])\nCreate a bundle wave port.\nEdbHfss.create_circuit_port_on_net(...[, ...])\nCreate a circuit port on a NET.\nEdbHfss.create_circuit_port_on_pin(pos_pin, ...)\nCreate Circuit Port on Pin.\nEdbHfss.create_coax_port_on_component(...[, ...])\nCreate a coaxial port on a component or component list on a net or net list.\nEdbHfss.create_current_source_on_net(...[, ...])\nCreate a current source.\nEdbHfss.create_current_source_on_pin(...[, ...])\nCreate a current source.\nEdbHfss.create_differential_wave_port(...[, ...])\nCreate a differential wave port.\nEdbHfss.create_edge_port_horizontal(prim_id, ...)\nCreate a horizontal edge port.\nEdbHfss.create_edge_port_on_polygon([...])\nCreate lumped port between two edges from two different polygons.\nEdbHfss.create_edge_port_vertical(prim_id, ...)\nCreate a vertical edge port.\nEdbHfss.create_hfss_ports_on_padstack(pinpos)\nCreate an HFSS port on a padstack.\nEdbHfss.create_lumped_port_on_net([nets, ...])\nCreate an edge port on nets.\nEdbHfss.create_resistor_on_pin(pos_pin, neg_pin)\nCreate a Resistor boundary between two given pins.\nEdbHfss.create_rlc_boundary_on_pins([...])\nCreate hfss rlc boundary on pins.\nEdbHfss.create_vertical_circuit_port_on_clipped_traces([...])\nCreate an edge port on clipped signal traces.\nEdbHfss.create_voltage_source_on_net(...[, ...])\nCreate a voltage source.\nEdbHfss.create_voltage_source_on_pin(...[, ...])\nCreate a voltage source.\nEdbHfss.create_wave_port(prim_id, point_on_edge)\nCreate a wave port.\nEdbHfss.get_layout_bounding_box([layout, ...])\nEvaluate the layout bounding box.\nEdbHfss.get_ports_number()\nReturn the total number of excitation ports in a layout.\nEdbHfss.get_trace_width_for_traces_with_ports()\nRetrieve the trace width for traces with ports.\nEdbHfss.layout_defeaturing([simulation_setup])\nDefeature the layout by reducing the number of points for polygons based on surface deviation criteria.\nEdbHfss.set_coax_port_attributes([...])\nSet coaxial port attribute with forcing default impedance to 50 Ohms and adjusting the coaxial extent radius.\nEdbHfss.trim_component_reference_size([...])\nTrim the common component reference to the minimally acceptable size.\nEdbHfss.excitations\nGet all excitations.\nEdbHfss.hfss_extent_info\nHFSS extent information.\nEdbHfss.probes\nGet all probes.\nEdbHfss.sources\nGet all sources.\nEdbHfss\nEdbHfss.add_setup\nEdbHfss.configure_hfss_analysis_setup\nEdbHfss.configure_hfss_extents\nEdbHfss.create_bundle_wave_port\nEdbHfss.create_circuit_port_on_net\nEdbHfss.create_circuit_port_on_pin\nEdbHfss.create_coax_port_on_component\nEdbHfss.create_current_source_on_net\nEdbHfss.create_current_source_on_pin\nEdbHfss.create_differential_wave_port\nEdbHfss.create_edge_port_horizontal\nEdbHfss.create_edge_port_on_polygon\nEdbHfss.create_edge_port_vertical\nEdbHfss.create_hfss_ports_on_padstack\nEdbHfss.create_lumped_port_on_net\nEdbHfss.create_resistor_on_pin\nEdbHfss.create_rlc_boundary_on_pins\nEdbHfss.create_vertical_circuit_port_on_clipped_traces\nEdbHfss.create_voltage_source_on_net\nEdbHfss.create_voltage_source_on_pin\nEdbHfss.create_wave_port\nEdbHfss.get_layout_bounding_box\nEdbHfss.get_ports_number\nEdbHfss.get_trace_width_for_traces_with_ports\nEdbHfss.layout_defeaturing\nEdbHfss.set_coax_port_attributes\nEdbHfss.trim_component_reference_size\nEdbHfss.excitations\nEdbHfss.hfss_extent_info\nEdbHfss.probes\nEdbHfss.sources"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss",
        "href": "api/_autosummary/pyedb.dotnet.database.hfss.EdbHfss.html#pyedb.dotnet.database.hfss.EdbHfss",
        "title": "EdbHfss > EdbHfss > EdbHfss",
        "section": "EdbHfss > EdbHfss",
        "text": "class pyedb.dotnet.database.hfss.EdbHfss(p_edb)\n\nManages EDB method to configure Hfss setup accessible from Edb.hfss property.\n\nExamples\n\n>>> from pyedb import Edb\n>>> edbapp = Edb(\"myaedbfolder\")\n>>> edb_hfss = edb_3dedbapp.hfss\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEdbHfss.add_setup([name])\n\nAdding method for grpc compatibility\n\nEdbHfss.configure_hfss_analysis_setup([...])\n\nConfigure HFSS analysis setup.\n\nEdbHfss.configure_hfss_extents([...])\n\nConfigure the HFSS extent box.\n\nEdbHfss.create_bundle_wave_port(...[, ...])\n\nCreate a bundle wave port.\n\nEdbHfss.create_circuit_port_on_net(...[, ...])\n\nCreate a circuit port on a NET.\n\nEdbHfss.create_circuit_port_on_pin(pos_pin, ...)\n\nCreate Circuit Port on Pin.\n\nEdbHfss.create_coax_port_on_component(...[, ...])\n\nCreate a coaxial port on a component or component list on a net or net list.\n\nEdbHfss.create_current_source_on_net(...[, ...])\n\nCreate a current source.\n\nEdbHfss.create_current_source_on_pin(...[, ...])\n\nCreate a current source.\n\nEdbHfss.create_differential_wave_port(...[, ...])\n\nCreate a differential wave port.\n\nEdbHfss.create_edge_port_horizontal(prim_id, ...)\n\nCreate a horizontal edge port.\n\nEdbHfss.create_edge_port_on_polygon([...])\n\nCreate lumped port between two edges from two different polygons.\n\nEdbHfss.create_edge_port_vertical(prim_id, ...)\n\nCreate a vertical edge port.\n\nEdbHfss.create_hfss_ports_on_padstack(pinpos)\n\nCreate an HFSS port on a padstack.\n\nEdbHfss.create_lumped_port_on_net([nets, ...])\n\nCreate an edge port on nets.\n\nEdbHfss.create_resistor_on_pin(pos_pin, neg_pin)\n\nCreate a Resistor boundary between two given pins.\n\nEdbHfss.create_rlc_boundary_on_pins([...])\n\nCreate hfss rlc boundary on pins.\n\nEdbHfss.create_vertical_circuit_port_on_clipped_traces([...])\n\nCreate an edge port on clipped signal traces.\n\nEdbHfss.create_voltage_source_on_net(...[, ...])\n\nCreate a voltage source.\n\nEdbHfss.create_voltage_source_on_pin(...[, ...])\n\nCreate a voltage source.\n\nEdbHfss.create_wave_port(prim_id, point_on_edge)\n\nCreate a wave port.\n\nEdbHfss.get_layout_bounding_box([layout, ...])\n\nEvaluate the layout bounding box.\n\nEdbHfss.get_ports_number()\n\nReturn the total number of excitation ports in a layout.\n\nEdbHfss.get_trace_width_for_traces_with_ports()\n\nRetrieve the trace width for traces with ports.\n\nEdbHfss.layout_defeaturing([simulation_setup])\n\nDefeature the layout by reducing the number of points for polygons based on surface deviation criteria.\n\nEdbHfss.set_coax_port_attributes([...])\n\nSet coaxial port attribute with forcing default impedance to 50 Ohms and adjusting the coaxial extent radius.\n\nEdbHfss.trim_component_reference_size([...])\n\nTrim the common component reference to the minimally acceptable size.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEdbHfss.excitations\n\nGet all excitations.\n\nEdbHfss.hfss_extent_info\n\nHFSS extent information.\n\nEdbHfss.probes\n\nGet all probes.\n\nEdbHfss.sources\n\nGet all sources.\n\n"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sim_setup_info.html#sim_setup_info",
        "title": "sim_setup_info",
        "section": "sim_setup_info",
        "text": "sim_setup_info"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sim_setup_info",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sim_setup_info.html#pyedb.dotnet.database.utilities.hfss_simulation_setup.HFSSPISimulationSetup.sim_setup_info",
        "title": "sim_setup_info > sim_setup_info > sim_setup_info",
        "section": "sim_setup_info > sim_setup_info",
        "text": "property HFSSPISimulationSetup.sim_setup_info\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_void.html#is_void",
        "title": "is_void",
        "section": "is_void",
        "text": "Either if the primitive is a void or not.\nis_void"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_void",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_void.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.is_void",
        "title": "is_void > is_void > is_void",
        "section": "is_void > is_void",
        "text": "property EDBPadstackInstance.is_void\n\nEither if the primitive is a void or not.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.import_definition",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.import_definition.html#import_definition",
        "title": "import_definition",
        "section": "import_definition",
        "text": "Import component definition from json file.\nFile path of json file.\nimport_definition\npython:str"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.components.Components.import_definition",
        "href": "api/_autosummary/pyedb.dotnet.database.components.Components.import_definition.html#pyedb.dotnet.database.components.Components.import_definition",
        "title": "import_definition > import_definition > import_definition",
        "section": "import_definition > import_definition",
        "text": "Components.import_definition(file_path)\n\nImport component definition from json file.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path of json file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives.html#primitives",
        "title": "primitives",
        "section": "primitives",
        "text": "Primitives.\nList of primitives.\nprimitives\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.primitives.html#pyedb.dotnet.database.modeler.Modeler.primitives",
        "title": "primitives > primitives > primitives",
        "section": "primitives > primitives",
        "text": "property Modeler.primitives\n\nPrimitives.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nList of primitives.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_num_pass",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_num_pass.html#max_num_pass",
        "title": "max_num_pass",
        "section": "max_num_pass",
        "text": "Maximum number of passes.\nmax_num_pass\npython:int"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_num_pass",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_num_pass.html#pyedb.dotnet.database.sim_setup_data.io.siwave.DCAdvancedSettings.max_num_pass",
        "title": "max_num_pass > max_num_pass > max_num_pass",
        "section": "max_num_pass > max_num_pass",
        "text": "property DCAdvancedSettings.max_num_pass\n\nMaximum number of passes.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.material_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.material_defs.html#material_defs",
        "title": "material_defs",
        "section": "material_defs",
        "text": "Get all material definitions in the database.\nmaterial_defs\npython:list\nMaterialDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.material_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.material_defs.html#pyedb.dotnet.edb.Edb.material_defs",
        "title": "material_defs > material_defs > material_defs",
        "section": "material_defs > material_defs",
        "text": "property Edb.material_defs\n\nGet all material definitions in the database.\n\nReturns\n\npython:list[MaterialDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_fields",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_fields.html#save_fields",
        "title": "save_fields",
        "section": "save_fields",
        "text": "Whether to turn on save fields.\nTrue if save fields is used, False otherwise.\nsave_fields\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_fields",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_fields.html#pyedb.dotnet.database.sim_setup_data.data.settings.AdaptiveSettings.save_fields",
        "title": "save_fields > save_fields > save_fields",
        "section": "save_fields > save_fields",
        "text": "property AdaptiveSettings.save_fields\n\nWhether to turn on save fields.\n\nReturns\n\nbool\n\nTrue if save fields is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.id.html#id",
        "title": "id",
        "section": "id",
        "text": "Primitive ID.\nid\npython:int"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.id",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.id.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.id",
        "title": "id > id > id",
        "section": "id > id",
        "text": "property EdbPolygon.id\n\nPrimitive ID.\n\nReturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/components/create_resistor_on_pin",
        "href": "user_guide/components/create_resistor_on_pin.html#create-a-resistor-boundary-on-pins",
        "title": "Create a resistor boundary on pins",
        "section": "Create a resistor boundary on pins",
        "text": "This page shows how to create a resistor boundary on pins:\nCreate a resistor boundary on pins"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_causality",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_causality.html#enforce_causality",
        "title": "enforce_causality",
        "section": "enforce_causality",
        "text": "Flag indicating if causality is enforced.\nTrue if enforce causality is used, False otherwise.\nenforce_causality\nTrue\nFalse"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_causality",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_causality.html#pyedb.dotnet.database.sim_setup_data.data.sweep_data.SweepData.enforce_causality",
        "title": "enforce_causality > enforce_causality > enforce_causality",
        "section": "enforce_causality > enforce_causality",
        "text": "property SweepData.enforce_causality\n\nFlag indicating if causality is enforced.\n\nReturns\n\nbool\n\nTrue if enforce causality is used, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.delete.html#delete",
        "title": "delete",
        "section": "delete",
        "text": "Edb Dotnet Api Database Delete.\ndelete"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.delete",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.delete.html#pyedb.dotnet.database.edb_data.nets_data.EDBNetClassData.delete",
        "title": "delete > delete > delete",
        "section": "delete > delete",
        "text": "EDBNetClassData.delete()\n\nEdb Dotnet Api Database Delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/simulation_setup",
        "href": "api/utilities/simulation_setup.html#simulation-setup",
        "title": "Simulation setup",
        "section": "Simulation setup",
        "text": "This class is the container of simulation setup.\nSimulationSetupType\nAn enumeration.\nAdaptiveType\n\nSimulationSetup\nProvide base simulation setup.\nSimulation setup\nSimulationSetupType\nAdaptiveType\nSimulationSetup"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.padstack_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.padstack_defs.html#padstack_defs",
        "title": "padstack_defs",
        "section": "padstack_defs",
        "text": "Get all Padstack definitions in this Database.\npadstack_defs\npython:list\nPadstackDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.padstack_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.padstack_defs.html#pyedb.dotnet.edb.Edb.padstack_defs",
        "title": "padstack_defs > padstack_defs > padstack_defs",
        "section": "padstack_defs > padstack_defs",
        "text": "property Edb.padstack_defs\n\nGet all Padstack definitions in this Database.\n\nReturns\n\npython:list[PadstackDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.auto_select_nets_for_simulation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.auto_select_nets_for_simulation.html#auto_select_nets_for_simulation",
        "title": "auto_select_nets_for_simulation",
        "section": "auto_select_nets_for_simulation",
        "text": "Auto select nets for simulation.\nauto_select_nets_for_simulation"
    },
    {
        "objectID": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.auto_select_nets_for_simulation",
        "href": "api/sim_setup_data/data/_autosummary/pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.auto_select_nets_for_simulation.html#pyedb.dotnet.database.sim_setup_data.data.simulation_settings.HFSSPISimulationSettings.auto_select_nets_for_simulation",
        "title": "auto_select_nets_for_simulation > auto_select_nets_for_simulation > auto_select_nets_for_simulation",
        "section": "auto_select_nets_for_simulation > auto_select_nets_for_simulation",
        "text": "property HFSSPISimulationSettings.auto_select_nets_for_simulation\n\nAuto select nets for simulation.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.split",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.split.html#split",
        "title": "split",
        "section": "split",
        "text": "Split padstack instance into multiple instances. The new instances only connect adjacent layers.\nsplit"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.split",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.split.html#pyedb.dotnet.database.edb_data.padstacks_data.EDBPadstackInstance.split",
        "title": "split > split > split",
        "section": "split > split",
        "text": "EDBPadstackInstance.split() -> list\n\nSplit padstack instance into multiple instances. The new instances only connect adjacent layers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_reference_terminal.html#is_reference_terminal",
        "title": "is_reference_terminal",
        "section": "is_reference_terminal",
        "text": "Whether it is a reference terminal.\nis_reference_terminal"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_reference_terminal",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.ports.GapPort.is_reference_terminal.html#pyedb.dotnet.database.edb_data.ports.GapPort.is_reference_terminal",
        "title": "is_reference_terminal > is_reference_terminal > is_reference_terminal",
        "section": "is_reference_terminal > is_reference_terminal",
        "text": "property GapPort.is_reference_terminal\n\nWhether it is a reference terminal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.mesh_frequency",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.mesh_frequency.html#mesh_frequency",
        "title": "mesh_frequency",
        "section": "mesh_frequency",
        "text": "Mesh size based on the effective wavelength at the specified frequency.\nmesh_frequency\npython:str"
    },
    {
        "objectID": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.mesh_frequency",
        "href": "api/sim_setup_data/io/_autosummary/pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.mesh_frequency.html#pyedb.dotnet.database.sim_setup_data.io.siwave.AdvancedSettings.mesh_frequency",
        "title": "mesh_frequency > mesh_frequency > mesh_frequency",
        "section": "mesh_frequency > mesh_frequency",
        "text": "property AdvancedSettings.mesh_frequency\n\nMesh size based on the effective wavelength at the specified frequency.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.bbox",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.bbox.html#bbox",
        "title": "bbox",
        "section": "bbox",
        "text": "Return the primitive bounding box points. Lower left corner, upper right corner.\n[lower_left x, lower_left y, upper right x, upper right y]\nbbox\npython:list"
    },
    {
        "objectID": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.bbox",
        "href": "api/edb_data/_autosummary/pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.bbox.html#pyedb.dotnet.database.edb_data.primitives_data.EdbPolygon.bbox",
        "title": "bbox > bbox > bbox",
        "section": "bbox > bbox",
        "text": "property EdbPolygon.bbox\n\nReturn the primitive bounding box points. Lower left corner, upper right corner.\n\nReturns\n\npython:list\n\n[lower_left x, lower_left y, upper right x, upper right y]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.package_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.package_defs.html#package_defs",
        "title": "package_defs",
        "section": "package_defs",
        "text": "Get all Package definitions in this Database.\npackage_defs\npython:list\nPackageDef"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.package_defs",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.package_defs.html#pyedb.dotnet.edb.Edb.package_defs",
        "title": "package_defs > package_defs > package_defs",
        "section": "package_defs > package_defs",
        "text": "property Edb.package_defs\n\nGet all Package definitions in this Database.\n\nReturns\n\npython:list[PackageDef]\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_port",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_port.html#create_port",
        "title": "create_port",
        "section": "create_port",
        "text": "Create a port.\nclass:pyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PointTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\nPositive terminal of the port.\nclass:pyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PointTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\noptional\nNegative terminal of the port.\nWhether it is a circuit port. The default is False.\nName of the created port. The default is None, a random name is generated.\npyedb.dotnet.database.edb_data.ports.WavePort,].\ncreate_port\noptional\nFalse\npyedb.dotnet.database.edb_data.ports.WavePort"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.edb.Edb.create_port",
        "href": "api/_autosummary/pyedb.dotnet.edb.Edb.create_port.html#pyedb.dotnet.edb.Edb.create_port",
        "title": "create_port > create_port > create_port",
        "section": "create_port > create_port",
        "text": "Edb.create_port(terminal, ref_terminal=None, is_circuit_port=False, name=None)\n\nCreate a port.\n\nParameters\n\nterminal\n\nclass:pyedb.dotnet.database.edb_data.terminals.EdgeTerminal,\n\nclass:pyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PointTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\nPositive terminal of the port.\n\nref_terminal\n\nclass:pyedb.dotnet.database.edb_data.terminals.EdgeTerminal,\n\nclass:pyedb.dotnet.database.edb_data.terminals.PadstackInstanceTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PointTerminal,\nclass:pyedb.dotnet.database.edb_data.terminals.PinGroupTerminal,\noptional\nNegative terminal of the port.\n\nis_circuit_port\n\nbool, optional\n\nWhether it is a circuit port. The default is False.\n\nname: str, optional\n\nName of the created port. The default is None, a random name is generated.\n\nReturns\n\n\n\n——-\n\n\n\nlist: [:class:`pyedb.dotnet.database.edb_data.ports.GapPort`,\n\npyedb.dotnet.database.edb_data.ports.WavePort,].\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileImportOptions",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileImportOptions.html#controlfileimportoptions",
        "title": "ControlFileImportOptions",
        "section": "ControlFileImportOptions",
        "text": "Import Options.\nControlFileImportOptions"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileImportOptions",
        "href": "api/_autosummary/pyedb.dotnet.database.edb_data.control_file.ControlFileImportOptions.html#pyedb.dotnet.database.edb_data.control_file.ControlFileImportOptions",
        "title": "ControlFileImportOptions > ControlFileImportOptions > ControlFileImportOptions",
        "section": "ControlFileImportOptions > ControlFileImportOptions",
        "text": "class pyedb.dotnet.database.edb_data.control_file.ControlFileImportOptions\n\nImport Options.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kTransient",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kTransient.html#ktransient",
        "title": "kTransient",
        "section": "kTransient",
        "text": "kTransient"
    },
    {
        "objectID": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kTransient",
        "href": "api/utilities/_autosummary/pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kTransient.html#pyedb.dotnet.database.utilities.simulation_setup.SimulationSetupType.kTransient",
        "title": "kTransient > kTransient > kTransient",
        "section": "kTransient > kTransient",
        "text": "SimulationSetupType.kTransient = 'transient'\n\n"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive.html#get_primitive",
        "title": "get_primitive",
        "section": "get_primitive",
        "text": "Retrieve primitive from give id.\nPrimitive id.\nList of primitives.\nget_primitive\npython:int\npython:list\nof\npyedb.dotnet.database.edb_data.primitives_data.Primitive"
    },
    {
        "objectID": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive",
        "href": "api/_autosummary/pyedb.dotnet.database.modeler.Modeler.get_primitive.html#pyedb.dotnet.database.modeler.Modeler.get_primitive",
        "title": "get_primitive > get_primitive > get_primitive",
        "section": "get_primitive > get_primitive",
        "text": "Modeler.get_primitive(primitive_id)\n\nRetrieve primitive from give id.\n\nParameters\n\nprimitive_id\n\npython:int\n\nPrimitive id.\n\nReturns\n\npython:list of pyedb.dotnet.database.edb_data.primitives_data.Primitive\n\nList of primitives.\n\n!! processed by numpydoc !!"
    }
]