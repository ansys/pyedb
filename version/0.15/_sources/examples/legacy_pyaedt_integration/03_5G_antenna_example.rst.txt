
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\legacy_pyaedt_integration\03_5G_antenna_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_legacy_pyaedt_integration_03_5G_antenna_example.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_legacy_pyaedt_integration_03_5G_antenna_example.py:


EDB: 5G linear array antenna
----------------------------
This example shows how you can use HFSS 3D Layout to create and solve a 5G linear array antenna.

.. GENERATED FROM PYTHON SOURCE LINES 30-33

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 33-42

.. code-block:: Python


    import os
    import tempfile

    from pyaedt import Hfss3dLayout

    import pyedb
    from pyedb.generic.general_methods import generate_unique_name








.. GENERATED FROM PYTHON SOURCE LINES 43-46

Set non-graphical mode
~~~~~~~~~~~~~~~~~~~~~~
Set non-graphical mode. The default is ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 46-104

.. code-block:: Python


    non_graphical = False


    class Patch:
        def __init__(self, width=0.0, height=0.0, position=0.0):
            self.width = width
            self.height = height
            self.position = position

        @property
        def points(self):
            return [
                [self.position, -self.height / 2],
                [self.position + self.width, -self.height / 2],
                [self.position + self.width, self.height / 2],
                [self.position, self.height / 2],
            ]


    class Line:
        def __init__(self, length=0.0, width=0.0, position=0.0):
            self.length = length
            self.width = width
            self.position = position

        @property
        def points(self):
            return [
                [self.position, -self.width / 2],
                [self.position + self.length, -self.width / 2],
                [self.position + self.length, self.width / 2],
                [self.position, self.width / 2],
            ]


    class LinearArray:
        def __init__(self, nb_patch=1, array_length=10e-3, array_width=5e-3):
            self.nbpatch = nb_patch
            self.length = array_length
            self.width = array_width

        @property
        def points(self):
            return [
                [-1e-3, -self.width / 2 - 1e-3],
                [self.length + 1e-3, -self.width / 2 - 1e-3],
                [self.length + 1e-3, self.width / 2 + 1e-3],
                [-1e-3, self.width / 2 + 1e-3],
            ]


    tmpfold = tempfile.gettempdir()
    aedb_path = os.path.join(tmpfold, generate_unique_name("pcb") + ".aedb")
    print(aedb_path)
    edb = pyedb.Edb(edbpath=aedb_path, edbversion="2024.1")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\ansys\AppData\Local\Temp\pcb_HO6BHC.aedb
    PyAEDT INFO: StdOut is enabled
    PyAEDT INFO: Logger is initialized in EDB.
    PyAEDT INFO: legacy v0.15.0
    PyAEDT INFO: Python version 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
    PyAEDT INFO: EDB C:\Users\ansys\AppData\Local\Temp\pcb_HO6BHC.aedb created correctly.
    PyAEDT INFO: EDB initialized.




.. GENERATED FROM PYTHON SOURCE LINES 105-109

Add stackup layers
~~~~~~~~~~~~~~~~~~
Add the stackup layers.


.. GENERATED FROM PYTHON SOURCE LINES 109-116

.. code-block:: Python

    if edb:
        edb.stackup.add_layer("Virt_GND")
        edb.stackup.add_layer("Gap", "Virt_GND", layer_type="dielectric", thickness="0.05mm", material="Air")
        edb.stackup.add_layer("GND", "Gap")
        edb.stackup.add_layer("Substrat", "GND", layer_type="dielectric", thickness="0.5mm", material="Duroid (tm)")
        edb.stackup.add_layer("TOP", "Substrat")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Material 'copper' does not exist in material library. Intempt to create it from syslib.
    Material 'FR4_epoxy' does not exist in material library. Intempt to create it from syslib.
    Material 'Air' does not exist in material library. Intempt to create it from syslib.
    PyAEDT ERROR: Material Air does not exist in syslib AMAT file.
    Material 'Duroid (tm)' does not exist in material library. Intempt to create it from syslib.




.. GENERATED FROM PYTHON SOURCE LINES 117-120

Create linear array
~~~~~~~~~~~~~~~~~~~
Create the first patch of the linear array.

.. GENERATED FROM PYTHON SOURCE LINES 120-127

.. code-block:: Python


    first_patch = Patch(width=1.4e-3, height=1.2e-3, position=0.0)
    edb.modeler.create_polygon(first_patch.points, "TOP", net_name="Array_antenna")
    # First line
    first_line = Line(length=2.4e-3, width=0.3e-3, position=first_patch.width)
    edb.modeler.create_polygon(first_line.points, "TOP", net_name="Array_antenna")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyedb.dotnet.edb_core.edb_data.primitives_data.EdbPolygon object at 0x000002BE702D3280>



.. GENERATED FROM PYTHON SOURCE LINES 128-131

Patch linear array
~~~~~~~~~~~~~~~~~~
Patch the linear array.

.. GENERATED FROM PYTHON SOURCE LINES 131-152

.. code-block:: Python


    patch = Patch(width=2.29e-3, height=3.3e-3)
    line = Line(length=1.9e-3, width=0.2e-3)
    linear_array = LinearArray(nb_patch=8, array_width=patch.height)

    current_patch = 1
    current_position = first_line.position + first_line.length

    while current_patch <= linear_array.nbpatch:
        patch.position = current_position
        edb.modeler.create_polygon(patch.points, "TOP", net_name="Array_antenna")
        current_position += patch.width
        if current_patch < linear_array.nbpatch:
            line.position = current_position
            edb.modeler.create_polygon(line.points, "TOP", net_name="Array_antenna")
            current_position += line.length
        current_patch += 1

    linear_array.length = current_position









.. GENERATED FROM PYTHON SOURCE LINES 153-156

Add ground
~~~~~~~~~~
Add a ground.

.. GENERATED FROM PYTHON SOURCE LINES 156-160

.. code-block:: Python


    edb.modeler.create_polygon(linear_array.points, "GND", net_name="GND")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <pyedb.dotnet.edb_core.edb_data.primitives_data.EdbPolygon object at 0x000002BE703ACD90>



.. GENERATED FROM PYTHON SOURCE LINES 161-164

Add connector pin
~~~~~~~~~~~~~~~~~
Add a central connector pin.

.. GENERATED FROM PYTHON SOURCE LINES 164-176

.. code-block:: Python


    edb.padstacks.create(padstackname="Connector_pin", holediam="100um", paddiam="0", antipaddiam="200um")
    con_pin = edb.padstacks.place(
        [first_patch.width / 4, 0],
        "Connector_pin",
        net_name="Array_antenna",
        fromlayer="TOP",
        tolayer="GND",
        via_name="coax",
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PyAEDT INFO: Padstack Connector_pin create correctly




.. GENERATED FROM PYTHON SOURCE LINES 177-180

Add connector ground
~~~~~~~~~~~~~~~~~~~~
Add a connector ground.

.. GENERATED FROM PYTHON SOURCE LINES 180-213

.. code-block:: Python


    edb.modeler.create_polygon(first_patch.points, "Virt_GND", net_name="GND")
    edb.padstacks.create("gnd_via", "100um", "0", "0")
    con_ref1 = edb.padstacks.place(
        [first_patch.points[0][0] + 0.2e-3, first_patch.points[0][1] + 0.2e-3],
        "gnd_via",
        fromlayer="GND",
        tolayer="Virt_GND",
        net_name="GND",
    )
    con_ref2 = edb.padstacks.place(
        [first_patch.points[1][0] - 0.2e-3, first_patch.points[1][1] + 0.2e-3],
        "gnd_via",
        fromlayer="GND",
        tolayer="Virt_GND",
        net_name="GND",
    )
    con_ref3 = edb.padstacks.place(
        [first_patch.points[2][0] - 0.2e-3, first_patch.points[2][1] - 0.2e-3],
        "gnd_via",
        fromlayer="GND",
        tolayer="Virt_GND",
        net_name="GND",
    )
    con_ref4 = edb.padstacks.place(
        [first_patch.points[3][0] + 0.2e-3, first_patch.points[3][1] - 0.2e-3],
        "gnd_via",
        fromlayer="GND",
        tolayer="Virt_GND",
        net_name="GND",
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PyAEDT INFO: Padstack gnd_via create correctly




.. GENERATED FROM PYTHON SOURCE LINES 214-217

Add excitation port
~~~~~~~~~~~~~~~~~~~
Add an excitation port.

.. GENERATED FROM PYTHON SOURCE LINES 217-222

.. code-block:: Python


    edb.padstacks.set_solderball(con_pin, "Virt_GND", isTopPlaced=False, ballDiam=0.1e-3)
    port_name = edb.padstacks.create_coax_port(con_pin)









.. GENERATED FROM PYTHON SOURCE LINES 223-226

Plot geometry
~~~~~~~~~~~~~
Plot the geometry.

.. GENERATED FROM PYTHON SOURCE LINES 226-229

.. code-block:: Python


    edb.nets.plot(None)




.. image-sg:: /examples/legacy_pyaedt_integration/images/sphx_glr_03_5G_antenna_example_001.png
   :alt: Cell_ILWDED
   :srcset: /examples/legacy_pyaedt_integration/images/sphx_glr_03_5G_antenna_example_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PyAEDT INFO: Nets Point Generation time 0.125 seconds




.. GENERATED FROM PYTHON SOURCE LINES 230-233

Save and close Edb instance prior to opening it in Electronics Desktop.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Save EDB.

.. GENERATED FROM PYTHON SOURCE LINES 233-237

.. code-block:: Python


    edb.save_edb()
    edb.close_edb()
    print("EDB saved correctly to {}. You can import in AEDT.".format(aedb_path))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PyAEDT INFO: EDB file save time: 0.00ms
    PyAEDT INFO: EDB file release time: 0.00ms
    EDB saved correctly to C:\Users\ansys\AppData\Local\Temp\pcb_HO6BHC.aedb. You can import in AEDT.




.. GENERATED FROM PYTHON SOURCE LINES 238-241

Launch HFSS 3D Layout and open EDB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Launch HFSS 3D Layout and open EDB.

.. GENERATED FROM PYTHON SOURCE LINES 241-246

.. code-block:: Python


    h3d = Hfss3dLayout(
        projectname=aedb_path, specified_version="2024.1", new_desktop_session=True, non_graphical=non_graphical
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PyAEDT WARNING: Argument `projectname` is deprecated for method `__init__`; use `project` instead.
    PyAEDT WARNING: Argument `specified_version` is deprecated for method `__init__`; use `version` instead.
    PyAEDT ERROR: **************************************************************
    PyAEDT ERROR:   File "C:\actions-runner\_work\_tool\Python\3.10.11\x64\lib\runpy.py", line 196, in _run_module_as_main
    PyAEDT ERROR:     return _run_code(code, main_globals, None,
    PyAEDT ERROR:   File "C:\actions-runner\_work\_tool\Python\3.10.11\x64\lib\runpy.py", line 86, in _run_code
    PyAEDT ERROR:     exec(code, run_globals)
    PyAEDT ERROR:   File "C:\actions-runner\_work\pyedb\pyedb\.venv\Scripts\sphinx-build.exe\__main__.py", line 7, in <module>
    PyAEDT ERROR:     sys.exit(main())
    PyAEDT ERROR:   File "C:\actions-runner\_work\pyedb\pyedb\examples\legacy_pyaedt_integration\03_5G_antenna_example.py", line 242, in <module>
    PyAEDT ERROR:     h3d = Hfss3dLayout(
    PyAEDT ERROR: Hfss3dlayout.__init__() got an unexpected keyword argument 'new_desktop_session' on __init__
    PyAEDT ERROR: Method arguments: 
    PyAEDT ERROR:     project = C:\Users\ansys\AppData\Local\Temp\pcb_HO6BHC.aedb 
    PyAEDT ERROR:     version = 2024.1 
    PyAEDT ERROR:     new_desktop_session = True 
    PyAEDT ERROR: **************************************************************




.. GENERATED FROM PYTHON SOURCE LINES 247-250

Plot geometry
~~~~~~~~~~~~~~~~~
Plot the geometry. The EDB methods are also accessible from the ``Hfss3dlayout`` class.

.. GENERATED FROM PYTHON SOURCE LINES 250-253

.. code-block:: Python


    h3d.modeler.edb.nets.plot(None)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\actions-runner\_work\pyedb\pyedb\examples\legacy_pyaedt_integration\03_5G_antenna_example.py", line 251, in <module>
        h3d.modeler.edb.nets.plot(None)
      File "C:\actions-runner\_work\pyedb\pyedb\.venv\lib\site-packages\pyaedt\application\Analysis3DLayout.py", line 252, in modeler
        if self._modeler is None:
    AttributeError: 'Hfss3dLayout' object has no attribute '_modeler'




.. GENERATED FROM PYTHON SOURCE LINES 254-263

Create setup and sweeps
~~~~~~~~~~~~~~~~~~~~~~~
Getters and setters facilitate the settings on the nested property dictionary.
Previously, you had to use these commands:

``setup.props["AdaptiveSettings"]["SingleFrequencyDataList"]["AdaptiveFrequencyData"]["AdaptiveFrequency"] = "20GHz"``
``setup.props["AdaptiveSettings"]["SingleFrequencyDataList"]["AdaptiveFrequencyData"]["MaxPasses"] = 4``

You can now use the simpler approach that follows.

.. GENERATED FROM PYTHON SOURCE LINES 263-283

.. code-block:: Python


    setup = h3d.create_setup()

    setup["AdaptiveFrequency"] = "20GHz"
    setup["AdaptiveSettings/SingleFrequencyDataList/AdaptiveFrequencyData/MaxPasses"] = 4
    h3d.create_linear_count_sweep(
        setupname=setup.name,
        unit="GHz",
        freqstart=20,
        freqstop=50,
        num_of_freq_points=1001,
        sweepname="sweep1",
        sweep_type="Interpolating",
        interpolation_tol_percent=1,
        interpolation_max_solutions=255,
        save_fields=False,
        use_q3d_for_dc=False,
    )



.. GENERATED FROM PYTHON SOURCE LINES 284-287

Solve setup and create report
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Solve the project and create a report.

.. GENERATED FROM PYTHON SOURCE LINES 287-292

.. code-block:: Python


    h3d.analyze()
    h3d.post.create_report(["db(S({0},{1}))".format(port_name, port_name)])



.. GENERATED FROM PYTHON SOURCE LINES 293-296

Plot results outside AEDT
~~~~~~~~~~~~~~~~~~~~~~~~~
Plot results using Matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 296-300

.. code-block:: Python


    solution = h3d.post.get_solution_data(["S({0},{1})".format(port_name, port_name)])
    solution.plot()


.. GENERATED FROM PYTHON SOURCE LINES 301-306

Close AEDT
~~~~~~~~~~
After the simulation completes, you can close AEDT or release it using the
:func:`dotnet.Desktop.release_desktop` method.
All methods provide for saving the project before closing AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 306-309

.. code-block:: Python


    h3d.save_project()
    h3d.release_desktop()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.548 seconds)


.. _sphx_glr_download_examples_legacy_pyaedt_integration_03_5G_antenna_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03_5G_antenna_example.ipynb <03_5G_antenna_example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03_5G_antenna_example.py <03_5G_antenna_example.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
