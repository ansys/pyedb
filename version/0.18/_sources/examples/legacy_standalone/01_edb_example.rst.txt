
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\legacy_standalone\01_edb_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_legacy_standalone_01_edb_example.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_legacy_standalone_01_edb_example.py:


EDB: Siwave analysis from EDB setup
-----------------------------------
This example shows how you can use EDB to interact with a layout.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

Perform required imports
~~~~~~~~~~~~~~~~~~~~~~~~
Perform required imports.

.. GENERATED FROM PYTHON SOURCE LINES 32-48

.. code-block:: Python


    import os
    import time

    import pyedb
    from pyedb.generic.general_methods import generate_unique_folder_name
    from pyedb.misc.downloads import download_file

    temp_folder = generate_unique_folder_name()
    targetfile = download_file("edb/ANSYS-HSD_V1.aedb", destination=temp_folder)

    siwave_file = os.path.join(os.path.dirname(targetfile), "ANSYS-HSD_V1.siw")
    print(targetfile)
    aedt_file = targetfile[:-4] + "aedt"






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    C:\Users\ansys\AppData\Local\Temp\pyedb_prj_ES2\edb/ANSYS-HSD_V1.aedb




.. GENERATED FROM PYTHON SOURCE LINES 49-52

Launch EDB
~~~~~~~~~~
Launch the :class:`pyedb.Edb` class, using EDB 2023 R2 and SI units.

.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. code-block:: Python

    edb_version = "2024.1"
    if os.path.exists(aedt_file):
        os.remove(aedt_file)
    edb = pyedb.Edb(edbpath=targetfile, edbversion=edb_version)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\actions-runner\_work\pyedb\pyedb\examples\legacy_standalone\01_edb_example.py", line 55, in <module>
        edb = pyedb.Edb(edbpath=targetfile, edbversion=edb_version)
      File "C:\actions-runner\_work\pyedb\pyedb\.venv\lib\site-packages\pyedb\generic\design_types.py", line 108, in Edb
        from pyedb.dotnet.edb import Edb as app
      File "C:\actions-runner\_work\pyedb\pyedb\.venv\lib\site-packages\pyedb\dotnet\edb.py", line 115, in <module>
        from pyedb.workflow import Workflow
      File "C:\actions-runner\_work\pyedb\pyedb\.venv\lib\site-packages\pyedb\workflow.py", line 4, in <module>
        import pandas as pd
    ModuleNotFoundError: No module named 'pandas'




.. GENERATED FROM PYTHON SOURCE LINES 58-62

Compute nets and components
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Computes nets and components.
There are queries for nets, stackups, layers, components, and geometries.

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: Python


    print("Nets {}".format(len(edb.nets.netlist)))
    start = time.time()
    print("Components {}".format(len(edb.components.components.keys())))
    print("elapsed time = ", time.time() - start)


.. GENERATED FROM PYTHON SOURCE LINES 69-75

Get pin position
~~~~~~~~~~~~~~~~
Get the position for a specific pin.
The next section shows how to get all pins for a specific component and
the positions of each of them.
Each pin is a list of ``[X, Y]`` coordinate positions.

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: Python


    pins = edb.components["U2"].pins
    for pin in edb.components["U2"].pins.values():
        print(pin.position)


.. GENERATED FROM PYTHON SOURCE LINES 81-84

Get all nets connected to a component
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get all nets connected to a specific component.

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: Python


    edb.components.get_component_net_connection_info("U2")


.. GENERATED FROM PYTHON SOURCE LINES 88-91

Compute rats
~~~~~~~~~~~~
Computes rats.

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python


    rats = edb.components.get_rats()


.. GENERATED FROM PYTHON SOURCE LINES 95-100

Get all DC-connected net lists through inductance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get all DC-connected net lists through inductance.
The inputs needed are ground net lists. The returned list contains all nets
connected to a ground through an inductor.

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: Python


    GROUND_NETS = ["GND", "GND_DP"]
    dc_connected_net_list = edb.nets.get_dcconnected_net_list(GROUND_NETS)
    print(dc_connected_net_list)


.. GENERATED FROM PYTHON SOURCE LINES 106-109

Get power tree based on a specific net
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Get the power tree based on a specific net.

.. GENERATED FROM PYTHON SOURCE LINES 109-116

.. code-block:: Python


    VRM = "U1"
    OUTPUT_NET = "AVCC_1V3"
    powertree_df, component_list_columns, net_group = edb.nets.get_powertree(OUTPUT_NET, GROUND_NETS)
    for el in powertree_df:
        print(el)


.. GENERATED FROM PYTHON SOURCE LINES 117-121

Delete all RLCs with only one pin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Delete all RLCs with only one pin. This method provides a useful way of
removing components not needed in the simulation.

.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: Python


    edb.components.delete_single_pin_rlc()


.. GENERATED FROM PYTHON SOURCE LINES 125-128

Delete components
~~~~~~~~~~~~~~~~~
Delete manually one or more components.

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: Python


    edb.components.delete("C380")


.. GENERATED FROM PYTHON SOURCE LINES 132-135

Delete nets
~~~~~~~~~~~
Delete manually one or more nets.

.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: Python


    edb.nets.delete("PDEN")


.. GENERATED FROM PYTHON SOURCE LINES 139-142

Get stackup limits
~~~~~~~~~~~~~~~~~~
Get the stackup limits (top and bottom layers and elevations).

.. GENERATED FROM PYTHON SOURCE LINES 142-146

.. code-block:: Python


    print(edb.stackup.limits())



.. GENERATED FROM PYTHON SOURCE LINES 147-150

Create voltage source and Siwave DCIR analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a voltage source and then set up a DCIR analysis.

.. GENERATED FROM PYTHON SOURCE LINES 150-159

.. code-block:: Python


    edb.siwave.create_voltage_source_on_net("U1", "AVCC_1V3", "U1", "GND", 1.3, 0, "V1")
    edb.siwave.create_current_source_on_net("IC2", "NetD3_2", "IC2", "GND", 1.0, 0, "I1")
    setup = edb.siwave.add_siwave_dc_analysis("myDCIR_4")
    setup.use_dc_custom_settings = True
    setup.set_dc_slider = 0
    setup.add_source_terminal_to_ground("V1", 1)



.. GENERATED FROM PYTHON SOURCE LINES 160-163

Save modifications
~~~~~~~~~~~~~~~~~~
Save modifications.

.. GENERATED FROM PYTHON SOURCE LINES 163-169

.. code-block:: Python


    edb.save_edb()
    edb.nets.plot(None, "1_Top", plot_components_on_top=True)

    siw_file = edb.solve_siwave()


.. GENERATED FROM PYTHON SOURCE LINES 170-173

Export Siwave Reports
~~~~~~~~~~~~~~~~~~~~~
Export all DC Reports quantities.

.. GENERATED FROM PYTHON SOURCE LINES 173-178

.. code-block:: Python

    outputs = edb.export_siwave_dc_results(
        siw_file,
        setup.name,
    )


.. GENERATED FROM PYTHON SOURCE LINES 179-182

Close EDB
~~~~~~~~~
Close EDB. After EDB is closed, it can be opened by AEDT.

.. GENERATED FROM PYTHON SOURCE LINES 182-184

.. code-block:: Python


    edb.close_edb()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.438 seconds)


.. _sphx_glr_download_examples_legacy_standalone_01_edb_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_edb_example.ipynb <01_edb_example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_edb_example.py <01_edb_example.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
